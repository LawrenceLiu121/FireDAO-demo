import {
  __commonJS,
  __esm,
  __export,
  __require,
  __toModule,
  define_process_default,
  init_define_process
} from "./chunk-CCJJ2SMB.js";

// node_modules/cross-fetch/dist/browser-polyfill.js
var require_browser_polyfill = __commonJS({
  "node_modules/cross-fetch/dist/browser-polyfill.js"(exports) {
    init_define_process();
    (function(self2) {
      var irrelevant = function(exports2) {
        var support = {
          searchParams: "URLSearchParams" in self2,
          iterable: "Symbol" in self2 && "iterator" in Symbol,
          blob: "FileReader" in self2 && "Blob" in self2 && function() {
            try {
              new Blob();
              return true;
            } catch (e) {
              return false;
            }
          }(),
          formData: "FormData" in self2,
          arrayBuffer: "ArrayBuffer" in self2
        };
        function isDataView(obj) {
          return obj && DataView.prototype.isPrototypeOf(obj);
        }
        if (support.arrayBuffer) {
          var viewClasses = [
            "[object Int8Array]",
            "[object Uint8Array]",
            "[object Uint8ClampedArray]",
            "[object Int16Array]",
            "[object Uint16Array]",
            "[object Int32Array]",
            "[object Uint32Array]",
            "[object Float32Array]",
            "[object Float64Array]"
          ];
          var isArrayBufferView = ArrayBuffer.isView || function(obj) {
            return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1;
          };
        }
        function normalizeName(name2) {
          if (typeof name2 !== "string") {
            name2 = String(name2);
          }
          if (/[^a-z0-9\-#$%&'*+.^_`|~]/i.test(name2)) {
            throw new TypeError("Invalid character in header field name");
          }
          return name2.toLowerCase();
        }
        function normalizeValue(value2) {
          if (typeof value2 !== "string") {
            value2 = String(value2);
          }
          return value2;
        }
        function iteratorFor(items) {
          var iterator = {
            next: function() {
              var value2 = items.shift();
              return { done: value2 === void 0, value: value2 };
            }
          };
          if (support.iterable) {
            iterator[Symbol.iterator] = function() {
              return iterator;
            };
          }
          return iterator;
        }
        function Headers(headers) {
          this.map = {};
          if (headers instanceof Headers) {
            headers.forEach(function(value2, name2) {
              this.append(name2, value2);
            }, this);
          } else if (Array.isArray(headers)) {
            headers.forEach(function(header) {
              this.append(header[0], header[1]);
            }, this);
          } else if (headers) {
            Object.getOwnPropertyNames(headers).forEach(function(name2) {
              this.append(name2, headers[name2]);
            }, this);
          }
        }
        Headers.prototype.append = function(name2, value2) {
          name2 = normalizeName(name2);
          value2 = normalizeValue(value2);
          var oldValue = this.map[name2];
          this.map[name2] = oldValue ? oldValue + ", " + value2 : value2;
        };
        Headers.prototype["delete"] = function(name2) {
          delete this.map[normalizeName(name2)];
        };
        Headers.prototype.get = function(name2) {
          name2 = normalizeName(name2);
          return this.has(name2) ? this.map[name2] : null;
        };
        Headers.prototype.has = function(name2) {
          return this.map.hasOwnProperty(normalizeName(name2));
        };
        Headers.prototype.set = function(name2, value2) {
          this.map[normalizeName(name2)] = normalizeValue(value2);
        };
        Headers.prototype.forEach = function(callback, thisArg) {
          for (var name2 in this.map) {
            if (this.map.hasOwnProperty(name2)) {
              callback.call(thisArg, this.map[name2], name2, this);
            }
          }
        };
        Headers.prototype.keys = function() {
          var items = [];
          this.forEach(function(value2, name2) {
            items.push(name2);
          });
          return iteratorFor(items);
        };
        Headers.prototype.values = function() {
          var items = [];
          this.forEach(function(value2) {
            items.push(value2);
          });
          return iteratorFor(items);
        };
        Headers.prototype.entries = function() {
          var items = [];
          this.forEach(function(value2, name2) {
            items.push([name2, value2]);
          });
          return iteratorFor(items);
        };
        if (support.iterable) {
          Headers.prototype[Symbol.iterator] = Headers.prototype.entries;
        }
        function consumed(body) {
          if (body.bodyUsed) {
            return Promise.reject(new TypeError("Already read"));
          }
          body.bodyUsed = true;
        }
        function fileReaderReady(reader) {
          return new Promise(function(resolve, reject) {
            reader.onload = function() {
              resolve(reader.result);
            };
            reader.onerror = function() {
              reject(reader.error);
            };
          });
        }
        function readBlobAsArrayBuffer(blob) {
          var reader = new FileReader();
          var promise = fileReaderReady(reader);
          reader.readAsArrayBuffer(blob);
          return promise;
        }
        function readBlobAsText(blob) {
          var reader = new FileReader();
          var promise = fileReaderReady(reader);
          reader.readAsText(blob);
          return promise;
        }
        function readArrayBufferAsText(buf) {
          var view = new Uint8Array(buf);
          var chars = new Array(view.length);
          for (var i2 = 0; i2 < view.length; i2++) {
            chars[i2] = String.fromCharCode(view[i2]);
          }
          return chars.join("");
        }
        function bufferClone(buf) {
          if (buf.slice) {
            return buf.slice(0);
          } else {
            var view = new Uint8Array(buf.byteLength);
            view.set(new Uint8Array(buf));
            return view.buffer;
          }
        }
        function Body() {
          this.bodyUsed = false;
          this._initBody = function(body) {
            this._bodyInit = body;
            if (!body) {
              this._bodyText = "";
            } else if (typeof body === "string") {
              this._bodyText = body;
            } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
              this._bodyBlob = body;
            } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
              this._bodyFormData = body;
            } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
              this._bodyText = body.toString();
            } else if (support.arrayBuffer && support.blob && isDataView(body)) {
              this._bodyArrayBuffer = bufferClone(body.buffer);
              this._bodyInit = new Blob([this._bodyArrayBuffer]);
            } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {
              this._bodyArrayBuffer = bufferClone(body);
            } else {
              this._bodyText = body = Object.prototype.toString.call(body);
            }
            if (!this.headers.get("content-type")) {
              if (typeof body === "string") {
                this.headers.set("content-type", "text/plain;charset=UTF-8");
              } else if (this._bodyBlob && this._bodyBlob.type) {
                this.headers.set("content-type", this._bodyBlob.type);
              } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
                this.headers.set("content-type", "application/x-www-form-urlencoded;charset=UTF-8");
              }
            }
          };
          if (support.blob) {
            this.blob = function() {
              var rejected = consumed(this);
              if (rejected) {
                return rejected;
              }
              if (this._bodyBlob) {
                return Promise.resolve(this._bodyBlob);
              } else if (this._bodyArrayBuffer) {
                return Promise.resolve(new Blob([this._bodyArrayBuffer]));
              } else if (this._bodyFormData) {
                throw new Error("could not read FormData body as blob");
              } else {
                return Promise.resolve(new Blob([this._bodyText]));
              }
            };
            this.arrayBuffer = function() {
              if (this._bodyArrayBuffer) {
                return consumed(this) || Promise.resolve(this._bodyArrayBuffer);
              } else {
                return this.blob().then(readBlobAsArrayBuffer);
              }
            };
          }
          this.text = function() {
            var rejected = consumed(this);
            if (rejected) {
              return rejected;
            }
            if (this._bodyBlob) {
              return readBlobAsText(this._bodyBlob);
            } else if (this._bodyArrayBuffer) {
              return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer));
            } else if (this._bodyFormData) {
              throw new Error("could not read FormData body as text");
            } else {
              return Promise.resolve(this._bodyText);
            }
          };
          if (support.formData) {
            this.formData = function() {
              return this.text().then(decode3);
            };
          }
          this.json = function() {
            return this.text().then(JSON.parse);
          };
          return this;
        }
        var methods = ["DELETE", "GET", "HEAD", "OPTIONS", "POST", "PUT"];
        function normalizeMethod(method) {
          var upcased = method.toUpperCase();
          return methods.indexOf(upcased) > -1 ? upcased : method;
        }
        function Request(input, options) {
          options = options || {};
          var body = options.body;
          if (input instanceof Request) {
            if (input.bodyUsed) {
              throw new TypeError("Already read");
            }
            this.url = input.url;
            this.credentials = input.credentials;
            if (!options.headers) {
              this.headers = new Headers(input.headers);
            }
            this.method = input.method;
            this.mode = input.mode;
            this.signal = input.signal;
            if (!body && input._bodyInit != null) {
              body = input._bodyInit;
              input.bodyUsed = true;
            }
          } else {
            this.url = String(input);
          }
          this.credentials = options.credentials || this.credentials || "same-origin";
          if (options.headers || !this.headers) {
            this.headers = new Headers(options.headers);
          }
          this.method = normalizeMethod(options.method || this.method || "GET");
          this.mode = options.mode || this.mode || null;
          this.signal = options.signal || this.signal;
          this.referrer = null;
          if ((this.method === "GET" || this.method === "HEAD") && body) {
            throw new TypeError("Body not allowed for GET or HEAD requests");
          }
          this._initBody(body);
        }
        Request.prototype.clone = function() {
          return new Request(this, { body: this._bodyInit });
        };
        function decode3(body) {
          var form = new FormData();
          body.trim().split("&").forEach(function(bytes) {
            if (bytes) {
              var split = bytes.split("=");
              var name2 = split.shift().replace(/\+/g, " ");
              var value2 = split.join("=").replace(/\+/g, " ");
              form.append(decodeURIComponent(name2), decodeURIComponent(value2));
            }
          });
          return form;
        }
        function parseHeaders(rawHeaders) {
          var headers = new Headers();
          var preProcessedHeaders = rawHeaders.replace(/\r?\n[\t ]+/g, " ");
          preProcessedHeaders.split(/\r?\n/).forEach(function(line) {
            var parts = line.split(":");
            var key2 = parts.shift().trim();
            if (key2) {
              var value2 = parts.join(":").trim();
              headers.append(key2, value2);
            }
          });
          return headers;
        }
        Body.call(Request.prototype);
        function Response(bodyInit, options) {
          if (!options) {
            options = {};
          }
          this.type = "default";
          this.status = options.status === void 0 ? 200 : options.status;
          this.ok = this.status >= 200 && this.status < 300;
          this.statusText = "statusText" in options ? options.statusText : "OK";
          this.headers = new Headers(options.headers);
          this.url = options.url || "";
          this._initBody(bodyInit);
        }
        Body.call(Response.prototype);
        Response.prototype.clone = function() {
          return new Response(this._bodyInit, {
            status: this.status,
            statusText: this.statusText,
            headers: new Headers(this.headers),
            url: this.url
          });
        };
        Response.error = function() {
          var response = new Response(null, { status: 0, statusText: "" });
          response.type = "error";
          return response;
        };
        var redirectStatuses = [301, 302, 303, 307, 308];
        Response.redirect = function(url, status) {
          if (redirectStatuses.indexOf(status) === -1) {
            throw new RangeError("Invalid status code");
          }
          return new Response(null, { status, headers: { location: url } });
        };
        exports2.DOMException = self2.DOMException;
        try {
          new exports2.DOMException();
        } catch (err) {
          exports2.DOMException = function(message, name2) {
            this.message = message;
            this.name = name2;
            var error = Error(message);
            this.stack = error.stack;
          };
          exports2.DOMException.prototype = Object.create(Error.prototype);
          exports2.DOMException.prototype.constructor = exports2.DOMException;
        }
        function fetch2(input, init2) {
          return new Promise(function(resolve, reject) {
            var request = new Request(input, init2);
            if (request.signal && request.signal.aborted) {
              return reject(new exports2.DOMException("Aborted", "AbortError"));
            }
            var xhr = new XMLHttpRequest();
            function abortXhr() {
              xhr.abort();
            }
            xhr.onload = function() {
              var options = {
                status: xhr.status,
                statusText: xhr.statusText,
                headers: parseHeaders(xhr.getAllResponseHeaders() || "")
              };
              options.url = "responseURL" in xhr ? xhr.responseURL : options.headers.get("X-Request-URL");
              var body = "response" in xhr ? xhr.response : xhr.responseText;
              resolve(new Response(body, options));
            };
            xhr.onerror = function() {
              reject(new TypeError("Network request failed"));
            };
            xhr.ontimeout = function() {
              reject(new TypeError("Network request failed"));
            };
            xhr.onabort = function() {
              reject(new exports2.DOMException("Aborted", "AbortError"));
            };
            xhr.open(request.method, request.url, true);
            if (request.credentials === "include") {
              xhr.withCredentials = true;
            } else if (request.credentials === "omit") {
              xhr.withCredentials = false;
            }
            if ("responseType" in xhr && support.blob) {
              xhr.responseType = "blob";
            }
            request.headers.forEach(function(value2, name2) {
              xhr.setRequestHeader(name2, value2);
            });
            if (request.signal) {
              request.signal.addEventListener("abort", abortXhr);
              xhr.onreadystatechange = function() {
                if (xhr.readyState === 4) {
                  request.signal.removeEventListener("abort", abortXhr);
                }
              };
            }
            xhr.send(typeof request._bodyInit === "undefined" ? null : request._bodyInit);
          });
        }
        fetch2.polyfill = true;
        if (!self2.fetch) {
          self2.fetch = fetch2;
          self2.Headers = Headers;
          self2.Request = Request;
          self2.Response = Response;
        }
        exports2.Headers = Headers;
        exports2.Request = Request;
        exports2.Response = Response;
        exports2.fetch = fetch2;
        Object.defineProperty(exports2, "__esModule", { value: true });
        return exports2;
      }({});
    })(typeof self !== "undefined" ? self : exports);
  }
});

// browser-external:buffer
var buffer_exports = {};
__export(buffer_exports, {
  default: () => buffer_default
});
var buffer_default;
var init_buffer = __esm({
  "browser-external:buffer"() {
    init_define_process();
    buffer_default = new Proxy({}, {
      get() {
        throw new Error('Module "buffer" has been externalized for browser compatibility and cannot be accessed in client code.');
      }
    });
  }
});

// node_modules/bn.js/lib/bn.js
var require_bn = __commonJS({
  "node_modules/bn.js/lib/bn.js"(exports, module) {
    init_define_process();
    (function(module2, exports2) {
      "use strict";
      function assert2(val, msg) {
        if (!val)
          throw new Error(msg || "Assertion failed");
      }
      function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {
        };
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
      }
      function BN3(number, base2, endian) {
        if (BN3.isBN(number)) {
          return number;
        }
        this.negative = 0;
        this.words = null;
        this.length = 0;
        this.red = null;
        if (number !== null) {
          if (base2 === "le" || base2 === "be") {
            endian = base2;
            base2 = 10;
          }
          this._init(number || 0, base2 || 10, endian || "be");
        }
      }
      if (typeof module2 === "object") {
        module2.exports = BN3;
      } else {
        exports2.BN = BN3;
      }
      BN3.BN = BN3;
      BN3.wordSize = 26;
      var Buffer2;
      try {
        if (typeof window !== "undefined" && typeof window.Buffer !== "undefined") {
          Buffer2 = window.Buffer;
        } else {
          Buffer2 = (init_buffer(), buffer_exports).Buffer;
        }
      } catch (e) {
      }
      BN3.isBN = function isBN(num) {
        if (num instanceof BN3) {
          return true;
        }
        return num !== null && typeof num === "object" && num.constructor.wordSize === BN3.wordSize && Array.isArray(num.words);
      };
      BN3.max = function max(left, right) {
        if (left.cmp(right) > 0)
          return left;
        return right;
      };
      BN3.min = function min(left, right) {
        if (left.cmp(right) < 0)
          return left;
        return right;
      };
      BN3.prototype._init = function init2(number, base2, endian) {
        if (typeof number === "number") {
          return this._initNumber(number, base2, endian);
        }
        if (typeof number === "object") {
          return this._initArray(number, base2, endian);
        }
        if (base2 === "hex") {
          base2 = 16;
        }
        assert2(base2 === (base2 | 0) && base2 >= 2 && base2 <= 36);
        number = number.toString().replace(/\s+/g, "");
        var start = 0;
        if (number[0] === "-") {
          start++;
          this.negative = 1;
        }
        if (start < number.length) {
          if (base2 === 16) {
            this._parseHex(number, start, endian);
          } else {
            this._parseBase(number, base2, start);
            if (endian === "le") {
              this._initArray(this.toArray(), base2, endian);
            }
          }
        }
      };
      BN3.prototype._initNumber = function _initNumber(number, base2, endian) {
        if (number < 0) {
          this.negative = 1;
          number = -number;
        }
        if (number < 67108864) {
          this.words = [number & 67108863];
          this.length = 1;
        } else if (number < 4503599627370496) {
          this.words = [
            number & 67108863,
            number / 67108864 & 67108863
          ];
          this.length = 2;
        } else {
          assert2(number < 9007199254740992);
          this.words = [
            number & 67108863,
            number / 67108864 & 67108863,
            1
          ];
          this.length = 3;
        }
        if (endian !== "le")
          return;
        this._initArray(this.toArray(), base2, endian);
      };
      BN3.prototype._initArray = function _initArray(number, base2, endian) {
        assert2(typeof number.length === "number");
        if (number.length <= 0) {
          this.words = [0];
          this.length = 1;
          return this;
        }
        this.length = Math.ceil(number.length / 3);
        this.words = new Array(this.length);
        for (var i2 = 0; i2 < this.length; i2++) {
          this.words[i2] = 0;
        }
        var j3, w3;
        var off = 0;
        if (endian === "be") {
          for (i2 = number.length - 1, j3 = 0; i2 >= 0; i2 -= 3) {
            w3 = number[i2] | number[i2 - 1] << 8 | number[i2 - 2] << 16;
            this.words[j3] |= w3 << off & 67108863;
            this.words[j3 + 1] = w3 >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j3++;
            }
          }
        } else if (endian === "le") {
          for (i2 = 0, j3 = 0; i2 < number.length; i2 += 3) {
            w3 = number[i2] | number[i2 + 1] << 8 | number[i2 + 2] << 16;
            this.words[j3] |= w3 << off & 67108863;
            this.words[j3 + 1] = w3 >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j3++;
            }
          }
        }
        return this.strip();
      };
      function parseHex4Bits(string, index) {
        var c2 = string.charCodeAt(index);
        if (c2 >= 65 && c2 <= 70) {
          return c2 - 55;
        } else if (c2 >= 97 && c2 <= 102) {
          return c2 - 87;
        } else {
          return c2 - 48 & 15;
        }
      }
      function parseHexByte(string, lowerBound, index) {
        var r2 = parseHex4Bits(string, index);
        if (index - 1 >= lowerBound) {
          r2 |= parseHex4Bits(string, index - 1) << 4;
        }
        return r2;
      }
      BN3.prototype._parseHex = function _parseHex(number, start, endian) {
        this.length = Math.ceil((number.length - start) / 6);
        this.words = new Array(this.length);
        for (var i2 = 0; i2 < this.length; i2++) {
          this.words[i2] = 0;
        }
        var off = 0;
        var j3 = 0;
        var w3;
        if (endian === "be") {
          for (i2 = number.length - 1; i2 >= start; i2 -= 2) {
            w3 = parseHexByte(number, start, i2) << off;
            this.words[j3] |= w3 & 67108863;
            if (off >= 18) {
              off -= 18;
              j3 += 1;
              this.words[j3] |= w3 >>> 26;
            } else {
              off += 8;
            }
          }
        } else {
          var parseLength = number.length - start;
          for (i2 = parseLength % 2 === 0 ? start + 1 : start; i2 < number.length; i2 += 2) {
            w3 = parseHexByte(number, start, i2) << off;
            this.words[j3] |= w3 & 67108863;
            if (off >= 18) {
              off -= 18;
              j3 += 1;
              this.words[j3] |= w3 >>> 26;
            } else {
              off += 8;
            }
          }
        }
        this.strip();
      };
      function parseBase(str, start, end, mul3) {
        var r2 = 0;
        var len = Math.min(str.length, end);
        for (var i2 = start; i2 < len; i2++) {
          var c2 = str.charCodeAt(i2) - 48;
          r2 *= mul3;
          if (c2 >= 49) {
            r2 += c2 - 49 + 10;
          } else if (c2 >= 17) {
            r2 += c2 - 17 + 10;
          } else {
            r2 += c2;
          }
        }
        return r2;
      }
      BN3.prototype._parseBase = function _parseBase(number, base2, start) {
        this.words = [0];
        this.length = 1;
        for (var limbLen = 0, limbPow = 1; limbPow <= 67108863; limbPow *= base2) {
          limbLen++;
        }
        limbLen--;
        limbPow = limbPow / base2 | 0;
        var total = number.length - start;
        var mod2 = total % limbLen;
        var end = Math.min(total, total - mod2) + start;
        var word = 0;
        for (var i2 = start; i2 < end; i2 += limbLen) {
          word = parseBase(number, i2, i2 + limbLen, base2);
          this.imuln(limbPow);
          if (this.words[0] + word < 67108864) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
        if (mod2 !== 0) {
          var pow = 1;
          word = parseBase(number, i2, number.length, base2);
          for (i2 = 0; i2 < mod2; i2++) {
            pow *= base2;
          }
          this.imuln(pow);
          if (this.words[0] + word < 67108864) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
        this.strip();
      };
      BN3.prototype.copy = function copy(dest) {
        dest.words = new Array(this.length);
        for (var i2 = 0; i2 < this.length; i2++) {
          dest.words[i2] = this.words[i2];
        }
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
      };
      BN3.prototype.clone = function clone() {
        var r2 = new BN3(null);
        this.copy(r2);
        return r2;
      };
      BN3.prototype._expand = function _expand(size) {
        while (this.length < size) {
          this.words[this.length++] = 0;
        }
        return this;
      };
      BN3.prototype.strip = function strip() {
        while (this.length > 1 && this.words[this.length - 1] === 0) {
          this.length--;
        }
        return this._normSign();
      };
      BN3.prototype._normSign = function _normSign() {
        if (this.length === 1 && this.words[0] === 0) {
          this.negative = 0;
        }
        return this;
      };
      BN3.prototype.inspect = function inspect4() {
        return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
      };
      var zeros2 = [
        "",
        "0",
        "00",
        "000",
        "0000",
        "00000",
        "000000",
        "0000000",
        "00000000",
        "000000000",
        "0000000000",
        "00000000000",
        "000000000000",
        "0000000000000",
        "00000000000000",
        "000000000000000",
        "0000000000000000",
        "00000000000000000",
        "000000000000000000",
        "0000000000000000000",
        "00000000000000000000",
        "000000000000000000000",
        "0000000000000000000000",
        "00000000000000000000000",
        "000000000000000000000000",
        "0000000000000000000000000"
      ];
      var groupSizes = [
        0,
        0,
        25,
        16,
        12,
        11,
        10,
        9,
        8,
        8,
        7,
        7,
        7,
        7,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5
      ];
      var groupBases = [
        0,
        0,
        33554432,
        43046721,
        16777216,
        48828125,
        60466176,
        40353607,
        16777216,
        43046721,
        1e7,
        19487171,
        35831808,
        62748517,
        7529536,
        11390625,
        16777216,
        24137569,
        34012224,
        47045881,
        64e6,
        4084101,
        5153632,
        6436343,
        7962624,
        9765625,
        11881376,
        14348907,
        17210368,
        20511149,
        243e5,
        28629151,
        33554432,
        39135393,
        45435424,
        52521875,
        60466176
      ];
      BN3.prototype.toString = function toString(base2, padding2) {
        base2 = base2 || 10;
        padding2 = padding2 | 0 || 1;
        var out;
        if (base2 === 16 || base2 === "hex") {
          out = "";
          var off = 0;
          var carry = 0;
          for (var i2 = 0; i2 < this.length; i2++) {
            var w3 = this.words[i2];
            var word = ((w3 << off | carry) & 16777215).toString(16);
            carry = w3 >>> 24 - off & 16777215;
            if (carry !== 0 || i2 !== this.length - 1) {
              out = zeros2[6 - word.length] + word + out;
            } else {
              out = word + out;
            }
            off += 2;
            if (off >= 26) {
              off -= 26;
              i2--;
            }
          }
          if (carry !== 0) {
            out = carry.toString(16) + out;
          }
          while (out.length % padding2 !== 0) {
            out = "0" + out;
          }
          if (this.negative !== 0) {
            out = "-" + out;
          }
          return out;
        }
        if (base2 === (base2 | 0) && base2 >= 2 && base2 <= 36) {
          var groupSize = groupSizes[base2];
          var groupBase = groupBases[base2];
          out = "";
          var c2 = this.clone();
          c2.negative = 0;
          while (!c2.isZero()) {
            var r2 = c2.modn(groupBase).toString(base2);
            c2 = c2.idivn(groupBase);
            if (!c2.isZero()) {
              out = zeros2[groupSize - r2.length] + r2 + out;
            } else {
              out = r2 + out;
            }
          }
          if (this.isZero()) {
            out = "0" + out;
          }
          while (out.length % padding2 !== 0) {
            out = "0" + out;
          }
          if (this.negative !== 0) {
            out = "-" + out;
          }
          return out;
        }
        assert2(false, "Base should be between 2 and 36");
      };
      BN3.prototype.toNumber = function toNumber() {
        var ret = this.words[0];
        if (this.length === 2) {
          ret += this.words[1] * 67108864;
        } else if (this.length === 3 && this.words[2] === 1) {
          ret += 4503599627370496 + this.words[1] * 67108864;
        } else if (this.length > 2) {
          assert2(false, "Number can only safely store up to 53 bits");
        }
        return this.negative !== 0 ? -ret : ret;
      };
      BN3.prototype.toJSON = function toJSON2() {
        return this.toString(16);
      };
      BN3.prototype.toBuffer = function toBuffer(endian, length) {
        assert2(typeof Buffer2 !== "undefined");
        return this.toArrayLike(Buffer2, endian, length);
      };
      BN3.prototype.toArray = function toArray(endian, length) {
        return this.toArrayLike(Array, endian, length);
      };
      BN3.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
        var byteLength = this.byteLength();
        var reqLength = length || Math.max(1, byteLength);
        assert2(byteLength <= reqLength, "byte array longer than desired length");
        assert2(reqLength > 0, "Requested array length <= 0");
        this.strip();
        var littleEndian = endian === "le";
        var res = new ArrayType(reqLength);
        var b2, i2;
        var q3 = this.clone();
        if (!littleEndian) {
          for (i2 = 0; i2 < reqLength - byteLength; i2++) {
            res[i2] = 0;
          }
          for (i2 = 0; !q3.isZero(); i2++) {
            b2 = q3.andln(255);
            q3.iushrn(8);
            res[reqLength - i2 - 1] = b2;
          }
        } else {
          for (i2 = 0; !q3.isZero(); i2++) {
            b2 = q3.andln(255);
            q3.iushrn(8);
            res[i2] = b2;
          }
          for (; i2 < reqLength; i2++) {
            res[i2] = 0;
          }
        }
        return res;
      };
      if (Math.clz32) {
        BN3.prototype._countBits = function _countBits(w3) {
          return 32 - Math.clz32(w3);
        };
      } else {
        BN3.prototype._countBits = function _countBits(w3) {
          var t = w3;
          var r2 = 0;
          if (t >= 4096) {
            r2 += 13;
            t >>>= 13;
          }
          if (t >= 64) {
            r2 += 7;
            t >>>= 7;
          }
          if (t >= 8) {
            r2 += 4;
            t >>>= 4;
          }
          if (t >= 2) {
            r2 += 2;
            t >>>= 2;
          }
          return r2 + t;
        };
      }
      BN3.prototype._zeroBits = function _zeroBits(w3) {
        if (w3 === 0)
          return 26;
        var t = w3;
        var r2 = 0;
        if ((t & 8191) === 0) {
          r2 += 13;
          t >>>= 13;
        }
        if ((t & 127) === 0) {
          r2 += 7;
          t >>>= 7;
        }
        if ((t & 15) === 0) {
          r2 += 4;
          t >>>= 4;
        }
        if ((t & 3) === 0) {
          r2 += 2;
          t >>>= 2;
        }
        if ((t & 1) === 0) {
          r2++;
        }
        return r2;
      };
      BN3.prototype.bitLength = function bitLength() {
        var w3 = this.words[this.length - 1];
        var hi = this._countBits(w3);
        return (this.length - 1) * 26 + hi;
      };
      function toBitArray(num) {
        var w3 = new Array(num.bitLength());
        for (var bit = 0; bit < w3.length; bit++) {
          var off = bit / 26 | 0;
          var wbit = bit % 26;
          w3[bit] = (num.words[off] & 1 << wbit) >>> wbit;
        }
        return w3;
      }
      BN3.prototype.zeroBits = function zeroBits() {
        if (this.isZero())
          return 0;
        var r2 = 0;
        for (var i2 = 0; i2 < this.length; i2++) {
          var b2 = this._zeroBits(this.words[i2]);
          r2 += b2;
          if (b2 !== 26)
            break;
        }
        return r2;
      };
      BN3.prototype.byteLength = function byteLength() {
        return Math.ceil(this.bitLength() / 8);
      };
      BN3.prototype.toTwos = function toTwos(width) {
        if (this.negative !== 0) {
          return this.abs().inotn(width).iaddn(1);
        }
        return this.clone();
      };
      BN3.prototype.fromTwos = function fromTwos(width) {
        if (this.testn(width - 1)) {
          return this.notn(width).iaddn(1).ineg();
        }
        return this.clone();
      };
      BN3.prototype.isNeg = function isNeg() {
        return this.negative !== 0;
      };
      BN3.prototype.neg = function neg3() {
        return this.clone().ineg();
      };
      BN3.prototype.ineg = function ineg() {
        if (!this.isZero()) {
          this.negative ^= 1;
        }
        return this;
      };
      BN3.prototype.iuor = function iuor(num) {
        while (this.length < num.length) {
          this.words[this.length++] = 0;
        }
        for (var i2 = 0; i2 < num.length; i2++) {
          this.words[i2] = this.words[i2] | num.words[i2];
        }
        return this.strip();
      };
      BN3.prototype.ior = function ior(num) {
        assert2((this.negative | num.negative) === 0);
        return this.iuor(num);
      };
      BN3.prototype.or = function or2(num) {
        if (this.length > num.length)
          return this.clone().ior(num);
        return num.clone().ior(this);
      };
      BN3.prototype.uor = function uor(num) {
        if (this.length > num.length)
          return this.clone().iuor(num);
        return num.clone().iuor(this);
      };
      BN3.prototype.iuand = function iuand(num) {
        var b2;
        if (this.length > num.length) {
          b2 = num;
        } else {
          b2 = this;
        }
        for (var i2 = 0; i2 < b2.length; i2++) {
          this.words[i2] = this.words[i2] & num.words[i2];
        }
        this.length = b2.length;
        return this.strip();
      };
      BN3.prototype.iand = function iand(num) {
        assert2((this.negative | num.negative) === 0);
        return this.iuand(num);
      };
      BN3.prototype.and = function and(num) {
        if (this.length > num.length)
          return this.clone().iand(num);
        return num.clone().iand(this);
      };
      BN3.prototype.uand = function uand(num) {
        if (this.length > num.length)
          return this.clone().iuand(num);
        return num.clone().iuand(this);
      };
      BN3.prototype.iuxor = function iuxor(num) {
        var a;
        var b2;
        if (this.length > num.length) {
          a = this;
          b2 = num;
        } else {
          a = num;
          b2 = this;
        }
        for (var i2 = 0; i2 < b2.length; i2++) {
          this.words[i2] = a.words[i2] ^ b2.words[i2];
        }
        if (this !== a) {
          for (; i2 < a.length; i2++) {
            this.words[i2] = a.words[i2];
          }
        }
        this.length = a.length;
        return this.strip();
      };
      BN3.prototype.ixor = function ixor(num) {
        assert2((this.negative | num.negative) === 0);
        return this.iuxor(num);
      };
      BN3.prototype.xor = function xor(num) {
        if (this.length > num.length)
          return this.clone().ixor(num);
        return num.clone().ixor(this);
      };
      BN3.prototype.uxor = function uxor(num) {
        if (this.length > num.length)
          return this.clone().iuxor(num);
        return num.clone().iuxor(this);
      };
      BN3.prototype.inotn = function inotn(width) {
        assert2(typeof width === "number" && width >= 0);
        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26;
        this._expand(bytesNeeded);
        if (bitsLeft > 0) {
          bytesNeeded--;
        }
        for (var i2 = 0; i2 < bytesNeeded; i2++) {
          this.words[i2] = ~this.words[i2] & 67108863;
        }
        if (bitsLeft > 0) {
          this.words[i2] = ~this.words[i2] & 67108863 >> 26 - bitsLeft;
        }
        return this.strip();
      };
      BN3.prototype.notn = function notn(width) {
        return this.clone().inotn(width);
      };
      BN3.prototype.setn = function setn(bit, val) {
        assert2(typeof bit === "number" && bit >= 0);
        var off = bit / 26 | 0;
        var wbit = bit % 26;
        this._expand(off + 1);
        if (val) {
          this.words[off] = this.words[off] | 1 << wbit;
        } else {
          this.words[off] = this.words[off] & ~(1 << wbit);
        }
        return this.strip();
      };
      BN3.prototype.iadd = function iadd(num) {
        var r2;
        if (this.negative !== 0 && num.negative === 0) {
          this.negative = 0;
          r2 = this.isub(num);
          this.negative ^= 1;
          return this._normSign();
        } else if (this.negative === 0 && num.negative !== 0) {
          num.negative = 0;
          r2 = this.isub(num);
          num.negative = 1;
          return r2._normSign();
        }
        var a, b2;
        if (this.length > num.length) {
          a = this;
          b2 = num;
        } else {
          a = num;
          b2 = this;
        }
        var carry = 0;
        for (var i2 = 0; i2 < b2.length; i2++) {
          r2 = (a.words[i2] | 0) + (b2.words[i2] | 0) + carry;
          this.words[i2] = r2 & 67108863;
          carry = r2 >>> 26;
        }
        for (; carry !== 0 && i2 < a.length; i2++) {
          r2 = (a.words[i2] | 0) + carry;
          this.words[i2] = r2 & 67108863;
          carry = r2 >>> 26;
        }
        this.length = a.length;
        if (carry !== 0) {
          this.words[this.length] = carry;
          this.length++;
        } else if (a !== this) {
          for (; i2 < a.length; i2++) {
            this.words[i2] = a.words[i2];
          }
        }
        return this;
      };
      BN3.prototype.add = function add3(num) {
        var res;
        if (num.negative !== 0 && this.negative === 0) {
          num.negative = 0;
          res = this.sub(num);
          num.negative ^= 1;
          return res;
        } else if (num.negative === 0 && this.negative !== 0) {
          this.negative = 0;
          res = num.sub(this);
          this.negative = 1;
          return res;
        }
        if (this.length > num.length)
          return this.clone().iadd(num);
        return num.clone().iadd(this);
      };
      BN3.prototype.isub = function isub(num) {
        if (num.negative !== 0) {
          num.negative = 0;
          var r2 = this.iadd(num);
          num.negative = 1;
          return r2._normSign();
        } else if (this.negative !== 0) {
          this.negative = 0;
          this.iadd(num);
          this.negative = 1;
          return this._normSign();
        }
        var cmp = this.cmp(num);
        if (cmp === 0) {
          this.negative = 0;
          this.length = 1;
          this.words[0] = 0;
          return this;
        }
        var a, b2;
        if (cmp > 0) {
          a = this;
          b2 = num;
        } else {
          a = num;
          b2 = this;
        }
        var carry = 0;
        for (var i2 = 0; i2 < b2.length; i2++) {
          r2 = (a.words[i2] | 0) - (b2.words[i2] | 0) + carry;
          carry = r2 >> 26;
          this.words[i2] = r2 & 67108863;
        }
        for (; carry !== 0 && i2 < a.length; i2++) {
          r2 = (a.words[i2] | 0) + carry;
          carry = r2 >> 26;
          this.words[i2] = r2 & 67108863;
        }
        if (carry === 0 && i2 < a.length && a !== this) {
          for (; i2 < a.length; i2++) {
            this.words[i2] = a.words[i2];
          }
        }
        this.length = Math.max(this.length, i2);
        if (a !== this) {
          this.negative = 1;
        }
        return this.strip();
      };
      BN3.prototype.sub = function sub(num) {
        return this.clone().isub(num);
      };
      function smallMulTo(self2, num, out) {
        out.negative = num.negative ^ self2.negative;
        var len = self2.length + num.length | 0;
        out.length = len;
        len = len - 1 | 0;
        var a = self2.words[0] | 0;
        var b2 = num.words[0] | 0;
        var r2 = a * b2;
        var lo2 = r2 & 67108863;
        var carry = r2 / 67108864 | 0;
        out.words[0] = lo2;
        for (var k4 = 1; k4 < len; k4++) {
          var ncarry = carry >>> 26;
          var rword = carry & 67108863;
          var maxJ = Math.min(k4, num.length - 1);
          for (var j3 = Math.max(0, k4 - self2.length + 1); j3 <= maxJ; j3++) {
            var i2 = k4 - j3 | 0;
            a = self2.words[i2] | 0;
            b2 = num.words[j3] | 0;
            r2 = a * b2 + rword;
            ncarry += r2 / 67108864 | 0;
            rword = r2 & 67108863;
          }
          out.words[k4] = rword | 0;
          carry = ncarry | 0;
        }
        if (carry !== 0) {
          out.words[k4] = carry | 0;
        } else {
          out.length--;
        }
        return out.strip();
      }
      var comb10MulTo = function comb10MulTo2(self2, num, out) {
        var a = self2.words;
        var b2 = num.words;
        var o2 = out.words;
        var c2 = 0;
        var lo2;
        var mid;
        var hi;
        var a02 = a[0] | 0;
        var al0 = a02 & 8191;
        var ah0 = a02 >>> 13;
        var a12 = a[1] | 0;
        var al1 = a12 & 8191;
        var ah1 = a12 >>> 13;
        var a2 = a[2] | 0;
        var al2 = a2 & 8191;
        var ah2 = a2 >>> 13;
        var a3 = a[3] | 0;
        var al3 = a3 & 8191;
        var ah3 = a3 >>> 13;
        var a4 = a[4] | 0;
        var al4 = a4 & 8191;
        var ah4 = a4 >>> 13;
        var a5 = a[5] | 0;
        var al5 = a5 & 8191;
        var ah5 = a5 >>> 13;
        var a62 = a[6] | 0;
        var al6 = a62 & 8191;
        var ah6 = a62 >>> 13;
        var a7 = a[7] | 0;
        var al7 = a7 & 8191;
        var ah7 = a7 >>> 13;
        var a8 = a[8] | 0;
        var al8 = a8 & 8191;
        var ah8 = a8 >>> 13;
        var a9 = a[9] | 0;
        var al9 = a9 & 8191;
        var ah9 = a9 >>> 13;
        var b0 = b2[0] | 0;
        var bl0 = b0 & 8191;
        var bh0 = b0 >>> 13;
        var b12 = b2[1] | 0;
        var bl1 = b12 & 8191;
        var bh1 = b12 >>> 13;
        var b22 = b2[2] | 0;
        var bl2 = b22 & 8191;
        var bh2 = b22 >>> 13;
        var b3 = b2[3] | 0;
        var bl3 = b3 & 8191;
        var bh3 = b3 >>> 13;
        var b4 = b2[4] | 0;
        var bl4 = b4 & 8191;
        var bh4 = b4 >>> 13;
        var b5 = b2[5] | 0;
        var bl5 = b5 & 8191;
        var bh5 = b5 >>> 13;
        var b62 = b2[6] | 0;
        var bl6 = b62 & 8191;
        var bh6 = b62 >>> 13;
        var b7 = b2[7] | 0;
        var bl7 = b7 & 8191;
        var bh7 = b7 >>> 13;
        var b8 = b2[8] | 0;
        var bl8 = b8 & 8191;
        var bh8 = b8 >>> 13;
        var b9 = b2[9] | 0;
        var bl9 = b9 & 8191;
        var bh9 = b9 >>> 13;
        out.negative = self2.negative ^ num.negative;
        out.length = 19;
        lo2 = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = mid + Math.imul(ah0, bl0) | 0;
        hi = Math.imul(ah0, bh0);
        var w02 = (c2 + lo2 | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi + (mid >>> 13) | 0) + (w02 >>> 26) | 0;
        w02 &= 67108863;
        lo2 = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = mid + Math.imul(ah1, bl0) | 0;
        hi = Math.imul(ah1, bh0);
        lo2 = lo2 + Math.imul(al0, bl1) | 0;
        mid = mid + Math.imul(al0, bh1) | 0;
        mid = mid + Math.imul(ah0, bl1) | 0;
        hi = hi + Math.imul(ah0, bh1) | 0;
        var w12 = (c2 + lo2 | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
        w12 &= 67108863;
        lo2 = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = mid + Math.imul(ah2, bl0) | 0;
        hi = Math.imul(ah2, bh0);
        lo2 = lo2 + Math.imul(al1, bl1) | 0;
        mid = mid + Math.imul(al1, bh1) | 0;
        mid = mid + Math.imul(ah1, bl1) | 0;
        hi = hi + Math.imul(ah1, bh1) | 0;
        lo2 = lo2 + Math.imul(al0, bl2) | 0;
        mid = mid + Math.imul(al0, bh2) | 0;
        mid = mid + Math.imul(ah0, bl2) | 0;
        hi = hi + Math.imul(ah0, bh2) | 0;
        var w22 = (c2 + lo2 | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi + (mid >>> 13) | 0) + (w22 >>> 26) | 0;
        w22 &= 67108863;
        lo2 = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = mid + Math.imul(ah3, bl0) | 0;
        hi = Math.imul(ah3, bh0);
        lo2 = lo2 + Math.imul(al2, bl1) | 0;
        mid = mid + Math.imul(al2, bh1) | 0;
        mid = mid + Math.imul(ah2, bl1) | 0;
        hi = hi + Math.imul(ah2, bh1) | 0;
        lo2 = lo2 + Math.imul(al1, bl2) | 0;
        mid = mid + Math.imul(al1, bh2) | 0;
        mid = mid + Math.imul(ah1, bl2) | 0;
        hi = hi + Math.imul(ah1, bh2) | 0;
        lo2 = lo2 + Math.imul(al0, bl3) | 0;
        mid = mid + Math.imul(al0, bh3) | 0;
        mid = mid + Math.imul(ah0, bl3) | 0;
        hi = hi + Math.imul(ah0, bh3) | 0;
        var w3 = (c2 + lo2 | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
        w3 &= 67108863;
        lo2 = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = mid + Math.imul(ah4, bl0) | 0;
        hi = Math.imul(ah4, bh0);
        lo2 = lo2 + Math.imul(al3, bl1) | 0;
        mid = mid + Math.imul(al3, bh1) | 0;
        mid = mid + Math.imul(ah3, bl1) | 0;
        hi = hi + Math.imul(ah3, bh1) | 0;
        lo2 = lo2 + Math.imul(al2, bl2) | 0;
        mid = mid + Math.imul(al2, bh2) | 0;
        mid = mid + Math.imul(ah2, bl2) | 0;
        hi = hi + Math.imul(ah2, bh2) | 0;
        lo2 = lo2 + Math.imul(al1, bl3) | 0;
        mid = mid + Math.imul(al1, bh3) | 0;
        mid = mid + Math.imul(ah1, bl3) | 0;
        hi = hi + Math.imul(ah1, bh3) | 0;
        lo2 = lo2 + Math.imul(al0, bl4) | 0;
        mid = mid + Math.imul(al0, bh4) | 0;
        mid = mid + Math.imul(ah0, bl4) | 0;
        hi = hi + Math.imul(ah0, bh4) | 0;
        var w4 = (c2 + lo2 | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
        w4 &= 67108863;
        lo2 = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = mid + Math.imul(ah5, bl0) | 0;
        hi = Math.imul(ah5, bh0);
        lo2 = lo2 + Math.imul(al4, bl1) | 0;
        mid = mid + Math.imul(al4, bh1) | 0;
        mid = mid + Math.imul(ah4, bl1) | 0;
        hi = hi + Math.imul(ah4, bh1) | 0;
        lo2 = lo2 + Math.imul(al3, bl2) | 0;
        mid = mid + Math.imul(al3, bh2) | 0;
        mid = mid + Math.imul(ah3, bl2) | 0;
        hi = hi + Math.imul(ah3, bh2) | 0;
        lo2 = lo2 + Math.imul(al2, bl3) | 0;
        mid = mid + Math.imul(al2, bh3) | 0;
        mid = mid + Math.imul(ah2, bl3) | 0;
        hi = hi + Math.imul(ah2, bh3) | 0;
        lo2 = lo2 + Math.imul(al1, bl4) | 0;
        mid = mid + Math.imul(al1, bh4) | 0;
        mid = mid + Math.imul(ah1, bl4) | 0;
        hi = hi + Math.imul(ah1, bh4) | 0;
        lo2 = lo2 + Math.imul(al0, bl5) | 0;
        mid = mid + Math.imul(al0, bh5) | 0;
        mid = mid + Math.imul(ah0, bl5) | 0;
        hi = hi + Math.imul(ah0, bh5) | 0;
        var w5 = (c2 + lo2 | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
        w5 &= 67108863;
        lo2 = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = mid + Math.imul(ah6, bl0) | 0;
        hi = Math.imul(ah6, bh0);
        lo2 = lo2 + Math.imul(al5, bl1) | 0;
        mid = mid + Math.imul(al5, bh1) | 0;
        mid = mid + Math.imul(ah5, bl1) | 0;
        hi = hi + Math.imul(ah5, bh1) | 0;
        lo2 = lo2 + Math.imul(al4, bl2) | 0;
        mid = mid + Math.imul(al4, bh2) | 0;
        mid = mid + Math.imul(ah4, bl2) | 0;
        hi = hi + Math.imul(ah4, bh2) | 0;
        lo2 = lo2 + Math.imul(al3, bl3) | 0;
        mid = mid + Math.imul(al3, bh3) | 0;
        mid = mid + Math.imul(ah3, bl3) | 0;
        hi = hi + Math.imul(ah3, bh3) | 0;
        lo2 = lo2 + Math.imul(al2, bl4) | 0;
        mid = mid + Math.imul(al2, bh4) | 0;
        mid = mid + Math.imul(ah2, bl4) | 0;
        hi = hi + Math.imul(ah2, bh4) | 0;
        lo2 = lo2 + Math.imul(al1, bl5) | 0;
        mid = mid + Math.imul(al1, bh5) | 0;
        mid = mid + Math.imul(ah1, bl5) | 0;
        hi = hi + Math.imul(ah1, bh5) | 0;
        lo2 = lo2 + Math.imul(al0, bl6) | 0;
        mid = mid + Math.imul(al0, bh6) | 0;
        mid = mid + Math.imul(ah0, bl6) | 0;
        hi = hi + Math.imul(ah0, bh6) | 0;
        var w62 = (c2 + lo2 | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi + (mid >>> 13) | 0) + (w62 >>> 26) | 0;
        w62 &= 67108863;
        lo2 = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = mid + Math.imul(ah7, bl0) | 0;
        hi = Math.imul(ah7, bh0);
        lo2 = lo2 + Math.imul(al6, bl1) | 0;
        mid = mid + Math.imul(al6, bh1) | 0;
        mid = mid + Math.imul(ah6, bl1) | 0;
        hi = hi + Math.imul(ah6, bh1) | 0;
        lo2 = lo2 + Math.imul(al5, bl2) | 0;
        mid = mid + Math.imul(al5, bh2) | 0;
        mid = mid + Math.imul(ah5, bl2) | 0;
        hi = hi + Math.imul(ah5, bh2) | 0;
        lo2 = lo2 + Math.imul(al4, bl3) | 0;
        mid = mid + Math.imul(al4, bh3) | 0;
        mid = mid + Math.imul(ah4, bl3) | 0;
        hi = hi + Math.imul(ah4, bh3) | 0;
        lo2 = lo2 + Math.imul(al3, bl4) | 0;
        mid = mid + Math.imul(al3, bh4) | 0;
        mid = mid + Math.imul(ah3, bl4) | 0;
        hi = hi + Math.imul(ah3, bh4) | 0;
        lo2 = lo2 + Math.imul(al2, bl5) | 0;
        mid = mid + Math.imul(al2, bh5) | 0;
        mid = mid + Math.imul(ah2, bl5) | 0;
        hi = hi + Math.imul(ah2, bh5) | 0;
        lo2 = lo2 + Math.imul(al1, bl6) | 0;
        mid = mid + Math.imul(al1, bh6) | 0;
        mid = mid + Math.imul(ah1, bl6) | 0;
        hi = hi + Math.imul(ah1, bh6) | 0;
        lo2 = lo2 + Math.imul(al0, bl7) | 0;
        mid = mid + Math.imul(al0, bh7) | 0;
        mid = mid + Math.imul(ah0, bl7) | 0;
        hi = hi + Math.imul(ah0, bh7) | 0;
        var w7 = (c2 + lo2 | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
        w7 &= 67108863;
        lo2 = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = mid + Math.imul(ah8, bl0) | 0;
        hi = Math.imul(ah8, bh0);
        lo2 = lo2 + Math.imul(al7, bl1) | 0;
        mid = mid + Math.imul(al7, bh1) | 0;
        mid = mid + Math.imul(ah7, bl1) | 0;
        hi = hi + Math.imul(ah7, bh1) | 0;
        lo2 = lo2 + Math.imul(al6, bl2) | 0;
        mid = mid + Math.imul(al6, bh2) | 0;
        mid = mid + Math.imul(ah6, bl2) | 0;
        hi = hi + Math.imul(ah6, bh2) | 0;
        lo2 = lo2 + Math.imul(al5, bl3) | 0;
        mid = mid + Math.imul(al5, bh3) | 0;
        mid = mid + Math.imul(ah5, bl3) | 0;
        hi = hi + Math.imul(ah5, bh3) | 0;
        lo2 = lo2 + Math.imul(al4, bl4) | 0;
        mid = mid + Math.imul(al4, bh4) | 0;
        mid = mid + Math.imul(ah4, bl4) | 0;
        hi = hi + Math.imul(ah4, bh4) | 0;
        lo2 = lo2 + Math.imul(al3, bl5) | 0;
        mid = mid + Math.imul(al3, bh5) | 0;
        mid = mid + Math.imul(ah3, bl5) | 0;
        hi = hi + Math.imul(ah3, bh5) | 0;
        lo2 = lo2 + Math.imul(al2, bl6) | 0;
        mid = mid + Math.imul(al2, bh6) | 0;
        mid = mid + Math.imul(ah2, bl6) | 0;
        hi = hi + Math.imul(ah2, bh6) | 0;
        lo2 = lo2 + Math.imul(al1, bl7) | 0;
        mid = mid + Math.imul(al1, bh7) | 0;
        mid = mid + Math.imul(ah1, bl7) | 0;
        hi = hi + Math.imul(ah1, bh7) | 0;
        lo2 = lo2 + Math.imul(al0, bl8) | 0;
        mid = mid + Math.imul(al0, bh8) | 0;
        mid = mid + Math.imul(ah0, bl8) | 0;
        hi = hi + Math.imul(ah0, bh8) | 0;
        var w8 = (c2 + lo2 | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
        w8 &= 67108863;
        lo2 = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = mid + Math.imul(ah9, bl0) | 0;
        hi = Math.imul(ah9, bh0);
        lo2 = lo2 + Math.imul(al8, bl1) | 0;
        mid = mid + Math.imul(al8, bh1) | 0;
        mid = mid + Math.imul(ah8, bl1) | 0;
        hi = hi + Math.imul(ah8, bh1) | 0;
        lo2 = lo2 + Math.imul(al7, bl2) | 0;
        mid = mid + Math.imul(al7, bh2) | 0;
        mid = mid + Math.imul(ah7, bl2) | 0;
        hi = hi + Math.imul(ah7, bh2) | 0;
        lo2 = lo2 + Math.imul(al6, bl3) | 0;
        mid = mid + Math.imul(al6, bh3) | 0;
        mid = mid + Math.imul(ah6, bl3) | 0;
        hi = hi + Math.imul(ah6, bh3) | 0;
        lo2 = lo2 + Math.imul(al5, bl4) | 0;
        mid = mid + Math.imul(al5, bh4) | 0;
        mid = mid + Math.imul(ah5, bl4) | 0;
        hi = hi + Math.imul(ah5, bh4) | 0;
        lo2 = lo2 + Math.imul(al4, bl5) | 0;
        mid = mid + Math.imul(al4, bh5) | 0;
        mid = mid + Math.imul(ah4, bl5) | 0;
        hi = hi + Math.imul(ah4, bh5) | 0;
        lo2 = lo2 + Math.imul(al3, bl6) | 0;
        mid = mid + Math.imul(al3, bh6) | 0;
        mid = mid + Math.imul(ah3, bl6) | 0;
        hi = hi + Math.imul(ah3, bh6) | 0;
        lo2 = lo2 + Math.imul(al2, bl7) | 0;
        mid = mid + Math.imul(al2, bh7) | 0;
        mid = mid + Math.imul(ah2, bl7) | 0;
        hi = hi + Math.imul(ah2, bh7) | 0;
        lo2 = lo2 + Math.imul(al1, bl8) | 0;
        mid = mid + Math.imul(al1, bh8) | 0;
        mid = mid + Math.imul(ah1, bl8) | 0;
        hi = hi + Math.imul(ah1, bh8) | 0;
        lo2 = lo2 + Math.imul(al0, bl9) | 0;
        mid = mid + Math.imul(al0, bh9) | 0;
        mid = mid + Math.imul(ah0, bl9) | 0;
        hi = hi + Math.imul(ah0, bh9) | 0;
        var w9 = (c2 + lo2 | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
        w9 &= 67108863;
        lo2 = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = mid + Math.imul(ah9, bl1) | 0;
        hi = Math.imul(ah9, bh1);
        lo2 = lo2 + Math.imul(al8, bl2) | 0;
        mid = mid + Math.imul(al8, bh2) | 0;
        mid = mid + Math.imul(ah8, bl2) | 0;
        hi = hi + Math.imul(ah8, bh2) | 0;
        lo2 = lo2 + Math.imul(al7, bl3) | 0;
        mid = mid + Math.imul(al7, bh3) | 0;
        mid = mid + Math.imul(ah7, bl3) | 0;
        hi = hi + Math.imul(ah7, bh3) | 0;
        lo2 = lo2 + Math.imul(al6, bl4) | 0;
        mid = mid + Math.imul(al6, bh4) | 0;
        mid = mid + Math.imul(ah6, bl4) | 0;
        hi = hi + Math.imul(ah6, bh4) | 0;
        lo2 = lo2 + Math.imul(al5, bl5) | 0;
        mid = mid + Math.imul(al5, bh5) | 0;
        mid = mid + Math.imul(ah5, bl5) | 0;
        hi = hi + Math.imul(ah5, bh5) | 0;
        lo2 = lo2 + Math.imul(al4, bl6) | 0;
        mid = mid + Math.imul(al4, bh6) | 0;
        mid = mid + Math.imul(ah4, bl6) | 0;
        hi = hi + Math.imul(ah4, bh6) | 0;
        lo2 = lo2 + Math.imul(al3, bl7) | 0;
        mid = mid + Math.imul(al3, bh7) | 0;
        mid = mid + Math.imul(ah3, bl7) | 0;
        hi = hi + Math.imul(ah3, bh7) | 0;
        lo2 = lo2 + Math.imul(al2, bl8) | 0;
        mid = mid + Math.imul(al2, bh8) | 0;
        mid = mid + Math.imul(ah2, bl8) | 0;
        hi = hi + Math.imul(ah2, bh8) | 0;
        lo2 = lo2 + Math.imul(al1, bl9) | 0;
        mid = mid + Math.imul(al1, bh9) | 0;
        mid = mid + Math.imul(ah1, bl9) | 0;
        hi = hi + Math.imul(ah1, bh9) | 0;
        var w10 = (c2 + lo2 | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
        w10 &= 67108863;
        lo2 = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = mid + Math.imul(ah9, bl2) | 0;
        hi = Math.imul(ah9, bh2);
        lo2 = lo2 + Math.imul(al8, bl3) | 0;
        mid = mid + Math.imul(al8, bh3) | 0;
        mid = mid + Math.imul(ah8, bl3) | 0;
        hi = hi + Math.imul(ah8, bh3) | 0;
        lo2 = lo2 + Math.imul(al7, bl4) | 0;
        mid = mid + Math.imul(al7, bh4) | 0;
        mid = mid + Math.imul(ah7, bl4) | 0;
        hi = hi + Math.imul(ah7, bh4) | 0;
        lo2 = lo2 + Math.imul(al6, bl5) | 0;
        mid = mid + Math.imul(al6, bh5) | 0;
        mid = mid + Math.imul(ah6, bl5) | 0;
        hi = hi + Math.imul(ah6, bh5) | 0;
        lo2 = lo2 + Math.imul(al5, bl6) | 0;
        mid = mid + Math.imul(al5, bh6) | 0;
        mid = mid + Math.imul(ah5, bl6) | 0;
        hi = hi + Math.imul(ah5, bh6) | 0;
        lo2 = lo2 + Math.imul(al4, bl7) | 0;
        mid = mid + Math.imul(al4, bh7) | 0;
        mid = mid + Math.imul(ah4, bl7) | 0;
        hi = hi + Math.imul(ah4, bh7) | 0;
        lo2 = lo2 + Math.imul(al3, bl8) | 0;
        mid = mid + Math.imul(al3, bh8) | 0;
        mid = mid + Math.imul(ah3, bl8) | 0;
        hi = hi + Math.imul(ah3, bh8) | 0;
        lo2 = lo2 + Math.imul(al2, bl9) | 0;
        mid = mid + Math.imul(al2, bh9) | 0;
        mid = mid + Math.imul(ah2, bl9) | 0;
        hi = hi + Math.imul(ah2, bh9) | 0;
        var w11 = (c2 + lo2 | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
        w11 &= 67108863;
        lo2 = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = mid + Math.imul(ah9, bl3) | 0;
        hi = Math.imul(ah9, bh3);
        lo2 = lo2 + Math.imul(al8, bl4) | 0;
        mid = mid + Math.imul(al8, bh4) | 0;
        mid = mid + Math.imul(ah8, bl4) | 0;
        hi = hi + Math.imul(ah8, bh4) | 0;
        lo2 = lo2 + Math.imul(al7, bl5) | 0;
        mid = mid + Math.imul(al7, bh5) | 0;
        mid = mid + Math.imul(ah7, bl5) | 0;
        hi = hi + Math.imul(ah7, bh5) | 0;
        lo2 = lo2 + Math.imul(al6, bl6) | 0;
        mid = mid + Math.imul(al6, bh6) | 0;
        mid = mid + Math.imul(ah6, bl6) | 0;
        hi = hi + Math.imul(ah6, bh6) | 0;
        lo2 = lo2 + Math.imul(al5, bl7) | 0;
        mid = mid + Math.imul(al5, bh7) | 0;
        mid = mid + Math.imul(ah5, bl7) | 0;
        hi = hi + Math.imul(ah5, bh7) | 0;
        lo2 = lo2 + Math.imul(al4, bl8) | 0;
        mid = mid + Math.imul(al4, bh8) | 0;
        mid = mid + Math.imul(ah4, bl8) | 0;
        hi = hi + Math.imul(ah4, bh8) | 0;
        lo2 = lo2 + Math.imul(al3, bl9) | 0;
        mid = mid + Math.imul(al3, bh9) | 0;
        mid = mid + Math.imul(ah3, bl9) | 0;
        hi = hi + Math.imul(ah3, bh9) | 0;
        var w122 = (c2 + lo2 | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi + (mid >>> 13) | 0) + (w122 >>> 26) | 0;
        w122 &= 67108863;
        lo2 = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = mid + Math.imul(ah9, bl4) | 0;
        hi = Math.imul(ah9, bh4);
        lo2 = lo2 + Math.imul(al8, bl5) | 0;
        mid = mid + Math.imul(al8, bh5) | 0;
        mid = mid + Math.imul(ah8, bl5) | 0;
        hi = hi + Math.imul(ah8, bh5) | 0;
        lo2 = lo2 + Math.imul(al7, bl6) | 0;
        mid = mid + Math.imul(al7, bh6) | 0;
        mid = mid + Math.imul(ah7, bl6) | 0;
        hi = hi + Math.imul(ah7, bh6) | 0;
        lo2 = lo2 + Math.imul(al6, bl7) | 0;
        mid = mid + Math.imul(al6, bh7) | 0;
        mid = mid + Math.imul(ah6, bl7) | 0;
        hi = hi + Math.imul(ah6, bh7) | 0;
        lo2 = lo2 + Math.imul(al5, bl8) | 0;
        mid = mid + Math.imul(al5, bh8) | 0;
        mid = mid + Math.imul(ah5, bl8) | 0;
        hi = hi + Math.imul(ah5, bh8) | 0;
        lo2 = lo2 + Math.imul(al4, bl9) | 0;
        mid = mid + Math.imul(al4, bh9) | 0;
        mid = mid + Math.imul(ah4, bl9) | 0;
        hi = hi + Math.imul(ah4, bh9) | 0;
        var w13 = (c2 + lo2 | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
        w13 &= 67108863;
        lo2 = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = mid + Math.imul(ah9, bl5) | 0;
        hi = Math.imul(ah9, bh5);
        lo2 = lo2 + Math.imul(al8, bl6) | 0;
        mid = mid + Math.imul(al8, bh6) | 0;
        mid = mid + Math.imul(ah8, bl6) | 0;
        hi = hi + Math.imul(ah8, bh6) | 0;
        lo2 = lo2 + Math.imul(al7, bl7) | 0;
        mid = mid + Math.imul(al7, bh7) | 0;
        mid = mid + Math.imul(ah7, bl7) | 0;
        hi = hi + Math.imul(ah7, bh7) | 0;
        lo2 = lo2 + Math.imul(al6, bl8) | 0;
        mid = mid + Math.imul(al6, bh8) | 0;
        mid = mid + Math.imul(ah6, bl8) | 0;
        hi = hi + Math.imul(ah6, bh8) | 0;
        lo2 = lo2 + Math.imul(al5, bl9) | 0;
        mid = mid + Math.imul(al5, bh9) | 0;
        mid = mid + Math.imul(ah5, bl9) | 0;
        hi = hi + Math.imul(ah5, bh9) | 0;
        var w14 = (c2 + lo2 | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
        w14 &= 67108863;
        lo2 = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = mid + Math.imul(ah9, bl6) | 0;
        hi = Math.imul(ah9, bh6);
        lo2 = lo2 + Math.imul(al8, bl7) | 0;
        mid = mid + Math.imul(al8, bh7) | 0;
        mid = mid + Math.imul(ah8, bl7) | 0;
        hi = hi + Math.imul(ah8, bh7) | 0;
        lo2 = lo2 + Math.imul(al7, bl8) | 0;
        mid = mid + Math.imul(al7, bh8) | 0;
        mid = mid + Math.imul(ah7, bl8) | 0;
        hi = hi + Math.imul(ah7, bh8) | 0;
        lo2 = lo2 + Math.imul(al6, bl9) | 0;
        mid = mid + Math.imul(al6, bh9) | 0;
        mid = mid + Math.imul(ah6, bl9) | 0;
        hi = hi + Math.imul(ah6, bh9) | 0;
        var w15 = (c2 + lo2 | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
        w15 &= 67108863;
        lo2 = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = mid + Math.imul(ah9, bl7) | 0;
        hi = Math.imul(ah9, bh7);
        lo2 = lo2 + Math.imul(al8, bl8) | 0;
        mid = mid + Math.imul(al8, bh8) | 0;
        mid = mid + Math.imul(ah8, bl8) | 0;
        hi = hi + Math.imul(ah8, bh8) | 0;
        lo2 = lo2 + Math.imul(al7, bl9) | 0;
        mid = mid + Math.imul(al7, bh9) | 0;
        mid = mid + Math.imul(ah7, bl9) | 0;
        hi = hi + Math.imul(ah7, bh9) | 0;
        var w16 = (c2 + lo2 | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
        w16 &= 67108863;
        lo2 = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = mid + Math.imul(ah9, bl8) | 0;
        hi = Math.imul(ah9, bh8);
        lo2 = lo2 + Math.imul(al8, bl9) | 0;
        mid = mid + Math.imul(al8, bh9) | 0;
        mid = mid + Math.imul(ah8, bl9) | 0;
        hi = hi + Math.imul(ah8, bh9) | 0;
        var w17 = (c2 + lo2 | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
        w17 &= 67108863;
        lo2 = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = mid + Math.imul(ah9, bl9) | 0;
        hi = Math.imul(ah9, bh9);
        var w18 = (c2 + lo2 | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
        w18 &= 67108863;
        o2[0] = w02;
        o2[1] = w12;
        o2[2] = w22;
        o2[3] = w3;
        o2[4] = w4;
        o2[5] = w5;
        o2[6] = w62;
        o2[7] = w7;
        o2[8] = w8;
        o2[9] = w9;
        o2[10] = w10;
        o2[11] = w11;
        o2[12] = w122;
        o2[13] = w13;
        o2[14] = w14;
        o2[15] = w15;
        o2[16] = w16;
        o2[17] = w17;
        o2[18] = w18;
        if (c2 !== 0) {
          o2[19] = c2;
          out.length++;
        }
        return out;
      };
      if (!Math.imul) {
        comb10MulTo = smallMulTo;
      }
      function bigMulTo(self2, num, out) {
        out.negative = num.negative ^ self2.negative;
        out.length = self2.length + num.length;
        var carry = 0;
        var hncarry = 0;
        for (var k4 = 0; k4 < out.length - 1; k4++) {
          var ncarry = hncarry;
          hncarry = 0;
          var rword = carry & 67108863;
          var maxJ = Math.min(k4, num.length - 1);
          for (var j3 = Math.max(0, k4 - self2.length + 1); j3 <= maxJ; j3++) {
            var i2 = k4 - j3;
            var a = self2.words[i2] | 0;
            var b2 = num.words[j3] | 0;
            var r2 = a * b2;
            var lo2 = r2 & 67108863;
            ncarry = ncarry + (r2 / 67108864 | 0) | 0;
            lo2 = lo2 + rword | 0;
            rword = lo2 & 67108863;
            ncarry = ncarry + (lo2 >>> 26) | 0;
            hncarry += ncarry >>> 26;
            ncarry &= 67108863;
          }
          out.words[k4] = rword;
          carry = ncarry;
          ncarry = hncarry;
        }
        if (carry !== 0) {
          out.words[k4] = carry;
        } else {
          out.length--;
        }
        return out.strip();
      }
      function jumboMulTo(self2, num, out) {
        var fftm = new FFTM();
        return fftm.mulp(self2, num, out);
      }
      BN3.prototype.mulTo = function mulTo(num, out) {
        var res;
        var len = this.length + num.length;
        if (this.length === 10 && num.length === 10) {
          res = comb10MulTo(this, num, out);
        } else if (len < 63) {
          res = smallMulTo(this, num, out);
        } else if (len < 1024) {
          res = bigMulTo(this, num, out);
        } else {
          res = jumboMulTo(this, num, out);
        }
        return res;
      };
      function FFTM(x4, y2) {
        this.x = x4;
        this.y = y2;
      }
      FFTM.prototype.makeRBT = function makeRBT(N3) {
        var t = new Array(N3);
        var l2 = BN3.prototype._countBits(N3) - 1;
        for (var i2 = 0; i2 < N3; i2++) {
          t[i2] = this.revBin(i2, l2, N3);
        }
        return t;
      };
      FFTM.prototype.revBin = function revBin(x4, l2, N3) {
        if (x4 === 0 || x4 === N3 - 1)
          return x4;
        var rb = 0;
        for (var i2 = 0; i2 < l2; i2++) {
          rb |= (x4 & 1) << l2 - i2 - 1;
          x4 >>= 1;
        }
        return rb;
      };
      FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N3) {
        for (var i2 = 0; i2 < N3; i2++) {
          rtws[i2] = rws[rbt[i2]];
          itws[i2] = iws[rbt[i2]];
        }
      };
      FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N3, rbt) {
        this.permute(rbt, rws, iws, rtws, itws, N3);
        for (var s2 = 1; s2 < N3; s2 <<= 1) {
          var l2 = s2 << 1;
          var rtwdf = Math.cos(2 * Math.PI / l2);
          var itwdf = Math.sin(2 * Math.PI / l2);
          for (var p3 = 0; p3 < N3; p3 += l2) {
            var rtwdf_ = rtwdf;
            var itwdf_ = itwdf;
            for (var j3 = 0; j3 < s2; j3++) {
              var re2 = rtws[p3 + j3];
              var ie2 = itws[p3 + j3];
              var ro = rtws[p3 + j3 + s2];
              var io2 = itws[p3 + j3 + s2];
              var rx = rtwdf_ * ro - itwdf_ * io2;
              io2 = rtwdf_ * io2 + itwdf_ * ro;
              ro = rx;
              rtws[p3 + j3] = re2 + ro;
              itws[p3 + j3] = ie2 + io2;
              rtws[p3 + j3 + s2] = re2 - ro;
              itws[p3 + j3 + s2] = ie2 - io2;
              if (j3 !== l2) {
                rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                rtwdf_ = rx;
              }
            }
          }
        }
      };
      FFTM.prototype.guessLen13b = function guessLen13b(n, m3) {
        var N3 = Math.max(m3, n) | 1;
        var odd = N3 & 1;
        var i2 = 0;
        for (N3 = N3 / 2 | 0; N3; N3 = N3 >>> 1) {
          i2++;
        }
        return 1 << i2 + 1 + odd;
      };
      FFTM.prototype.conjugate = function conjugate(rws, iws, N3) {
        if (N3 <= 1)
          return;
        for (var i2 = 0; i2 < N3 / 2; i2++) {
          var t = rws[i2];
          rws[i2] = rws[N3 - i2 - 1];
          rws[N3 - i2 - 1] = t;
          t = iws[i2];
          iws[i2] = -iws[N3 - i2 - 1];
          iws[N3 - i2 - 1] = -t;
        }
      };
      FFTM.prototype.normalize13b = function normalize13b(ws2, N3) {
        var carry = 0;
        for (var i2 = 0; i2 < N3 / 2; i2++) {
          var w3 = Math.round(ws2[2 * i2 + 1] / N3) * 8192 + Math.round(ws2[2 * i2] / N3) + carry;
          ws2[i2] = w3 & 67108863;
          if (w3 < 67108864) {
            carry = 0;
          } else {
            carry = w3 / 67108864 | 0;
          }
        }
        return ws2;
      };
      FFTM.prototype.convert13b = function convert13b(ws2, len, rws, N3) {
        var carry = 0;
        for (var i2 = 0; i2 < len; i2++) {
          carry = carry + (ws2[i2] | 0);
          rws[2 * i2] = carry & 8191;
          carry = carry >>> 13;
          rws[2 * i2 + 1] = carry & 8191;
          carry = carry >>> 13;
        }
        for (i2 = 2 * len; i2 < N3; ++i2) {
          rws[i2] = 0;
        }
        assert2(carry === 0);
        assert2((carry & ~8191) === 0);
      };
      FFTM.prototype.stub = function stub(N3) {
        var ph = new Array(N3);
        for (var i2 = 0; i2 < N3; i2++) {
          ph[i2] = 0;
        }
        return ph;
      };
      FFTM.prototype.mulp = function mulp(x4, y2, out) {
        var N3 = 2 * this.guessLen13b(x4.length, y2.length);
        var rbt = this.makeRBT(N3);
        var _2 = this.stub(N3);
        var rws = new Array(N3);
        var rwst = new Array(N3);
        var iwst = new Array(N3);
        var nrws = new Array(N3);
        var nrwst = new Array(N3);
        var niwst = new Array(N3);
        var rmws = out.words;
        rmws.length = N3;
        this.convert13b(x4.words, x4.length, rws, N3);
        this.convert13b(y2.words, y2.length, nrws, N3);
        this.transform(rws, _2, rwst, iwst, N3, rbt);
        this.transform(nrws, _2, nrwst, niwst, N3, rbt);
        for (var i2 = 0; i2 < N3; i2++) {
          var rx = rwst[i2] * nrwst[i2] - iwst[i2] * niwst[i2];
          iwst[i2] = rwst[i2] * niwst[i2] + iwst[i2] * nrwst[i2];
          rwst[i2] = rx;
        }
        this.conjugate(rwst, iwst, N3);
        this.transform(rwst, iwst, rmws, _2, N3, rbt);
        this.conjugate(rmws, _2, N3);
        this.normalize13b(rmws, N3);
        out.negative = x4.negative ^ y2.negative;
        out.length = x4.length + y2.length;
        return out.strip();
      };
      BN3.prototype.mul = function mul3(num) {
        var out = new BN3(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
      };
      BN3.prototype.mulf = function mulf(num) {
        var out = new BN3(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
      };
      BN3.prototype.imul = function imul(num) {
        return this.clone().mulTo(num, this);
      };
      BN3.prototype.imuln = function imuln(num) {
        assert2(typeof num === "number");
        assert2(num < 67108864);
        var carry = 0;
        for (var i2 = 0; i2 < this.length; i2++) {
          var w3 = (this.words[i2] | 0) * num;
          var lo2 = (w3 & 67108863) + (carry & 67108863);
          carry >>= 26;
          carry += w3 / 67108864 | 0;
          carry += lo2 >>> 26;
          this.words[i2] = lo2 & 67108863;
        }
        if (carry !== 0) {
          this.words[i2] = carry;
          this.length++;
        }
        return this;
      };
      BN3.prototype.muln = function muln(num) {
        return this.clone().imuln(num);
      };
      BN3.prototype.sqr = function sqr() {
        return this.mul(this);
      };
      BN3.prototype.isqr = function isqr() {
        return this.imul(this.clone());
      };
      BN3.prototype.pow = function pow(num) {
        var w3 = toBitArray(num);
        if (w3.length === 0)
          return new BN3(1);
        var res = this;
        for (var i2 = 0; i2 < w3.length; i2++, res = res.sqr()) {
          if (w3[i2] !== 0)
            break;
        }
        if (++i2 < w3.length) {
          for (var q3 = res.sqr(); i2 < w3.length; i2++, q3 = q3.sqr()) {
            if (w3[i2] === 0)
              continue;
            res = res.mul(q3);
          }
        }
        return res;
      };
      BN3.prototype.iushln = function iushln(bits) {
        assert2(typeof bits === "number" && bits >= 0);
        var r2 = bits % 26;
        var s2 = (bits - r2) / 26;
        var carryMask = 67108863 >>> 26 - r2 << 26 - r2;
        var i2;
        if (r2 !== 0) {
          var carry = 0;
          for (i2 = 0; i2 < this.length; i2++) {
            var newCarry = this.words[i2] & carryMask;
            var c2 = (this.words[i2] | 0) - newCarry << r2;
            this.words[i2] = c2 | carry;
            carry = newCarry >>> 26 - r2;
          }
          if (carry) {
            this.words[i2] = carry;
            this.length++;
          }
        }
        if (s2 !== 0) {
          for (i2 = this.length - 1; i2 >= 0; i2--) {
            this.words[i2 + s2] = this.words[i2];
          }
          for (i2 = 0; i2 < s2; i2++) {
            this.words[i2] = 0;
          }
          this.length += s2;
        }
        return this.strip();
      };
      BN3.prototype.ishln = function ishln(bits) {
        assert2(this.negative === 0);
        return this.iushln(bits);
      };
      BN3.prototype.iushrn = function iushrn(bits, hint, extended) {
        assert2(typeof bits === "number" && bits >= 0);
        var h2;
        if (hint) {
          h2 = (hint - hint % 26) / 26;
        } else {
          h2 = 0;
        }
        var r2 = bits % 26;
        var s2 = Math.min((bits - r2) / 26, this.length);
        var mask = 67108863 ^ 67108863 >>> r2 << r2;
        var maskedWords = extended;
        h2 -= s2;
        h2 = Math.max(0, h2);
        if (maskedWords) {
          for (var i2 = 0; i2 < s2; i2++) {
            maskedWords.words[i2] = this.words[i2];
          }
          maskedWords.length = s2;
        }
        if (s2 === 0) {
        } else if (this.length > s2) {
          this.length -= s2;
          for (i2 = 0; i2 < this.length; i2++) {
            this.words[i2] = this.words[i2 + s2];
          }
        } else {
          this.words[0] = 0;
          this.length = 1;
        }
        var carry = 0;
        for (i2 = this.length - 1; i2 >= 0 && (carry !== 0 || i2 >= h2); i2--) {
          var word = this.words[i2] | 0;
          this.words[i2] = carry << 26 - r2 | word >>> r2;
          carry = word & mask;
        }
        if (maskedWords && carry !== 0) {
          maskedWords.words[maskedWords.length++] = carry;
        }
        if (this.length === 0) {
          this.words[0] = 0;
          this.length = 1;
        }
        return this.strip();
      };
      BN3.prototype.ishrn = function ishrn(bits, hint, extended) {
        assert2(this.negative === 0);
        return this.iushrn(bits, hint, extended);
      };
      BN3.prototype.shln = function shln(bits) {
        return this.clone().ishln(bits);
      };
      BN3.prototype.ushln = function ushln(bits) {
        return this.clone().iushln(bits);
      };
      BN3.prototype.shrn = function shrn(bits) {
        return this.clone().ishrn(bits);
      };
      BN3.prototype.ushrn = function ushrn(bits) {
        return this.clone().iushrn(bits);
      };
      BN3.prototype.testn = function testn(bit) {
        assert2(typeof bit === "number" && bit >= 0);
        var r2 = bit % 26;
        var s2 = (bit - r2) / 26;
        var q3 = 1 << r2;
        if (this.length <= s2)
          return false;
        var w3 = this.words[s2];
        return !!(w3 & q3);
      };
      BN3.prototype.imaskn = function imaskn(bits) {
        assert2(typeof bits === "number" && bits >= 0);
        var r2 = bits % 26;
        var s2 = (bits - r2) / 26;
        assert2(this.negative === 0, "imaskn works only with positive numbers");
        if (this.length <= s2) {
          return this;
        }
        if (r2 !== 0) {
          s2++;
        }
        this.length = Math.min(s2, this.length);
        if (r2 !== 0) {
          var mask = 67108863 ^ 67108863 >>> r2 << r2;
          this.words[this.length - 1] &= mask;
        }
        return this.strip();
      };
      BN3.prototype.maskn = function maskn(bits) {
        return this.clone().imaskn(bits);
      };
      BN3.prototype.iaddn = function iaddn(num) {
        assert2(typeof num === "number");
        assert2(num < 67108864);
        if (num < 0)
          return this.isubn(-num);
        if (this.negative !== 0) {
          if (this.length === 1 && (this.words[0] | 0) < num) {
            this.words[0] = num - (this.words[0] | 0);
            this.negative = 0;
            return this;
          }
          this.negative = 0;
          this.isubn(num);
          this.negative = 1;
          return this;
        }
        return this._iaddn(num);
      };
      BN3.prototype._iaddn = function _iaddn(num) {
        this.words[0] += num;
        for (var i2 = 0; i2 < this.length && this.words[i2] >= 67108864; i2++) {
          this.words[i2] -= 67108864;
          if (i2 === this.length - 1) {
            this.words[i2 + 1] = 1;
          } else {
            this.words[i2 + 1]++;
          }
        }
        this.length = Math.max(this.length, i2 + 1);
        return this;
      };
      BN3.prototype.isubn = function isubn(num) {
        assert2(typeof num === "number");
        assert2(num < 67108864);
        if (num < 0)
          return this.iaddn(-num);
        if (this.negative !== 0) {
          this.negative = 0;
          this.iaddn(num);
          this.negative = 1;
          return this;
        }
        this.words[0] -= num;
        if (this.length === 1 && this.words[0] < 0) {
          this.words[0] = -this.words[0];
          this.negative = 1;
        } else {
          for (var i2 = 0; i2 < this.length && this.words[i2] < 0; i2++) {
            this.words[i2] += 67108864;
            this.words[i2 + 1] -= 1;
          }
        }
        return this.strip();
      };
      BN3.prototype.addn = function addn(num) {
        return this.clone().iaddn(num);
      };
      BN3.prototype.subn = function subn(num) {
        return this.clone().isubn(num);
      };
      BN3.prototype.iabs = function iabs() {
        this.negative = 0;
        return this;
      };
      BN3.prototype.abs = function abs() {
        return this.clone().iabs();
      };
      BN3.prototype._ishlnsubmul = function _ishlnsubmul(num, mul3, shift) {
        var len = num.length + shift;
        var i2;
        this._expand(len);
        var w3;
        var carry = 0;
        for (i2 = 0; i2 < num.length; i2++) {
          w3 = (this.words[i2 + shift] | 0) + carry;
          var right = (num.words[i2] | 0) * mul3;
          w3 -= right & 67108863;
          carry = (w3 >> 26) - (right / 67108864 | 0);
          this.words[i2 + shift] = w3 & 67108863;
        }
        for (; i2 < this.length - shift; i2++) {
          w3 = (this.words[i2 + shift] | 0) + carry;
          carry = w3 >> 26;
          this.words[i2 + shift] = w3 & 67108863;
        }
        if (carry === 0)
          return this.strip();
        assert2(carry === -1);
        carry = 0;
        for (i2 = 0; i2 < this.length; i2++) {
          w3 = -(this.words[i2] | 0) + carry;
          carry = w3 >> 26;
          this.words[i2] = w3 & 67108863;
        }
        this.negative = 1;
        return this.strip();
      };
      BN3.prototype._wordDiv = function _wordDiv(num, mode) {
        var shift = this.length - num.length;
        var a = this.clone();
        var b2 = num;
        var bhi = b2.words[b2.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
          b2 = b2.ushln(shift);
          a.iushln(shift);
          bhi = b2.words[b2.length - 1] | 0;
        }
        var m3 = a.length - b2.length;
        var q3;
        if (mode !== "mod") {
          q3 = new BN3(null);
          q3.length = m3 + 1;
          q3.words = new Array(q3.length);
          for (var i2 = 0; i2 < q3.length; i2++) {
            q3.words[i2] = 0;
          }
        }
        var diff = a.clone()._ishlnsubmul(b2, 1, m3);
        if (diff.negative === 0) {
          a = diff;
          if (q3) {
            q3.words[m3] = 1;
          }
        }
        for (var j3 = m3 - 1; j3 >= 0; j3--) {
          var qj = (a.words[b2.length + j3] | 0) * 67108864 + (a.words[b2.length + j3 - 1] | 0);
          qj = Math.min(qj / bhi | 0, 67108863);
          a._ishlnsubmul(b2, qj, j3);
          while (a.negative !== 0) {
            qj--;
            a.negative = 0;
            a._ishlnsubmul(b2, 1, j3);
            if (!a.isZero()) {
              a.negative ^= 1;
            }
          }
          if (q3) {
            q3.words[j3] = qj;
          }
        }
        if (q3) {
          q3.strip();
        }
        a.strip();
        if (mode !== "div" && shift !== 0) {
          a.iushrn(shift);
        }
        return {
          div: q3 || null,
          mod: a
        };
      };
      BN3.prototype.divmod = function divmod(num, mode, positive) {
        assert2(!num.isZero());
        if (this.isZero()) {
          return {
            div: new BN3(0),
            mod: new BN3(0)
          };
        }
        var div, mod2, res;
        if (this.negative !== 0 && num.negative === 0) {
          res = this.neg().divmod(num, mode);
          if (mode !== "mod") {
            div = res.div.neg();
          }
          if (mode !== "div") {
            mod2 = res.mod.neg();
            if (positive && mod2.negative !== 0) {
              mod2.iadd(num);
            }
          }
          return {
            div,
            mod: mod2
          };
        }
        if (this.negative === 0 && num.negative !== 0) {
          res = this.divmod(num.neg(), mode);
          if (mode !== "mod") {
            div = res.div.neg();
          }
          return {
            div,
            mod: res.mod
          };
        }
        if ((this.negative & num.negative) !== 0) {
          res = this.neg().divmod(num.neg(), mode);
          if (mode !== "div") {
            mod2 = res.mod.neg();
            if (positive && mod2.negative !== 0) {
              mod2.isub(num);
            }
          }
          return {
            div: res.div,
            mod: mod2
          };
        }
        if (num.length > this.length || this.cmp(num) < 0) {
          return {
            div: new BN3(0),
            mod: this
          };
        }
        if (num.length === 1) {
          if (mode === "div") {
            return {
              div: this.divn(num.words[0]),
              mod: null
            };
          }
          if (mode === "mod") {
            return {
              div: null,
              mod: new BN3(this.modn(num.words[0]))
            };
          }
          return {
            div: this.divn(num.words[0]),
            mod: new BN3(this.modn(num.words[0]))
          };
        }
        return this._wordDiv(num, mode);
      };
      BN3.prototype.div = function div(num) {
        return this.divmod(num, "div", false).div;
      };
      BN3.prototype.mod = function mod2(num) {
        return this.divmod(num, "mod", false).mod;
      };
      BN3.prototype.umod = function umod(num) {
        return this.divmod(num, "mod", true).mod;
      };
      BN3.prototype.divRound = function divRound(num) {
        var dm = this.divmod(num);
        if (dm.mod.isZero())
          return dm.div;
        var mod2 = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
        var half = num.ushrn(1);
        var r2 = num.andln(1);
        var cmp = mod2.cmp(half);
        if (cmp < 0 || r2 === 1 && cmp === 0)
          return dm.div;
        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
      };
      BN3.prototype.modn = function modn(num) {
        assert2(num <= 67108863);
        var p3 = (1 << 26) % num;
        var acc = 0;
        for (var i2 = this.length - 1; i2 >= 0; i2--) {
          acc = (p3 * acc + (this.words[i2] | 0)) % num;
        }
        return acc;
      };
      BN3.prototype.idivn = function idivn(num) {
        assert2(num <= 67108863);
        var carry = 0;
        for (var i2 = this.length - 1; i2 >= 0; i2--) {
          var w3 = (this.words[i2] | 0) + carry * 67108864;
          this.words[i2] = w3 / num | 0;
          carry = w3 % num;
        }
        return this.strip();
      };
      BN3.prototype.divn = function divn(num) {
        return this.clone().idivn(num);
      };
      BN3.prototype.egcd = function egcd(p3) {
        assert2(p3.negative === 0);
        assert2(!p3.isZero());
        var x4 = this;
        var y2 = p3.clone();
        if (x4.negative !== 0) {
          x4 = x4.umod(p3);
        } else {
          x4 = x4.clone();
        }
        var A3 = new BN3(1);
        var B3 = new BN3(0);
        var C3 = new BN3(0);
        var D3 = new BN3(1);
        var g3 = 0;
        while (x4.isEven() && y2.isEven()) {
          x4.iushrn(1);
          y2.iushrn(1);
          ++g3;
        }
        var yp = y2.clone();
        var xp = x4.clone();
        while (!x4.isZero()) {
          for (var i2 = 0, im = 1; (x4.words[0] & im) === 0 && i2 < 26; ++i2, im <<= 1)
            ;
          if (i2 > 0) {
            x4.iushrn(i2);
            while (i2-- > 0) {
              if (A3.isOdd() || B3.isOdd()) {
                A3.iadd(yp);
                B3.isub(xp);
              }
              A3.iushrn(1);
              B3.iushrn(1);
            }
          }
          for (var j3 = 0, jm = 1; (y2.words[0] & jm) === 0 && j3 < 26; ++j3, jm <<= 1)
            ;
          if (j3 > 0) {
            y2.iushrn(j3);
            while (j3-- > 0) {
              if (C3.isOdd() || D3.isOdd()) {
                C3.iadd(yp);
                D3.isub(xp);
              }
              C3.iushrn(1);
              D3.iushrn(1);
            }
          }
          if (x4.cmp(y2) >= 0) {
            x4.isub(y2);
            A3.isub(C3);
            B3.isub(D3);
          } else {
            y2.isub(x4);
            C3.isub(A3);
            D3.isub(B3);
          }
        }
        return {
          a: C3,
          b: D3,
          gcd: y2.iushln(g3)
        };
      };
      BN3.prototype._invmp = function _invmp(p3) {
        assert2(p3.negative === 0);
        assert2(!p3.isZero());
        var a = this;
        var b2 = p3.clone();
        if (a.negative !== 0) {
          a = a.umod(p3);
        } else {
          a = a.clone();
        }
        var x12 = new BN3(1);
        var x22 = new BN3(0);
        var delta = b2.clone();
        while (a.cmpn(1) > 0 && b2.cmpn(1) > 0) {
          for (var i2 = 0, im = 1; (a.words[0] & im) === 0 && i2 < 26; ++i2, im <<= 1)
            ;
          if (i2 > 0) {
            a.iushrn(i2);
            while (i2-- > 0) {
              if (x12.isOdd()) {
                x12.iadd(delta);
              }
              x12.iushrn(1);
            }
          }
          for (var j3 = 0, jm = 1; (b2.words[0] & jm) === 0 && j3 < 26; ++j3, jm <<= 1)
            ;
          if (j3 > 0) {
            b2.iushrn(j3);
            while (j3-- > 0) {
              if (x22.isOdd()) {
                x22.iadd(delta);
              }
              x22.iushrn(1);
            }
          }
          if (a.cmp(b2) >= 0) {
            a.isub(b2);
            x12.isub(x22);
          } else {
            b2.isub(a);
            x22.isub(x12);
          }
        }
        var res;
        if (a.cmpn(1) === 0) {
          res = x12;
        } else {
          res = x22;
        }
        if (res.cmpn(0) < 0) {
          res.iadd(p3);
        }
        return res;
      };
      BN3.prototype.gcd = function gcd(num) {
        if (this.isZero())
          return num.abs();
        if (num.isZero())
          return this.abs();
        var a = this.clone();
        var b2 = num.clone();
        a.negative = 0;
        b2.negative = 0;
        for (var shift = 0; a.isEven() && b2.isEven(); shift++) {
          a.iushrn(1);
          b2.iushrn(1);
        }
        do {
          while (a.isEven()) {
            a.iushrn(1);
          }
          while (b2.isEven()) {
            b2.iushrn(1);
          }
          var r2 = a.cmp(b2);
          if (r2 < 0) {
            var t = a;
            a = b2;
            b2 = t;
          } else if (r2 === 0 || b2.cmpn(1) === 0) {
            break;
          }
          a.isub(b2);
        } while (true);
        return b2.iushln(shift);
      };
      BN3.prototype.invm = function invm(num) {
        return this.egcd(num).a.umod(num);
      };
      BN3.prototype.isEven = function isEven() {
        return (this.words[0] & 1) === 0;
      };
      BN3.prototype.isOdd = function isOdd() {
        return (this.words[0] & 1) === 1;
      };
      BN3.prototype.andln = function andln(num) {
        return this.words[0] & num;
      };
      BN3.prototype.bincn = function bincn(bit) {
        assert2(typeof bit === "number");
        var r2 = bit % 26;
        var s2 = (bit - r2) / 26;
        var q3 = 1 << r2;
        if (this.length <= s2) {
          this._expand(s2 + 1);
          this.words[s2] |= q3;
          return this;
        }
        var carry = q3;
        for (var i2 = s2; carry !== 0 && i2 < this.length; i2++) {
          var w3 = this.words[i2] | 0;
          w3 += carry;
          carry = w3 >>> 26;
          w3 &= 67108863;
          this.words[i2] = w3;
        }
        if (carry !== 0) {
          this.words[i2] = carry;
          this.length++;
        }
        return this;
      };
      BN3.prototype.isZero = function isZero() {
        return this.length === 1 && this.words[0] === 0;
      };
      BN3.prototype.cmpn = function cmpn(num) {
        var negative = num < 0;
        if (this.negative !== 0 && !negative)
          return -1;
        if (this.negative === 0 && negative)
          return 1;
        this.strip();
        var res;
        if (this.length > 1) {
          res = 1;
        } else {
          if (negative) {
            num = -num;
          }
          assert2(num <= 67108863, "Number is too big");
          var w3 = this.words[0] | 0;
          res = w3 === num ? 0 : w3 < num ? -1 : 1;
        }
        if (this.negative !== 0)
          return -res | 0;
        return res;
      };
      BN3.prototype.cmp = function cmp(num) {
        if (this.negative !== 0 && num.negative === 0)
          return -1;
        if (this.negative === 0 && num.negative !== 0)
          return 1;
        var res = this.ucmp(num);
        if (this.negative !== 0)
          return -res | 0;
        return res;
      };
      BN3.prototype.ucmp = function ucmp(num) {
        if (this.length > num.length)
          return 1;
        if (this.length < num.length)
          return -1;
        var res = 0;
        for (var i2 = this.length - 1; i2 >= 0; i2--) {
          var a = this.words[i2] | 0;
          var b2 = num.words[i2] | 0;
          if (a === b2)
            continue;
          if (a < b2) {
            res = -1;
          } else if (a > b2) {
            res = 1;
          }
          break;
        }
        return res;
      };
      BN3.prototype.gtn = function gtn(num) {
        return this.cmpn(num) === 1;
      };
      BN3.prototype.gt = function gt2(num) {
        return this.cmp(num) === 1;
      };
      BN3.prototype.gten = function gten(num) {
        return this.cmpn(num) >= 0;
      };
      BN3.prototype.gte = function gte(num) {
        return this.cmp(num) >= 0;
      };
      BN3.prototype.ltn = function ltn(num) {
        return this.cmpn(num) === -1;
      };
      BN3.prototype.lt = function lt2(num) {
        return this.cmp(num) === -1;
      };
      BN3.prototype.lten = function lten(num) {
        return this.cmpn(num) <= 0;
      };
      BN3.prototype.lte = function lte(num) {
        return this.cmp(num) <= 0;
      };
      BN3.prototype.eqn = function eqn(num) {
        return this.cmpn(num) === 0;
      };
      BN3.prototype.eq = function eq4(num) {
        return this.cmp(num) === 0;
      };
      BN3.red = function red(num) {
        return new Red(num);
      };
      BN3.prototype.toRed = function toRed(ctx) {
        assert2(!this.red, "Already a number in reduction context");
        assert2(this.negative === 0, "red works only with positives");
        return ctx.convertTo(this)._forceRed(ctx);
      };
      BN3.prototype.fromRed = function fromRed() {
        assert2(this.red, "fromRed works only with numbers in reduction context");
        return this.red.convertFrom(this);
      };
      BN3.prototype._forceRed = function _forceRed(ctx) {
        this.red = ctx;
        return this;
      };
      BN3.prototype.forceRed = function forceRed(ctx) {
        assert2(!this.red, "Already a number in reduction context");
        return this._forceRed(ctx);
      };
      BN3.prototype.redAdd = function redAdd(num) {
        assert2(this.red, "redAdd works only with red numbers");
        return this.red.add(this, num);
      };
      BN3.prototype.redIAdd = function redIAdd(num) {
        assert2(this.red, "redIAdd works only with red numbers");
        return this.red.iadd(this, num);
      };
      BN3.prototype.redSub = function redSub(num) {
        assert2(this.red, "redSub works only with red numbers");
        return this.red.sub(this, num);
      };
      BN3.prototype.redISub = function redISub(num) {
        assert2(this.red, "redISub works only with red numbers");
        return this.red.isub(this, num);
      };
      BN3.prototype.redShl = function redShl(num) {
        assert2(this.red, "redShl works only with red numbers");
        return this.red.shl(this, num);
      };
      BN3.prototype.redMul = function redMul(num) {
        assert2(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.mul(this, num);
      };
      BN3.prototype.redIMul = function redIMul(num) {
        assert2(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.imul(this, num);
      };
      BN3.prototype.redSqr = function redSqr() {
        assert2(this.red, "redSqr works only with red numbers");
        this.red._verify1(this);
        return this.red.sqr(this);
      };
      BN3.prototype.redISqr = function redISqr() {
        assert2(this.red, "redISqr works only with red numbers");
        this.red._verify1(this);
        return this.red.isqr(this);
      };
      BN3.prototype.redSqrt = function redSqrt() {
        assert2(this.red, "redSqrt works only with red numbers");
        this.red._verify1(this);
        return this.red.sqrt(this);
      };
      BN3.prototype.redInvm = function redInvm() {
        assert2(this.red, "redInvm works only with red numbers");
        this.red._verify1(this);
        return this.red.invm(this);
      };
      BN3.prototype.redNeg = function redNeg() {
        assert2(this.red, "redNeg works only with red numbers");
        this.red._verify1(this);
        return this.red.neg(this);
      };
      BN3.prototype.redPow = function redPow(num) {
        assert2(this.red && !num.red, "redPow(normalNum)");
        this.red._verify1(this);
        return this.red.pow(this, num);
      };
      var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
      };
      function MPrime(name2, p3) {
        this.name = name2;
        this.p = new BN3(p3, 16);
        this.n = this.p.bitLength();
        this.k = new BN3(1).iushln(this.n).isub(this.p);
        this.tmp = this._tmp();
      }
      MPrime.prototype._tmp = function _tmp() {
        var tmp = new BN3(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
      };
      MPrime.prototype.ireduce = function ireduce(num) {
        var r2 = num;
        var rlen;
        do {
          this.split(r2, this.tmp);
          r2 = this.imulK(r2);
          r2 = r2.iadd(this.tmp);
          rlen = r2.bitLength();
        } while (rlen > this.n);
        var cmp = rlen < this.n ? -1 : r2.ucmp(this.p);
        if (cmp === 0) {
          r2.words[0] = 0;
          r2.length = 1;
        } else if (cmp > 0) {
          r2.isub(this.p);
        } else {
          if (r2.strip !== void 0) {
            r2.strip();
          } else {
            r2._strip();
          }
        }
        return r2;
      };
      MPrime.prototype.split = function split(input, out) {
        input.iushrn(this.n, 0, out);
      };
      MPrime.prototype.imulK = function imulK(num) {
        return num.imul(this.k);
      };
      function K256() {
        MPrime.call(this, "k256", "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f");
      }
      inherits(K256, MPrime);
      K256.prototype.split = function split(input, output) {
        var mask = 4194303;
        var outLen = Math.min(input.length, 9);
        for (var i2 = 0; i2 < outLen; i2++) {
          output.words[i2] = input.words[i2];
        }
        output.length = outLen;
        if (input.length <= 9) {
          input.words[0] = 0;
          input.length = 1;
          return;
        }
        var prev = input.words[9];
        output.words[output.length++] = prev & mask;
        for (i2 = 10; i2 < input.length; i2++) {
          var next = input.words[i2] | 0;
          input.words[i2 - 10] = (next & mask) << 4 | prev >>> 22;
          prev = next;
        }
        prev >>>= 22;
        input.words[i2 - 10] = prev;
        if (prev === 0 && input.length > 10) {
          input.length -= 10;
        } else {
          input.length -= 9;
        }
      };
      K256.prototype.imulK = function imulK(num) {
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2;
        var lo2 = 0;
        for (var i2 = 0; i2 < num.length; i2++) {
          var w3 = num.words[i2] | 0;
          lo2 += w3 * 977;
          num.words[i2] = lo2 & 67108863;
          lo2 = w3 * 64 + (lo2 / 67108864 | 0);
        }
        if (num.words[num.length - 1] === 0) {
          num.length--;
          if (num.words[num.length - 1] === 0) {
            num.length--;
          }
        }
        return num;
      };
      function P224() {
        MPrime.call(this, "p224", "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001");
      }
      inherits(P224, MPrime);
      function P192() {
        MPrime.call(this, "p192", "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff");
      }
      inherits(P192, MPrime);
      function P25519() {
        MPrime.call(this, "25519", "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed");
      }
      inherits(P25519, MPrime);
      P25519.prototype.imulK = function imulK(num) {
        var carry = 0;
        for (var i2 = 0; i2 < num.length; i2++) {
          var hi = (num.words[i2] | 0) * 19 + carry;
          var lo2 = hi & 67108863;
          hi >>>= 26;
          num.words[i2] = lo2;
          carry = hi;
        }
        if (carry !== 0) {
          num.words[num.length++] = carry;
        }
        return num;
      };
      BN3._prime = function prime(name2) {
        if (primes[name2])
          return primes[name2];
        var prime2;
        if (name2 === "k256") {
          prime2 = new K256();
        } else if (name2 === "p224") {
          prime2 = new P224();
        } else if (name2 === "p192") {
          prime2 = new P192();
        } else if (name2 === "p25519") {
          prime2 = new P25519();
        } else {
          throw new Error("Unknown prime " + name2);
        }
        primes[name2] = prime2;
        return prime2;
      };
      function Red(m3) {
        if (typeof m3 === "string") {
          var prime = BN3._prime(m3);
          this.m = prime.p;
          this.prime = prime;
        } else {
          assert2(m3.gtn(1), "modulus must be greater than 1");
          this.m = m3;
          this.prime = null;
        }
      }
      Red.prototype._verify1 = function _verify1(a) {
        assert2(a.negative === 0, "red works only with positives");
        assert2(a.red, "red works only with red numbers");
      };
      Red.prototype._verify2 = function _verify2(a, b2) {
        assert2((a.negative | b2.negative) === 0, "red works only with positives");
        assert2(a.red && a.red === b2.red, "red works only with red numbers");
      };
      Red.prototype.imod = function imod(a) {
        if (this.prime)
          return this.prime.ireduce(a)._forceRed(this);
        return a.umod(this.m)._forceRed(this);
      };
      Red.prototype.neg = function neg3(a) {
        if (a.isZero()) {
          return a.clone();
        }
        return this.m.sub(a)._forceRed(this);
      };
      Red.prototype.add = function add3(a, b2) {
        this._verify2(a, b2);
        var res = a.add(b2);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res._forceRed(this);
      };
      Red.prototype.iadd = function iadd(a, b2) {
        this._verify2(a, b2);
        var res = a.iadd(b2);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res;
      };
      Red.prototype.sub = function sub(a, b2) {
        this._verify2(a, b2);
        var res = a.sub(b2);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Red.prototype.isub = function isub(a, b2) {
        this._verify2(a, b2);
        var res = a.isub(b2);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res;
      };
      Red.prototype.shl = function shl(a, num) {
        this._verify1(a);
        return this.imod(a.ushln(num));
      };
      Red.prototype.imul = function imul(a, b2) {
        this._verify2(a, b2);
        return this.imod(a.imul(b2));
      };
      Red.prototype.mul = function mul3(a, b2) {
        this._verify2(a, b2);
        return this.imod(a.mul(b2));
      };
      Red.prototype.isqr = function isqr(a) {
        return this.imul(a, a.clone());
      };
      Red.prototype.sqr = function sqr(a) {
        return this.mul(a, a);
      };
      Red.prototype.sqrt = function sqrt(a) {
        if (a.isZero())
          return a.clone();
        var mod3 = this.m.andln(3);
        assert2(mod3 % 2 === 1);
        if (mod3 === 3) {
          var pow = this.m.add(new BN3(1)).iushrn(2);
          return this.pow(a, pow);
        }
        var q3 = this.m.subn(1);
        var s2 = 0;
        while (!q3.isZero() && q3.andln(1) === 0) {
          s2++;
          q3.iushrn(1);
        }
        assert2(!q3.isZero());
        var one = new BN3(1).toRed(this);
        var nOne = one.redNeg();
        var lpow = this.m.subn(1).iushrn(1);
        var z3 = this.m.bitLength();
        z3 = new BN3(2 * z3 * z3).toRed(this);
        while (this.pow(z3, lpow).cmp(nOne) !== 0) {
          z3.redIAdd(nOne);
        }
        var c2 = this.pow(z3, q3);
        var r2 = this.pow(a, q3.addn(1).iushrn(1));
        var t = this.pow(a, q3);
        var m3 = s2;
        while (t.cmp(one) !== 0) {
          var tmp = t;
          for (var i2 = 0; tmp.cmp(one) !== 0; i2++) {
            tmp = tmp.redSqr();
          }
          assert2(i2 < m3);
          var b2 = this.pow(c2, new BN3(1).iushln(m3 - i2 - 1));
          r2 = r2.redMul(b2);
          c2 = b2.redSqr();
          t = t.redMul(c2);
          m3 = i2;
        }
        return r2;
      };
      Red.prototype.invm = function invm(a) {
        var inv = a._invmp(this.m);
        if (inv.negative !== 0) {
          inv.negative = 0;
          return this.imod(inv).redNeg();
        } else {
          return this.imod(inv);
        }
      };
      Red.prototype.pow = function pow(a, num) {
        if (num.isZero())
          return new BN3(1).toRed(this);
        if (num.cmpn(1) === 0)
          return a.clone();
        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN3(1).toRed(this);
        wnd[1] = a;
        for (var i2 = 2; i2 < wnd.length; i2++) {
          wnd[i2] = this.mul(wnd[i2 - 1], a);
        }
        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;
        if (start === 0) {
          start = 26;
        }
        for (i2 = num.length - 1; i2 >= 0; i2--) {
          var word = num.words[i2];
          for (var j3 = start - 1; j3 >= 0; j3--) {
            var bit = word >> j3 & 1;
            if (res !== wnd[0]) {
              res = this.sqr(res);
            }
            if (bit === 0 && current === 0) {
              currentLen = 0;
              continue;
            }
            current <<= 1;
            current |= bit;
            currentLen++;
            if (currentLen !== windowSize && (i2 !== 0 || j3 !== 0))
              continue;
            res = this.mul(res, wnd[current]);
            currentLen = 0;
            current = 0;
          }
          start = 26;
        }
        return res;
      };
      Red.prototype.convertTo = function convertTo(num) {
        var r2 = num.umod(this.m);
        return r2 === num ? r2.clone() : r2;
      };
      Red.prototype.convertFrom = function convertFrom(num) {
        var res = num.clone();
        res.red = null;
        return res;
      };
      BN3.mont = function mont(num) {
        return new Mont(num);
      };
      function Mont(m3) {
        Red.call(this, m3);
        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) {
          this.shift += 26 - this.shift % 26;
        }
        this.r = new BN3(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);
        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
      }
      inherits(Mont, Red);
      Mont.prototype.convertTo = function convertTo(num) {
        return this.imod(num.ushln(this.shift));
      };
      Mont.prototype.convertFrom = function convertFrom(num) {
        var r2 = this.imod(num.mul(this.rinv));
        r2.red = null;
        return r2;
      };
      Mont.prototype.imul = function imul(a, b2) {
        if (a.isZero() || b2.isZero()) {
          a.words[0] = 0;
          a.length = 1;
          return a;
        }
        var t = a.imul(b2);
        var c2 = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u2 = t.isub(c2).iushrn(this.shift);
        var res = u2;
        if (u2.cmp(this.m) >= 0) {
          res = u2.isub(this.m);
        } else if (u2.cmpn(0) < 0) {
          res = u2.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Mont.prototype.mul = function mul3(a, b2) {
        if (a.isZero() || b2.isZero())
          return new BN3(0)._forceRed(this);
        var t = a.mul(b2);
        var c2 = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u2 = t.isub(c2).iushrn(this.shift);
        var res = u2;
        if (u2.cmp(this.m) >= 0) {
          res = u2.isub(this.m);
        } else if (u2.cmpn(0) < 0) {
          res = u2.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Mont.prototype.invm = function invm(a) {
        var res = this.imod(a._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
      };
    })(typeof module === "undefined" || module, exports);
  }
});

// node_modules/@ethersproject/logger/lib.esm/_version.js
var version;
var init_version = __esm({
  "node_modules/@ethersproject/logger/lib.esm/_version.js"() {
    init_define_process();
    version = "logger/5.6.0";
  }
});

// node_modules/@ethersproject/logger/lib.esm/index.js
var lib_exports = {};
__export(lib_exports, {
  ErrorCode: () => ErrorCode,
  LogLevel: () => LogLevel,
  Logger: () => Logger
});
function _checkNormalize() {
  try {
    const missing = [];
    ["NFD", "NFC", "NFKD", "NFKC"].forEach((form) => {
      try {
        if ("test".normalize(form) !== "test") {
          throw new Error("bad normalize");
        }
        ;
      } catch (error) {
        missing.push(form);
      }
    });
    if (missing.length) {
      throw new Error("missing " + missing.join(", "));
    }
    if (String.fromCharCode(233).normalize("NFD") !== String.fromCharCode(101, 769)) {
      throw new Error("broken implementation");
    }
  } catch (error) {
    return error.message;
  }
  return null;
}
var _permanentCensorErrors, _censorErrors, LogLevels, _logLevel, _globalLogger, _normalizeError, LogLevel, ErrorCode, HEX, Logger;
var init_lib = __esm({
  "node_modules/@ethersproject/logger/lib.esm/index.js"() {
    init_define_process();
    init_version();
    "use strict";
    _permanentCensorErrors = false;
    _censorErrors = false;
    LogLevels = { debug: 1, "default": 2, info: 2, warning: 3, error: 4, off: 5 };
    _logLevel = LogLevels["default"];
    _globalLogger = null;
    _normalizeError = _checkNormalize();
    (function(LogLevel2) {
      LogLevel2["DEBUG"] = "DEBUG";
      LogLevel2["INFO"] = "INFO";
      LogLevel2["WARNING"] = "WARNING";
      LogLevel2["ERROR"] = "ERROR";
      LogLevel2["OFF"] = "OFF";
    })(LogLevel || (LogLevel = {}));
    (function(ErrorCode2) {
      ErrorCode2["UNKNOWN_ERROR"] = "UNKNOWN_ERROR";
      ErrorCode2["NOT_IMPLEMENTED"] = "NOT_IMPLEMENTED";
      ErrorCode2["UNSUPPORTED_OPERATION"] = "UNSUPPORTED_OPERATION";
      ErrorCode2["NETWORK_ERROR"] = "NETWORK_ERROR";
      ErrorCode2["SERVER_ERROR"] = "SERVER_ERROR";
      ErrorCode2["TIMEOUT"] = "TIMEOUT";
      ErrorCode2["BUFFER_OVERRUN"] = "BUFFER_OVERRUN";
      ErrorCode2["NUMERIC_FAULT"] = "NUMERIC_FAULT";
      ErrorCode2["MISSING_NEW"] = "MISSING_NEW";
      ErrorCode2["INVALID_ARGUMENT"] = "INVALID_ARGUMENT";
      ErrorCode2["MISSING_ARGUMENT"] = "MISSING_ARGUMENT";
      ErrorCode2["UNEXPECTED_ARGUMENT"] = "UNEXPECTED_ARGUMENT";
      ErrorCode2["CALL_EXCEPTION"] = "CALL_EXCEPTION";
      ErrorCode2["INSUFFICIENT_FUNDS"] = "INSUFFICIENT_FUNDS";
      ErrorCode2["NONCE_EXPIRED"] = "NONCE_EXPIRED";
      ErrorCode2["REPLACEMENT_UNDERPRICED"] = "REPLACEMENT_UNDERPRICED";
      ErrorCode2["UNPREDICTABLE_GAS_LIMIT"] = "UNPREDICTABLE_GAS_LIMIT";
      ErrorCode2["TRANSACTION_REPLACED"] = "TRANSACTION_REPLACED";
    })(ErrorCode || (ErrorCode = {}));
    HEX = "0123456789abcdef";
    Logger = class {
      constructor(version27) {
        Object.defineProperty(this, "version", {
          enumerable: true,
          value: version27,
          writable: false
        });
      }
      _log(logLevel, args) {
        const level = logLevel.toLowerCase();
        if (LogLevels[level] == null) {
          this.throwArgumentError("invalid log level name", "logLevel", logLevel);
        }
        if (_logLevel > LogLevels[level]) {
          return;
        }
        console.log.apply(console, args);
      }
      debug(...args) {
        this._log(Logger.levels.DEBUG, args);
      }
      info(...args) {
        this._log(Logger.levels.INFO, args);
      }
      warn(...args) {
        this._log(Logger.levels.WARNING, args);
      }
      makeError(message, code, params) {
        if (_censorErrors) {
          return this.makeError("censored error", code, {});
        }
        if (!code) {
          code = Logger.errors.UNKNOWN_ERROR;
        }
        if (!params) {
          params = {};
        }
        const messageDetails = [];
        Object.keys(params).forEach((key2) => {
          const value2 = params[key2];
          try {
            if (value2 instanceof Uint8Array) {
              let hex = "";
              for (let i2 = 0; i2 < value2.length; i2++) {
                hex += HEX[value2[i2] >> 4];
                hex += HEX[value2[i2] & 15];
              }
              messageDetails.push(key2 + "=Uint8Array(0x" + hex + ")");
            } else {
              messageDetails.push(key2 + "=" + JSON.stringify(value2));
            }
          } catch (error2) {
            messageDetails.push(key2 + "=" + JSON.stringify(params[key2].toString()));
          }
        });
        messageDetails.push(`code=${code}`);
        messageDetails.push(`version=${this.version}`);
        const reason = message;
        let url = "";
        switch (code) {
          case ErrorCode.NUMERIC_FAULT: {
            url = "NUMERIC_FAULT";
            const fault = message;
            switch (fault) {
              case "overflow":
              case "underflow":
              case "division-by-zero":
                url += "-" + fault;
                break;
              case "negative-power":
              case "negative-width":
                url += "-unsupported";
                break;
              case "unbound-bitwise-result":
                url += "-unbound-result";
                break;
            }
            break;
          }
          case ErrorCode.CALL_EXCEPTION:
          case ErrorCode.INSUFFICIENT_FUNDS:
          case ErrorCode.MISSING_NEW:
          case ErrorCode.NONCE_EXPIRED:
          case ErrorCode.REPLACEMENT_UNDERPRICED:
          case ErrorCode.TRANSACTION_REPLACED:
          case ErrorCode.UNPREDICTABLE_GAS_LIMIT:
            url = code;
            break;
        }
        if (url) {
          message += " [ See: https://links.ethers.org/v5-errors-" + url + " ]";
        }
        if (messageDetails.length) {
          message += " (" + messageDetails.join(", ") + ")";
        }
        const error = new Error(message);
        error.reason = reason;
        error.code = code;
        Object.keys(params).forEach(function(key2) {
          error[key2] = params[key2];
        });
        return error;
      }
      throwError(message, code, params) {
        throw this.makeError(message, code, params);
      }
      throwArgumentError(message, name2, value2) {
        return this.throwError(message, Logger.errors.INVALID_ARGUMENT, {
          argument: name2,
          value: value2
        });
      }
      assert(condition, message, code, params) {
        if (!!condition) {
          return;
        }
        this.throwError(message, code, params);
      }
      assertArgument(condition, message, name2, value2) {
        if (!!condition) {
          return;
        }
        this.throwArgumentError(message, name2, value2);
      }
      checkNormalize(message) {
        if (message == null) {
          message = "platform missing String.prototype.normalize";
        }
        if (_normalizeError) {
          this.throwError("platform missing String.prototype.normalize", Logger.errors.UNSUPPORTED_OPERATION, {
            operation: "String.prototype.normalize",
            form: _normalizeError
          });
        }
      }
      checkSafeUint53(value2, message) {
        if (typeof value2 !== "number") {
          return;
        }
        if (message == null) {
          message = "value not safe";
        }
        if (value2 < 0 || value2 >= 9007199254740991) {
          this.throwError(message, Logger.errors.NUMERIC_FAULT, {
            operation: "checkSafeInteger",
            fault: "out-of-safe-range",
            value: value2
          });
        }
        if (value2 % 1) {
          this.throwError(message, Logger.errors.NUMERIC_FAULT, {
            operation: "checkSafeInteger",
            fault: "non-integer",
            value: value2
          });
        }
      }
      checkArgumentCount(count, expectedCount, message) {
        if (message) {
          message = ": " + message;
        } else {
          message = "";
        }
        if (count < expectedCount) {
          this.throwError("missing argument" + message, Logger.errors.MISSING_ARGUMENT, {
            count,
            expectedCount
          });
        }
        if (count > expectedCount) {
          this.throwError("too many arguments" + message, Logger.errors.UNEXPECTED_ARGUMENT, {
            count,
            expectedCount
          });
        }
      }
      checkNew(target, kind) {
        if (target === Object || target == null) {
          this.throwError("missing new", Logger.errors.MISSING_NEW, { name: kind.name });
        }
      }
      checkAbstract(target, kind) {
        if (target === kind) {
          this.throwError("cannot instantiate abstract class " + JSON.stringify(kind.name) + " directly; use a sub-class", Logger.errors.UNSUPPORTED_OPERATION, { name: target.name, operation: "new" });
        } else if (target === Object || target == null) {
          this.throwError("missing new", Logger.errors.MISSING_NEW, { name: kind.name });
        }
      }
      static globalLogger() {
        if (!_globalLogger) {
          _globalLogger = new Logger(version);
        }
        return _globalLogger;
      }
      static setCensorship(censorship, permanent) {
        if (!censorship && permanent) {
          this.globalLogger().throwError("cannot permanently disable censorship", Logger.errors.UNSUPPORTED_OPERATION, {
            operation: "setCensorship"
          });
        }
        if (_permanentCensorErrors) {
          if (!censorship) {
            return;
          }
          this.globalLogger().throwError("error censorship permanent", Logger.errors.UNSUPPORTED_OPERATION, {
            operation: "setCensorship"
          });
        }
        _censorErrors = !!censorship;
        _permanentCensorErrors = !!permanent;
      }
      static setLogLevel(logLevel) {
        const level = LogLevels[logLevel.toLowerCase()];
        if (level == null) {
          Logger.globalLogger().warn("invalid log level - " + logLevel);
          return;
        }
        _logLevel = level;
      }
      static from(version27) {
        return new Logger(version27);
      }
    };
    Logger.errors = ErrorCode;
    Logger.levels = LogLevel;
  }
});

// node_modules/@ethersproject/bytes/lib.esm/_version.js
var version2;
var init_version2 = __esm({
  "node_modules/@ethersproject/bytes/lib.esm/_version.js"() {
    init_define_process();
    version2 = "bytes/5.6.1";
  }
});

// node_modules/@ethersproject/bytes/lib.esm/index.js
var lib_exports2 = {};
__export(lib_exports2, {
  arrayify: () => arrayify,
  concat: () => concat,
  hexConcat: () => hexConcat,
  hexDataLength: () => hexDataLength,
  hexDataSlice: () => hexDataSlice,
  hexStripZeros: () => hexStripZeros,
  hexValue: () => hexValue,
  hexZeroPad: () => hexZeroPad,
  hexlify: () => hexlify,
  isBytes: () => isBytes,
  isBytesLike: () => isBytesLike,
  isHexString: () => isHexString,
  joinSignature: () => joinSignature,
  splitSignature: () => splitSignature,
  stripZeros: () => stripZeros,
  zeroPad: () => zeroPad
});
function isHexable(value2) {
  return !!value2.toHexString;
}
function addSlice(array) {
  if (array.slice) {
    return array;
  }
  array.slice = function() {
    const args = Array.prototype.slice.call(arguments);
    return addSlice(new Uint8Array(Array.prototype.slice.apply(array, args)));
  };
  return array;
}
function isBytesLike(value2) {
  return isHexString(value2) && !(value2.length % 2) || isBytes(value2);
}
function isInteger(value2) {
  return typeof value2 === "number" && value2 == value2 && value2 % 1 === 0;
}
function isBytes(value2) {
  if (value2 == null) {
    return false;
  }
  if (value2.constructor === Uint8Array) {
    return true;
  }
  if (typeof value2 === "string") {
    return false;
  }
  if (!isInteger(value2.length) || value2.length < 0) {
    return false;
  }
  for (let i2 = 0; i2 < value2.length; i2++) {
    const v7 = value2[i2];
    if (!isInteger(v7) || v7 < 0 || v7 >= 256) {
      return false;
    }
  }
  return true;
}
function arrayify(value2, options) {
  if (!options) {
    options = {};
  }
  if (typeof value2 === "number") {
    logger.checkSafeUint53(value2, "invalid arrayify value");
    const result = [];
    while (value2) {
      result.unshift(value2 & 255);
      value2 = parseInt(String(value2 / 256));
    }
    if (result.length === 0) {
      result.push(0);
    }
    return addSlice(new Uint8Array(result));
  }
  if (options.allowMissingPrefix && typeof value2 === "string" && value2.substring(0, 2) !== "0x") {
    value2 = "0x" + value2;
  }
  if (isHexable(value2)) {
    value2 = value2.toHexString();
  }
  if (isHexString(value2)) {
    let hex = value2.substring(2);
    if (hex.length % 2) {
      if (options.hexPad === "left") {
        hex = "0" + hex;
      } else if (options.hexPad === "right") {
        hex += "0";
      } else {
        logger.throwArgumentError("hex data is odd-length", "value", value2);
      }
    }
    const result = [];
    for (let i2 = 0; i2 < hex.length; i2 += 2) {
      result.push(parseInt(hex.substring(i2, i2 + 2), 16));
    }
    return addSlice(new Uint8Array(result));
  }
  if (isBytes(value2)) {
    return addSlice(new Uint8Array(value2));
  }
  return logger.throwArgumentError("invalid arrayify value", "value", value2);
}
function concat(items) {
  const objects = items.map((item) => arrayify(item));
  const length = objects.reduce((accum, item) => accum + item.length, 0);
  const result = new Uint8Array(length);
  objects.reduce((offset, object) => {
    result.set(object, offset);
    return offset + object.length;
  }, 0);
  return addSlice(result);
}
function stripZeros(value2) {
  let result = arrayify(value2);
  if (result.length === 0) {
    return result;
  }
  let start = 0;
  while (start < result.length && result[start] === 0) {
    start++;
  }
  if (start) {
    result = result.slice(start);
  }
  return result;
}
function zeroPad(value2, length) {
  value2 = arrayify(value2);
  if (value2.length > length) {
    logger.throwArgumentError("value out of range", "value", arguments[0]);
  }
  const result = new Uint8Array(length);
  result.set(value2, length - value2.length);
  return addSlice(result);
}
function isHexString(value2, length) {
  if (typeof value2 !== "string" || !value2.match(/^0x[0-9A-Fa-f]*$/)) {
    return false;
  }
  if (length && value2.length !== 2 + 2 * length) {
    return false;
  }
  return true;
}
function hexlify(value2, options) {
  if (!options) {
    options = {};
  }
  if (typeof value2 === "number") {
    logger.checkSafeUint53(value2, "invalid hexlify value");
    let hex = "";
    while (value2) {
      hex = HexCharacters[value2 & 15] + hex;
      value2 = Math.floor(value2 / 16);
    }
    if (hex.length) {
      if (hex.length % 2) {
        hex = "0" + hex;
      }
      return "0x" + hex;
    }
    return "0x00";
  }
  if (typeof value2 === "bigint") {
    value2 = value2.toString(16);
    if (value2.length % 2) {
      return "0x0" + value2;
    }
    return "0x" + value2;
  }
  if (options.allowMissingPrefix && typeof value2 === "string" && value2.substring(0, 2) !== "0x") {
    value2 = "0x" + value2;
  }
  if (isHexable(value2)) {
    return value2.toHexString();
  }
  if (isHexString(value2)) {
    if (value2.length % 2) {
      if (options.hexPad === "left") {
        value2 = "0x0" + value2.substring(2);
      } else if (options.hexPad === "right") {
        value2 += "0";
      } else {
        logger.throwArgumentError("hex data is odd-length", "value", value2);
      }
    }
    return value2.toLowerCase();
  }
  if (isBytes(value2)) {
    let result = "0x";
    for (let i2 = 0; i2 < value2.length; i2++) {
      let v7 = value2[i2];
      result += HexCharacters[(v7 & 240) >> 4] + HexCharacters[v7 & 15];
    }
    return result;
  }
  return logger.throwArgumentError("invalid hexlify value", "value", value2);
}
function hexDataLength(data) {
  if (typeof data !== "string") {
    data = hexlify(data);
  } else if (!isHexString(data) || data.length % 2) {
    return null;
  }
  return (data.length - 2) / 2;
}
function hexDataSlice(data, offset, endOffset) {
  if (typeof data !== "string") {
    data = hexlify(data);
  } else if (!isHexString(data) || data.length % 2) {
    logger.throwArgumentError("invalid hexData", "value", data);
  }
  offset = 2 + 2 * offset;
  if (endOffset != null) {
    return "0x" + data.substring(offset, 2 + 2 * endOffset);
  }
  return "0x" + data.substring(offset);
}
function hexConcat(items) {
  let result = "0x";
  items.forEach((item) => {
    result += hexlify(item).substring(2);
  });
  return result;
}
function hexValue(value2) {
  const trimmed = hexStripZeros(hexlify(value2, { hexPad: "left" }));
  if (trimmed === "0x") {
    return "0x0";
  }
  return trimmed;
}
function hexStripZeros(value2) {
  if (typeof value2 !== "string") {
    value2 = hexlify(value2);
  }
  if (!isHexString(value2)) {
    logger.throwArgumentError("invalid hex string", "value", value2);
  }
  value2 = value2.substring(2);
  let offset = 0;
  while (offset < value2.length && value2[offset] === "0") {
    offset++;
  }
  return "0x" + value2.substring(offset);
}
function hexZeroPad(value2, length) {
  if (typeof value2 !== "string") {
    value2 = hexlify(value2);
  } else if (!isHexString(value2)) {
    logger.throwArgumentError("invalid hex string", "value", value2);
  }
  if (value2.length > 2 * length + 2) {
    logger.throwArgumentError("value out of range", "value", arguments[1]);
  }
  while (value2.length < 2 * length + 2) {
    value2 = "0x0" + value2.substring(2);
  }
  return value2;
}
function splitSignature(signature2) {
  const result = {
    r: "0x",
    s: "0x",
    _vs: "0x",
    recoveryParam: 0,
    v: 0,
    yParityAndS: "0x",
    compact: "0x"
  };
  if (isBytesLike(signature2)) {
    let bytes = arrayify(signature2);
    if (bytes.length === 64) {
      result.v = 27 + (bytes[32] >> 7);
      bytes[32] &= 127;
      result.r = hexlify(bytes.slice(0, 32));
      result.s = hexlify(bytes.slice(32, 64));
    } else if (bytes.length === 65) {
      result.r = hexlify(bytes.slice(0, 32));
      result.s = hexlify(bytes.slice(32, 64));
      result.v = bytes[64];
    } else {
      logger.throwArgumentError("invalid signature string", "signature", signature2);
    }
    if (result.v < 27) {
      if (result.v === 0 || result.v === 1) {
        result.v += 27;
      } else {
        logger.throwArgumentError("signature invalid v byte", "signature", signature2);
      }
    }
    result.recoveryParam = 1 - result.v % 2;
    if (result.recoveryParam) {
      bytes[32] |= 128;
    }
    result._vs = hexlify(bytes.slice(32, 64));
  } else {
    result.r = signature2.r;
    result.s = signature2.s;
    result.v = signature2.v;
    result.recoveryParam = signature2.recoveryParam;
    result._vs = signature2._vs;
    if (result._vs != null) {
      const vs3 = zeroPad(arrayify(result._vs), 32);
      result._vs = hexlify(vs3);
      const recoveryParam = vs3[0] >= 128 ? 1 : 0;
      if (result.recoveryParam == null) {
        result.recoveryParam = recoveryParam;
      } else if (result.recoveryParam !== recoveryParam) {
        logger.throwArgumentError("signature recoveryParam mismatch _vs", "signature", signature2);
      }
      vs3[0] &= 127;
      const s2 = hexlify(vs3);
      if (result.s == null) {
        result.s = s2;
      } else if (result.s !== s2) {
        logger.throwArgumentError("signature v mismatch _vs", "signature", signature2);
      }
    }
    if (result.recoveryParam == null) {
      if (result.v == null) {
        logger.throwArgumentError("signature missing v and recoveryParam", "signature", signature2);
      } else if (result.v === 0 || result.v === 1) {
        result.recoveryParam = result.v;
      } else {
        result.recoveryParam = 1 - result.v % 2;
      }
    } else {
      if (result.v == null) {
        result.v = 27 + result.recoveryParam;
      } else {
        const recId = result.v === 0 || result.v === 1 ? result.v : 1 - result.v % 2;
        if (result.recoveryParam !== recId) {
          logger.throwArgumentError("signature recoveryParam mismatch v", "signature", signature2);
        }
      }
    }
    if (result.r == null || !isHexString(result.r)) {
      logger.throwArgumentError("signature missing or invalid r", "signature", signature2);
    } else {
      result.r = hexZeroPad(result.r, 32);
    }
    if (result.s == null || !isHexString(result.s)) {
      logger.throwArgumentError("signature missing or invalid s", "signature", signature2);
    } else {
      result.s = hexZeroPad(result.s, 32);
    }
    const vs2 = arrayify(result.s);
    if (vs2[0] >= 128) {
      logger.throwArgumentError("signature s out of range", "signature", signature2);
    }
    if (result.recoveryParam) {
      vs2[0] |= 128;
    }
    const _vs = hexlify(vs2);
    if (result._vs) {
      if (!isHexString(result._vs)) {
        logger.throwArgumentError("signature invalid _vs", "signature", signature2);
      }
      result._vs = hexZeroPad(result._vs, 32);
    }
    if (result._vs == null) {
      result._vs = _vs;
    } else if (result._vs !== _vs) {
      logger.throwArgumentError("signature _vs mismatch v and s", "signature", signature2);
    }
  }
  result.yParityAndS = result._vs;
  result.compact = result.r + result.yParityAndS.substring(2);
  return result;
}
function joinSignature(signature2) {
  signature2 = splitSignature(signature2);
  return hexlify(concat([
    signature2.r,
    signature2.s,
    signature2.recoveryParam ? "0x1c" : "0x1b"
  ]));
}
var logger, HexCharacters;
var init_lib2 = __esm({
  "node_modules/@ethersproject/bytes/lib.esm/index.js"() {
    init_define_process();
    init_lib();
    init_version2();
    "use strict";
    logger = new Logger(version2);
    HexCharacters = "0123456789abcdef";
  }
});

// node_modules/@ethersproject/bignumber/lib.esm/_version.js
var version3;
var init_version3 = __esm({
  "node_modules/@ethersproject/bignumber/lib.esm/_version.js"() {
    init_define_process();
    version3 = "bignumber/5.6.0";
  }
});

// node_modules/@ethersproject/bignumber/lib.esm/bignumber.js
function isBigNumberish(value2) {
  return value2 != null && (BigNumber.isBigNumber(value2) || typeof value2 === "number" && value2 % 1 === 0 || typeof value2 === "string" && !!value2.match(/^-?[0-9]+$/) || isHexString(value2) || typeof value2 === "bigint" || isBytes(value2));
}
function toHex(value2) {
  if (typeof value2 !== "string") {
    return toHex(value2.toString(16));
  }
  if (value2[0] === "-") {
    value2 = value2.substring(1);
    if (value2[0] === "-") {
      logger2.throwArgumentError("invalid hex", "value", value2);
    }
    value2 = toHex(value2);
    if (value2 === "0x00") {
      return value2;
    }
    return "-" + value2;
  }
  if (value2.substring(0, 2) !== "0x") {
    value2 = "0x" + value2;
  }
  if (value2 === "0x") {
    return "0x00";
  }
  if (value2.length % 2) {
    value2 = "0x0" + value2.substring(2);
  }
  while (value2.length > 4 && value2.substring(0, 4) === "0x00") {
    value2 = "0x" + value2.substring(4);
  }
  return value2;
}
function toBigNumber(value2) {
  return BigNumber.from(toHex(value2));
}
function toBN(value2) {
  const hex = BigNumber.from(value2).toHexString();
  if (hex[0] === "-") {
    return new BN("-" + hex.substring(3), 16);
  }
  return new BN(hex.substring(2), 16);
}
function throwFault(fault, operation, value2) {
  const params = { fault, operation };
  if (value2 != null) {
    params.value = value2;
  }
  return logger2.throwError(fault, Logger.errors.NUMERIC_FAULT, params);
}
function _base36To16(value2) {
  return new BN(value2, 36).toString(16);
}
function _base16To36(value2) {
  return new BN(value2, 16).toString(36);
}
var import_bn, BN, logger2, _constructorGuard, MAX_SAFE, _warnedToStringRadix, BigNumber;
var init_bignumber = __esm({
  "node_modules/@ethersproject/bignumber/lib.esm/bignumber.js"() {
    init_define_process();
    import_bn = __toModule(require_bn());
    init_lib2();
    init_lib();
    init_version3();
    "use strict";
    BN = import_bn.default.BN;
    logger2 = new Logger(version3);
    _constructorGuard = {};
    MAX_SAFE = 9007199254740991;
    _warnedToStringRadix = false;
    BigNumber = class {
      constructor(constructorGuard, hex) {
        logger2.checkNew(new.target, BigNumber);
        if (constructorGuard !== _constructorGuard) {
          logger2.throwError("cannot call constructor directly; use BigNumber.from", Logger.errors.UNSUPPORTED_OPERATION, {
            operation: "new (BigNumber)"
          });
        }
        this._hex = hex;
        this._isBigNumber = true;
        Object.freeze(this);
      }
      fromTwos(value2) {
        return toBigNumber(toBN(this).fromTwos(value2));
      }
      toTwos(value2) {
        return toBigNumber(toBN(this).toTwos(value2));
      }
      abs() {
        if (this._hex[0] === "-") {
          return BigNumber.from(this._hex.substring(1));
        }
        return this;
      }
      add(other) {
        return toBigNumber(toBN(this).add(toBN(other)));
      }
      sub(other) {
        return toBigNumber(toBN(this).sub(toBN(other)));
      }
      div(other) {
        const o2 = BigNumber.from(other);
        if (o2.isZero()) {
          throwFault("division-by-zero", "div");
        }
        return toBigNumber(toBN(this).div(toBN(other)));
      }
      mul(other) {
        return toBigNumber(toBN(this).mul(toBN(other)));
      }
      mod(other) {
        const value2 = toBN(other);
        if (value2.isNeg()) {
          throwFault("division-by-zero", "mod");
        }
        return toBigNumber(toBN(this).umod(value2));
      }
      pow(other) {
        const value2 = toBN(other);
        if (value2.isNeg()) {
          throwFault("negative-power", "pow");
        }
        return toBigNumber(toBN(this).pow(value2));
      }
      and(other) {
        const value2 = toBN(other);
        if (this.isNegative() || value2.isNeg()) {
          throwFault("unbound-bitwise-result", "and");
        }
        return toBigNumber(toBN(this).and(value2));
      }
      or(other) {
        const value2 = toBN(other);
        if (this.isNegative() || value2.isNeg()) {
          throwFault("unbound-bitwise-result", "or");
        }
        return toBigNumber(toBN(this).or(value2));
      }
      xor(other) {
        const value2 = toBN(other);
        if (this.isNegative() || value2.isNeg()) {
          throwFault("unbound-bitwise-result", "xor");
        }
        return toBigNumber(toBN(this).xor(value2));
      }
      mask(value2) {
        if (this.isNegative() || value2 < 0) {
          throwFault("negative-width", "mask");
        }
        return toBigNumber(toBN(this).maskn(value2));
      }
      shl(value2) {
        if (this.isNegative() || value2 < 0) {
          throwFault("negative-width", "shl");
        }
        return toBigNumber(toBN(this).shln(value2));
      }
      shr(value2) {
        if (this.isNegative() || value2 < 0) {
          throwFault("negative-width", "shr");
        }
        return toBigNumber(toBN(this).shrn(value2));
      }
      eq(other) {
        return toBN(this).eq(toBN(other));
      }
      lt(other) {
        return toBN(this).lt(toBN(other));
      }
      lte(other) {
        return toBN(this).lte(toBN(other));
      }
      gt(other) {
        return toBN(this).gt(toBN(other));
      }
      gte(other) {
        return toBN(this).gte(toBN(other));
      }
      isNegative() {
        return this._hex[0] === "-";
      }
      isZero() {
        return toBN(this).isZero();
      }
      toNumber() {
        try {
          return toBN(this).toNumber();
        } catch (error) {
          throwFault("overflow", "toNumber", this.toString());
        }
        return null;
      }
      toBigInt() {
        try {
          return BigInt(this.toString());
        } catch (e) {
        }
        return logger2.throwError("this platform does not support BigInt", Logger.errors.UNSUPPORTED_OPERATION, {
          value: this.toString()
        });
      }
      toString() {
        if (arguments.length > 0) {
          if (arguments[0] === 10) {
            if (!_warnedToStringRadix) {
              _warnedToStringRadix = true;
              logger2.warn("BigNumber.toString does not accept any parameters; base-10 is assumed");
            }
          } else if (arguments[0] === 16) {
            logger2.throwError("BigNumber.toString does not accept any parameters; use bigNumber.toHexString()", Logger.errors.UNEXPECTED_ARGUMENT, {});
          } else {
            logger2.throwError("BigNumber.toString does not accept parameters", Logger.errors.UNEXPECTED_ARGUMENT, {});
          }
        }
        return toBN(this).toString(10);
      }
      toHexString() {
        return this._hex;
      }
      toJSON(key2) {
        return { type: "BigNumber", hex: this.toHexString() };
      }
      static from(value2) {
        if (value2 instanceof BigNumber) {
          return value2;
        }
        if (typeof value2 === "string") {
          if (value2.match(/^-?0x[0-9a-f]+$/i)) {
            return new BigNumber(_constructorGuard, toHex(value2));
          }
          if (value2.match(/^-?[0-9]+$/)) {
            return new BigNumber(_constructorGuard, toHex(new BN(value2)));
          }
          return logger2.throwArgumentError("invalid BigNumber string", "value", value2);
        }
        if (typeof value2 === "number") {
          if (value2 % 1) {
            throwFault("underflow", "BigNumber.from", value2);
          }
          if (value2 >= MAX_SAFE || value2 <= -MAX_SAFE) {
            throwFault("overflow", "BigNumber.from", value2);
          }
          return BigNumber.from(String(value2));
        }
        const anyValue = value2;
        if (typeof anyValue === "bigint") {
          return BigNumber.from(anyValue.toString());
        }
        if (isBytes(anyValue)) {
          return BigNumber.from(hexlify(anyValue));
        }
        if (anyValue) {
          if (anyValue.toHexString) {
            const hex = anyValue.toHexString();
            if (typeof hex === "string") {
              return BigNumber.from(hex);
            }
          } else {
            let hex = anyValue._hex;
            if (hex == null && anyValue.type === "BigNumber") {
              hex = anyValue.hex;
            }
            if (typeof hex === "string") {
              if (isHexString(hex) || hex[0] === "-" && isHexString(hex.substring(1))) {
                return BigNumber.from(hex);
              }
            }
          }
        }
        return logger2.throwArgumentError("invalid BigNumber value", "value", value2);
      }
      static isBigNumber(value2) {
        return !!(value2 && value2._isBigNumber);
      }
    };
  }
});

// node_modules/@ethersproject/bignumber/lib.esm/fixednumber.js
function throwFault2(message, fault, operation, value2) {
  const params = { fault, operation };
  if (value2 !== void 0) {
    params.value = value2;
  }
  return logger3.throwError(message, Logger.errors.NUMERIC_FAULT, params);
}
function getMultiplier(decimals) {
  if (typeof decimals !== "number") {
    try {
      decimals = BigNumber.from(decimals).toNumber();
    } catch (e) {
    }
  }
  if (typeof decimals === "number" && decimals >= 0 && decimals <= 256 && !(decimals % 1)) {
    return "1" + zeros.substring(0, decimals);
  }
  return logger3.throwArgumentError("invalid decimal size", "decimals", decimals);
}
function formatFixed(value2, decimals) {
  if (decimals == null) {
    decimals = 0;
  }
  const multiplier = getMultiplier(decimals);
  value2 = BigNumber.from(value2);
  const negative = value2.lt(Zero);
  if (negative) {
    value2 = value2.mul(NegativeOne);
  }
  let fraction = value2.mod(multiplier).toString();
  while (fraction.length < multiplier.length - 1) {
    fraction = "0" + fraction;
  }
  fraction = fraction.match(/^([0-9]*[1-9]|0)(0*)/)[1];
  const whole = value2.div(multiplier).toString();
  if (multiplier.length === 1) {
    value2 = whole;
  } else {
    value2 = whole + "." + fraction;
  }
  if (negative) {
    value2 = "-" + value2;
  }
  return value2;
}
function parseFixed(value2, decimals) {
  if (decimals == null) {
    decimals = 0;
  }
  const multiplier = getMultiplier(decimals);
  if (typeof value2 !== "string" || !value2.match(/^-?[0-9.]+$/)) {
    logger3.throwArgumentError("invalid decimal value", "value", value2);
  }
  const negative = value2.substring(0, 1) === "-";
  if (negative) {
    value2 = value2.substring(1);
  }
  if (value2 === ".") {
    logger3.throwArgumentError("missing value", "value", value2);
  }
  const comps = value2.split(".");
  if (comps.length > 2) {
    logger3.throwArgumentError("too many decimal points", "value", value2);
  }
  let whole = comps[0], fraction = comps[1];
  if (!whole) {
    whole = "0";
  }
  if (!fraction) {
    fraction = "0";
  }
  while (fraction[fraction.length - 1] === "0") {
    fraction = fraction.substring(0, fraction.length - 1);
  }
  if (fraction.length > multiplier.length - 1) {
    throwFault2("fractional component exceeds decimals", "underflow", "parseFixed");
  }
  if (fraction === "") {
    fraction = "0";
  }
  while (fraction.length < multiplier.length - 1) {
    fraction += "0";
  }
  const wholeValue = BigNumber.from(whole);
  const fractionValue = BigNumber.from(fraction);
  let wei = wholeValue.mul(multiplier).add(fractionValue);
  if (negative) {
    wei = wei.mul(NegativeOne);
  }
  return wei;
}
var logger3, _constructorGuard2, Zero, NegativeOne, zeros, FixedFormat, FixedNumber, ONE, BUMP;
var init_fixednumber = __esm({
  "node_modules/@ethersproject/bignumber/lib.esm/fixednumber.js"() {
    init_define_process();
    init_lib2();
    init_lib();
    init_version3();
    init_bignumber();
    "use strict";
    logger3 = new Logger(version3);
    _constructorGuard2 = {};
    Zero = BigNumber.from(0);
    NegativeOne = BigNumber.from(-1);
    zeros = "0";
    while (zeros.length < 256) {
      zeros += zeros;
    }
    FixedFormat = class {
      constructor(constructorGuard, signed, width, decimals) {
        if (constructorGuard !== _constructorGuard2) {
          logger3.throwError("cannot use FixedFormat constructor; use FixedFormat.from", Logger.errors.UNSUPPORTED_OPERATION, {
            operation: "new FixedFormat"
          });
        }
        this.signed = signed;
        this.width = width;
        this.decimals = decimals;
        this.name = (signed ? "" : "u") + "fixed" + String(width) + "x" + String(decimals);
        this._multiplier = getMultiplier(decimals);
        Object.freeze(this);
      }
      static from(value2) {
        if (value2 instanceof FixedFormat) {
          return value2;
        }
        if (typeof value2 === "number") {
          value2 = `fixed128x${value2}`;
        }
        let signed = true;
        let width = 128;
        let decimals = 18;
        if (typeof value2 === "string") {
          if (value2 === "fixed") {
          } else if (value2 === "ufixed") {
            signed = false;
          } else {
            const match = value2.match(/^(u?)fixed([0-9]+)x([0-9]+)$/);
            if (!match) {
              logger3.throwArgumentError("invalid fixed format", "format", value2);
            }
            signed = match[1] !== "u";
            width = parseInt(match[2]);
            decimals = parseInt(match[3]);
          }
        } else if (value2) {
          const check = (key2, type, defaultValue) => {
            if (value2[key2] == null) {
              return defaultValue;
            }
            if (typeof value2[key2] !== type) {
              logger3.throwArgumentError("invalid fixed format (" + key2 + " not " + type + ")", "format." + key2, value2[key2]);
            }
            return value2[key2];
          };
          signed = check("signed", "boolean", signed);
          width = check("width", "number", width);
          decimals = check("decimals", "number", decimals);
        }
        if (width % 8) {
          logger3.throwArgumentError("invalid fixed format width (not byte aligned)", "format.width", width);
        }
        if (decimals > 80) {
          logger3.throwArgumentError("invalid fixed format (decimals too large)", "format.decimals", decimals);
        }
        return new FixedFormat(_constructorGuard2, signed, width, decimals);
      }
    };
    FixedNumber = class {
      constructor(constructorGuard, hex, value2, format) {
        logger3.checkNew(new.target, FixedNumber);
        if (constructorGuard !== _constructorGuard2) {
          logger3.throwError("cannot use FixedNumber constructor; use FixedNumber.from", Logger.errors.UNSUPPORTED_OPERATION, {
            operation: "new FixedFormat"
          });
        }
        this.format = format;
        this._hex = hex;
        this._value = value2;
        this._isFixedNumber = true;
        Object.freeze(this);
      }
      _checkFormat(other) {
        if (this.format.name !== other.format.name) {
          logger3.throwArgumentError("incompatible format; use fixedNumber.toFormat", "other", other);
        }
      }
      addUnsafe(other) {
        this._checkFormat(other);
        const a = parseFixed(this._value, this.format.decimals);
        const b2 = parseFixed(other._value, other.format.decimals);
        return FixedNumber.fromValue(a.add(b2), this.format.decimals, this.format);
      }
      subUnsafe(other) {
        this._checkFormat(other);
        const a = parseFixed(this._value, this.format.decimals);
        const b2 = parseFixed(other._value, other.format.decimals);
        return FixedNumber.fromValue(a.sub(b2), this.format.decimals, this.format);
      }
      mulUnsafe(other) {
        this._checkFormat(other);
        const a = parseFixed(this._value, this.format.decimals);
        const b2 = parseFixed(other._value, other.format.decimals);
        return FixedNumber.fromValue(a.mul(b2).div(this.format._multiplier), this.format.decimals, this.format);
      }
      divUnsafe(other) {
        this._checkFormat(other);
        const a = parseFixed(this._value, this.format.decimals);
        const b2 = parseFixed(other._value, other.format.decimals);
        return FixedNumber.fromValue(a.mul(this.format._multiplier).div(b2), this.format.decimals, this.format);
      }
      floor() {
        const comps = this.toString().split(".");
        if (comps.length === 1) {
          comps.push("0");
        }
        let result = FixedNumber.from(comps[0], this.format);
        const hasFraction = !comps[1].match(/^(0*)$/);
        if (this.isNegative() && hasFraction) {
          result = result.subUnsafe(ONE.toFormat(result.format));
        }
        return result;
      }
      ceiling() {
        const comps = this.toString().split(".");
        if (comps.length === 1) {
          comps.push("0");
        }
        let result = FixedNumber.from(comps[0], this.format);
        const hasFraction = !comps[1].match(/^(0*)$/);
        if (!this.isNegative() && hasFraction) {
          result = result.addUnsafe(ONE.toFormat(result.format));
        }
        return result;
      }
      round(decimals) {
        if (decimals == null) {
          decimals = 0;
        }
        const comps = this.toString().split(".");
        if (comps.length === 1) {
          comps.push("0");
        }
        if (decimals < 0 || decimals > 80 || decimals % 1) {
          logger3.throwArgumentError("invalid decimal count", "decimals", decimals);
        }
        if (comps[1].length <= decimals) {
          return this;
        }
        const factor = FixedNumber.from("1" + zeros.substring(0, decimals), this.format);
        const bump = BUMP.toFormat(this.format);
        return this.mulUnsafe(factor).addUnsafe(bump).floor().divUnsafe(factor);
      }
      isZero() {
        return this._value === "0.0" || this._value === "0";
      }
      isNegative() {
        return this._value[0] === "-";
      }
      toString() {
        return this._value;
      }
      toHexString(width) {
        if (width == null) {
          return this._hex;
        }
        if (width % 8) {
          logger3.throwArgumentError("invalid byte width", "width", width);
        }
        const hex = BigNumber.from(this._hex).fromTwos(this.format.width).toTwos(width).toHexString();
        return hexZeroPad(hex, width / 8);
      }
      toUnsafeFloat() {
        return parseFloat(this.toString());
      }
      toFormat(format) {
        return FixedNumber.fromString(this._value, format);
      }
      static fromValue(value2, decimals, format) {
        if (format == null && decimals != null && !isBigNumberish(decimals)) {
          format = decimals;
          decimals = null;
        }
        if (decimals == null) {
          decimals = 0;
        }
        if (format == null) {
          format = "fixed";
        }
        return FixedNumber.fromString(formatFixed(value2, decimals), FixedFormat.from(format));
      }
      static fromString(value2, format) {
        if (format == null) {
          format = "fixed";
        }
        const fixedFormat = FixedFormat.from(format);
        const numeric = parseFixed(value2, fixedFormat.decimals);
        if (!fixedFormat.signed && numeric.lt(Zero)) {
          throwFault2("unsigned value cannot be negative", "overflow", "value", value2);
        }
        let hex = null;
        if (fixedFormat.signed) {
          hex = numeric.toTwos(fixedFormat.width).toHexString();
        } else {
          hex = numeric.toHexString();
          hex = hexZeroPad(hex, fixedFormat.width / 8);
        }
        const decimal = formatFixed(numeric, fixedFormat.decimals);
        return new FixedNumber(_constructorGuard2, hex, decimal, fixedFormat);
      }
      static fromBytes(value2, format) {
        if (format == null) {
          format = "fixed";
        }
        const fixedFormat = FixedFormat.from(format);
        if (arrayify(value2).length > fixedFormat.width / 8) {
          throw new Error("overflow");
        }
        let numeric = BigNumber.from(value2);
        if (fixedFormat.signed) {
          numeric = numeric.fromTwos(fixedFormat.width);
        }
        const hex = numeric.toTwos((fixedFormat.signed ? 0 : 1) + fixedFormat.width).toHexString();
        const decimal = formatFixed(numeric, fixedFormat.decimals);
        return new FixedNumber(_constructorGuard2, hex, decimal, fixedFormat);
      }
      static from(value2, format) {
        if (typeof value2 === "string") {
          return FixedNumber.fromString(value2, format);
        }
        if (isBytes(value2)) {
          return FixedNumber.fromBytes(value2, format);
        }
        try {
          return FixedNumber.fromValue(value2, 0, format);
        } catch (error) {
          if (error.code !== Logger.errors.INVALID_ARGUMENT) {
            throw error;
          }
        }
        return logger3.throwArgumentError("invalid FixedNumber value", "value", value2);
      }
      static isFixedNumber(value2) {
        return !!(value2 && value2._isFixedNumber);
      }
    };
    ONE = FixedNumber.from(1);
    BUMP = FixedNumber.from("0.5");
  }
});

// node_modules/@ethersproject/bignumber/lib.esm/index.js
var init_lib3 = __esm({
  "node_modules/@ethersproject/bignumber/lib.esm/index.js"() {
    init_define_process();
    init_bignumber();
    init_fixednumber();
    init_bignumber();
  }
});

// node_modules/@ethersproject/properties/lib.esm/_version.js
var version4;
var init_version4 = __esm({
  "node_modules/@ethersproject/properties/lib.esm/_version.js"() {
    init_define_process();
    version4 = "properties/5.6.0";
  }
});

// node_modules/@ethersproject/properties/lib.esm/index.js
var lib_exports3 = {};
__export(lib_exports3, {
  Description: () => Description,
  checkProperties: () => checkProperties,
  deepCopy: () => deepCopy,
  defineReadOnly: () => defineReadOnly,
  getStatic: () => getStatic,
  resolveProperties: () => resolveProperties,
  shallowCopy: () => shallowCopy
});
function defineReadOnly(object, name2, value2) {
  Object.defineProperty(object, name2, {
    enumerable: true,
    value: value2,
    writable: false
  });
}
function getStatic(ctor, key2) {
  for (let i2 = 0; i2 < 32; i2++) {
    if (ctor[key2]) {
      return ctor[key2];
    }
    if (!ctor.prototype || typeof ctor.prototype !== "object") {
      break;
    }
    ctor = Object.getPrototypeOf(ctor.prototype).constructor;
  }
  return null;
}
function resolveProperties(object) {
  return __awaiter(this, void 0, void 0, function* () {
    const promises = Object.keys(object).map((key2) => {
      const value2 = object[key2];
      return Promise.resolve(value2).then((v7) => ({ key: key2, value: v7 }));
    });
    const results = yield Promise.all(promises);
    return results.reduce((accum, result) => {
      accum[result.key] = result.value;
      return accum;
    }, {});
  });
}
function checkProperties(object, properties) {
  if (!object || typeof object !== "object") {
    logger4.throwArgumentError("invalid object", "object", object);
  }
  Object.keys(object).forEach((key2) => {
    if (!properties[key2]) {
      logger4.throwArgumentError("invalid object key - " + key2, "transaction:" + key2, object);
    }
  });
}
function shallowCopy(object) {
  const result = {};
  for (const key2 in object) {
    result[key2] = object[key2];
  }
  return result;
}
function _isFrozen(object) {
  if (object === void 0 || object === null || opaque[typeof object]) {
    return true;
  }
  if (Array.isArray(object) || typeof object === "object") {
    if (!Object.isFrozen(object)) {
      return false;
    }
    const keys = Object.keys(object);
    for (let i2 = 0; i2 < keys.length; i2++) {
      let value2 = null;
      try {
        value2 = object[keys[i2]];
      } catch (error) {
        continue;
      }
      if (!_isFrozen(value2)) {
        return false;
      }
    }
    return true;
  }
  return logger4.throwArgumentError(`Cannot deepCopy ${typeof object}`, "object", object);
}
function _deepCopy(object) {
  if (_isFrozen(object)) {
    return object;
  }
  if (Array.isArray(object)) {
    return Object.freeze(object.map((item) => deepCopy(item)));
  }
  if (typeof object === "object") {
    const result = {};
    for (const key2 in object) {
      const value2 = object[key2];
      if (value2 === void 0) {
        continue;
      }
      defineReadOnly(result, key2, deepCopy(value2));
    }
    return result;
  }
  return logger4.throwArgumentError(`Cannot deepCopy ${typeof object}`, "object", object);
}
function deepCopy(object) {
  return _deepCopy(object);
}
var __awaiter, logger4, opaque, Description;
var init_lib4 = __esm({
  "node_modules/@ethersproject/properties/lib.esm/index.js"() {
    init_define_process();
    init_lib();
    init_version4();
    "use strict";
    __awaiter = function(thisArg, _arguments, P3, generator) {
      function adopt(value2) {
        return value2 instanceof P3 ? value2 : new P3(function(resolve) {
          resolve(value2);
        });
      }
      return new (P3 || (P3 = Promise))(function(resolve, reject) {
        function fulfilled(value2) {
          try {
            step(generator.next(value2));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value2) {
          try {
            step(generator["throw"](value2));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    logger4 = new Logger(version4);
    opaque = { bigint: true, boolean: true, "function": true, number: true, string: true };
    Description = class {
      constructor(info) {
        for (const key2 in info) {
          this[key2] = deepCopy(info[key2]);
        }
      }
    };
  }
});

// node_modules/@ethersproject/abi/lib.esm/_version.js
var version5;
var init_version5 = __esm({
  "node_modules/@ethersproject/abi/lib.esm/_version.js"() {
    init_define_process();
    version5 = "abi/5.6.0";
  }
});

// node_modules/@ethersproject/abi/lib.esm/fragments.js
function checkModifier(type, name2) {
  if (type === "bytes" || type === "string") {
    if (ModifiersBytes[name2]) {
      return true;
    }
  } else if (type === "address") {
    if (name2 === "payable") {
      return true;
    }
  } else if (type.indexOf("[") >= 0 || type === "tuple") {
    if (ModifiersNest[name2]) {
      return true;
    }
  }
  if (ModifiersBytes[name2] || name2 === "payable") {
    logger5.throwArgumentError("invalid modifier", "name", name2);
  }
  return false;
}
function parseParamType(param, allowIndexed) {
  let originalParam = param;
  function throwError(i2) {
    logger5.throwArgumentError(`unexpected character at position ${i2}`, "param", param);
  }
  param = param.replace(/\s/g, " ");
  function newNode(parent2) {
    let node2 = { type: "", name: "", parent: parent2, state: { allowType: true } };
    if (allowIndexed) {
      node2.indexed = false;
    }
    return node2;
  }
  let parent = { type: "", name: "", state: { allowType: true } };
  let node = parent;
  for (let i2 = 0; i2 < param.length; i2++) {
    let c2 = param[i2];
    switch (c2) {
      case "(":
        if (node.state.allowType && node.type === "") {
          node.type = "tuple";
        } else if (!node.state.allowParams) {
          throwError(i2);
        }
        node.state.allowType = false;
        node.type = verifyType(node.type);
        node.components = [newNode(node)];
        node = node.components[0];
        break;
      case ")":
        delete node.state;
        if (node.name === "indexed") {
          if (!allowIndexed) {
            throwError(i2);
          }
          node.indexed = true;
          node.name = "";
        }
        if (checkModifier(node.type, node.name)) {
          node.name = "";
        }
        node.type = verifyType(node.type);
        let child = node;
        node = node.parent;
        if (!node) {
          throwError(i2);
        }
        delete child.parent;
        node.state.allowParams = false;
        node.state.allowName = true;
        node.state.allowArray = true;
        break;
      case ",":
        delete node.state;
        if (node.name === "indexed") {
          if (!allowIndexed) {
            throwError(i2);
          }
          node.indexed = true;
          node.name = "";
        }
        if (checkModifier(node.type, node.name)) {
          node.name = "";
        }
        node.type = verifyType(node.type);
        let sibling = newNode(node.parent);
        node.parent.components.push(sibling);
        delete node.parent;
        node = sibling;
        break;
      case " ":
        if (node.state.allowType) {
          if (node.type !== "") {
            node.type = verifyType(node.type);
            delete node.state.allowType;
            node.state.allowName = true;
            node.state.allowParams = true;
          }
        }
        if (node.state.allowName) {
          if (node.name !== "") {
            if (node.name === "indexed") {
              if (!allowIndexed) {
                throwError(i2);
              }
              if (node.indexed) {
                throwError(i2);
              }
              node.indexed = true;
              node.name = "";
            } else if (checkModifier(node.type, node.name)) {
              node.name = "";
            } else {
              node.state.allowName = false;
            }
          }
        }
        break;
      case "[":
        if (!node.state.allowArray) {
          throwError(i2);
        }
        node.type += c2;
        node.state.allowArray = false;
        node.state.allowName = false;
        node.state.readArray = true;
        break;
      case "]":
        if (!node.state.readArray) {
          throwError(i2);
        }
        node.type += c2;
        node.state.readArray = false;
        node.state.allowArray = true;
        node.state.allowName = true;
        break;
      default:
        if (node.state.allowType) {
          node.type += c2;
          node.state.allowParams = true;
          node.state.allowArray = true;
        } else if (node.state.allowName) {
          node.name += c2;
          delete node.state.allowArray;
        } else if (node.state.readArray) {
          node.type += c2;
        } else {
          throwError(i2);
        }
    }
  }
  if (node.parent) {
    logger5.throwArgumentError("unexpected eof", "param", param);
  }
  delete parent.state;
  if (node.name === "indexed") {
    if (!allowIndexed) {
      throwError(originalParam.length - 7);
    }
    if (node.indexed) {
      throwError(originalParam.length - 7);
    }
    node.indexed = true;
    node.name = "";
  } else if (checkModifier(node.type, node.name)) {
    node.name = "";
  }
  parent.type = verifyType(parent.type);
  return parent;
}
function populate(object, params) {
  for (let key2 in params) {
    defineReadOnly(object, key2, params[key2]);
  }
}
function parseParams(value2, allowIndex) {
  return splitNesting(value2).map((param) => ParamType.fromString(param, allowIndex));
}
function parseGas(value2, params) {
  params.gas = null;
  let comps = value2.split("@");
  if (comps.length !== 1) {
    if (comps.length > 2) {
      logger5.throwArgumentError("invalid human-readable ABI signature", "value", value2);
    }
    if (!comps[1].match(/^[0-9]+$/)) {
      logger5.throwArgumentError("invalid human-readable ABI signature gas", "value", value2);
    }
    params.gas = BigNumber.from(comps[1]);
    return comps[0];
  }
  return value2;
}
function parseModifiers(value2, params) {
  params.constant = false;
  params.payable = false;
  params.stateMutability = "nonpayable";
  value2.split(" ").forEach((modifier) => {
    switch (modifier.trim()) {
      case "constant":
        params.constant = true;
        break;
      case "payable":
        params.payable = true;
        params.stateMutability = "payable";
        break;
      case "nonpayable":
        params.payable = false;
        params.stateMutability = "nonpayable";
        break;
      case "pure":
        params.constant = true;
        params.stateMutability = "pure";
        break;
      case "view":
        params.constant = true;
        params.stateMutability = "view";
        break;
      case "external":
      case "public":
      case "":
        break;
      default:
        console.log("unknown modifier: " + modifier);
    }
  });
}
function verifyState(value2) {
  let result = {
    constant: false,
    payable: true,
    stateMutability: "payable"
  };
  if (value2.stateMutability != null) {
    result.stateMutability = value2.stateMutability;
    result.constant = result.stateMutability === "view" || result.stateMutability === "pure";
    if (value2.constant != null) {
      if (!!value2.constant !== result.constant) {
        logger5.throwArgumentError("cannot have constant function with mutability " + result.stateMutability, "value", value2);
      }
    }
    result.payable = result.stateMutability === "payable";
    if (value2.payable != null) {
      if (!!value2.payable !== result.payable) {
        logger5.throwArgumentError("cannot have payable function with mutability " + result.stateMutability, "value", value2);
      }
    }
  } else if (value2.payable != null) {
    result.payable = !!value2.payable;
    if (value2.constant == null && !result.payable && value2.type !== "constructor") {
      logger5.throwArgumentError("unable to determine stateMutability", "value", value2);
    }
    result.constant = !!value2.constant;
    if (result.constant) {
      result.stateMutability = "view";
    } else {
      result.stateMutability = result.payable ? "payable" : "nonpayable";
    }
    if (result.payable && result.constant) {
      logger5.throwArgumentError("cannot have constant payable function", "value", value2);
    }
  } else if (value2.constant != null) {
    result.constant = !!value2.constant;
    result.payable = !result.constant;
    result.stateMutability = result.constant ? "view" : "payable";
  } else if (value2.type !== "constructor") {
    logger5.throwArgumentError("unable to determine stateMutability", "value", value2);
  }
  return result;
}
function checkForbidden(fragment) {
  const sig = fragment.format();
  if (sig === "Error(string)" || sig === "Panic(uint256)") {
    logger5.throwArgumentError(`cannot specify user defined ${sig} error`, "fragment", fragment);
  }
  return fragment;
}
function verifyType(type) {
  if (type.match(/^uint($|[^1-9])/)) {
    type = "uint256" + type.substring(4);
  } else if (type.match(/^int($|[^1-9])/)) {
    type = "int256" + type.substring(3);
  }
  return type;
}
function verifyIdentifier(value2) {
  if (!value2 || !value2.match(regexIdentifier)) {
    logger5.throwArgumentError(`invalid identifier "${value2}"`, "value", value2);
  }
  return value2;
}
function splitNesting(value2) {
  value2 = value2.trim();
  let result = [];
  let accum = "";
  let depth = 0;
  for (let offset = 0; offset < value2.length; offset++) {
    let c2 = value2[offset];
    if (c2 === "," && depth === 0) {
      result.push(accum);
      accum = "";
    } else {
      accum += c2;
      if (c2 === "(") {
        depth++;
      } else if (c2 === ")") {
        depth--;
        if (depth === -1) {
          logger5.throwArgumentError("unbalanced parenthesis", "value", value2);
        }
      }
    }
  }
  if (accum) {
    result.push(accum);
  }
  return result;
}
var logger5, _constructorGuard3, ModifiersBytes, ModifiersNest, FormatTypes, paramTypeArray, ParamType, Fragment, EventFragment, ConstructorFragment, FunctionFragment, ErrorFragment, regexIdentifier, regexParen;
var init_fragments = __esm({
  "node_modules/@ethersproject/abi/lib.esm/fragments.js"() {
    init_define_process();
    init_lib3();
    init_lib4();
    init_lib();
    init_version5();
    "use strict";
    logger5 = new Logger(version5);
    _constructorGuard3 = {};
    ModifiersBytes = { calldata: true, memory: true, storage: true };
    ModifiersNest = { calldata: true, memory: true };
    FormatTypes = Object.freeze({
      sighash: "sighash",
      minimal: "minimal",
      full: "full",
      json: "json"
    });
    paramTypeArray = new RegExp(/^(.*)\[([0-9]*)\]$/);
    ParamType = class {
      constructor(constructorGuard, params) {
        if (constructorGuard !== _constructorGuard3) {
          logger5.throwError("use fromString", Logger.errors.UNSUPPORTED_OPERATION, {
            operation: "new ParamType()"
          });
        }
        populate(this, params);
        let match = this.type.match(paramTypeArray);
        if (match) {
          populate(this, {
            arrayLength: parseInt(match[2] || "-1"),
            arrayChildren: ParamType.fromObject({
              type: match[1],
              components: this.components
            }),
            baseType: "array"
          });
        } else {
          populate(this, {
            arrayLength: null,
            arrayChildren: null,
            baseType: this.components != null ? "tuple" : this.type
          });
        }
        this._isParamType = true;
        Object.freeze(this);
      }
      format(format) {
        if (!format) {
          format = FormatTypes.sighash;
        }
        if (!FormatTypes[format]) {
          logger5.throwArgumentError("invalid format type", "format", format);
        }
        if (format === FormatTypes.json) {
          let result2 = {
            type: this.baseType === "tuple" ? "tuple" : this.type,
            name: this.name || void 0
          };
          if (typeof this.indexed === "boolean") {
            result2.indexed = this.indexed;
          }
          if (this.components) {
            result2.components = this.components.map((comp) => JSON.parse(comp.format(format)));
          }
          return JSON.stringify(result2);
        }
        let result = "";
        if (this.baseType === "array") {
          result += this.arrayChildren.format(format);
          result += "[" + (this.arrayLength < 0 ? "" : String(this.arrayLength)) + "]";
        } else {
          if (this.baseType === "tuple") {
            if (format !== FormatTypes.sighash) {
              result += this.type;
            }
            result += "(" + this.components.map((comp) => comp.format(format)).join(format === FormatTypes.full ? ", " : ",") + ")";
          } else {
            result += this.type;
          }
        }
        if (format !== FormatTypes.sighash) {
          if (this.indexed === true) {
            result += " indexed";
          }
          if (format === FormatTypes.full && this.name) {
            result += " " + this.name;
          }
        }
        return result;
      }
      static from(value2, allowIndexed) {
        if (typeof value2 === "string") {
          return ParamType.fromString(value2, allowIndexed);
        }
        return ParamType.fromObject(value2);
      }
      static fromObject(value2) {
        if (ParamType.isParamType(value2)) {
          return value2;
        }
        return new ParamType(_constructorGuard3, {
          name: value2.name || null,
          type: verifyType(value2.type),
          indexed: value2.indexed == null ? null : !!value2.indexed,
          components: value2.components ? value2.components.map(ParamType.fromObject) : null
        });
      }
      static fromString(value2, allowIndexed) {
        function ParamTypify(node) {
          return ParamType.fromObject({
            name: node.name,
            type: node.type,
            indexed: node.indexed,
            components: node.components
          });
        }
        return ParamTypify(parseParamType(value2, !!allowIndexed));
      }
      static isParamType(value2) {
        return !!(value2 != null && value2._isParamType);
      }
    };
    Fragment = class {
      constructor(constructorGuard, params) {
        if (constructorGuard !== _constructorGuard3) {
          logger5.throwError("use a static from method", Logger.errors.UNSUPPORTED_OPERATION, {
            operation: "new Fragment()"
          });
        }
        populate(this, params);
        this._isFragment = true;
        Object.freeze(this);
      }
      static from(value2) {
        if (Fragment.isFragment(value2)) {
          return value2;
        }
        if (typeof value2 === "string") {
          return Fragment.fromString(value2);
        }
        return Fragment.fromObject(value2);
      }
      static fromObject(value2) {
        if (Fragment.isFragment(value2)) {
          return value2;
        }
        switch (value2.type) {
          case "function":
            return FunctionFragment.fromObject(value2);
          case "event":
            return EventFragment.fromObject(value2);
          case "constructor":
            return ConstructorFragment.fromObject(value2);
          case "error":
            return ErrorFragment.fromObject(value2);
          case "fallback":
          case "receive":
            return null;
        }
        return logger5.throwArgumentError("invalid fragment object", "value", value2);
      }
      static fromString(value2) {
        value2 = value2.replace(/\s/g, " ");
        value2 = value2.replace(/\(/g, " (").replace(/\)/g, ") ").replace(/\s+/g, " ");
        value2 = value2.trim();
        if (value2.split(" ")[0] === "event") {
          return EventFragment.fromString(value2.substring(5).trim());
        } else if (value2.split(" ")[0] === "function") {
          return FunctionFragment.fromString(value2.substring(8).trim());
        } else if (value2.split("(")[0].trim() === "constructor") {
          return ConstructorFragment.fromString(value2.trim());
        } else if (value2.split(" ")[0] === "error") {
          return ErrorFragment.fromString(value2.substring(5).trim());
        }
        return logger5.throwArgumentError("unsupported fragment", "value", value2);
      }
      static isFragment(value2) {
        return !!(value2 && value2._isFragment);
      }
    };
    EventFragment = class extends Fragment {
      format(format) {
        if (!format) {
          format = FormatTypes.sighash;
        }
        if (!FormatTypes[format]) {
          logger5.throwArgumentError("invalid format type", "format", format);
        }
        if (format === FormatTypes.json) {
          return JSON.stringify({
            type: "event",
            anonymous: this.anonymous,
            name: this.name,
            inputs: this.inputs.map((input) => JSON.parse(input.format(format)))
          });
        }
        let result = "";
        if (format !== FormatTypes.sighash) {
          result += "event ";
        }
        result += this.name + "(" + this.inputs.map((input) => input.format(format)).join(format === FormatTypes.full ? ", " : ",") + ") ";
        if (format !== FormatTypes.sighash) {
          if (this.anonymous) {
            result += "anonymous ";
          }
        }
        return result.trim();
      }
      static from(value2) {
        if (typeof value2 === "string") {
          return EventFragment.fromString(value2);
        }
        return EventFragment.fromObject(value2);
      }
      static fromObject(value2) {
        if (EventFragment.isEventFragment(value2)) {
          return value2;
        }
        if (value2.type !== "event") {
          logger5.throwArgumentError("invalid event object", "value", value2);
        }
        const params = {
          name: verifyIdentifier(value2.name),
          anonymous: value2.anonymous,
          inputs: value2.inputs ? value2.inputs.map(ParamType.fromObject) : [],
          type: "event"
        };
        return new EventFragment(_constructorGuard3, params);
      }
      static fromString(value2) {
        let match = value2.match(regexParen);
        if (!match) {
          logger5.throwArgumentError("invalid event string", "value", value2);
        }
        let anonymous = false;
        match[3].split(" ").forEach((modifier) => {
          switch (modifier.trim()) {
            case "anonymous":
              anonymous = true;
              break;
            case "":
              break;
            default:
              logger5.warn("unknown modifier: " + modifier);
          }
        });
        return EventFragment.fromObject({
          name: match[1].trim(),
          anonymous,
          inputs: parseParams(match[2], true),
          type: "event"
        });
      }
      static isEventFragment(value2) {
        return value2 && value2._isFragment && value2.type === "event";
      }
    };
    ConstructorFragment = class extends Fragment {
      format(format) {
        if (!format) {
          format = FormatTypes.sighash;
        }
        if (!FormatTypes[format]) {
          logger5.throwArgumentError("invalid format type", "format", format);
        }
        if (format === FormatTypes.json) {
          return JSON.stringify({
            type: "constructor",
            stateMutability: this.stateMutability !== "nonpayable" ? this.stateMutability : void 0,
            payable: this.payable,
            gas: this.gas ? this.gas.toNumber() : void 0,
            inputs: this.inputs.map((input) => JSON.parse(input.format(format)))
          });
        }
        if (format === FormatTypes.sighash) {
          logger5.throwError("cannot format a constructor for sighash", Logger.errors.UNSUPPORTED_OPERATION, {
            operation: "format(sighash)"
          });
        }
        let result = "constructor(" + this.inputs.map((input) => input.format(format)).join(format === FormatTypes.full ? ", " : ",") + ") ";
        if (this.stateMutability && this.stateMutability !== "nonpayable") {
          result += this.stateMutability + " ";
        }
        return result.trim();
      }
      static from(value2) {
        if (typeof value2 === "string") {
          return ConstructorFragment.fromString(value2);
        }
        return ConstructorFragment.fromObject(value2);
      }
      static fromObject(value2) {
        if (ConstructorFragment.isConstructorFragment(value2)) {
          return value2;
        }
        if (value2.type !== "constructor") {
          logger5.throwArgumentError("invalid constructor object", "value", value2);
        }
        let state = verifyState(value2);
        if (state.constant) {
          logger5.throwArgumentError("constructor cannot be constant", "value", value2);
        }
        const params = {
          name: null,
          type: value2.type,
          inputs: value2.inputs ? value2.inputs.map(ParamType.fromObject) : [],
          payable: state.payable,
          stateMutability: state.stateMutability,
          gas: value2.gas ? BigNumber.from(value2.gas) : null
        };
        return new ConstructorFragment(_constructorGuard3, params);
      }
      static fromString(value2) {
        let params = { type: "constructor" };
        value2 = parseGas(value2, params);
        let parens = value2.match(regexParen);
        if (!parens || parens[1].trim() !== "constructor") {
          logger5.throwArgumentError("invalid constructor string", "value", value2);
        }
        params.inputs = parseParams(parens[2].trim(), false);
        parseModifiers(parens[3].trim(), params);
        return ConstructorFragment.fromObject(params);
      }
      static isConstructorFragment(value2) {
        return value2 && value2._isFragment && value2.type === "constructor";
      }
    };
    FunctionFragment = class extends ConstructorFragment {
      format(format) {
        if (!format) {
          format = FormatTypes.sighash;
        }
        if (!FormatTypes[format]) {
          logger5.throwArgumentError("invalid format type", "format", format);
        }
        if (format === FormatTypes.json) {
          return JSON.stringify({
            type: "function",
            name: this.name,
            constant: this.constant,
            stateMutability: this.stateMutability !== "nonpayable" ? this.stateMutability : void 0,
            payable: this.payable,
            gas: this.gas ? this.gas.toNumber() : void 0,
            inputs: this.inputs.map((input) => JSON.parse(input.format(format))),
            outputs: this.outputs.map((output) => JSON.parse(output.format(format)))
          });
        }
        let result = "";
        if (format !== FormatTypes.sighash) {
          result += "function ";
        }
        result += this.name + "(" + this.inputs.map((input) => input.format(format)).join(format === FormatTypes.full ? ", " : ",") + ") ";
        if (format !== FormatTypes.sighash) {
          if (this.stateMutability) {
            if (this.stateMutability !== "nonpayable") {
              result += this.stateMutability + " ";
            }
          } else if (this.constant) {
            result += "view ";
          }
          if (this.outputs && this.outputs.length) {
            result += "returns (" + this.outputs.map((output) => output.format(format)).join(", ") + ") ";
          }
          if (this.gas != null) {
            result += "@" + this.gas.toString() + " ";
          }
        }
        return result.trim();
      }
      static from(value2) {
        if (typeof value2 === "string") {
          return FunctionFragment.fromString(value2);
        }
        return FunctionFragment.fromObject(value2);
      }
      static fromObject(value2) {
        if (FunctionFragment.isFunctionFragment(value2)) {
          return value2;
        }
        if (value2.type !== "function") {
          logger5.throwArgumentError("invalid function object", "value", value2);
        }
        let state = verifyState(value2);
        const params = {
          type: value2.type,
          name: verifyIdentifier(value2.name),
          constant: state.constant,
          inputs: value2.inputs ? value2.inputs.map(ParamType.fromObject) : [],
          outputs: value2.outputs ? value2.outputs.map(ParamType.fromObject) : [],
          payable: state.payable,
          stateMutability: state.stateMutability,
          gas: value2.gas ? BigNumber.from(value2.gas) : null
        };
        return new FunctionFragment(_constructorGuard3, params);
      }
      static fromString(value2) {
        let params = { type: "function" };
        value2 = parseGas(value2, params);
        let comps = value2.split(" returns ");
        if (comps.length > 2) {
          logger5.throwArgumentError("invalid function string", "value", value2);
        }
        let parens = comps[0].match(regexParen);
        if (!parens) {
          logger5.throwArgumentError("invalid function signature", "value", value2);
        }
        params.name = parens[1].trim();
        if (params.name) {
          verifyIdentifier(params.name);
        }
        params.inputs = parseParams(parens[2], false);
        parseModifiers(parens[3].trim(), params);
        if (comps.length > 1) {
          let returns = comps[1].match(regexParen);
          if (returns[1].trim() != "" || returns[3].trim() != "") {
            logger5.throwArgumentError("unexpected tokens", "value", value2);
          }
          params.outputs = parseParams(returns[2], false);
        } else {
          params.outputs = [];
        }
        return FunctionFragment.fromObject(params);
      }
      static isFunctionFragment(value2) {
        return value2 && value2._isFragment && value2.type === "function";
      }
    };
    ErrorFragment = class extends Fragment {
      format(format) {
        if (!format) {
          format = FormatTypes.sighash;
        }
        if (!FormatTypes[format]) {
          logger5.throwArgumentError("invalid format type", "format", format);
        }
        if (format === FormatTypes.json) {
          return JSON.stringify({
            type: "error",
            name: this.name,
            inputs: this.inputs.map((input) => JSON.parse(input.format(format)))
          });
        }
        let result = "";
        if (format !== FormatTypes.sighash) {
          result += "error ";
        }
        result += this.name + "(" + this.inputs.map((input) => input.format(format)).join(format === FormatTypes.full ? ", " : ",") + ") ";
        return result.trim();
      }
      static from(value2) {
        if (typeof value2 === "string") {
          return ErrorFragment.fromString(value2);
        }
        return ErrorFragment.fromObject(value2);
      }
      static fromObject(value2) {
        if (ErrorFragment.isErrorFragment(value2)) {
          return value2;
        }
        if (value2.type !== "error") {
          logger5.throwArgumentError("invalid error object", "value", value2);
        }
        const params = {
          type: value2.type,
          name: verifyIdentifier(value2.name),
          inputs: value2.inputs ? value2.inputs.map(ParamType.fromObject) : []
        };
        return checkForbidden(new ErrorFragment(_constructorGuard3, params));
      }
      static fromString(value2) {
        let params = { type: "error" };
        let parens = value2.match(regexParen);
        if (!parens) {
          logger5.throwArgumentError("invalid error signature", "value", value2);
        }
        params.name = parens[1].trim();
        if (params.name) {
          verifyIdentifier(params.name);
        }
        params.inputs = parseParams(parens[2], false);
        return checkForbidden(ErrorFragment.fromObject(params));
      }
      static isErrorFragment(value2) {
        return value2 && value2._isFragment && value2.type === "error";
      }
    };
    regexIdentifier = new RegExp("^[a-zA-Z$_][a-zA-Z0-9$_]*$");
    regexParen = new RegExp("^([^)(]*)\\((.*)\\)([^)(]*)$");
  }
});

// node_modules/@ethersproject/abi/lib.esm/coders/abstract-coder.js
function checkResultErrors(result) {
  const errors = [];
  const checkErrors = function(path, object) {
    if (!Array.isArray(object)) {
      return;
    }
    for (let key2 in object) {
      const childPath = path.slice();
      childPath.push(key2);
      try {
        checkErrors(childPath, object[key2]);
      } catch (error) {
        errors.push({ path: childPath, error });
      }
    }
  };
  checkErrors([], result);
  return errors;
}
var logger6, Coder, Writer, Reader;
var init_abstract_coder = __esm({
  "node_modules/@ethersproject/abi/lib.esm/coders/abstract-coder.js"() {
    init_define_process();
    init_lib2();
    init_lib3();
    init_lib4();
    init_lib();
    init_version5();
    "use strict";
    logger6 = new Logger(version5);
    Coder = class {
      constructor(name2, type, localName, dynamic) {
        this.name = name2;
        this.type = type;
        this.localName = localName;
        this.dynamic = dynamic;
      }
      _throwError(message, value2) {
        logger6.throwArgumentError(message, this.localName, value2);
      }
    };
    Writer = class {
      constructor(wordSize) {
        defineReadOnly(this, "wordSize", wordSize || 32);
        this._data = [];
        this._dataLength = 0;
        this._padding = new Uint8Array(wordSize);
      }
      get data() {
        return hexConcat(this._data);
      }
      get length() {
        return this._dataLength;
      }
      _writeData(data) {
        this._data.push(data);
        this._dataLength += data.length;
        return data.length;
      }
      appendWriter(writer) {
        return this._writeData(concat(writer._data));
      }
      writeBytes(value2) {
        let bytes = arrayify(value2);
        const paddingOffset = bytes.length % this.wordSize;
        if (paddingOffset) {
          bytes = concat([bytes, this._padding.slice(paddingOffset)]);
        }
        return this._writeData(bytes);
      }
      _getValue(value2) {
        let bytes = arrayify(BigNumber.from(value2));
        if (bytes.length > this.wordSize) {
          logger6.throwError("value out-of-bounds", Logger.errors.BUFFER_OVERRUN, {
            length: this.wordSize,
            offset: bytes.length
          });
        }
        if (bytes.length % this.wordSize) {
          bytes = concat([this._padding.slice(bytes.length % this.wordSize), bytes]);
        }
        return bytes;
      }
      writeValue(value2) {
        return this._writeData(this._getValue(value2));
      }
      writeUpdatableValue() {
        const offset = this._data.length;
        this._data.push(this._padding);
        this._dataLength += this.wordSize;
        return (value2) => {
          this._data[offset] = this._getValue(value2);
        };
      }
    };
    Reader = class {
      constructor(data, wordSize, coerceFunc, allowLoose) {
        defineReadOnly(this, "_data", arrayify(data));
        defineReadOnly(this, "wordSize", wordSize || 32);
        defineReadOnly(this, "_coerceFunc", coerceFunc);
        defineReadOnly(this, "allowLoose", allowLoose);
        this._offset = 0;
      }
      get data() {
        return hexlify(this._data);
      }
      get consumed() {
        return this._offset;
      }
      static coerce(name2, value2) {
        let match = name2.match("^u?int([0-9]+)$");
        if (match && parseInt(match[1]) <= 48) {
          value2 = value2.toNumber();
        }
        return value2;
      }
      coerce(name2, value2) {
        if (this._coerceFunc) {
          return this._coerceFunc(name2, value2);
        }
        return Reader.coerce(name2, value2);
      }
      _peekBytes(offset, length, loose) {
        let alignedLength = Math.ceil(length / this.wordSize) * this.wordSize;
        if (this._offset + alignedLength > this._data.length) {
          if (this.allowLoose && loose && this._offset + length <= this._data.length) {
            alignedLength = length;
          } else {
            logger6.throwError("data out-of-bounds", Logger.errors.BUFFER_OVERRUN, {
              length: this._data.length,
              offset: this._offset + alignedLength
            });
          }
        }
        return this._data.slice(this._offset, this._offset + alignedLength);
      }
      subReader(offset) {
        return new Reader(this._data.slice(this._offset + offset), this.wordSize, this._coerceFunc, this.allowLoose);
      }
      readBytes(length, loose) {
        let bytes = this._peekBytes(0, length, !!loose);
        this._offset += bytes.length;
        return bytes.slice(0, length);
      }
      readValue() {
        return BigNumber.from(this.readBytes(this.wordSize));
      }
    };
  }
});

// node_modules/js-sha3/src/sha3.js
var require_sha3 = __commonJS({
  "node_modules/js-sha3/src/sha3.js"(exports, module) {
    init_define_process();
    (function() {
      "use strict";
      var INPUT_ERROR = "input is invalid type";
      var FINALIZE_ERROR = "finalize already called";
      var WINDOW = typeof window === "object";
      var root = WINDOW ? window : {};
      if (root.JS_SHA3_NO_WINDOW) {
        WINDOW = false;
      }
      var WEB_WORKER = !WINDOW && typeof self === "object";
      var NODE_JS = !root.JS_SHA3_NO_NODE_JS && typeof define_process_default === "object" && define_process_default.versions && define_process_default.versions.node;
      if (NODE_JS) {
        root = globalThis;
      } else if (WEB_WORKER) {
        root = self;
      }
      var COMMON_JS = !root.JS_SHA3_NO_COMMON_JS && typeof module === "object" && module.exports;
      var AMD = typeof define === "function" && define.amd;
      var ARRAY_BUFFER = !root.JS_SHA3_NO_ARRAY_BUFFER && typeof ArrayBuffer !== "undefined";
      var HEX_CHARS = "0123456789abcdef".split("");
      var SHAKE_PADDING = [31, 7936, 2031616, 520093696];
      var CSHAKE_PADDING = [4, 1024, 262144, 67108864];
      var KECCAK_PADDING = [1, 256, 65536, 16777216];
      var PADDING = [6, 1536, 393216, 100663296];
      var SHIFT = [0, 8, 16, 24];
      var RC = [
        1,
        0,
        32898,
        0,
        32906,
        2147483648,
        2147516416,
        2147483648,
        32907,
        0,
        2147483649,
        0,
        2147516545,
        2147483648,
        32777,
        2147483648,
        138,
        0,
        136,
        0,
        2147516425,
        0,
        2147483658,
        0,
        2147516555,
        0,
        139,
        2147483648,
        32905,
        2147483648,
        32771,
        2147483648,
        32770,
        2147483648,
        128,
        2147483648,
        32778,
        0,
        2147483658,
        2147483648,
        2147516545,
        2147483648,
        32896,
        2147483648,
        2147483649,
        0,
        2147516424,
        2147483648
      ];
      var BITS = [224, 256, 384, 512];
      var SHAKE_BITS = [128, 256];
      var OUTPUT_TYPES = ["hex", "buffer", "arrayBuffer", "array", "digest"];
      var CSHAKE_BYTEPAD = {
        "128": 168,
        "256": 136
      };
      if (root.JS_SHA3_NO_NODE_JS || !Array.isArray) {
        Array.isArray = function(obj) {
          return Object.prototype.toString.call(obj) === "[object Array]";
        };
      }
      if (ARRAY_BUFFER && (root.JS_SHA3_NO_ARRAY_BUFFER_IS_VIEW || !ArrayBuffer.isView)) {
        ArrayBuffer.isView = function(obj) {
          return typeof obj === "object" && obj.buffer && obj.buffer.constructor === ArrayBuffer;
        };
      }
      var createOutputMethod = function(bits2, padding2, outputType) {
        return function(message) {
          return new Keccak(bits2, padding2, bits2).update(message)[outputType]();
        };
      };
      var createShakeOutputMethod = function(bits2, padding2, outputType) {
        return function(message, outputBits) {
          return new Keccak(bits2, padding2, outputBits).update(message)[outputType]();
        };
      };
      var createCshakeOutputMethod = function(bits2, padding2, outputType) {
        return function(message, outputBits, n, s2) {
          return methods["cshake" + bits2].update(message, outputBits, n, s2)[outputType]();
        };
      };
      var createKmacOutputMethod = function(bits2, padding2, outputType) {
        return function(key2, message, outputBits, s2) {
          return methods["kmac" + bits2].update(key2, message, outputBits, s2)[outputType]();
        };
      };
      var createOutputMethods = function(method, createMethod2, bits2, padding2) {
        for (var i3 = 0; i3 < OUTPUT_TYPES.length; ++i3) {
          var type = OUTPUT_TYPES[i3];
          method[type] = createMethod2(bits2, padding2, type);
        }
        return method;
      };
      var createMethod = function(bits2, padding2) {
        var method = createOutputMethod(bits2, padding2, "hex");
        method.create = function() {
          return new Keccak(bits2, padding2, bits2);
        };
        method.update = function(message) {
          return method.create().update(message);
        };
        return createOutputMethods(method, createOutputMethod, bits2, padding2);
      };
      var createShakeMethod = function(bits2, padding2) {
        var method = createShakeOutputMethod(bits2, padding2, "hex");
        method.create = function(outputBits) {
          return new Keccak(bits2, padding2, outputBits);
        };
        method.update = function(message, outputBits) {
          return method.create(outputBits).update(message);
        };
        return createOutputMethods(method, createShakeOutputMethod, bits2, padding2);
      };
      var createCshakeMethod = function(bits2, padding2) {
        var w3 = CSHAKE_BYTEPAD[bits2];
        var method = createCshakeOutputMethod(bits2, padding2, "hex");
        method.create = function(outputBits, n, s2) {
          if (!n && !s2) {
            return methods["shake" + bits2].create(outputBits);
          } else {
            return new Keccak(bits2, padding2, outputBits).bytepad([n, s2], w3);
          }
        };
        method.update = function(message, outputBits, n, s2) {
          return method.create(outputBits, n, s2).update(message);
        };
        return createOutputMethods(method, createCshakeOutputMethod, bits2, padding2);
      };
      var createKmacMethod = function(bits2, padding2) {
        var w3 = CSHAKE_BYTEPAD[bits2];
        var method = createKmacOutputMethod(bits2, padding2, "hex");
        method.create = function(key2, outputBits, s2) {
          return new Kmac(bits2, padding2, outputBits).bytepad(["KMAC", s2], w3).bytepad([key2], w3);
        };
        method.update = function(key2, message, outputBits, s2) {
          return method.create(key2, outputBits, s2).update(message);
        };
        return createOutputMethods(method, createKmacOutputMethod, bits2, padding2);
      };
      var algorithms = [
        { name: "keccak", padding: KECCAK_PADDING, bits: BITS, createMethod },
        { name: "sha3", padding: PADDING, bits: BITS, createMethod },
        { name: "shake", padding: SHAKE_PADDING, bits: SHAKE_BITS, createMethod: createShakeMethod },
        { name: "cshake", padding: CSHAKE_PADDING, bits: SHAKE_BITS, createMethod: createCshakeMethod },
        { name: "kmac", padding: CSHAKE_PADDING, bits: SHAKE_BITS, createMethod: createKmacMethod }
      ];
      var methods = {}, methodNames = [];
      for (var i2 = 0; i2 < algorithms.length; ++i2) {
        var algorithm = algorithms[i2];
        var bits = algorithm.bits;
        for (var j3 = 0; j3 < bits.length; ++j3) {
          var methodName = algorithm.name + "_" + bits[j3];
          methodNames.push(methodName);
          methods[methodName] = algorithm.createMethod(bits[j3], algorithm.padding);
          if (algorithm.name !== "sha3") {
            var newMethodName = algorithm.name + bits[j3];
            methodNames.push(newMethodName);
            methods[newMethodName] = methods[methodName];
          }
        }
      }
      function Keccak(bits2, padding2, outputBits) {
        this.blocks = [];
        this.s = [];
        this.padding = padding2;
        this.outputBits = outputBits;
        this.reset = true;
        this.finalized = false;
        this.block = 0;
        this.start = 0;
        this.blockCount = 1600 - (bits2 << 1) >> 5;
        this.byteCount = this.blockCount << 2;
        this.outputBlocks = outputBits >> 5;
        this.extraBytes = (outputBits & 31) >> 3;
        for (var i3 = 0; i3 < 50; ++i3) {
          this.s[i3] = 0;
        }
      }
      Keccak.prototype.update = function(message) {
        if (this.finalized) {
          throw new Error(FINALIZE_ERROR);
        }
        var notString, type = typeof message;
        if (type !== "string") {
          if (type === "object") {
            if (message === null) {
              throw new Error(INPUT_ERROR);
            } else if (ARRAY_BUFFER && message.constructor === ArrayBuffer) {
              message = new Uint8Array(message);
            } else if (!Array.isArray(message)) {
              if (!ARRAY_BUFFER || !ArrayBuffer.isView(message)) {
                throw new Error(INPUT_ERROR);
              }
            }
          } else {
            throw new Error(INPUT_ERROR);
          }
          notString = true;
        }
        var blocks = this.blocks, byteCount = this.byteCount, length = message.length, blockCount = this.blockCount, index = 0, s2 = this.s, i3, code;
        while (index < length) {
          if (this.reset) {
            this.reset = false;
            blocks[0] = this.block;
            for (i3 = 1; i3 < blockCount + 1; ++i3) {
              blocks[i3] = 0;
            }
          }
          if (notString) {
            for (i3 = this.start; index < length && i3 < byteCount; ++index) {
              blocks[i3 >> 2] |= message[index] << SHIFT[i3++ & 3];
            }
          } else {
            for (i3 = this.start; index < length && i3 < byteCount; ++index) {
              code = message.charCodeAt(index);
              if (code < 128) {
                blocks[i3 >> 2] |= code << SHIFT[i3++ & 3];
              } else if (code < 2048) {
                blocks[i3 >> 2] |= (192 | code >> 6) << SHIFT[i3++ & 3];
                blocks[i3 >> 2] |= (128 | code & 63) << SHIFT[i3++ & 3];
              } else if (code < 55296 || code >= 57344) {
                blocks[i3 >> 2] |= (224 | code >> 12) << SHIFT[i3++ & 3];
                blocks[i3 >> 2] |= (128 | code >> 6 & 63) << SHIFT[i3++ & 3];
                blocks[i3 >> 2] |= (128 | code & 63) << SHIFT[i3++ & 3];
              } else {
                code = 65536 + ((code & 1023) << 10 | message.charCodeAt(++index) & 1023);
                blocks[i3 >> 2] |= (240 | code >> 18) << SHIFT[i3++ & 3];
                blocks[i3 >> 2] |= (128 | code >> 12 & 63) << SHIFT[i3++ & 3];
                blocks[i3 >> 2] |= (128 | code >> 6 & 63) << SHIFT[i3++ & 3];
                blocks[i3 >> 2] |= (128 | code & 63) << SHIFT[i3++ & 3];
              }
            }
          }
          this.lastByteIndex = i3;
          if (i3 >= byteCount) {
            this.start = i3 - byteCount;
            this.block = blocks[blockCount];
            for (i3 = 0; i3 < blockCount; ++i3) {
              s2[i3] ^= blocks[i3];
            }
            f3(s2);
            this.reset = true;
          } else {
            this.start = i3;
          }
        }
        return this;
      };
      Keccak.prototype.encode = function(x4, right) {
        var o2 = x4 & 255, n = 1;
        var bytes = [o2];
        x4 = x4 >> 8;
        o2 = x4 & 255;
        while (o2 > 0) {
          bytes.unshift(o2);
          x4 = x4 >> 8;
          o2 = x4 & 255;
          ++n;
        }
        if (right) {
          bytes.push(n);
        } else {
          bytes.unshift(n);
        }
        this.update(bytes);
        return bytes.length;
      };
      Keccak.prototype.encodeString = function(str) {
        var notString, type = typeof str;
        if (type !== "string") {
          if (type === "object") {
            if (str === null) {
              throw new Error(INPUT_ERROR);
            } else if (ARRAY_BUFFER && str.constructor === ArrayBuffer) {
              str = new Uint8Array(str);
            } else if (!Array.isArray(str)) {
              if (!ARRAY_BUFFER || !ArrayBuffer.isView(str)) {
                throw new Error(INPUT_ERROR);
              }
            }
          } else {
            throw new Error(INPUT_ERROR);
          }
          notString = true;
        }
        var bytes = 0, length = str.length;
        if (notString) {
          bytes = length;
        } else {
          for (var i3 = 0; i3 < str.length; ++i3) {
            var code = str.charCodeAt(i3);
            if (code < 128) {
              bytes += 1;
            } else if (code < 2048) {
              bytes += 2;
            } else if (code < 55296 || code >= 57344) {
              bytes += 3;
            } else {
              code = 65536 + ((code & 1023) << 10 | str.charCodeAt(++i3) & 1023);
              bytes += 4;
            }
          }
        }
        bytes += this.encode(bytes * 8);
        this.update(str);
        return bytes;
      };
      Keccak.prototype.bytepad = function(strs, w3) {
        var bytes = this.encode(w3);
        for (var i3 = 0; i3 < strs.length; ++i3) {
          bytes += this.encodeString(strs[i3]);
        }
        var paddingBytes = w3 - bytes % w3;
        var zeros2 = [];
        zeros2.length = paddingBytes;
        this.update(zeros2);
        return this;
      };
      Keccak.prototype.finalize = function() {
        if (this.finalized) {
          return;
        }
        this.finalized = true;
        var blocks = this.blocks, i3 = this.lastByteIndex, blockCount = this.blockCount, s2 = this.s;
        blocks[i3 >> 2] |= this.padding[i3 & 3];
        if (this.lastByteIndex === this.byteCount) {
          blocks[0] = blocks[blockCount];
          for (i3 = 1; i3 < blockCount + 1; ++i3) {
            blocks[i3] = 0;
          }
        }
        blocks[blockCount - 1] |= 2147483648;
        for (i3 = 0; i3 < blockCount; ++i3) {
          s2[i3] ^= blocks[i3];
        }
        f3(s2);
      };
      Keccak.prototype.toString = Keccak.prototype.hex = function() {
        this.finalize();
        var blockCount = this.blockCount, s2 = this.s, outputBlocks = this.outputBlocks, extraBytes = this.extraBytes, i3 = 0, j4 = 0;
        var hex = "", block;
        while (j4 < outputBlocks) {
          for (i3 = 0; i3 < blockCount && j4 < outputBlocks; ++i3, ++j4) {
            block = s2[i3];
            hex += HEX_CHARS[block >> 4 & 15] + HEX_CHARS[block & 15] + HEX_CHARS[block >> 12 & 15] + HEX_CHARS[block >> 8 & 15] + HEX_CHARS[block >> 20 & 15] + HEX_CHARS[block >> 16 & 15] + HEX_CHARS[block >> 28 & 15] + HEX_CHARS[block >> 24 & 15];
          }
          if (j4 % blockCount === 0) {
            f3(s2);
            i3 = 0;
          }
        }
        if (extraBytes) {
          block = s2[i3];
          hex += HEX_CHARS[block >> 4 & 15] + HEX_CHARS[block & 15];
          if (extraBytes > 1) {
            hex += HEX_CHARS[block >> 12 & 15] + HEX_CHARS[block >> 8 & 15];
          }
          if (extraBytes > 2) {
            hex += HEX_CHARS[block >> 20 & 15] + HEX_CHARS[block >> 16 & 15];
          }
        }
        return hex;
      };
      Keccak.prototype.arrayBuffer = function() {
        this.finalize();
        var blockCount = this.blockCount, s2 = this.s, outputBlocks = this.outputBlocks, extraBytes = this.extraBytes, i3 = 0, j4 = 0;
        var bytes = this.outputBits >> 3;
        var buffer;
        if (extraBytes) {
          buffer = new ArrayBuffer(outputBlocks + 1 << 2);
        } else {
          buffer = new ArrayBuffer(bytes);
        }
        var array = new Uint32Array(buffer);
        while (j4 < outputBlocks) {
          for (i3 = 0; i3 < blockCount && j4 < outputBlocks; ++i3, ++j4) {
            array[j4] = s2[i3];
          }
          if (j4 % blockCount === 0) {
            f3(s2);
          }
        }
        if (extraBytes) {
          array[i3] = s2[i3];
          buffer = buffer.slice(0, bytes);
        }
        return buffer;
      };
      Keccak.prototype.buffer = Keccak.prototype.arrayBuffer;
      Keccak.prototype.digest = Keccak.prototype.array = function() {
        this.finalize();
        var blockCount = this.blockCount, s2 = this.s, outputBlocks = this.outputBlocks, extraBytes = this.extraBytes, i3 = 0, j4 = 0;
        var array = [], offset, block;
        while (j4 < outputBlocks) {
          for (i3 = 0; i3 < blockCount && j4 < outputBlocks; ++i3, ++j4) {
            offset = j4 << 2;
            block = s2[i3];
            array[offset] = block & 255;
            array[offset + 1] = block >> 8 & 255;
            array[offset + 2] = block >> 16 & 255;
            array[offset + 3] = block >> 24 & 255;
          }
          if (j4 % blockCount === 0) {
            f3(s2);
          }
        }
        if (extraBytes) {
          offset = j4 << 2;
          block = s2[i3];
          array[offset] = block & 255;
          if (extraBytes > 1) {
            array[offset + 1] = block >> 8 & 255;
          }
          if (extraBytes > 2) {
            array[offset + 2] = block >> 16 & 255;
          }
        }
        return array;
      };
      function Kmac(bits2, padding2, outputBits) {
        Keccak.call(this, bits2, padding2, outputBits);
      }
      Kmac.prototype = new Keccak();
      Kmac.prototype.finalize = function() {
        this.encode(this.outputBits, true);
        return Keccak.prototype.finalize.call(this);
      };
      var f3 = function(s2) {
        var h2, l2, n, c02, c12, c2, c3, c4, c5, c62, c7, c8, c9, b0, b12, b2, b3, b4, b5, b62, b7, b8, b9, b10, b11, b122, b13, b14, b15, b16, b17, b18, b19, b20, b21, b22, b23, b24, b25, b26, b27, b28, b29, b30, b31, b32, b33, b34, b35, b36, b37, b38, b39, b40, b41, b42, b43, b44, b45, b46, b47, b48, b49;
        for (n = 0; n < 48; n += 2) {
          c02 = s2[0] ^ s2[10] ^ s2[20] ^ s2[30] ^ s2[40];
          c12 = s2[1] ^ s2[11] ^ s2[21] ^ s2[31] ^ s2[41];
          c2 = s2[2] ^ s2[12] ^ s2[22] ^ s2[32] ^ s2[42];
          c3 = s2[3] ^ s2[13] ^ s2[23] ^ s2[33] ^ s2[43];
          c4 = s2[4] ^ s2[14] ^ s2[24] ^ s2[34] ^ s2[44];
          c5 = s2[5] ^ s2[15] ^ s2[25] ^ s2[35] ^ s2[45];
          c62 = s2[6] ^ s2[16] ^ s2[26] ^ s2[36] ^ s2[46];
          c7 = s2[7] ^ s2[17] ^ s2[27] ^ s2[37] ^ s2[47];
          c8 = s2[8] ^ s2[18] ^ s2[28] ^ s2[38] ^ s2[48];
          c9 = s2[9] ^ s2[19] ^ s2[29] ^ s2[39] ^ s2[49];
          h2 = c8 ^ (c2 << 1 | c3 >>> 31);
          l2 = c9 ^ (c3 << 1 | c2 >>> 31);
          s2[0] ^= h2;
          s2[1] ^= l2;
          s2[10] ^= h2;
          s2[11] ^= l2;
          s2[20] ^= h2;
          s2[21] ^= l2;
          s2[30] ^= h2;
          s2[31] ^= l2;
          s2[40] ^= h2;
          s2[41] ^= l2;
          h2 = c02 ^ (c4 << 1 | c5 >>> 31);
          l2 = c12 ^ (c5 << 1 | c4 >>> 31);
          s2[2] ^= h2;
          s2[3] ^= l2;
          s2[12] ^= h2;
          s2[13] ^= l2;
          s2[22] ^= h2;
          s2[23] ^= l2;
          s2[32] ^= h2;
          s2[33] ^= l2;
          s2[42] ^= h2;
          s2[43] ^= l2;
          h2 = c2 ^ (c62 << 1 | c7 >>> 31);
          l2 = c3 ^ (c7 << 1 | c62 >>> 31);
          s2[4] ^= h2;
          s2[5] ^= l2;
          s2[14] ^= h2;
          s2[15] ^= l2;
          s2[24] ^= h2;
          s2[25] ^= l2;
          s2[34] ^= h2;
          s2[35] ^= l2;
          s2[44] ^= h2;
          s2[45] ^= l2;
          h2 = c4 ^ (c8 << 1 | c9 >>> 31);
          l2 = c5 ^ (c9 << 1 | c8 >>> 31);
          s2[6] ^= h2;
          s2[7] ^= l2;
          s2[16] ^= h2;
          s2[17] ^= l2;
          s2[26] ^= h2;
          s2[27] ^= l2;
          s2[36] ^= h2;
          s2[37] ^= l2;
          s2[46] ^= h2;
          s2[47] ^= l2;
          h2 = c62 ^ (c02 << 1 | c12 >>> 31);
          l2 = c7 ^ (c12 << 1 | c02 >>> 31);
          s2[8] ^= h2;
          s2[9] ^= l2;
          s2[18] ^= h2;
          s2[19] ^= l2;
          s2[28] ^= h2;
          s2[29] ^= l2;
          s2[38] ^= h2;
          s2[39] ^= l2;
          s2[48] ^= h2;
          s2[49] ^= l2;
          b0 = s2[0];
          b12 = s2[1];
          b32 = s2[11] << 4 | s2[10] >>> 28;
          b33 = s2[10] << 4 | s2[11] >>> 28;
          b14 = s2[20] << 3 | s2[21] >>> 29;
          b15 = s2[21] << 3 | s2[20] >>> 29;
          b46 = s2[31] << 9 | s2[30] >>> 23;
          b47 = s2[30] << 9 | s2[31] >>> 23;
          b28 = s2[40] << 18 | s2[41] >>> 14;
          b29 = s2[41] << 18 | s2[40] >>> 14;
          b20 = s2[2] << 1 | s2[3] >>> 31;
          b21 = s2[3] << 1 | s2[2] >>> 31;
          b2 = s2[13] << 12 | s2[12] >>> 20;
          b3 = s2[12] << 12 | s2[13] >>> 20;
          b34 = s2[22] << 10 | s2[23] >>> 22;
          b35 = s2[23] << 10 | s2[22] >>> 22;
          b16 = s2[33] << 13 | s2[32] >>> 19;
          b17 = s2[32] << 13 | s2[33] >>> 19;
          b48 = s2[42] << 2 | s2[43] >>> 30;
          b49 = s2[43] << 2 | s2[42] >>> 30;
          b40 = s2[5] << 30 | s2[4] >>> 2;
          b41 = s2[4] << 30 | s2[5] >>> 2;
          b22 = s2[14] << 6 | s2[15] >>> 26;
          b23 = s2[15] << 6 | s2[14] >>> 26;
          b4 = s2[25] << 11 | s2[24] >>> 21;
          b5 = s2[24] << 11 | s2[25] >>> 21;
          b36 = s2[34] << 15 | s2[35] >>> 17;
          b37 = s2[35] << 15 | s2[34] >>> 17;
          b18 = s2[45] << 29 | s2[44] >>> 3;
          b19 = s2[44] << 29 | s2[45] >>> 3;
          b10 = s2[6] << 28 | s2[7] >>> 4;
          b11 = s2[7] << 28 | s2[6] >>> 4;
          b42 = s2[17] << 23 | s2[16] >>> 9;
          b43 = s2[16] << 23 | s2[17] >>> 9;
          b24 = s2[26] << 25 | s2[27] >>> 7;
          b25 = s2[27] << 25 | s2[26] >>> 7;
          b62 = s2[36] << 21 | s2[37] >>> 11;
          b7 = s2[37] << 21 | s2[36] >>> 11;
          b38 = s2[47] << 24 | s2[46] >>> 8;
          b39 = s2[46] << 24 | s2[47] >>> 8;
          b30 = s2[8] << 27 | s2[9] >>> 5;
          b31 = s2[9] << 27 | s2[8] >>> 5;
          b122 = s2[18] << 20 | s2[19] >>> 12;
          b13 = s2[19] << 20 | s2[18] >>> 12;
          b44 = s2[29] << 7 | s2[28] >>> 25;
          b45 = s2[28] << 7 | s2[29] >>> 25;
          b26 = s2[38] << 8 | s2[39] >>> 24;
          b27 = s2[39] << 8 | s2[38] >>> 24;
          b8 = s2[48] << 14 | s2[49] >>> 18;
          b9 = s2[49] << 14 | s2[48] >>> 18;
          s2[0] = b0 ^ ~b2 & b4;
          s2[1] = b12 ^ ~b3 & b5;
          s2[10] = b10 ^ ~b122 & b14;
          s2[11] = b11 ^ ~b13 & b15;
          s2[20] = b20 ^ ~b22 & b24;
          s2[21] = b21 ^ ~b23 & b25;
          s2[30] = b30 ^ ~b32 & b34;
          s2[31] = b31 ^ ~b33 & b35;
          s2[40] = b40 ^ ~b42 & b44;
          s2[41] = b41 ^ ~b43 & b45;
          s2[2] = b2 ^ ~b4 & b62;
          s2[3] = b3 ^ ~b5 & b7;
          s2[12] = b122 ^ ~b14 & b16;
          s2[13] = b13 ^ ~b15 & b17;
          s2[22] = b22 ^ ~b24 & b26;
          s2[23] = b23 ^ ~b25 & b27;
          s2[32] = b32 ^ ~b34 & b36;
          s2[33] = b33 ^ ~b35 & b37;
          s2[42] = b42 ^ ~b44 & b46;
          s2[43] = b43 ^ ~b45 & b47;
          s2[4] = b4 ^ ~b62 & b8;
          s2[5] = b5 ^ ~b7 & b9;
          s2[14] = b14 ^ ~b16 & b18;
          s2[15] = b15 ^ ~b17 & b19;
          s2[24] = b24 ^ ~b26 & b28;
          s2[25] = b25 ^ ~b27 & b29;
          s2[34] = b34 ^ ~b36 & b38;
          s2[35] = b35 ^ ~b37 & b39;
          s2[44] = b44 ^ ~b46 & b48;
          s2[45] = b45 ^ ~b47 & b49;
          s2[6] = b62 ^ ~b8 & b0;
          s2[7] = b7 ^ ~b9 & b12;
          s2[16] = b16 ^ ~b18 & b10;
          s2[17] = b17 ^ ~b19 & b11;
          s2[26] = b26 ^ ~b28 & b20;
          s2[27] = b27 ^ ~b29 & b21;
          s2[36] = b36 ^ ~b38 & b30;
          s2[37] = b37 ^ ~b39 & b31;
          s2[46] = b46 ^ ~b48 & b40;
          s2[47] = b47 ^ ~b49 & b41;
          s2[8] = b8 ^ ~b0 & b2;
          s2[9] = b9 ^ ~b12 & b3;
          s2[18] = b18 ^ ~b10 & b122;
          s2[19] = b19 ^ ~b11 & b13;
          s2[28] = b28 ^ ~b20 & b22;
          s2[29] = b29 ^ ~b21 & b23;
          s2[38] = b38 ^ ~b30 & b32;
          s2[39] = b39 ^ ~b31 & b33;
          s2[48] = b48 ^ ~b40 & b42;
          s2[49] = b49 ^ ~b41 & b43;
          s2[0] ^= RC[n];
          s2[1] ^= RC[n + 1];
        }
      };
      if (COMMON_JS) {
        module.exports = methods;
      } else {
        for (i2 = 0; i2 < methodNames.length; ++i2) {
          root[methodNames[i2]] = methods[methodNames[i2]];
        }
        if (AMD) {
          define(function() {
            return methods;
          });
        }
      }
    })();
  }
});

// node_modules/@ethersproject/keccak256/lib.esm/index.js
var lib_exports4 = {};
__export(lib_exports4, {
  keccak256: () => keccak256
});
function keccak256(data) {
  return "0x" + import_js_sha3.default.keccak_256(arrayify(data));
}
var import_js_sha3;
var init_lib5 = __esm({
  "node_modules/@ethersproject/keccak256/lib.esm/index.js"() {
    init_define_process();
    import_js_sha3 = __toModule(require_sha3());
    init_lib2();
    "use strict";
  }
});

// node_modules/@ethersproject/rlp/lib.esm/_version.js
var version6;
var init_version6 = __esm({
  "node_modules/@ethersproject/rlp/lib.esm/_version.js"() {
    init_define_process();
    version6 = "rlp/5.6.0";
  }
});

// node_modules/@ethersproject/rlp/lib.esm/index.js
var lib_exports5 = {};
__export(lib_exports5, {
  decode: () => decode,
  encode: () => encode
});
function arrayifyInteger(value2) {
  const result = [];
  while (value2) {
    result.unshift(value2 & 255);
    value2 >>= 8;
  }
  return result;
}
function unarrayifyInteger(data, offset, length) {
  let result = 0;
  for (let i2 = 0; i2 < length; i2++) {
    result = result * 256 + data[offset + i2];
  }
  return result;
}
function _encode(object) {
  if (Array.isArray(object)) {
    let payload = [];
    object.forEach(function(child) {
      payload = payload.concat(_encode(child));
    });
    if (payload.length <= 55) {
      payload.unshift(192 + payload.length);
      return payload;
    }
    const length2 = arrayifyInteger(payload.length);
    length2.unshift(247 + length2.length);
    return length2.concat(payload);
  }
  if (!isBytesLike(object)) {
    logger7.throwArgumentError("RLP object must be BytesLike", "object", object);
  }
  const data = Array.prototype.slice.call(arrayify(object));
  if (data.length === 1 && data[0] <= 127) {
    return data;
  } else if (data.length <= 55) {
    data.unshift(128 + data.length);
    return data;
  }
  const length = arrayifyInteger(data.length);
  length.unshift(183 + length.length);
  return length.concat(data);
}
function encode(object) {
  return hexlify(_encode(object));
}
function _decodeChildren(data, offset, childOffset, length) {
  const result = [];
  while (childOffset < offset + 1 + length) {
    const decoded = _decode(data, childOffset);
    result.push(decoded.result);
    childOffset += decoded.consumed;
    if (childOffset > offset + 1 + length) {
      logger7.throwError("child data too short", Logger.errors.BUFFER_OVERRUN, {});
    }
  }
  return { consumed: 1 + length, result };
}
function _decode(data, offset) {
  if (data.length === 0) {
    logger7.throwError("data too short", Logger.errors.BUFFER_OVERRUN, {});
  }
  if (data[offset] >= 248) {
    const lengthLength = data[offset] - 247;
    if (offset + 1 + lengthLength > data.length) {
      logger7.throwError("data short segment too short", Logger.errors.BUFFER_OVERRUN, {});
    }
    const length = unarrayifyInteger(data, offset + 1, lengthLength);
    if (offset + 1 + lengthLength + length > data.length) {
      logger7.throwError("data long segment too short", Logger.errors.BUFFER_OVERRUN, {});
    }
    return _decodeChildren(data, offset, offset + 1 + lengthLength, lengthLength + length);
  } else if (data[offset] >= 192) {
    const length = data[offset] - 192;
    if (offset + 1 + length > data.length) {
      logger7.throwError("data array too short", Logger.errors.BUFFER_OVERRUN, {});
    }
    return _decodeChildren(data, offset, offset + 1, length);
  } else if (data[offset] >= 184) {
    const lengthLength = data[offset] - 183;
    if (offset + 1 + lengthLength > data.length) {
      logger7.throwError("data array too short", Logger.errors.BUFFER_OVERRUN, {});
    }
    const length = unarrayifyInteger(data, offset + 1, lengthLength);
    if (offset + 1 + lengthLength + length > data.length) {
      logger7.throwError("data array too short", Logger.errors.BUFFER_OVERRUN, {});
    }
    const result = hexlify(data.slice(offset + 1 + lengthLength, offset + 1 + lengthLength + length));
    return { consumed: 1 + lengthLength + length, result };
  } else if (data[offset] >= 128) {
    const length = data[offset] - 128;
    if (offset + 1 + length > data.length) {
      logger7.throwError("data too short", Logger.errors.BUFFER_OVERRUN, {});
    }
    const result = hexlify(data.slice(offset + 1, offset + 1 + length));
    return { consumed: 1 + length, result };
  }
  return { consumed: 1, result: hexlify(data[offset]) };
}
function decode(data) {
  const bytes = arrayify(data);
  const decoded = _decode(bytes, 0);
  if (decoded.consumed !== bytes.length) {
    logger7.throwArgumentError("invalid rlp data", "data", data);
  }
  return decoded.result;
}
var logger7;
var init_lib6 = __esm({
  "node_modules/@ethersproject/rlp/lib.esm/index.js"() {
    init_define_process();
    init_lib2();
    init_lib();
    init_version6();
    "use strict";
    logger7 = new Logger(version6);
  }
});

// node_modules/@ethersproject/address/lib.esm/_version.js
var version7;
var init_version7 = __esm({
  "node_modules/@ethersproject/address/lib.esm/_version.js"() {
    init_define_process();
    version7 = "address/5.6.0";
  }
});

// node_modules/@ethersproject/address/lib.esm/index.js
var lib_exports6 = {};
__export(lib_exports6, {
  getAddress: () => getAddress,
  getContractAddress: () => getContractAddress,
  getCreate2Address: () => getCreate2Address,
  getIcapAddress: () => getIcapAddress,
  isAddress: () => isAddress
});
function getChecksumAddress(address) {
  if (!isHexString(address, 20)) {
    logger8.throwArgumentError("invalid address", "address", address);
  }
  address = address.toLowerCase();
  const chars = address.substring(2).split("");
  const expanded = new Uint8Array(40);
  for (let i2 = 0; i2 < 40; i2++) {
    expanded[i2] = chars[i2].charCodeAt(0);
  }
  const hashed = arrayify(keccak256(expanded));
  for (let i2 = 0; i2 < 40; i2 += 2) {
    if (hashed[i2 >> 1] >> 4 >= 8) {
      chars[i2] = chars[i2].toUpperCase();
    }
    if ((hashed[i2 >> 1] & 15) >= 8) {
      chars[i2 + 1] = chars[i2 + 1].toUpperCase();
    }
  }
  return "0x" + chars.join("");
}
function log10(x4) {
  if (Math.log10) {
    return Math.log10(x4);
  }
  return Math.log(x4) / Math.LN10;
}
function ibanChecksum(address) {
  address = address.toUpperCase();
  address = address.substring(4) + address.substring(0, 2) + "00";
  let expanded = address.split("").map((c2) => {
    return ibanLookup[c2];
  }).join("");
  while (expanded.length >= safeDigits) {
    let block = expanded.substring(0, safeDigits);
    expanded = parseInt(block, 10) % 97 + expanded.substring(block.length);
  }
  let checksum = String(98 - parseInt(expanded, 10) % 97);
  while (checksum.length < 2) {
    checksum = "0" + checksum;
  }
  return checksum;
}
function getAddress(address) {
  let result = null;
  if (typeof address !== "string") {
    logger8.throwArgumentError("invalid address", "address", address);
  }
  if (address.match(/^(0x)?[0-9a-fA-F]{40}$/)) {
    if (address.substring(0, 2) !== "0x") {
      address = "0x" + address;
    }
    result = getChecksumAddress(address);
    if (address.match(/([A-F].*[a-f])|([a-f].*[A-F])/) && result !== address) {
      logger8.throwArgumentError("bad address checksum", "address", address);
    }
  } else if (address.match(/^XE[0-9]{2}[0-9A-Za-z]{30,31}$/)) {
    if (address.substring(2, 4) !== ibanChecksum(address)) {
      logger8.throwArgumentError("bad icap checksum", "address", address);
    }
    result = _base36To16(address.substring(4));
    while (result.length < 40) {
      result = "0" + result;
    }
    result = getChecksumAddress("0x" + result);
  } else {
    logger8.throwArgumentError("invalid address", "address", address);
  }
  return result;
}
function isAddress(address) {
  try {
    getAddress(address);
    return true;
  } catch (error) {
  }
  return false;
}
function getIcapAddress(address) {
  let base36 = _base16To36(getAddress(address).substring(2)).toUpperCase();
  while (base36.length < 30) {
    base36 = "0" + base36;
  }
  return "XE" + ibanChecksum("XE00" + base36) + base36;
}
function getContractAddress(transaction) {
  let from = null;
  try {
    from = getAddress(transaction.from);
  } catch (error) {
    logger8.throwArgumentError("missing from address", "transaction", transaction);
  }
  const nonce = stripZeros(arrayify(BigNumber.from(transaction.nonce).toHexString()));
  return getAddress(hexDataSlice(keccak256(encode([from, nonce])), 12));
}
function getCreate2Address(from, salt, initCodeHash) {
  if (hexDataLength(salt) !== 32) {
    logger8.throwArgumentError("salt must be 32 bytes", "salt", salt);
  }
  if (hexDataLength(initCodeHash) !== 32) {
    logger8.throwArgumentError("initCodeHash must be 32 bytes", "initCodeHash", initCodeHash);
  }
  return getAddress(hexDataSlice(keccak256(concat(["0xff", getAddress(from), salt, initCodeHash])), 12));
}
var logger8, MAX_SAFE_INTEGER, ibanLookup, safeDigits;
var init_lib7 = __esm({
  "node_modules/@ethersproject/address/lib.esm/index.js"() {
    init_define_process();
    init_lib2();
    init_lib3();
    init_lib5();
    init_lib6();
    init_lib();
    init_version7();
    "use strict";
    logger8 = new Logger(version7);
    MAX_SAFE_INTEGER = 9007199254740991;
    ibanLookup = {};
    for (let i2 = 0; i2 < 10; i2++) {
      ibanLookup[String(i2)] = String(i2);
    }
    for (let i2 = 0; i2 < 26; i2++) {
      ibanLookup[String.fromCharCode(65 + i2)] = String(10 + i2);
    }
    safeDigits = Math.floor(log10(MAX_SAFE_INTEGER));
  }
});

// node_modules/@ethersproject/abi/lib.esm/coders/address.js
var AddressCoder;
var init_address = __esm({
  "node_modules/@ethersproject/abi/lib.esm/coders/address.js"() {
    init_define_process();
    init_lib7();
    init_lib2();
    init_abstract_coder();
    "use strict";
    AddressCoder = class extends Coder {
      constructor(localName) {
        super("address", "address", localName, false);
      }
      defaultValue() {
        return "0x0000000000000000000000000000000000000000";
      }
      encode(writer, value2) {
        try {
          value2 = getAddress(value2);
        } catch (error) {
          this._throwError(error.message, value2);
        }
        return writer.writeValue(value2);
      }
      decode(reader) {
        return getAddress(hexZeroPad(reader.readValue().toHexString(), 20));
      }
    };
  }
});

// node_modules/@ethersproject/abi/lib.esm/coders/anonymous.js
var AnonymousCoder;
var init_anonymous = __esm({
  "node_modules/@ethersproject/abi/lib.esm/coders/anonymous.js"() {
    init_define_process();
    init_abstract_coder();
    "use strict";
    AnonymousCoder = class extends Coder {
      constructor(coder) {
        super(coder.name, coder.type, void 0, coder.dynamic);
        this.coder = coder;
      }
      defaultValue() {
        return this.coder.defaultValue();
      }
      encode(writer, value2) {
        return this.coder.encode(writer, value2);
      }
      decode(reader) {
        return this.coder.decode(reader);
      }
    };
  }
});

// node_modules/@ethersproject/abi/lib.esm/coders/array.js
function pack(writer, coders, values) {
  let arrayValues = null;
  if (Array.isArray(values)) {
    arrayValues = values;
  } else if (values && typeof values === "object") {
    let unique = {};
    arrayValues = coders.map((coder) => {
      const name2 = coder.localName;
      if (!name2) {
        logger9.throwError("cannot encode object for signature with missing names", Logger.errors.INVALID_ARGUMENT, {
          argument: "values",
          coder,
          value: values
        });
      }
      if (unique[name2]) {
        logger9.throwError("cannot encode object for signature with duplicate names", Logger.errors.INVALID_ARGUMENT, {
          argument: "values",
          coder,
          value: values
        });
      }
      unique[name2] = true;
      return values[name2];
    });
  } else {
    logger9.throwArgumentError("invalid tuple value", "tuple", values);
  }
  if (coders.length !== arrayValues.length) {
    logger9.throwArgumentError("types/value length mismatch", "tuple", values);
  }
  let staticWriter = new Writer(writer.wordSize);
  let dynamicWriter = new Writer(writer.wordSize);
  let updateFuncs = [];
  coders.forEach((coder, index) => {
    let value2 = arrayValues[index];
    if (coder.dynamic) {
      let dynamicOffset = dynamicWriter.length;
      coder.encode(dynamicWriter, value2);
      let updateFunc = staticWriter.writeUpdatableValue();
      updateFuncs.push((baseOffset) => {
        updateFunc(baseOffset + dynamicOffset);
      });
    } else {
      coder.encode(staticWriter, value2);
    }
  });
  updateFuncs.forEach((func) => {
    func(staticWriter.length);
  });
  let length = writer.appendWriter(staticWriter);
  length += writer.appendWriter(dynamicWriter);
  return length;
}
function unpack(reader, coders) {
  let values = [];
  let baseReader = reader.subReader(0);
  coders.forEach((coder) => {
    let value2 = null;
    if (coder.dynamic) {
      let offset = reader.readValue();
      let offsetReader = baseReader.subReader(offset.toNumber());
      try {
        value2 = coder.decode(offsetReader);
      } catch (error) {
        if (error.code === Logger.errors.BUFFER_OVERRUN) {
          throw error;
        }
        value2 = error;
        value2.baseType = coder.name;
        value2.name = coder.localName;
        value2.type = coder.type;
      }
    } else {
      try {
        value2 = coder.decode(reader);
      } catch (error) {
        if (error.code === Logger.errors.BUFFER_OVERRUN) {
          throw error;
        }
        value2 = error;
        value2.baseType = coder.name;
        value2.name = coder.localName;
        value2.type = coder.type;
      }
    }
    if (value2 != void 0) {
      values.push(value2);
    }
  });
  const uniqueNames = coders.reduce((accum, coder) => {
    const name2 = coder.localName;
    if (name2) {
      if (!accum[name2]) {
        accum[name2] = 0;
      }
      accum[name2]++;
    }
    return accum;
  }, {});
  coders.forEach((coder, index) => {
    let name2 = coder.localName;
    if (!name2 || uniqueNames[name2] !== 1) {
      return;
    }
    if (name2 === "length") {
      name2 = "_length";
    }
    if (values[name2] != null) {
      return;
    }
    const value2 = values[index];
    if (value2 instanceof Error) {
      Object.defineProperty(values, name2, {
        enumerable: true,
        get: () => {
          throw value2;
        }
      });
    } else {
      values[name2] = value2;
    }
  });
  for (let i2 = 0; i2 < values.length; i2++) {
    const value2 = values[i2];
    if (value2 instanceof Error) {
      Object.defineProperty(values, i2, {
        enumerable: true,
        get: () => {
          throw value2;
        }
      });
    }
  }
  return Object.freeze(values);
}
var logger9, ArrayCoder;
var init_array = __esm({
  "node_modules/@ethersproject/abi/lib.esm/coders/array.js"() {
    init_define_process();
    init_lib();
    init_version5();
    init_abstract_coder();
    init_anonymous();
    "use strict";
    logger9 = new Logger(version5);
    ArrayCoder = class extends Coder {
      constructor(coder, length, localName) {
        const type = coder.type + "[" + (length >= 0 ? length : "") + "]";
        const dynamic = length === -1 || coder.dynamic;
        super("array", type, localName, dynamic);
        this.coder = coder;
        this.length = length;
      }
      defaultValue() {
        const defaultChild = this.coder.defaultValue();
        const result = [];
        for (let i2 = 0; i2 < this.length; i2++) {
          result.push(defaultChild);
        }
        return result;
      }
      encode(writer, value2) {
        if (!Array.isArray(value2)) {
          this._throwError("expected array value", value2);
        }
        let count = this.length;
        if (count === -1) {
          count = value2.length;
          writer.writeValue(value2.length);
        }
        logger9.checkArgumentCount(value2.length, count, "coder array" + (this.localName ? " " + this.localName : ""));
        let coders = [];
        for (let i2 = 0; i2 < value2.length; i2++) {
          coders.push(this.coder);
        }
        return pack(writer, coders, value2);
      }
      decode(reader) {
        let count = this.length;
        if (count === -1) {
          count = reader.readValue().toNumber();
          if (count * 32 > reader._data.length) {
            logger9.throwError("insufficient data length", Logger.errors.BUFFER_OVERRUN, {
              length: reader._data.length,
              count
            });
          }
        }
        let coders = [];
        for (let i2 = 0; i2 < count; i2++) {
          coders.push(new AnonymousCoder(this.coder));
        }
        return reader.coerce(this.name, unpack(reader, coders));
      }
    };
  }
});

// node_modules/@ethersproject/abi/lib.esm/coders/boolean.js
var BooleanCoder;
var init_boolean = __esm({
  "node_modules/@ethersproject/abi/lib.esm/coders/boolean.js"() {
    init_define_process();
    init_abstract_coder();
    "use strict";
    BooleanCoder = class extends Coder {
      constructor(localName) {
        super("bool", "bool", localName, false);
      }
      defaultValue() {
        return false;
      }
      encode(writer, value2) {
        return writer.writeValue(value2 ? 1 : 0);
      }
      decode(reader) {
        return reader.coerce(this.type, !reader.readValue().isZero());
      }
    };
  }
});

// node_modules/@ethersproject/abi/lib.esm/coders/bytes.js
var DynamicBytesCoder, BytesCoder;
var init_bytes = __esm({
  "node_modules/@ethersproject/abi/lib.esm/coders/bytes.js"() {
    init_define_process();
    init_lib2();
    init_abstract_coder();
    "use strict";
    DynamicBytesCoder = class extends Coder {
      constructor(type, localName) {
        super(type, type, localName, true);
      }
      defaultValue() {
        return "0x";
      }
      encode(writer, value2) {
        value2 = arrayify(value2);
        let length = writer.writeValue(value2.length);
        length += writer.writeBytes(value2);
        return length;
      }
      decode(reader) {
        return reader.readBytes(reader.readValue().toNumber(), true);
      }
    };
    BytesCoder = class extends DynamicBytesCoder {
      constructor(localName) {
        super("bytes", localName);
      }
      decode(reader) {
        return reader.coerce(this.name, hexlify(super.decode(reader)));
      }
    };
  }
});

// node_modules/@ethersproject/abi/lib.esm/coders/fixed-bytes.js
var FixedBytesCoder;
var init_fixed_bytes = __esm({
  "node_modules/@ethersproject/abi/lib.esm/coders/fixed-bytes.js"() {
    init_define_process();
    init_lib2();
    init_abstract_coder();
    "use strict";
    FixedBytesCoder = class extends Coder {
      constructor(size, localName) {
        let name2 = "bytes" + String(size);
        super(name2, name2, localName, false);
        this.size = size;
      }
      defaultValue() {
        return "0x0000000000000000000000000000000000000000000000000000000000000000".substring(0, 2 + this.size * 2);
      }
      encode(writer, value2) {
        let data = arrayify(value2);
        if (data.length !== this.size) {
          this._throwError("incorrect data length", value2);
        }
        return writer.writeBytes(data);
      }
      decode(reader) {
        return reader.coerce(this.name, hexlify(reader.readBytes(this.size)));
      }
    };
  }
});

// node_modules/@ethersproject/abi/lib.esm/coders/null.js
var NullCoder;
var init_null = __esm({
  "node_modules/@ethersproject/abi/lib.esm/coders/null.js"() {
    init_define_process();
    init_abstract_coder();
    "use strict";
    NullCoder = class extends Coder {
      constructor(localName) {
        super("null", "", localName, false);
      }
      defaultValue() {
        return null;
      }
      encode(writer, value2) {
        if (value2 != null) {
          this._throwError("not null", value2);
        }
        return writer.writeBytes([]);
      }
      decode(reader) {
        reader.readBytes(0);
        return reader.coerce(this.name, null);
      }
    };
  }
});

// node_modules/@ethersproject/constants/lib.esm/addresses.js
var AddressZero;
var init_addresses = __esm({
  "node_modules/@ethersproject/constants/lib.esm/addresses.js"() {
    init_define_process();
    AddressZero = "0x0000000000000000000000000000000000000000";
  }
});

// node_modules/@ethersproject/constants/lib.esm/bignumbers.js
var NegativeOne2, Zero2, One, Two, WeiPerEther, MaxUint256, MinInt256, MaxInt256;
var init_bignumbers = __esm({
  "node_modules/@ethersproject/constants/lib.esm/bignumbers.js"() {
    init_define_process();
    init_lib3();
    NegativeOne2 = BigNumber.from(-1);
    Zero2 = BigNumber.from(0);
    One = BigNumber.from(1);
    Two = BigNumber.from(2);
    WeiPerEther = BigNumber.from("1000000000000000000");
    MaxUint256 = BigNumber.from("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
    MinInt256 = BigNumber.from("-0x8000000000000000000000000000000000000000000000000000000000000000");
    MaxInt256 = BigNumber.from("0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
  }
});

// node_modules/@ethersproject/constants/lib.esm/hashes.js
var HashZero;
var init_hashes = __esm({
  "node_modules/@ethersproject/constants/lib.esm/hashes.js"() {
    init_define_process();
    HashZero = "0x0000000000000000000000000000000000000000000000000000000000000000";
  }
});

// node_modules/@ethersproject/constants/lib.esm/strings.js
var EtherSymbol;
var init_strings = __esm({
  "node_modules/@ethersproject/constants/lib.esm/strings.js"() {
    init_define_process();
    EtherSymbol = "\u039E";
  }
});

// node_modules/@ethersproject/constants/lib.esm/index.js
var lib_exports7 = {};
__export(lib_exports7, {
  AddressZero: () => AddressZero,
  EtherSymbol: () => EtherSymbol,
  HashZero: () => HashZero,
  MaxInt256: () => MaxInt256,
  MaxUint256: () => MaxUint256,
  MinInt256: () => MinInt256,
  NegativeOne: () => NegativeOne2,
  One: () => One,
  Two: () => Two,
  WeiPerEther: () => WeiPerEther,
  Zero: () => Zero2
});
var init_lib8 = __esm({
  "node_modules/@ethersproject/constants/lib.esm/index.js"() {
    init_define_process();
    init_addresses();
    init_bignumbers();
    init_hashes();
    init_strings();
    "use strict";
  }
});

// node_modules/@ethersproject/abi/lib.esm/coders/number.js
var NumberCoder;
var init_number = __esm({
  "node_modules/@ethersproject/abi/lib.esm/coders/number.js"() {
    init_define_process();
    init_lib3();
    init_lib8();
    init_abstract_coder();
    "use strict";
    NumberCoder = class extends Coder {
      constructor(size, signed, localName) {
        const name2 = (signed ? "int" : "uint") + size * 8;
        super(name2, name2, localName, false);
        this.size = size;
        this.signed = signed;
      }
      defaultValue() {
        return 0;
      }
      encode(writer, value2) {
        let v7 = BigNumber.from(value2);
        let maxUintValue = MaxUint256.mask(writer.wordSize * 8);
        if (this.signed) {
          let bounds = maxUintValue.mask(this.size * 8 - 1);
          if (v7.gt(bounds) || v7.lt(bounds.add(One).mul(NegativeOne2))) {
            this._throwError("value out-of-bounds", value2);
          }
        } else if (v7.lt(Zero2) || v7.gt(maxUintValue.mask(this.size * 8))) {
          this._throwError("value out-of-bounds", value2);
        }
        v7 = v7.toTwos(this.size * 8).mask(this.size * 8);
        if (this.signed) {
          v7 = v7.fromTwos(this.size * 8).toTwos(8 * writer.wordSize);
        }
        return writer.writeValue(v7);
      }
      decode(reader) {
        let value2 = reader.readValue().mask(this.size * 8);
        if (this.signed) {
          value2 = value2.fromTwos(this.size * 8);
        }
        return reader.coerce(this.name, value2);
      }
    };
  }
});

// node_modules/@ethersproject/strings/lib.esm/_version.js
var version8;
var init_version8 = __esm({
  "node_modules/@ethersproject/strings/lib.esm/_version.js"() {
    init_define_process();
    version8 = "strings/5.6.0";
  }
});

// node_modules/@ethersproject/strings/lib.esm/utf8.js
function errorFunc(reason, offset, bytes, output, badCodepoint) {
  return logger10.throwArgumentError(`invalid codepoint at offset ${offset}; ${reason}`, "bytes", bytes);
}
function ignoreFunc(reason, offset, bytes, output, badCodepoint) {
  if (reason === Utf8ErrorReason.BAD_PREFIX || reason === Utf8ErrorReason.UNEXPECTED_CONTINUE) {
    let i2 = 0;
    for (let o2 = offset + 1; o2 < bytes.length; o2++) {
      if (bytes[o2] >> 6 !== 2) {
        break;
      }
      i2++;
    }
    return i2;
  }
  if (reason === Utf8ErrorReason.OVERRUN) {
    return bytes.length - offset - 1;
  }
  return 0;
}
function replaceFunc(reason, offset, bytes, output, badCodepoint) {
  if (reason === Utf8ErrorReason.OVERLONG) {
    output.push(badCodepoint);
    return 0;
  }
  output.push(65533);
  return ignoreFunc(reason, offset, bytes, output, badCodepoint);
}
function getUtf8CodePoints(bytes, onError) {
  if (onError == null) {
    onError = Utf8ErrorFuncs.error;
  }
  bytes = arrayify(bytes);
  const result = [];
  let i2 = 0;
  while (i2 < bytes.length) {
    const c2 = bytes[i2++];
    if (c2 >> 7 === 0) {
      result.push(c2);
      continue;
    }
    let extraLength = null;
    let overlongMask = null;
    if ((c2 & 224) === 192) {
      extraLength = 1;
      overlongMask = 127;
    } else if ((c2 & 240) === 224) {
      extraLength = 2;
      overlongMask = 2047;
    } else if ((c2 & 248) === 240) {
      extraLength = 3;
      overlongMask = 65535;
    } else {
      if ((c2 & 192) === 128) {
        i2 += onError(Utf8ErrorReason.UNEXPECTED_CONTINUE, i2 - 1, bytes, result);
      } else {
        i2 += onError(Utf8ErrorReason.BAD_PREFIX, i2 - 1, bytes, result);
      }
      continue;
    }
    if (i2 - 1 + extraLength >= bytes.length) {
      i2 += onError(Utf8ErrorReason.OVERRUN, i2 - 1, bytes, result);
      continue;
    }
    let res = c2 & (1 << 8 - extraLength - 1) - 1;
    for (let j3 = 0; j3 < extraLength; j3++) {
      let nextChar = bytes[i2];
      if ((nextChar & 192) != 128) {
        i2 += onError(Utf8ErrorReason.MISSING_CONTINUE, i2, bytes, result);
        res = null;
        break;
      }
      ;
      res = res << 6 | nextChar & 63;
      i2++;
    }
    if (res === null) {
      continue;
    }
    if (res > 1114111) {
      i2 += onError(Utf8ErrorReason.OUT_OF_RANGE, i2 - 1 - extraLength, bytes, result, res);
      continue;
    }
    if (res >= 55296 && res <= 57343) {
      i2 += onError(Utf8ErrorReason.UTF16_SURROGATE, i2 - 1 - extraLength, bytes, result, res);
      continue;
    }
    if (res <= overlongMask) {
      i2 += onError(Utf8ErrorReason.OVERLONG, i2 - 1 - extraLength, bytes, result, res);
      continue;
    }
    result.push(res);
  }
  return result;
}
function toUtf8Bytes(str, form = UnicodeNormalizationForm.current) {
  if (form != UnicodeNormalizationForm.current) {
    logger10.checkNormalize();
    str = str.normalize(form);
  }
  let result = [];
  for (let i2 = 0; i2 < str.length; i2++) {
    const c2 = str.charCodeAt(i2);
    if (c2 < 128) {
      result.push(c2);
    } else if (c2 < 2048) {
      result.push(c2 >> 6 | 192);
      result.push(c2 & 63 | 128);
    } else if ((c2 & 64512) == 55296) {
      i2++;
      const c22 = str.charCodeAt(i2);
      if (i2 >= str.length || (c22 & 64512) !== 56320) {
        throw new Error("invalid utf-8 string");
      }
      const pair = 65536 + ((c2 & 1023) << 10) + (c22 & 1023);
      result.push(pair >> 18 | 240);
      result.push(pair >> 12 & 63 | 128);
      result.push(pair >> 6 & 63 | 128);
      result.push(pair & 63 | 128);
    } else {
      result.push(c2 >> 12 | 224);
      result.push(c2 >> 6 & 63 | 128);
      result.push(c2 & 63 | 128);
    }
  }
  return arrayify(result);
}
function escapeChar(value2) {
  const hex = "0000" + value2.toString(16);
  return "\\u" + hex.substring(hex.length - 4);
}
function _toEscapedUtf8String(bytes, onError) {
  return '"' + getUtf8CodePoints(bytes, onError).map((codePoint) => {
    if (codePoint < 256) {
      switch (codePoint) {
        case 8:
          return "\\b";
        case 9:
          return "\\t";
        case 10:
          return "\\n";
        case 13:
          return "\\r";
        case 34:
          return '\\"';
        case 92:
          return "\\\\";
      }
      if (codePoint >= 32 && codePoint < 127) {
        return String.fromCharCode(codePoint);
      }
    }
    if (codePoint <= 65535) {
      return escapeChar(codePoint);
    }
    codePoint -= 65536;
    return escapeChar((codePoint >> 10 & 1023) + 55296) + escapeChar((codePoint & 1023) + 56320);
  }).join("") + '"';
}
function _toUtf8String(codePoints) {
  return codePoints.map((codePoint) => {
    if (codePoint <= 65535) {
      return String.fromCharCode(codePoint);
    }
    codePoint -= 65536;
    return String.fromCharCode((codePoint >> 10 & 1023) + 55296, (codePoint & 1023) + 56320);
  }).join("");
}
function toUtf8String(bytes, onError) {
  return _toUtf8String(getUtf8CodePoints(bytes, onError));
}
function toUtf8CodePoints(str, form = UnicodeNormalizationForm.current) {
  return getUtf8CodePoints(toUtf8Bytes(str, form));
}
var logger10, UnicodeNormalizationForm, Utf8ErrorReason, Utf8ErrorFuncs;
var init_utf8 = __esm({
  "node_modules/@ethersproject/strings/lib.esm/utf8.js"() {
    init_define_process();
    init_lib2();
    init_lib();
    init_version8();
    "use strict";
    logger10 = new Logger(version8);
    (function(UnicodeNormalizationForm2) {
      UnicodeNormalizationForm2["current"] = "";
      UnicodeNormalizationForm2["NFC"] = "NFC";
      UnicodeNormalizationForm2["NFD"] = "NFD";
      UnicodeNormalizationForm2["NFKC"] = "NFKC";
      UnicodeNormalizationForm2["NFKD"] = "NFKD";
    })(UnicodeNormalizationForm || (UnicodeNormalizationForm = {}));
    (function(Utf8ErrorReason2) {
      Utf8ErrorReason2["UNEXPECTED_CONTINUE"] = "unexpected continuation byte";
      Utf8ErrorReason2["BAD_PREFIX"] = "bad codepoint prefix";
      Utf8ErrorReason2["OVERRUN"] = "string overrun";
      Utf8ErrorReason2["MISSING_CONTINUE"] = "missing continuation byte";
      Utf8ErrorReason2["OUT_OF_RANGE"] = "out of UTF-8 range";
      Utf8ErrorReason2["UTF16_SURROGATE"] = "UTF-16 surrogate";
      Utf8ErrorReason2["OVERLONG"] = "overlong representation";
    })(Utf8ErrorReason || (Utf8ErrorReason = {}));
    Utf8ErrorFuncs = Object.freeze({
      error: errorFunc,
      ignore: ignoreFunc,
      replace: replaceFunc
    });
  }
});

// node_modules/@ethersproject/strings/lib.esm/bytes32.js
function formatBytes32String(text) {
  const bytes = toUtf8Bytes(text);
  if (bytes.length > 31) {
    throw new Error("bytes32 string must be less than 32 bytes");
  }
  return hexlify(concat([bytes, HashZero]).slice(0, 32));
}
function parseBytes32String(bytes) {
  const data = arrayify(bytes);
  if (data.length !== 32) {
    throw new Error("invalid bytes32 - not 32 bytes long");
  }
  if (data[31] !== 0) {
    throw new Error("invalid bytes32 string - no null terminator");
  }
  let length = 31;
  while (data[length - 1] === 0) {
    length--;
  }
  return toUtf8String(data.slice(0, length));
}
var init_bytes32 = __esm({
  "node_modules/@ethersproject/strings/lib.esm/bytes32.js"() {
    init_define_process();
    init_lib8();
    init_lib2();
    init_utf8();
    "use strict";
  }
});

// node_modules/@ethersproject/strings/lib.esm/idna.js
function bytes2(data) {
  if (data.length % 4 !== 0) {
    throw new Error("bad data");
  }
  let result = [];
  for (let i2 = 0; i2 < data.length; i2 += 4) {
    result.push(parseInt(data.substring(i2, i2 + 4), 16));
  }
  return result;
}
function createTable(data, func) {
  if (!func) {
    func = function(value2) {
      return [parseInt(value2, 16)];
    };
  }
  let lo2 = 0;
  let result = {};
  data.split(",").forEach((pair) => {
    let comps = pair.split(":");
    lo2 += parseInt(comps[0], 16);
    result[lo2] = func(comps[1]);
  });
  return result;
}
function createRangeTable(data) {
  let hi = 0;
  return data.split(",").map((v7) => {
    let comps = v7.split("-");
    if (comps.length === 1) {
      comps[1] = "0";
    } else if (comps[1] === "") {
      comps[1] = "1";
    }
    let lo2 = hi + parseInt(comps[0], 16);
    hi = parseInt(comps[1], 16);
    return { l: lo2, h: hi };
  });
}
function matchMap(value2, ranges) {
  let lo2 = 0;
  for (let i2 = 0; i2 < ranges.length; i2++) {
    let range = ranges[i2];
    lo2 += range.l;
    if (value2 >= lo2 && value2 <= lo2 + range.h && (value2 - lo2) % (range.d || 1) === 0) {
      if (range.e && range.e.indexOf(value2 - lo2) !== -1) {
        continue;
      }
      return range;
    }
  }
  return null;
}
function flatten(values) {
  return values.reduce((accum, value2) => {
    value2.forEach((value3) => {
      accum.push(value3);
    });
    return accum;
  }, []);
}
function _nameprepTableA1(codepoint) {
  return !!matchMap(codepoint, Table_A_1_ranges);
}
function _nameprepTableB2(codepoint) {
  let range = matchMap(codepoint, Table_B_2_ranges);
  if (range) {
    return [codepoint + range.s];
  }
  let codes = Table_B_2_lut_abs[codepoint];
  if (codes) {
    return codes;
  }
  let shift = Table_B_2_lut_rel[codepoint];
  if (shift) {
    return [codepoint + shift[0]];
  }
  let complex = Table_B_2_complex[codepoint];
  if (complex) {
    return complex;
  }
  return null;
}
function _nameprepTableC(codepoint) {
  return !!matchMap(codepoint, Table_C_ranges);
}
function nameprep(value2) {
  if (value2.match(/^[a-z0-9-]*$/i) && value2.length <= 59) {
    return value2.toLowerCase();
  }
  let codes = toUtf8CodePoints(value2);
  codes = flatten(codes.map((code) => {
    if (Table_B_1_flags.indexOf(code) >= 0) {
      return [];
    }
    if (code >= 65024 && code <= 65039) {
      return [];
    }
    let codesTableB2 = _nameprepTableB2(code);
    if (codesTableB2) {
      return codesTableB2;
    }
    return [code];
  }));
  codes = toUtf8CodePoints(_toUtf8String(codes), UnicodeNormalizationForm.NFKC);
  codes.forEach((code) => {
    if (_nameprepTableC(code)) {
      throw new Error("STRINGPREP_CONTAINS_PROHIBITED");
    }
  });
  codes.forEach((code) => {
    if (_nameprepTableA1(code)) {
      throw new Error("STRINGPREP_CONTAINS_UNASSIGNED");
    }
  });
  let name2 = _toUtf8String(codes);
  if (name2.substring(0, 1) === "-" || name2.substring(2, 4) === "--" || name2.substring(name2.length - 1) === "-") {
    throw new Error("invalid hyphen");
  }
  if (name2.length > 63) {
    throw new Error("too long");
  }
  return name2;
}
var Table_A_1_ranges, Table_B_1_flags, Table_B_2_ranges, Table_B_2_lut_abs, Table_B_2_lut_rel, Table_B_2_complex, Table_C_ranges;
var init_idna = __esm({
  "node_modules/@ethersproject/strings/lib.esm/idna.js"() {
    init_define_process();
    init_utf8();
    "use strict";
    Table_A_1_ranges = createRangeTable("221,13-1b,5f-,40-10,51-f,11-3,3-3,2-2,2-4,8,2,15,2d,28-8,88,48,27-,3-5,11-20,27-,8,28,3-5,12,18,b-a,1c-4,6-16,2-d,2-2,2,1b-4,17-9,8f-,10,f,1f-2,1c-34,33-14e,4,36-,13-,6-2,1a-f,4,9-,3-,17,8,2-2,5-,2,8-,3-,4-8,2-3,3,6-,16-6,2-,7-3,3-,17,8,3,3,3-,2,6-3,3-,4-a,5,2-6,10-b,4,8,2,4,17,8,3,6-,b,4,4-,2-e,2-4,b-10,4,9-,3-,17,8,3-,5-,9-2,3-,4-7,3-3,3,4-3,c-10,3,7-2,4,5-2,3,2,3-2,3-2,4-2,9,4-3,6-2,4,5-8,2-e,d-d,4,9,4,18,b,6-3,8,4,5-6,3-8,3-3,b-11,3,9,4,18,b,6-3,8,4,5-6,3-6,2,3-3,b-11,3,9,4,18,11-3,7-,4,5-8,2-7,3-3,b-11,3,13-2,19,a,2-,8-2,2-3,7,2,9-11,4-b,3b-3,1e-24,3,2-,3,2-,2-5,5,8,4,2,2-,3,e,4-,6,2,7-,b-,3-21,49,23-5,1c-3,9,25,10-,2-2f,23,6,3,8-2,5-5,1b-45,27-9,2a-,2-3,5b-4,45-4,53-5,8,40,2,5-,8,2,5-,28,2,5-,20,2,5-,8,2,5-,8,8,18,20,2,5-,8,28,14-5,1d-22,56-b,277-8,1e-2,52-e,e,8-a,18-8,15-b,e,4,3-b,5e-2,b-15,10,b-5,59-7,2b-555,9d-3,5b-5,17-,7-,27-,7-,9,2,2,2,20-,36,10,f-,7,14-,4,a,54-3,2-6,6-5,9-,1c-10,13-1d,1c-14,3c-,10-6,32-b,240-30,28-18,c-14,a0,115-,3,66-,b-76,5,5-,1d,24,2,5-2,2,8-,35-2,19,f-10,1d-3,311-37f,1b,5a-b,d7-19,d-3,41,57-,68-4,29-3,5f,29-37,2e-2,25-c,2c-2,4e-3,30,78-3,64-,20,19b7-49,51a7-59,48e-2,38-738,2ba5-5b,222f-,3c-94,8-b,6-4,1b,6,2,3,3,6d-20,16e-f,41-,37-7,2e-2,11-f,5-b,18-,b,14,5-3,6,88-,2,bf-2,7-,7-,7-,4-2,8,8-9,8-2ff,20,5-b,1c-b4,27-,27-cbb1,f7-9,28-2,b5-221,56,48,3-,2-,3-,5,d,2,5,3,42,5-,9,8,1d,5,6,2-2,8,153-3,123-3,33-27fd,a6da-5128,21f-5df,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3,2-1d,61-ff7d");
    Table_B_1_flags = "ad,34f,1806,180b,180c,180d,200b,200c,200d,2060,feff".split(",").map((v7) => parseInt(v7, 16));
    Table_B_2_ranges = [
      { h: 25, s: 32, l: 65 },
      { h: 30, s: 32, e: [23], l: 127 },
      { h: 54, s: 1, e: [48], l: 64, d: 2 },
      { h: 14, s: 1, l: 57, d: 2 },
      { h: 44, s: 1, l: 17, d: 2 },
      { h: 10, s: 1, e: [2, 6, 8], l: 61, d: 2 },
      { h: 16, s: 1, l: 68, d: 2 },
      { h: 84, s: 1, e: [18, 24, 66], l: 19, d: 2 },
      { h: 26, s: 32, e: [17], l: 435 },
      { h: 22, s: 1, l: 71, d: 2 },
      { h: 15, s: 80, l: 40 },
      { h: 31, s: 32, l: 16 },
      { h: 32, s: 1, l: 80, d: 2 },
      { h: 52, s: 1, l: 42, d: 2 },
      { h: 12, s: 1, l: 55, d: 2 },
      { h: 40, s: 1, e: [38], l: 15, d: 2 },
      { h: 14, s: 1, l: 48, d: 2 },
      { h: 37, s: 48, l: 49 },
      { h: 148, s: 1, l: 6351, d: 2 },
      { h: 88, s: 1, l: 160, d: 2 },
      { h: 15, s: 16, l: 704 },
      { h: 25, s: 26, l: 854 },
      { h: 25, s: 32, l: 55915 },
      { h: 37, s: 40, l: 1247 },
      { h: 25, s: -119711, l: 53248 },
      { h: 25, s: -119763, l: 52 },
      { h: 25, s: -119815, l: 52 },
      { h: 25, s: -119867, e: [1, 4, 5, 7, 8, 11, 12, 17], l: 52 },
      { h: 25, s: -119919, l: 52 },
      { h: 24, s: -119971, e: [2, 7, 8, 17], l: 52 },
      { h: 24, s: -120023, e: [2, 7, 13, 15, 16, 17], l: 52 },
      { h: 25, s: -120075, l: 52 },
      { h: 25, s: -120127, l: 52 },
      { h: 25, s: -120179, l: 52 },
      { h: 25, s: -120231, l: 52 },
      { h: 25, s: -120283, l: 52 },
      { h: 25, s: -120335, l: 52 },
      { h: 24, s: -119543, e: [17], l: 56 },
      { h: 24, s: -119601, e: [17], l: 58 },
      { h: 24, s: -119659, e: [17], l: 58 },
      { h: 24, s: -119717, e: [17], l: 58 },
      { h: 24, s: -119775, e: [17], l: 58 }
    ];
    Table_B_2_lut_abs = createTable("b5:3bc,c3:ff,7:73,2:253,5:254,3:256,1:257,5:259,1:25b,3:260,1:263,2:269,1:268,5:26f,1:272,2:275,7:280,3:283,5:288,3:28a,1:28b,5:292,3f:195,1:1bf,29:19e,125:3b9,8b:3b2,1:3b8,1:3c5,3:3c6,1:3c0,1a:3ba,1:3c1,1:3c3,2:3b8,1:3b5,1bc9:3b9,1c:1f76,1:1f77,f:1f7a,1:1f7b,d:1f78,1:1f79,1:1f7c,1:1f7d,107:63,5:25b,4:68,1:68,1:68,3:69,1:69,1:6c,3:6e,4:70,1:71,1:72,1:72,1:72,7:7a,2:3c9,2:7a,2:6b,1:e5,1:62,1:63,3:65,1:66,2:6d,b:3b3,1:3c0,6:64,1b574:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3");
    Table_B_2_lut_rel = createTable("179:1,2:1,2:1,5:1,2:1,a:4f,a:1,8:1,2:1,2:1,3:1,5:1,3:1,4:1,2:1,3:1,4:1,8:2,1:1,2:2,1:1,2:2,27:2,195:26,2:25,1:25,1:25,2:40,2:3f,1:3f,33:1,11:-6,1:-9,1ac7:-3a,6d:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,b:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,c:-8,2:-8,2:-8,2:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,49:-8,1:-8,1:-4a,1:-4a,d:-56,1:-56,1:-56,1:-56,d:-8,1:-8,f:-8,1:-8,3:-7");
    Table_B_2_complex = createTable("df:00730073,51:00690307,19:02BC006E,a7:006A030C,18a:002003B9,16:03B903080301,20:03C503080301,1d7:05650582,190f:00680331,1:00740308,1:0077030A,1:0079030A,1:006102BE,b6:03C50313,2:03C503130300,2:03C503130301,2:03C503130342,2a:1F0003B9,1:1F0103B9,1:1F0203B9,1:1F0303B9,1:1F0403B9,1:1F0503B9,1:1F0603B9,1:1F0703B9,1:1F0003B9,1:1F0103B9,1:1F0203B9,1:1F0303B9,1:1F0403B9,1:1F0503B9,1:1F0603B9,1:1F0703B9,1:1F2003B9,1:1F2103B9,1:1F2203B9,1:1F2303B9,1:1F2403B9,1:1F2503B9,1:1F2603B9,1:1F2703B9,1:1F2003B9,1:1F2103B9,1:1F2203B9,1:1F2303B9,1:1F2403B9,1:1F2503B9,1:1F2603B9,1:1F2703B9,1:1F6003B9,1:1F6103B9,1:1F6203B9,1:1F6303B9,1:1F6403B9,1:1F6503B9,1:1F6603B9,1:1F6703B9,1:1F6003B9,1:1F6103B9,1:1F6203B9,1:1F6303B9,1:1F6403B9,1:1F6503B9,1:1F6603B9,1:1F6703B9,3:1F7003B9,1:03B103B9,1:03AC03B9,2:03B10342,1:03B1034203B9,5:03B103B9,6:1F7403B9,1:03B703B9,1:03AE03B9,2:03B70342,1:03B7034203B9,5:03B703B9,6:03B903080300,1:03B903080301,3:03B90342,1:03B903080342,b:03C503080300,1:03C503080301,1:03C10313,2:03C50342,1:03C503080342,b:1F7C03B9,1:03C903B9,1:03CE03B9,2:03C90342,1:03C9034203B9,5:03C903B9,ac:00720073,5b:00B00063,6:00B00066,d:006E006F,a:0073006D,1:00740065006C,1:0074006D,124f:006800700061,2:00610075,2:006F0076,b:00700061,1:006E0061,1:03BC0061,1:006D0061,1:006B0061,1:006B0062,1:006D0062,1:00670062,3:00700066,1:006E0066,1:03BC0066,4:0068007A,1:006B0068007A,1:006D0068007A,1:00670068007A,1:00740068007A,15:00700061,1:006B00700061,1:006D00700061,1:006700700061,8:00700076,1:006E0076,1:03BC0076,1:006D0076,1:006B0076,1:006D0076,1:00700077,1:006E0077,1:03BC0077,1:006D0077,1:006B0077,1:006D0077,1:006B03C9,1:006D03C9,2:00620071,3:00632215006B0067,1:0063006F002E,1:00640062,1:00670079,2:00680070,2:006B006B,1:006B006D,9:00700068,2:00700070006D,1:00700072,2:00730076,1:00770062,c723:00660066,1:00660069,1:0066006C,1:006600660069,1:00660066006C,1:00730074,1:00730074,d:05740576,1:05740565,1:0574056B,1:057E0576,1:0574056D", bytes2);
    Table_C_ranges = createRangeTable("80-20,2a0-,39c,32,f71,18e,7f2-f,19-7,30-4,7-5,f81-b,5,a800-20ff,4d1-1f,110,fa-6,d174-7,2e84-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,2,1f-5f,ff7f-20001");
  }
});

// node_modules/@ethersproject/strings/lib.esm/index.js
var lib_exports8 = {};
__export(lib_exports8, {
  UnicodeNormalizationForm: () => UnicodeNormalizationForm,
  Utf8ErrorFuncs: () => Utf8ErrorFuncs,
  Utf8ErrorReason: () => Utf8ErrorReason,
  _toEscapedUtf8String: () => _toEscapedUtf8String,
  formatBytes32String: () => formatBytes32String,
  nameprep: () => nameprep,
  parseBytes32String: () => parseBytes32String,
  toUtf8Bytes: () => toUtf8Bytes,
  toUtf8CodePoints: () => toUtf8CodePoints,
  toUtf8String: () => toUtf8String
});
var init_lib9 = __esm({
  "node_modules/@ethersproject/strings/lib.esm/index.js"() {
    init_define_process();
    init_bytes32();
    init_idna();
    init_utf8();
    "use strict";
  }
});

// node_modules/@ethersproject/abi/lib.esm/coders/string.js
var StringCoder;
var init_string = __esm({
  "node_modules/@ethersproject/abi/lib.esm/coders/string.js"() {
    init_define_process();
    init_lib9();
    init_bytes();
    "use strict";
    StringCoder = class extends DynamicBytesCoder {
      constructor(localName) {
        super("string", localName);
      }
      defaultValue() {
        return "";
      }
      encode(writer, value2) {
        return super.encode(writer, toUtf8Bytes(value2));
      }
      decode(reader) {
        return toUtf8String(super.decode(reader));
      }
    };
  }
});

// node_modules/@ethersproject/abi/lib.esm/coders/tuple.js
var TupleCoder;
var init_tuple = __esm({
  "node_modules/@ethersproject/abi/lib.esm/coders/tuple.js"() {
    init_define_process();
    init_abstract_coder();
    init_array();
    "use strict";
    TupleCoder = class extends Coder {
      constructor(coders, localName) {
        let dynamic = false;
        const types = [];
        coders.forEach((coder) => {
          if (coder.dynamic) {
            dynamic = true;
          }
          types.push(coder.type);
        });
        const type = "tuple(" + types.join(",") + ")";
        super("tuple", type, localName, dynamic);
        this.coders = coders;
      }
      defaultValue() {
        const values = [];
        this.coders.forEach((coder) => {
          values.push(coder.defaultValue());
        });
        const uniqueNames = this.coders.reduce((accum, coder) => {
          const name2 = coder.localName;
          if (name2) {
            if (!accum[name2]) {
              accum[name2] = 0;
            }
            accum[name2]++;
          }
          return accum;
        }, {});
        this.coders.forEach((coder, index) => {
          let name2 = coder.localName;
          if (!name2 || uniqueNames[name2] !== 1) {
            return;
          }
          if (name2 === "length") {
            name2 = "_length";
          }
          if (values[name2] != null) {
            return;
          }
          values[name2] = values[index];
        });
        return Object.freeze(values);
      }
      encode(writer, value2) {
        return pack(writer, this.coders, value2);
      }
      decode(reader) {
        return reader.coerce(this.name, unpack(reader, this.coders));
      }
    };
  }
});

// node_modules/@ethersproject/abi/lib.esm/abi-coder.js
var logger11, paramTypeBytes, paramTypeNumber, AbiCoder, defaultAbiCoder;
var init_abi_coder = __esm({
  "node_modules/@ethersproject/abi/lib.esm/abi-coder.js"() {
    init_define_process();
    init_lib2();
    init_lib4();
    init_lib();
    init_version5();
    init_abstract_coder();
    init_address();
    init_array();
    init_boolean();
    init_bytes();
    init_fixed_bytes();
    init_null();
    init_number();
    init_string();
    init_tuple();
    init_fragments();
    "use strict";
    logger11 = new Logger(version5);
    paramTypeBytes = new RegExp(/^bytes([0-9]*)$/);
    paramTypeNumber = new RegExp(/^(u?int)([0-9]*)$/);
    AbiCoder = class {
      constructor(coerceFunc) {
        logger11.checkNew(new.target, AbiCoder);
        defineReadOnly(this, "coerceFunc", coerceFunc || null);
      }
      _getCoder(param) {
        switch (param.baseType) {
          case "address":
            return new AddressCoder(param.name);
          case "bool":
            return new BooleanCoder(param.name);
          case "string":
            return new StringCoder(param.name);
          case "bytes":
            return new BytesCoder(param.name);
          case "array":
            return new ArrayCoder(this._getCoder(param.arrayChildren), param.arrayLength, param.name);
          case "tuple":
            return new TupleCoder((param.components || []).map((component) => {
              return this._getCoder(component);
            }), param.name);
          case "":
            return new NullCoder(param.name);
        }
        let match = param.type.match(paramTypeNumber);
        if (match) {
          let size = parseInt(match[2] || "256");
          if (size === 0 || size > 256 || size % 8 !== 0) {
            logger11.throwArgumentError("invalid " + match[1] + " bit length", "param", param);
          }
          return new NumberCoder(size / 8, match[1] === "int", param.name);
        }
        match = param.type.match(paramTypeBytes);
        if (match) {
          let size = parseInt(match[1]);
          if (size === 0 || size > 32) {
            logger11.throwArgumentError("invalid bytes length", "param", param);
          }
          return new FixedBytesCoder(size, param.name);
        }
        return logger11.throwArgumentError("invalid type", "type", param.type);
      }
      _getWordSize() {
        return 32;
      }
      _getReader(data, allowLoose) {
        return new Reader(data, this._getWordSize(), this.coerceFunc, allowLoose);
      }
      _getWriter() {
        return new Writer(this._getWordSize());
      }
      getDefaultValue(types) {
        const coders = types.map((type) => this._getCoder(ParamType.from(type)));
        const coder = new TupleCoder(coders, "_");
        return coder.defaultValue();
      }
      encode(types, values) {
        if (types.length !== values.length) {
          logger11.throwError("types/values length mismatch", Logger.errors.INVALID_ARGUMENT, {
            count: { types: types.length, values: values.length },
            value: { types, values }
          });
        }
        const coders = types.map((type) => this._getCoder(ParamType.from(type)));
        const coder = new TupleCoder(coders, "_");
        const writer = this._getWriter();
        coder.encode(writer, values);
        return writer.data;
      }
      decode(types, data, loose) {
        const coders = types.map((type) => this._getCoder(ParamType.from(type)));
        const coder = new TupleCoder(coders, "_");
        return coder.decode(this._getReader(arrayify(data), loose));
      }
    };
    defaultAbiCoder = new AbiCoder();
  }
});

// node_modules/@ethersproject/hash/lib.esm/id.js
function id(text) {
  return keccak256(toUtf8Bytes(text));
}
var init_id = __esm({
  "node_modules/@ethersproject/hash/lib.esm/id.js"() {
    init_define_process();
    init_lib5();
    init_lib9();
  }
});

// node_modules/@ethersproject/hash/lib.esm/_version.js
var version9;
var init_version9 = __esm({
  "node_modules/@ethersproject/hash/lib.esm/_version.js"() {
    init_define_process();
    version9 = "hash/5.6.0";
  }
});

// node_modules/@ethersproject/hash/lib.esm/namehash.js
function isValidName(name2) {
  try {
    const comps = name2.split(".");
    for (let i2 = 0; i2 < comps.length; i2++) {
      if (nameprep(comps[i2]).length === 0) {
        throw new Error("empty");
      }
    }
    return true;
  } catch (error) {
  }
  return false;
}
function namehash(name2) {
  if (typeof name2 !== "string") {
    logger12.throwArgumentError("invalid ENS name; not a string", "name", name2);
  }
  let current = name2;
  let result = Zeros;
  while (current.length) {
    const partition = current.match(Partition);
    if (partition == null || partition[2] === "") {
      logger12.throwArgumentError("invalid ENS address; missing component", "name", name2);
    }
    const label = toUtf8Bytes(nameprep(partition[3]));
    result = keccak256(concat([result, keccak256(label)]));
    current = partition[2] || "";
  }
  return hexlify(result);
}
function dnsEncode(name2) {
  return hexlify(concat(name2.split(".").map((comp) => {
    const bytes = toUtf8Bytes("_" + nameprep(comp));
    bytes[0] = bytes.length - 1;
    return bytes;
  }))) + "00";
}
var logger12, Zeros, Partition;
var init_namehash = __esm({
  "node_modules/@ethersproject/hash/lib.esm/namehash.js"() {
    init_define_process();
    init_lib2();
    init_lib9();
    init_lib5();
    init_lib();
    init_version9();
    logger12 = new Logger(version9);
    Zeros = new Uint8Array(32);
    Zeros.fill(0);
    Partition = new RegExp("^((.*)\\.)?([^.]+)$");
  }
});

// node_modules/@ethersproject/hash/lib.esm/message.js
function hashMessage(message) {
  if (typeof message === "string") {
    message = toUtf8Bytes(message);
  }
  return keccak256(concat([
    toUtf8Bytes(messagePrefix),
    toUtf8Bytes(String(message.length)),
    message
  ]));
}
var messagePrefix;
var init_message = __esm({
  "node_modules/@ethersproject/hash/lib.esm/message.js"() {
    init_define_process();
    init_lib2();
    init_lib5();
    init_lib9();
    messagePrefix = "Ethereum Signed Message:\n";
  }
});

// node_modules/@ethersproject/hash/lib.esm/typed-data.js
function hexPadRight(value2) {
  const bytes = arrayify(value2);
  const padOffset = bytes.length % 32;
  if (padOffset) {
    return hexConcat([bytes, padding.slice(padOffset)]);
  }
  return hexlify(bytes);
}
function checkString(key2) {
  return function(value2) {
    if (typeof value2 !== "string") {
      logger13.throwArgumentError(`invalid domain value for ${JSON.stringify(key2)}`, `domain.${key2}`, value2);
    }
    return value2;
  };
}
function getBaseEncoder(type) {
  {
    const match = type.match(/^(u?)int(\d*)$/);
    if (match) {
      const signed = match[1] === "";
      const width = parseInt(match[2] || "256");
      if (width % 8 !== 0 || width > 256 || match[2] && match[2] !== String(width)) {
        logger13.throwArgumentError("invalid numeric width", "type", type);
      }
      const boundsUpper = MaxUint2562.mask(signed ? width - 1 : width);
      const boundsLower = signed ? boundsUpper.add(One2).mul(NegativeOne3) : Zero3;
      return function(value2) {
        const v7 = BigNumber.from(value2);
        if (v7.lt(boundsLower) || v7.gt(boundsUpper)) {
          logger13.throwArgumentError(`value out-of-bounds for ${type}`, "value", value2);
        }
        return hexZeroPad(v7.toTwos(256).toHexString(), 32);
      };
    }
  }
  {
    const match = type.match(/^bytes(\d+)$/);
    if (match) {
      const width = parseInt(match[1]);
      if (width === 0 || width > 32 || match[1] !== String(width)) {
        logger13.throwArgumentError("invalid bytes width", "type", type);
      }
      return function(value2) {
        const bytes = arrayify(value2);
        if (bytes.length !== width) {
          logger13.throwArgumentError(`invalid length for ${type}`, "value", value2);
        }
        return hexPadRight(value2);
      };
    }
  }
  switch (type) {
    case "address":
      return function(value2) {
        return hexZeroPad(getAddress(value2), 32);
      };
    case "bool":
      return function(value2) {
        return !value2 ? hexFalse : hexTrue;
      };
    case "bytes":
      return function(value2) {
        return keccak256(value2);
      };
    case "string":
      return function(value2) {
        return id(value2);
      };
  }
  return null;
}
function encodeType(name2, fields) {
  return `${name2}(${fields.map(({ name: name3, type }) => type + " " + name3).join(",")})`;
}
var __awaiter2, logger13, padding, NegativeOne3, Zero3, One2, MaxUint2562, hexTrue, hexFalse, domainFieldTypes, domainFieldNames, domainChecks, TypedDataEncoder;
var init_typed_data = __esm({
  "node_modules/@ethersproject/hash/lib.esm/typed-data.js"() {
    init_define_process();
    init_lib7();
    init_lib3();
    init_lib2();
    init_lib5();
    init_lib4();
    init_lib();
    init_version9();
    init_id();
    __awaiter2 = function(thisArg, _arguments, P3, generator) {
      function adopt(value2) {
        return value2 instanceof P3 ? value2 : new P3(function(resolve) {
          resolve(value2);
        });
      }
      return new (P3 || (P3 = Promise))(function(resolve, reject) {
        function fulfilled(value2) {
          try {
            step(generator.next(value2));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value2) {
          try {
            step(generator["throw"](value2));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    logger13 = new Logger(version9);
    padding = new Uint8Array(32);
    padding.fill(0);
    NegativeOne3 = BigNumber.from(-1);
    Zero3 = BigNumber.from(0);
    One2 = BigNumber.from(1);
    MaxUint2562 = BigNumber.from("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
    hexTrue = hexZeroPad(One2.toHexString(), 32);
    hexFalse = hexZeroPad(Zero3.toHexString(), 32);
    domainFieldTypes = {
      name: "string",
      version: "string",
      chainId: "uint256",
      verifyingContract: "address",
      salt: "bytes32"
    };
    domainFieldNames = [
      "name",
      "version",
      "chainId",
      "verifyingContract",
      "salt"
    ];
    domainChecks = {
      name: checkString("name"),
      version: checkString("version"),
      chainId: function(value2) {
        try {
          return BigNumber.from(value2).toString();
        } catch (error) {
        }
        return logger13.throwArgumentError(`invalid domain value for "chainId"`, "domain.chainId", value2);
      },
      verifyingContract: function(value2) {
        try {
          return getAddress(value2).toLowerCase();
        } catch (error) {
        }
        return logger13.throwArgumentError(`invalid domain value "verifyingContract"`, "domain.verifyingContract", value2);
      },
      salt: function(value2) {
        try {
          const bytes = arrayify(value2);
          if (bytes.length !== 32) {
            throw new Error("bad length");
          }
          return hexlify(bytes);
        } catch (error) {
        }
        return logger13.throwArgumentError(`invalid domain value "salt"`, "domain.salt", value2);
      }
    };
    TypedDataEncoder = class {
      constructor(types) {
        defineReadOnly(this, "types", Object.freeze(deepCopy(types)));
        defineReadOnly(this, "_encoderCache", {});
        defineReadOnly(this, "_types", {});
        const links = {};
        const parents = {};
        const subtypes = {};
        Object.keys(types).forEach((type) => {
          links[type] = {};
          parents[type] = [];
          subtypes[type] = {};
        });
        for (const name2 in types) {
          const uniqueNames = {};
          types[name2].forEach((field) => {
            if (uniqueNames[field.name]) {
              logger13.throwArgumentError(`duplicate variable name ${JSON.stringify(field.name)} in ${JSON.stringify(name2)}`, "types", types);
            }
            uniqueNames[field.name] = true;
            const baseType = field.type.match(/^([^\x5b]*)(\x5b|$)/)[1];
            if (baseType === name2) {
              logger13.throwArgumentError(`circular type reference to ${JSON.stringify(baseType)}`, "types", types);
            }
            const encoder = getBaseEncoder(baseType);
            if (encoder) {
              return;
            }
            if (!parents[baseType]) {
              logger13.throwArgumentError(`unknown type ${JSON.stringify(baseType)}`, "types", types);
            }
            parents[baseType].push(name2);
            links[name2][baseType] = true;
          });
        }
        const primaryTypes = Object.keys(parents).filter((n) => parents[n].length === 0);
        if (primaryTypes.length === 0) {
          logger13.throwArgumentError("missing primary type", "types", types);
        } else if (primaryTypes.length > 1) {
          logger13.throwArgumentError(`ambiguous primary types or unused types: ${primaryTypes.map((t) => JSON.stringify(t)).join(", ")}`, "types", types);
        }
        defineReadOnly(this, "primaryType", primaryTypes[0]);
        function checkCircular(type, found) {
          if (found[type]) {
            logger13.throwArgumentError(`circular type reference to ${JSON.stringify(type)}`, "types", types);
          }
          found[type] = true;
          Object.keys(links[type]).forEach((child) => {
            if (!parents[child]) {
              return;
            }
            checkCircular(child, found);
            Object.keys(found).forEach((subtype) => {
              subtypes[subtype][child] = true;
            });
          });
          delete found[type];
        }
        checkCircular(this.primaryType, {});
        for (const name2 in subtypes) {
          const st2 = Object.keys(subtypes[name2]);
          st2.sort();
          this._types[name2] = encodeType(name2, types[name2]) + st2.map((t) => encodeType(t, types[t])).join("");
        }
      }
      getEncoder(type) {
        let encoder = this._encoderCache[type];
        if (!encoder) {
          encoder = this._encoderCache[type] = this._getEncoder(type);
        }
        return encoder;
      }
      _getEncoder(type) {
        {
          const encoder = getBaseEncoder(type);
          if (encoder) {
            return encoder;
          }
        }
        const match = type.match(/^(.*)(\x5b(\d*)\x5d)$/);
        if (match) {
          const subtype = match[1];
          const subEncoder = this.getEncoder(subtype);
          const length = parseInt(match[3]);
          return (value2) => {
            if (length >= 0 && value2.length !== length) {
              logger13.throwArgumentError("array length mismatch; expected length ${ arrayLength }", "value", value2);
            }
            let result = value2.map(subEncoder);
            if (this._types[subtype]) {
              result = result.map(keccak256);
            }
            return keccak256(hexConcat(result));
          };
        }
        const fields = this.types[type];
        if (fields) {
          const encodedType = id(this._types[type]);
          return (value2) => {
            const values = fields.map(({ name: name2, type: type2 }) => {
              const result = this.getEncoder(type2)(value2[name2]);
              if (this._types[type2]) {
                return keccak256(result);
              }
              return result;
            });
            values.unshift(encodedType);
            return hexConcat(values);
          };
        }
        return logger13.throwArgumentError(`unknown type: ${type}`, "type", type);
      }
      encodeType(name2) {
        const result = this._types[name2];
        if (!result) {
          logger13.throwArgumentError(`unknown type: ${JSON.stringify(name2)}`, "name", name2);
        }
        return result;
      }
      encodeData(type, value2) {
        return this.getEncoder(type)(value2);
      }
      hashStruct(name2, value2) {
        return keccak256(this.encodeData(name2, value2));
      }
      encode(value2) {
        return this.encodeData(this.primaryType, value2);
      }
      hash(value2) {
        return this.hashStruct(this.primaryType, value2);
      }
      _visit(type, value2, callback) {
        {
          const encoder = getBaseEncoder(type);
          if (encoder) {
            return callback(type, value2);
          }
        }
        const match = type.match(/^(.*)(\x5b(\d*)\x5d)$/);
        if (match) {
          const subtype = match[1];
          const length = parseInt(match[3]);
          if (length >= 0 && value2.length !== length) {
            logger13.throwArgumentError("array length mismatch; expected length ${ arrayLength }", "value", value2);
          }
          return value2.map((v7) => this._visit(subtype, v7, callback));
        }
        const fields = this.types[type];
        if (fields) {
          return fields.reduce((accum, { name: name2, type: type2 }) => {
            accum[name2] = this._visit(type2, value2[name2], callback);
            return accum;
          }, {});
        }
        return logger13.throwArgumentError(`unknown type: ${type}`, "type", type);
      }
      visit(value2, callback) {
        return this._visit(this.primaryType, value2, callback);
      }
      static from(types) {
        return new TypedDataEncoder(types);
      }
      static getPrimaryType(types) {
        return TypedDataEncoder.from(types).primaryType;
      }
      static hashStruct(name2, types, value2) {
        return TypedDataEncoder.from(types).hashStruct(name2, value2);
      }
      static hashDomain(domain) {
        const domainFields = [];
        for (const name2 in domain) {
          const type = domainFieldTypes[name2];
          if (!type) {
            logger13.throwArgumentError(`invalid typed-data domain key: ${JSON.stringify(name2)}`, "domain", domain);
          }
          domainFields.push({ name: name2, type });
        }
        domainFields.sort((a, b2) => {
          return domainFieldNames.indexOf(a.name) - domainFieldNames.indexOf(b2.name);
        });
        return TypedDataEncoder.hashStruct("EIP712Domain", { EIP712Domain: domainFields }, domain);
      }
      static encode(domain, types, value2) {
        return hexConcat([
          "0x1901",
          TypedDataEncoder.hashDomain(domain),
          TypedDataEncoder.from(types).hash(value2)
        ]);
      }
      static hash(domain, types, value2) {
        return keccak256(TypedDataEncoder.encode(domain, types, value2));
      }
      static resolveNames(domain, types, value2, resolveName2) {
        return __awaiter2(this, void 0, void 0, function* () {
          domain = shallowCopy(domain);
          const ensCache = {};
          if (domain.verifyingContract && !isHexString(domain.verifyingContract, 20)) {
            ensCache[domain.verifyingContract] = "0x";
          }
          const encoder = TypedDataEncoder.from(types);
          encoder.visit(value2, (type, value3) => {
            if (type === "address" && !isHexString(value3, 20)) {
              ensCache[value3] = "0x";
            }
            return value3;
          });
          for (const name2 in ensCache) {
            ensCache[name2] = yield resolveName2(name2);
          }
          if (domain.verifyingContract && ensCache[domain.verifyingContract]) {
            domain.verifyingContract = ensCache[domain.verifyingContract];
          }
          value2 = encoder.visit(value2, (type, value3) => {
            if (type === "address" && ensCache[value3]) {
              return ensCache[value3];
            }
            return value3;
          });
          return { domain, value: value2 };
        });
      }
      static getPayload(domain, types, value2) {
        TypedDataEncoder.hashDomain(domain);
        const domainValues = {};
        const domainTypes = [];
        domainFieldNames.forEach((name2) => {
          const value3 = domain[name2];
          if (value3 == null) {
            return;
          }
          domainValues[name2] = domainChecks[name2](value3);
          domainTypes.push({ name: name2, type: domainFieldTypes[name2] });
        });
        const encoder = TypedDataEncoder.from(types);
        const typesWithDomain = shallowCopy(types);
        if (typesWithDomain.EIP712Domain) {
          logger13.throwArgumentError("types must not contain EIP712Domain type", "types.EIP712Domain", types);
        } else {
          typesWithDomain.EIP712Domain = domainTypes;
        }
        encoder.encode(value2);
        return {
          types: typesWithDomain,
          domain: domainValues,
          primaryType: encoder.primaryType,
          message: encoder.visit(value2, (type, value3) => {
            if (type.match(/^bytes(\d*)/)) {
              return hexlify(arrayify(value3));
            }
            if (type.match(/^u?int/)) {
              return BigNumber.from(value3).toString();
            }
            switch (type) {
              case "address":
                return value3.toLowerCase();
              case "bool":
                return !!value3;
              case "string":
                if (typeof value3 !== "string") {
                  logger13.throwArgumentError(`invalid string`, "value", value3);
                }
                return value3;
            }
            return logger13.throwArgumentError("unsupported type", "type", type);
          })
        };
      }
    };
  }
});

// node_modules/@ethersproject/hash/lib.esm/index.js
var lib_exports9 = {};
__export(lib_exports9, {
  _TypedDataEncoder: () => TypedDataEncoder,
  dnsEncode: () => dnsEncode,
  hashMessage: () => hashMessage,
  id: () => id,
  isValidName: () => isValidName,
  messagePrefix: () => messagePrefix,
  namehash: () => namehash
});
var init_lib10 = __esm({
  "node_modules/@ethersproject/hash/lib.esm/index.js"() {
    init_define_process();
    init_id();
    init_namehash();
    init_message();
    init_typed_data();
    "use strict";
  }
});

// node_modules/@ethersproject/abi/lib.esm/interface.js
function wrapAccessError(property, error) {
  const wrap = new Error(`deferred error during ABI decoding triggered accessing ${property}`);
  wrap.error = error;
  return wrap;
}
var logger14, LogDescription, TransactionDescription, ErrorDescription, Indexed, BuiltinErrors, Interface;
var init_interface = __esm({
  "node_modules/@ethersproject/abi/lib.esm/interface.js"() {
    init_define_process();
    init_lib7();
    init_lib3();
    init_lib2();
    init_lib10();
    init_lib5();
    init_lib4();
    init_abi_coder();
    init_abstract_coder();
    init_fragments();
    init_lib();
    init_version5();
    "use strict";
    logger14 = new Logger(version5);
    LogDescription = class extends Description {
    };
    TransactionDescription = class extends Description {
    };
    ErrorDescription = class extends Description {
    };
    Indexed = class extends Description {
      static isIndexed(value2) {
        return !!(value2 && value2._isIndexed);
      }
    };
    BuiltinErrors = {
      "0x08c379a0": { signature: "Error(string)", name: "Error", inputs: ["string"], reason: true },
      "0x4e487b71": { signature: "Panic(uint256)", name: "Panic", inputs: ["uint256"] }
    };
    Interface = class {
      constructor(fragments) {
        logger14.checkNew(new.target, Interface);
        let abi = [];
        if (typeof fragments === "string") {
          abi = JSON.parse(fragments);
        } else {
          abi = fragments;
        }
        defineReadOnly(this, "fragments", abi.map((fragment) => {
          return Fragment.from(fragment);
        }).filter((fragment) => fragment != null));
        defineReadOnly(this, "_abiCoder", getStatic(new.target, "getAbiCoder")());
        defineReadOnly(this, "functions", {});
        defineReadOnly(this, "errors", {});
        defineReadOnly(this, "events", {});
        defineReadOnly(this, "structs", {});
        this.fragments.forEach((fragment) => {
          let bucket = null;
          switch (fragment.type) {
            case "constructor":
              if (this.deploy) {
                logger14.warn("duplicate definition - constructor");
                return;
              }
              defineReadOnly(this, "deploy", fragment);
              return;
            case "function":
              bucket = this.functions;
              break;
            case "event":
              bucket = this.events;
              break;
            case "error":
              bucket = this.errors;
              break;
            default:
              return;
          }
          let signature2 = fragment.format();
          if (bucket[signature2]) {
            logger14.warn("duplicate definition - " + signature2);
            return;
          }
          bucket[signature2] = fragment;
        });
        if (!this.deploy) {
          defineReadOnly(this, "deploy", ConstructorFragment.from({
            payable: false,
            type: "constructor"
          }));
        }
        defineReadOnly(this, "_isInterface", true);
      }
      format(format) {
        if (!format) {
          format = FormatTypes.full;
        }
        if (format === FormatTypes.sighash) {
          logger14.throwArgumentError("interface does not support formatting sighash", "format", format);
        }
        const abi = this.fragments.map((fragment) => fragment.format(format));
        if (format === FormatTypes.json) {
          return JSON.stringify(abi.map((j3) => JSON.parse(j3)));
        }
        return abi;
      }
      static getAbiCoder() {
        return defaultAbiCoder;
      }
      static getAddress(address) {
        return getAddress(address);
      }
      static getSighash(fragment) {
        return hexDataSlice(id(fragment.format()), 0, 4);
      }
      static getEventTopic(eventFragment) {
        return id(eventFragment.format());
      }
      getFunction(nameOrSignatureOrSighash) {
        if (isHexString(nameOrSignatureOrSighash)) {
          for (const name2 in this.functions) {
            if (nameOrSignatureOrSighash === this.getSighash(name2)) {
              return this.functions[name2];
            }
          }
          logger14.throwArgumentError("no matching function", "sighash", nameOrSignatureOrSighash);
        }
        if (nameOrSignatureOrSighash.indexOf("(") === -1) {
          const name2 = nameOrSignatureOrSighash.trim();
          const matching = Object.keys(this.functions).filter((f3) => f3.split("(")[0] === name2);
          if (matching.length === 0) {
            logger14.throwArgumentError("no matching function", "name", name2);
          } else if (matching.length > 1) {
            logger14.throwArgumentError("multiple matching functions", "name", name2);
          }
          return this.functions[matching[0]];
        }
        const result = this.functions[FunctionFragment.fromString(nameOrSignatureOrSighash).format()];
        if (!result) {
          logger14.throwArgumentError("no matching function", "signature", nameOrSignatureOrSighash);
        }
        return result;
      }
      getEvent(nameOrSignatureOrTopic) {
        if (isHexString(nameOrSignatureOrTopic)) {
          const topichash = nameOrSignatureOrTopic.toLowerCase();
          for (const name2 in this.events) {
            if (topichash === this.getEventTopic(name2)) {
              return this.events[name2];
            }
          }
          logger14.throwArgumentError("no matching event", "topichash", topichash);
        }
        if (nameOrSignatureOrTopic.indexOf("(") === -1) {
          const name2 = nameOrSignatureOrTopic.trim();
          const matching = Object.keys(this.events).filter((f3) => f3.split("(")[0] === name2);
          if (matching.length === 0) {
            logger14.throwArgumentError("no matching event", "name", name2);
          } else if (matching.length > 1) {
            logger14.throwArgumentError("multiple matching events", "name", name2);
          }
          return this.events[matching[0]];
        }
        const result = this.events[EventFragment.fromString(nameOrSignatureOrTopic).format()];
        if (!result) {
          logger14.throwArgumentError("no matching event", "signature", nameOrSignatureOrTopic);
        }
        return result;
      }
      getError(nameOrSignatureOrSighash) {
        if (isHexString(nameOrSignatureOrSighash)) {
          const getSighash = getStatic(this.constructor, "getSighash");
          for (const name2 in this.errors) {
            const error = this.errors[name2];
            if (nameOrSignatureOrSighash === getSighash(error)) {
              return this.errors[name2];
            }
          }
          logger14.throwArgumentError("no matching error", "sighash", nameOrSignatureOrSighash);
        }
        if (nameOrSignatureOrSighash.indexOf("(") === -1) {
          const name2 = nameOrSignatureOrSighash.trim();
          const matching = Object.keys(this.errors).filter((f3) => f3.split("(")[0] === name2);
          if (matching.length === 0) {
            logger14.throwArgumentError("no matching error", "name", name2);
          } else if (matching.length > 1) {
            logger14.throwArgumentError("multiple matching errors", "name", name2);
          }
          return this.errors[matching[0]];
        }
        const result = this.errors[FunctionFragment.fromString(nameOrSignatureOrSighash).format()];
        if (!result) {
          logger14.throwArgumentError("no matching error", "signature", nameOrSignatureOrSighash);
        }
        return result;
      }
      getSighash(fragment) {
        if (typeof fragment === "string") {
          try {
            fragment = this.getFunction(fragment);
          } catch (error) {
            try {
              fragment = this.getError(fragment);
            } catch (_2) {
              throw error;
            }
          }
        }
        return getStatic(this.constructor, "getSighash")(fragment);
      }
      getEventTopic(eventFragment) {
        if (typeof eventFragment === "string") {
          eventFragment = this.getEvent(eventFragment);
        }
        return getStatic(this.constructor, "getEventTopic")(eventFragment);
      }
      _decodeParams(params, data) {
        return this._abiCoder.decode(params, data);
      }
      _encodeParams(params, values) {
        return this._abiCoder.encode(params, values);
      }
      encodeDeploy(values) {
        return this._encodeParams(this.deploy.inputs, values || []);
      }
      decodeErrorResult(fragment, data) {
        if (typeof fragment === "string") {
          fragment = this.getError(fragment);
        }
        const bytes = arrayify(data);
        if (hexlify(bytes.slice(0, 4)) !== this.getSighash(fragment)) {
          logger14.throwArgumentError(`data signature does not match error ${fragment.name}.`, "data", hexlify(bytes));
        }
        return this._decodeParams(fragment.inputs, bytes.slice(4));
      }
      encodeErrorResult(fragment, values) {
        if (typeof fragment === "string") {
          fragment = this.getError(fragment);
        }
        return hexlify(concat([
          this.getSighash(fragment),
          this._encodeParams(fragment.inputs, values || [])
        ]));
      }
      decodeFunctionData(functionFragment, data) {
        if (typeof functionFragment === "string") {
          functionFragment = this.getFunction(functionFragment);
        }
        const bytes = arrayify(data);
        if (hexlify(bytes.slice(0, 4)) !== this.getSighash(functionFragment)) {
          logger14.throwArgumentError(`data signature does not match function ${functionFragment.name}.`, "data", hexlify(bytes));
        }
        return this._decodeParams(functionFragment.inputs, bytes.slice(4));
      }
      encodeFunctionData(functionFragment, values) {
        if (typeof functionFragment === "string") {
          functionFragment = this.getFunction(functionFragment);
        }
        return hexlify(concat([
          this.getSighash(functionFragment),
          this._encodeParams(functionFragment.inputs, values || [])
        ]));
      }
      decodeFunctionResult(functionFragment, data) {
        if (typeof functionFragment === "string") {
          functionFragment = this.getFunction(functionFragment);
        }
        let bytes = arrayify(data);
        let reason = null;
        let errorArgs = null;
        let errorName = null;
        let errorSignature = null;
        switch (bytes.length % this._abiCoder._getWordSize()) {
          case 0:
            try {
              return this._abiCoder.decode(functionFragment.outputs, bytes);
            } catch (error) {
            }
            break;
          case 4: {
            const selector = hexlify(bytes.slice(0, 4));
            const builtin = BuiltinErrors[selector];
            if (builtin) {
              errorArgs = this._abiCoder.decode(builtin.inputs, bytes.slice(4));
              errorName = builtin.name;
              errorSignature = builtin.signature;
              if (builtin.reason) {
                reason = errorArgs[0];
              }
            } else {
              try {
                const error = this.getError(selector);
                errorArgs = this._abiCoder.decode(error.inputs, bytes.slice(4));
                errorName = error.name;
                errorSignature = error.format();
              } catch (error) {
              }
            }
            break;
          }
        }
        return logger14.throwError("call revert exception", Logger.errors.CALL_EXCEPTION, {
          method: functionFragment.format(),
          errorArgs,
          errorName,
          errorSignature,
          reason
        });
      }
      encodeFunctionResult(functionFragment, values) {
        if (typeof functionFragment === "string") {
          functionFragment = this.getFunction(functionFragment);
        }
        return hexlify(this._abiCoder.encode(functionFragment.outputs, values || []));
      }
      encodeFilterTopics(eventFragment, values) {
        if (typeof eventFragment === "string") {
          eventFragment = this.getEvent(eventFragment);
        }
        if (values.length > eventFragment.inputs.length) {
          logger14.throwError("too many arguments for " + eventFragment.format(), Logger.errors.UNEXPECTED_ARGUMENT, {
            argument: "values",
            value: values
          });
        }
        let topics = [];
        if (!eventFragment.anonymous) {
          topics.push(this.getEventTopic(eventFragment));
        }
        const encodeTopic = (param, value2) => {
          if (param.type === "string") {
            return id(value2);
          } else if (param.type === "bytes") {
            return keccak256(hexlify(value2));
          }
          if (param.type === "address") {
            this._abiCoder.encode(["address"], [value2]);
          }
          return hexZeroPad(hexlify(value2), 32);
        };
        values.forEach((value2, index) => {
          let param = eventFragment.inputs[index];
          if (!param.indexed) {
            if (value2 != null) {
              logger14.throwArgumentError("cannot filter non-indexed parameters; must be null", "contract." + param.name, value2);
            }
            return;
          }
          if (value2 == null) {
            topics.push(null);
          } else if (param.baseType === "array" || param.baseType === "tuple") {
            logger14.throwArgumentError("filtering with tuples or arrays not supported", "contract." + param.name, value2);
          } else if (Array.isArray(value2)) {
            topics.push(value2.map((value3) => encodeTopic(param, value3)));
          } else {
            topics.push(encodeTopic(param, value2));
          }
        });
        while (topics.length && topics[topics.length - 1] === null) {
          topics.pop();
        }
        return topics;
      }
      encodeEventLog(eventFragment, values) {
        if (typeof eventFragment === "string") {
          eventFragment = this.getEvent(eventFragment);
        }
        const topics = [];
        const dataTypes = [];
        const dataValues = [];
        if (!eventFragment.anonymous) {
          topics.push(this.getEventTopic(eventFragment));
        }
        if (values.length !== eventFragment.inputs.length) {
          logger14.throwArgumentError("event arguments/values mismatch", "values", values);
        }
        eventFragment.inputs.forEach((param, index) => {
          const value2 = values[index];
          if (param.indexed) {
            if (param.type === "string") {
              topics.push(id(value2));
            } else if (param.type === "bytes") {
              topics.push(keccak256(value2));
            } else if (param.baseType === "tuple" || param.baseType === "array") {
              throw new Error("not implemented");
            } else {
              topics.push(this._abiCoder.encode([param.type], [value2]));
            }
          } else {
            dataTypes.push(param);
            dataValues.push(value2);
          }
        });
        return {
          data: this._abiCoder.encode(dataTypes, dataValues),
          topics
        };
      }
      decodeEventLog(eventFragment, data, topics) {
        if (typeof eventFragment === "string") {
          eventFragment = this.getEvent(eventFragment);
        }
        if (topics != null && !eventFragment.anonymous) {
          let topicHash = this.getEventTopic(eventFragment);
          if (!isHexString(topics[0], 32) || topics[0].toLowerCase() !== topicHash) {
            logger14.throwError("fragment/topic mismatch", Logger.errors.INVALID_ARGUMENT, { argument: "topics[0]", expected: topicHash, value: topics[0] });
          }
          topics = topics.slice(1);
        }
        let indexed = [];
        let nonIndexed = [];
        let dynamic = [];
        eventFragment.inputs.forEach((param, index) => {
          if (param.indexed) {
            if (param.type === "string" || param.type === "bytes" || param.baseType === "tuple" || param.baseType === "array") {
              indexed.push(ParamType.fromObject({ type: "bytes32", name: param.name }));
              dynamic.push(true);
            } else {
              indexed.push(param);
              dynamic.push(false);
            }
          } else {
            nonIndexed.push(param);
            dynamic.push(false);
          }
        });
        let resultIndexed = topics != null ? this._abiCoder.decode(indexed, concat(topics)) : null;
        let resultNonIndexed = this._abiCoder.decode(nonIndexed, data, true);
        let result = [];
        let nonIndexedIndex = 0, indexedIndex = 0;
        eventFragment.inputs.forEach((param, index) => {
          if (param.indexed) {
            if (resultIndexed == null) {
              result[index] = new Indexed({ _isIndexed: true, hash: null });
            } else if (dynamic[index]) {
              result[index] = new Indexed({ _isIndexed: true, hash: resultIndexed[indexedIndex++] });
            } else {
              try {
                result[index] = resultIndexed[indexedIndex++];
              } catch (error) {
                result[index] = error;
              }
            }
          } else {
            try {
              result[index] = resultNonIndexed[nonIndexedIndex++];
            } catch (error) {
              result[index] = error;
            }
          }
          if (param.name && result[param.name] == null) {
            const value2 = result[index];
            if (value2 instanceof Error) {
              Object.defineProperty(result, param.name, {
                enumerable: true,
                get: () => {
                  throw wrapAccessError(`property ${JSON.stringify(param.name)}`, value2);
                }
              });
            } else {
              result[param.name] = value2;
            }
          }
        });
        for (let i2 = 0; i2 < result.length; i2++) {
          const value2 = result[i2];
          if (value2 instanceof Error) {
            Object.defineProperty(result, i2, {
              enumerable: true,
              get: () => {
                throw wrapAccessError(`index ${i2}`, value2);
              }
            });
          }
        }
        return Object.freeze(result);
      }
      parseTransaction(tx) {
        let fragment = this.getFunction(tx.data.substring(0, 10).toLowerCase());
        if (!fragment) {
          return null;
        }
        return new TransactionDescription({
          args: this._abiCoder.decode(fragment.inputs, "0x" + tx.data.substring(10)),
          functionFragment: fragment,
          name: fragment.name,
          signature: fragment.format(),
          sighash: this.getSighash(fragment),
          value: BigNumber.from(tx.value || "0")
        });
      }
      parseLog(log) {
        let fragment = this.getEvent(log.topics[0]);
        if (!fragment || fragment.anonymous) {
          return null;
        }
        return new LogDescription({
          eventFragment: fragment,
          name: fragment.name,
          signature: fragment.format(),
          topic: this.getEventTopic(fragment),
          args: this.decodeEventLog(fragment, log.data, log.topics)
        });
      }
      parseError(data) {
        const hexData = hexlify(data);
        let fragment = this.getError(hexData.substring(0, 10).toLowerCase());
        if (!fragment) {
          return null;
        }
        return new ErrorDescription({
          args: this._abiCoder.decode(fragment.inputs, "0x" + hexData.substring(10)),
          errorFragment: fragment,
          name: fragment.name,
          signature: fragment.format(),
          sighash: this.getSighash(fragment)
        });
      }
      static isInterface(value2) {
        return !!(value2 && value2._isInterface);
      }
    };
  }
});

// node_modules/@ethersproject/abi/lib.esm/index.js
var lib_exports10 = {};
__export(lib_exports10, {
  AbiCoder: () => AbiCoder,
  ConstructorFragment: () => ConstructorFragment,
  ErrorFragment: () => ErrorFragment,
  EventFragment: () => EventFragment,
  FormatTypes: () => FormatTypes,
  Fragment: () => Fragment,
  FunctionFragment: () => FunctionFragment,
  Indexed: () => Indexed,
  Interface: () => Interface,
  LogDescription: () => LogDescription,
  ParamType: () => ParamType,
  TransactionDescription: () => TransactionDescription,
  checkResultErrors: () => checkResultErrors,
  defaultAbiCoder: () => defaultAbiCoder
});
var init_lib11 = __esm({
  "node_modules/@ethersproject/abi/lib.esm/index.js"() {
    init_define_process();
    init_fragments();
    init_abi_coder();
    init_interface();
    "use strict";
  }
});

// node_modules/@ethersproject/abstract-provider/lib.esm/_version.js
var version10;
var init_version10 = __esm({
  "node_modules/@ethersproject/abstract-provider/lib.esm/_version.js"() {
    init_define_process();
    version10 = "abstract-provider/5.6.0";
  }
});

// node_modules/@ethersproject/abstract-provider/lib.esm/index.js
var __awaiter3, logger15, ForkEvent, Provider;
var init_lib12 = __esm({
  "node_modules/@ethersproject/abstract-provider/lib.esm/index.js"() {
    init_define_process();
    init_lib3();
    init_lib2();
    init_lib4();
    init_lib();
    init_version10();
    "use strict";
    __awaiter3 = function(thisArg, _arguments, P3, generator) {
      function adopt(value2) {
        return value2 instanceof P3 ? value2 : new P3(function(resolve) {
          resolve(value2);
        });
      }
      return new (P3 || (P3 = Promise))(function(resolve, reject) {
        function fulfilled(value2) {
          try {
            step(generator.next(value2));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value2) {
          try {
            step(generator["throw"](value2));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    logger15 = new Logger(version10);
    ForkEvent = class extends Description {
      static isForkEvent(value2) {
        return !!(value2 && value2._isForkEvent);
      }
    };
    Provider = class {
      constructor() {
        logger15.checkAbstract(new.target, Provider);
        defineReadOnly(this, "_isProvider", true);
      }
      getFeeData() {
        return __awaiter3(this, void 0, void 0, function* () {
          const { block, gasPrice } = yield resolveProperties({
            block: this.getBlock("latest"),
            gasPrice: this.getGasPrice().catch((error) => {
              return null;
            })
          });
          let maxFeePerGas = null, maxPriorityFeePerGas = null;
          if (block && block.baseFeePerGas) {
            maxPriorityFeePerGas = BigNumber.from("1500000000");
            maxFeePerGas = block.baseFeePerGas.mul(2).add(maxPriorityFeePerGas);
          }
          return { maxFeePerGas, maxPriorityFeePerGas, gasPrice };
        });
      }
      addListener(eventName, listener) {
        return this.on(eventName, listener);
      }
      removeListener(eventName, listener) {
        return this.off(eventName, listener);
      }
      static isProvider(value2) {
        return !!(value2 && value2._isProvider);
      }
    };
  }
});

// node_modules/@ethersproject/abstract-signer/lib.esm/_version.js
var version11;
var init_version11 = __esm({
  "node_modules/@ethersproject/abstract-signer/lib.esm/_version.js"() {
    init_define_process();
    version11 = "abstract-signer/5.6.0";
  }
});

// node_modules/@ethersproject/abstract-signer/lib.esm/index.js
var __awaiter4, logger16, allowedTransactionKeys, forwardErrors, Signer, VoidSigner;
var init_lib13 = __esm({
  "node_modules/@ethersproject/abstract-signer/lib.esm/index.js"() {
    init_define_process();
    init_lib4();
    init_lib();
    init_version11();
    "use strict";
    __awaiter4 = function(thisArg, _arguments, P3, generator) {
      function adopt(value2) {
        return value2 instanceof P3 ? value2 : new P3(function(resolve) {
          resolve(value2);
        });
      }
      return new (P3 || (P3 = Promise))(function(resolve, reject) {
        function fulfilled(value2) {
          try {
            step(generator.next(value2));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value2) {
          try {
            step(generator["throw"](value2));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    logger16 = new Logger(version11);
    allowedTransactionKeys = [
      "accessList",
      "ccipReadEnabled",
      "chainId",
      "customData",
      "data",
      "from",
      "gasLimit",
      "gasPrice",
      "maxFeePerGas",
      "maxPriorityFeePerGas",
      "nonce",
      "to",
      "type",
      "value"
    ];
    forwardErrors = [
      Logger.errors.INSUFFICIENT_FUNDS,
      Logger.errors.NONCE_EXPIRED,
      Logger.errors.REPLACEMENT_UNDERPRICED
    ];
    Signer = class {
      constructor() {
        logger16.checkAbstract(new.target, Signer);
        defineReadOnly(this, "_isSigner", true);
      }
      getBalance(blockTag) {
        return __awaiter4(this, void 0, void 0, function* () {
          this._checkProvider("getBalance");
          return yield this.provider.getBalance(this.getAddress(), blockTag);
        });
      }
      getTransactionCount(blockTag) {
        return __awaiter4(this, void 0, void 0, function* () {
          this._checkProvider("getTransactionCount");
          return yield this.provider.getTransactionCount(this.getAddress(), blockTag);
        });
      }
      estimateGas(transaction) {
        return __awaiter4(this, void 0, void 0, function* () {
          this._checkProvider("estimateGas");
          const tx = yield resolveProperties(this.checkTransaction(transaction));
          return yield this.provider.estimateGas(tx);
        });
      }
      call(transaction, blockTag) {
        return __awaiter4(this, void 0, void 0, function* () {
          this._checkProvider("call");
          const tx = yield resolveProperties(this.checkTransaction(transaction));
          return yield this.provider.call(tx, blockTag);
        });
      }
      sendTransaction(transaction) {
        return __awaiter4(this, void 0, void 0, function* () {
          this._checkProvider("sendTransaction");
          const tx = yield this.populateTransaction(transaction);
          const signedTx = yield this.signTransaction(tx);
          return yield this.provider.sendTransaction(signedTx);
        });
      }
      getChainId() {
        return __awaiter4(this, void 0, void 0, function* () {
          this._checkProvider("getChainId");
          const network = yield this.provider.getNetwork();
          return network.chainId;
        });
      }
      getGasPrice() {
        return __awaiter4(this, void 0, void 0, function* () {
          this._checkProvider("getGasPrice");
          return yield this.provider.getGasPrice();
        });
      }
      getFeeData() {
        return __awaiter4(this, void 0, void 0, function* () {
          this._checkProvider("getFeeData");
          return yield this.provider.getFeeData();
        });
      }
      resolveName(name2) {
        return __awaiter4(this, void 0, void 0, function* () {
          this._checkProvider("resolveName");
          return yield this.provider.resolveName(name2);
        });
      }
      checkTransaction(transaction) {
        for (const key2 in transaction) {
          if (allowedTransactionKeys.indexOf(key2) === -1) {
            logger16.throwArgumentError("invalid transaction key: " + key2, "transaction", transaction);
          }
        }
        const tx = shallowCopy(transaction);
        if (tx.from == null) {
          tx.from = this.getAddress();
        } else {
          tx.from = Promise.all([
            Promise.resolve(tx.from),
            this.getAddress()
          ]).then((result) => {
            if (result[0].toLowerCase() !== result[1].toLowerCase()) {
              logger16.throwArgumentError("from address mismatch", "transaction", transaction);
            }
            return result[0];
          });
        }
        return tx;
      }
      populateTransaction(transaction) {
        return __awaiter4(this, void 0, void 0, function* () {
          const tx = yield resolveProperties(this.checkTransaction(transaction));
          if (tx.to != null) {
            tx.to = Promise.resolve(tx.to).then((to2) => __awaiter4(this, void 0, void 0, function* () {
              if (to2 == null) {
                return null;
              }
              const address = yield this.resolveName(to2);
              if (address == null) {
                logger16.throwArgumentError("provided ENS name resolves to null", "tx.to", to2);
              }
              return address;
            }));
            tx.to.catch((error) => {
            });
          }
          const hasEip1559 = tx.maxFeePerGas != null || tx.maxPriorityFeePerGas != null;
          if (tx.gasPrice != null && (tx.type === 2 || hasEip1559)) {
            logger16.throwArgumentError("eip-1559 transaction do not support gasPrice", "transaction", transaction);
          } else if ((tx.type === 0 || tx.type === 1) && hasEip1559) {
            logger16.throwArgumentError("pre-eip-1559 transaction do not support maxFeePerGas/maxPriorityFeePerGas", "transaction", transaction);
          }
          if ((tx.type === 2 || tx.type == null) && (tx.maxFeePerGas != null && tx.maxPriorityFeePerGas != null)) {
            tx.type = 2;
          } else if (tx.type === 0 || tx.type === 1) {
            if (tx.gasPrice == null) {
              tx.gasPrice = this.getGasPrice();
            }
          } else {
            const feeData = yield this.getFeeData();
            if (tx.type == null) {
              if (feeData.maxFeePerGas != null && feeData.maxPriorityFeePerGas != null) {
                tx.type = 2;
                if (tx.gasPrice != null) {
                  const gasPrice = tx.gasPrice;
                  delete tx.gasPrice;
                  tx.maxFeePerGas = gasPrice;
                  tx.maxPriorityFeePerGas = gasPrice;
                } else {
                  if (tx.maxFeePerGas == null) {
                    tx.maxFeePerGas = feeData.maxFeePerGas;
                  }
                  if (tx.maxPriorityFeePerGas == null) {
                    tx.maxPriorityFeePerGas = feeData.maxPriorityFeePerGas;
                  }
                }
              } else if (feeData.gasPrice != null) {
                if (hasEip1559) {
                  logger16.throwError("network does not support EIP-1559", Logger.errors.UNSUPPORTED_OPERATION, {
                    operation: "populateTransaction"
                  });
                }
                if (tx.gasPrice == null) {
                  tx.gasPrice = feeData.gasPrice;
                }
                tx.type = 0;
              } else {
                logger16.throwError("failed to get consistent fee data", Logger.errors.UNSUPPORTED_OPERATION, {
                  operation: "signer.getFeeData"
                });
              }
            } else if (tx.type === 2) {
              if (tx.maxFeePerGas == null) {
                tx.maxFeePerGas = feeData.maxFeePerGas;
              }
              if (tx.maxPriorityFeePerGas == null) {
                tx.maxPriorityFeePerGas = feeData.maxPriorityFeePerGas;
              }
            }
          }
          if (tx.nonce == null) {
            tx.nonce = this.getTransactionCount("pending");
          }
          if (tx.gasLimit == null) {
            tx.gasLimit = this.estimateGas(tx).catch((error) => {
              if (forwardErrors.indexOf(error.code) >= 0) {
                throw error;
              }
              return logger16.throwError("cannot estimate gas; transaction may fail or may require manual gas limit", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {
                error,
                tx
              });
            });
          }
          if (tx.chainId == null) {
            tx.chainId = this.getChainId();
          } else {
            tx.chainId = Promise.all([
              Promise.resolve(tx.chainId),
              this.getChainId()
            ]).then((results) => {
              if (results[1] !== 0 && results[0] !== results[1]) {
                logger16.throwArgumentError("chainId address mismatch", "transaction", transaction);
              }
              return results[0];
            });
          }
          return yield resolveProperties(tx);
        });
      }
      _checkProvider(operation) {
        if (!this.provider) {
          logger16.throwError("missing provider", Logger.errors.UNSUPPORTED_OPERATION, {
            operation: operation || "_checkProvider"
          });
        }
      }
      static isSigner(value2) {
        return !!(value2 && value2._isSigner);
      }
    };
    VoidSigner = class extends Signer {
      constructor(address, provider) {
        logger16.checkNew(new.target, VoidSigner);
        super();
        defineReadOnly(this, "address", address);
        defineReadOnly(this, "provider", provider || null);
      }
      getAddress() {
        return Promise.resolve(this.address);
      }
      _fail(message, operation) {
        return Promise.resolve().then(() => {
          logger16.throwError(message, Logger.errors.UNSUPPORTED_OPERATION, { operation });
        });
      }
      signMessage(message) {
        return this._fail("VoidSigner cannot sign messages", "signMessage");
      }
      signTransaction(transaction) {
        return this._fail("VoidSigner cannot sign transactions", "signTransaction");
      }
      _signTypedData(domain, types, value2) {
        return this._fail("VoidSigner cannot sign typed data", "signTypedData");
      }
      connect(provider) {
        return new VoidSigner(this.address, provider);
      }
    };
  }
});

// node_modules/minimalistic-assert/index.js
var require_minimalistic_assert = __commonJS({
  "node_modules/minimalistic-assert/index.js"(exports, module) {
    init_define_process();
    module.exports = assert2;
    function assert2(val, msg) {
      if (!val)
        throw new Error(msg || "Assertion failed");
    }
    assert2.equal = function assertEqual2(l2, r2, msg) {
      if (l2 != r2)
        throw new Error(msg || "Assertion failed: " + l2 + " != " + r2);
    };
  }
});

// node_modules/inherits/inherits_browser.js
var require_inherits_browser = __commonJS({
  "node_modules/inherits/inherits_browser.js"(exports, module) {
    init_define_process();
    if (typeof Object.create === "function") {
      module.exports = function inherits(ctor, superCtor) {
        if (superCtor) {
          ctor.super_ = superCtor;
          ctor.prototype = Object.create(superCtor.prototype, {
            constructor: {
              value: ctor,
              enumerable: false,
              writable: true,
              configurable: true
            }
          });
        }
      };
    } else {
      module.exports = function inherits(ctor, superCtor) {
        if (superCtor) {
          ctor.super_ = superCtor;
          var TempCtor = function() {
          };
          TempCtor.prototype = superCtor.prototype;
          ctor.prototype = new TempCtor();
          ctor.prototype.constructor = ctor;
        }
      };
    }
  }
});

// node_modules/hash.js/lib/hash/utils.js
var require_utils = __commonJS({
  "node_modules/hash.js/lib/hash/utils.js"(exports) {
    init_define_process();
    "use strict";
    var assert2 = require_minimalistic_assert();
    var inherits = require_inherits_browser();
    exports.inherits = inherits;
    function isSurrogatePair(msg, i2) {
      if ((msg.charCodeAt(i2) & 64512) !== 55296) {
        return false;
      }
      if (i2 < 0 || i2 + 1 >= msg.length) {
        return false;
      }
      return (msg.charCodeAt(i2 + 1) & 64512) === 56320;
    }
    function toArray(msg, enc) {
      if (Array.isArray(msg))
        return msg.slice();
      if (!msg)
        return [];
      var res = [];
      if (typeof msg === "string") {
        if (!enc) {
          var p3 = 0;
          for (var i2 = 0; i2 < msg.length; i2++) {
            var c2 = msg.charCodeAt(i2);
            if (c2 < 128) {
              res[p3++] = c2;
            } else if (c2 < 2048) {
              res[p3++] = c2 >> 6 | 192;
              res[p3++] = c2 & 63 | 128;
            } else if (isSurrogatePair(msg, i2)) {
              c2 = 65536 + ((c2 & 1023) << 10) + (msg.charCodeAt(++i2) & 1023);
              res[p3++] = c2 >> 18 | 240;
              res[p3++] = c2 >> 12 & 63 | 128;
              res[p3++] = c2 >> 6 & 63 | 128;
              res[p3++] = c2 & 63 | 128;
            } else {
              res[p3++] = c2 >> 12 | 224;
              res[p3++] = c2 >> 6 & 63 | 128;
              res[p3++] = c2 & 63 | 128;
            }
          }
        } else if (enc === "hex") {
          msg = msg.replace(/[^a-z0-9]+/ig, "");
          if (msg.length % 2 !== 0)
            msg = "0" + msg;
          for (i2 = 0; i2 < msg.length; i2 += 2)
            res.push(parseInt(msg[i2] + msg[i2 + 1], 16));
        }
      } else {
        for (i2 = 0; i2 < msg.length; i2++)
          res[i2] = msg[i2] | 0;
      }
      return res;
    }
    exports.toArray = toArray;
    function toHex2(msg) {
      var res = "";
      for (var i2 = 0; i2 < msg.length; i2++)
        res += zero2(msg[i2].toString(16));
      return res;
    }
    exports.toHex = toHex2;
    function htonl(w3) {
      var res = w3 >>> 24 | w3 >>> 8 & 65280 | w3 << 8 & 16711680 | (w3 & 255) << 24;
      return res >>> 0;
    }
    exports.htonl = htonl;
    function toHex32(msg, endian) {
      var res = "";
      for (var i2 = 0; i2 < msg.length; i2++) {
        var w3 = msg[i2];
        if (endian === "little")
          w3 = htonl(w3);
        res += zero8(w3.toString(16));
      }
      return res;
    }
    exports.toHex32 = toHex32;
    function zero2(word) {
      if (word.length === 1)
        return "0" + word;
      else
        return word;
    }
    exports.zero2 = zero2;
    function zero8(word) {
      if (word.length === 7)
        return "0" + word;
      else if (word.length === 6)
        return "00" + word;
      else if (word.length === 5)
        return "000" + word;
      else if (word.length === 4)
        return "0000" + word;
      else if (word.length === 3)
        return "00000" + word;
      else if (word.length === 2)
        return "000000" + word;
      else if (word.length === 1)
        return "0000000" + word;
      else
        return word;
    }
    exports.zero8 = zero8;
    function join32(msg, start, end, endian) {
      var len = end - start;
      assert2(len % 4 === 0);
      var res = new Array(len / 4);
      for (var i2 = 0, k4 = start; i2 < res.length; i2++, k4 += 4) {
        var w3;
        if (endian === "big")
          w3 = msg[k4] << 24 | msg[k4 + 1] << 16 | msg[k4 + 2] << 8 | msg[k4 + 3];
        else
          w3 = msg[k4 + 3] << 24 | msg[k4 + 2] << 16 | msg[k4 + 1] << 8 | msg[k4];
        res[i2] = w3 >>> 0;
      }
      return res;
    }
    exports.join32 = join32;
    function split32(msg, endian) {
      var res = new Array(msg.length * 4);
      for (var i2 = 0, k4 = 0; i2 < msg.length; i2++, k4 += 4) {
        var m3 = msg[i2];
        if (endian === "big") {
          res[k4] = m3 >>> 24;
          res[k4 + 1] = m3 >>> 16 & 255;
          res[k4 + 2] = m3 >>> 8 & 255;
          res[k4 + 3] = m3 & 255;
        } else {
          res[k4 + 3] = m3 >>> 24;
          res[k4 + 2] = m3 >>> 16 & 255;
          res[k4 + 1] = m3 >>> 8 & 255;
          res[k4] = m3 & 255;
        }
      }
      return res;
    }
    exports.split32 = split32;
    function rotr32(w3, b2) {
      return w3 >>> b2 | w3 << 32 - b2;
    }
    exports.rotr32 = rotr32;
    function rotl32(w3, b2) {
      return w3 << b2 | w3 >>> 32 - b2;
    }
    exports.rotl32 = rotl32;
    function sum32(a, b2) {
      return a + b2 >>> 0;
    }
    exports.sum32 = sum32;
    function sum32_3(a, b2, c2) {
      return a + b2 + c2 >>> 0;
    }
    exports.sum32_3 = sum32_3;
    function sum32_4(a, b2, c2, d2) {
      return a + b2 + c2 + d2 >>> 0;
    }
    exports.sum32_4 = sum32_4;
    function sum32_5(a, b2, c2, d2, e) {
      return a + b2 + c2 + d2 + e >>> 0;
    }
    exports.sum32_5 = sum32_5;
    function sum64(buf, pos, ah, al) {
      var bh = buf[pos];
      var bl = buf[pos + 1];
      var lo2 = al + bl >>> 0;
      var hi = (lo2 < al ? 1 : 0) + ah + bh;
      buf[pos] = hi >>> 0;
      buf[pos + 1] = lo2;
    }
    exports.sum64 = sum64;
    function sum64_hi(ah, al, bh, bl) {
      var lo2 = al + bl >>> 0;
      var hi = (lo2 < al ? 1 : 0) + ah + bh;
      return hi >>> 0;
    }
    exports.sum64_hi = sum64_hi;
    function sum64_lo(ah, al, bh, bl) {
      var lo2 = al + bl;
      return lo2 >>> 0;
    }
    exports.sum64_lo = sum64_lo;
    function sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {
      var carry = 0;
      var lo2 = al;
      lo2 = lo2 + bl >>> 0;
      carry += lo2 < al ? 1 : 0;
      lo2 = lo2 + cl >>> 0;
      carry += lo2 < cl ? 1 : 0;
      lo2 = lo2 + dl >>> 0;
      carry += lo2 < dl ? 1 : 0;
      var hi = ah + bh + ch + dh + carry;
      return hi >>> 0;
    }
    exports.sum64_4_hi = sum64_4_hi;
    function sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {
      var lo2 = al + bl + cl + dl;
      return lo2 >>> 0;
    }
    exports.sum64_4_lo = sum64_4_lo;
    function sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
      var carry = 0;
      var lo2 = al;
      lo2 = lo2 + bl >>> 0;
      carry += lo2 < al ? 1 : 0;
      lo2 = lo2 + cl >>> 0;
      carry += lo2 < cl ? 1 : 0;
      lo2 = lo2 + dl >>> 0;
      carry += lo2 < dl ? 1 : 0;
      lo2 = lo2 + el >>> 0;
      carry += lo2 < el ? 1 : 0;
      var hi = ah + bh + ch + dh + eh + carry;
      return hi >>> 0;
    }
    exports.sum64_5_hi = sum64_5_hi;
    function sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
      var lo2 = al + bl + cl + dl + el;
      return lo2 >>> 0;
    }
    exports.sum64_5_lo = sum64_5_lo;
    function rotr64_hi(ah, al, num) {
      var r2 = al << 32 - num | ah >>> num;
      return r2 >>> 0;
    }
    exports.rotr64_hi = rotr64_hi;
    function rotr64_lo(ah, al, num) {
      var r2 = ah << 32 - num | al >>> num;
      return r2 >>> 0;
    }
    exports.rotr64_lo = rotr64_lo;
    function shr64_hi(ah, al, num) {
      return ah >>> num;
    }
    exports.shr64_hi = shr64_hi;
    function shr64_lo(ah, al, num) {
      var r2 = ah << 32 - num | al >>> num;
      return r2 >>> 0;
    }
    exports.shr64_lo = shr64_lo;
  }
});

// node_modules/hash.js/lib/hash/common.js
var require_common = __commonJS({
  "node_modules/hash.js/lib/hash/common.js"(exports) {
    init_define_process();
    "use strict";
    var utils = require_utils();
    var assert2 = require_minimalistic_assert();
    function BlockHash() {
      this.pending = null;
      this.pendingTotal = 0;
      this.blockSize = this.constructor.blockSize;
      this.outSize = this.constructor.outSize;
      this.hmacStrength = this.constructor.hmacStrength;
      this.padLength = this.constructor.padLength / 8;
      this.endian = "big";
      this._delta8 = this.blockSize / 8;
      this._delta32 = this.blockSize / 32;
    }
    exports.BlockHash = BlockHash;
    BlockHash.prototype.update = function update2(msg, enc) {
      msg = utils.toArray(msg, enc);
      if (!this.pending)
        this.pending = msg;
      else
        this.pending = this.pending.concat(msg);
      this.pendingTotal += msg.length;
      if (this.pending.length >= this._delta8) {
        msg = this.pending;
        var r2 = msg.length % this._delta8;
        this.pending = msg.slice(msg.length - r2, msg.length);
        if (this.pending.length === 0)
          this.pending = null;
        msg = utils.join32(msg, 0, msg.length - r2, this.endian);
        for (var i2 = 0; i2 < msg.length; i2 += this._delta32)
          this._update(msg, i2, i2 + this._delta32);
      }
      return this;
    };
    BlockHash.prototype.digest = function digest(enc) {
      this.update(this._pad());
      assert2(this.pending === null);
      return this._digest(enc);
    };
    BlockHash.prototype._pad = function pad() {
      var len = this.pendingTotal;
      var bytes = this._delta8;
      var k4 = bytes - (len + this.padLength) % bytes;
      var res = new Array(k4 + this.padLength);
      res[0] = 128;
      for (var i2 = 1; i2 < k4; i2++)
        res[i2] = 0;
      len <<= 3;
      if (this.endian === "big") {
        for (var t = 8; t < this.padLength; t++)
          res[i2++] = 0;
        res[i2++] = 0;
        res[i2++] = 0;
        res[i2++] = 0;
        res[i2++] = 0;
        res[i2++] = len >>> 24 & 255;
        res[i2++] = len >>> 16 & 255;
        res[i2++] = len >>> 8 & 255;
        res[i2++] = len & 255;
      } else {
        res[i2++] = len & 255;
        res[i2++] = len >>> 8 & 255;
        res[i2++] = len >>> 16 & 255;
        res[i2++] = len >>> 24 & 255;
        res[i2++] = 0;
        res[i2++] = 0;
        res[i2++] = 0;
        res[i2++] = 0;
        for (t = 8; t < this.padLength; t++)
          res[i2++] = 0;
      }
      return res;
    };
  }
});

// node_modules/hash.js/lib/hash/sha/common.js
var require_common2 = __commonJS({
  "node_modules/hash.js/lib/hash/sha/common.js"(exports) {
    init_define_process();
    "use strict";
    var utils = require_utils();
    var rotr32 = utils.rotr32;
    function ft_1(s2, x4, y2, z3) {
      if (s2 === 0)
        return ch32(x4, y2, z3);
      if (s2 === 1 || s2 === 3)
        return p32(x4, y2, z3);
      if (s2 === 2)
        return maj32(x4, y2, z3);
    }
    exports.ft_1 = ft_1;
    function ch32(x4, y2, z3) {
      return x4 & y2 ^ ~x4 & z3;
    }
    exports.ch32 = ch32;
    function maj32(x4, y2, z3) {
      return x4 & y2 ^ x4 & z3 ^ y2 & z3;
    }
    exports.maj32 = maj32;
    function p32(x4, y2, z3) {
      return x4 ^ y2 ^ z3;
    }
    exports.p32 = p32;
    function s0_256(x4) {
      return rotr32(x4, 2) ^ rotr32(x4, 13) ^ rotr32(x4, 22);
    }
    exports.s0_256 = s0_256;
    function s1_256(x4) {
      return rotr32(x4, 6) ^ rotr32(x4, 11) ^ rotr32(x4, 25);
    }
    exports.s1_256 = s1_256;
    function g0_256(x4) {
      return rotr32(x4, 7) ^ rotr32(x4, 18) ^ x4 >>> 3;
    }
    exports.g0_256 = g0_256;
    function g1_256(x4) {
      return rotr32(x4, 17) ^ rotr32(x4, 19) ^ x4 >>> 10;
    }
    exports.g1_256 = g1_256;
  }
});

// node_modules/hash.js/lib/hash/sha/1.js
var require__ = __commonJS({
  "node_modules/hash.js/lib/hash/sha/1.js"(exports, module) {
    init_define_process();
    "use strict";
    var utils = require_utils();
    var common = require_common();
    var shaCommon = require_common2();
    var rotl32 = utils.rotl32;
    var sum32 = utils.sum32;
    var sum32_5 = utils.sum32_5;
    var ft_1 = shaCommon.ft_1;
    var BlockHash = common.BlockHash;
    var sha1_K = [
      1518500249,
      1859775393,
      2400959708,
      3395469782
    ];
    function SHA1() {
      if (!(this instanceof SHA1))
        return new SHA1();
      BlockHash.call(this);
      this.h = [
        1732584193,
        4023233417,
        2562383102,
        271733878,
        3285377520
      ];
      this.W = new Array(80);
    }
    utils.inherits(SHA1, BlockHash);
    module.exports = SHA1;
    SHA1.blockSize = 512;
    SHA1.outSize = 160;
    SHA1.hmacStrength = 80;
    SHA1.padLength = 64;
    SHA1.prototype._update = function _update(msg, start) {
      var W3 = this.W;
      for (var i2 = 0; i2 < 16; i2++)
        W3[i2] = msg[start + i2];
      for (; i2 < W3.length; i2++)
        W3[i2] = rotl32(W3[i2 - 3] ^ W3[i2 - 8] ^ W3[i2 - 14] ^ W3[i2 - 16], 1);
      var a = this.h[0];
      var b2 = this.h[1];
      var c2 = this.h[2];
      var d2 = this.h[3];
      var e = this.h[4];
      for (i2 = 0; i2 < W3.length; i2++) {
        var s2 = ~~(i2 / 20);
        var t = sum32_5(rotl32(a, 5), ft_1(s2, b2, c2, d2), e, W3[i2], sha1_K[s2]);
        e = d2;
        d2 = c2;
        c2 = rotl32(b2, 30);
        b2 = a;
        a = t;
      }
      this.h[0] = sum32(this.h[0], a);
      this.h[1] = sum32(this.h[1], b2);
      this.h[2] = sum32(this.h[2], c2);
      this.h[3] = sum32(this.h[3], d2);
      this.h[4] = sum32(this.h[4], e);
    };
    SHA1.prototype._digest = function digest(enc) {
      if (enc === "hex")
        return utils.toHex32(this.h, "big");
      else
        return utils.split32(this.h, "big");
    };
  }
});

// node_modules/hash.js/lib/hash/sha/256.js
var require__2 = __commonJS({
  "node_modules/hash.js/lib/hash/sha/256.js"(exports, module) {
    init_define_process();
    "use strict";
    var utils = require_utils();
    var common = require_common();
    var shaCommon = require_common2();
    var assert2 = require_minimalistic_assert();
    var sum32 = utils.sum32;
    var sum32_4 = utils.sum32_4;
    var sum32_5 = utils.sum32_5;
    var ch32 = shaCommon.ch32;
    var maj32 = shaCommon.maj32;
    var s0_256 = shaCommon.s0_256;
    var s1_256 = shaCommon.s1_256;
    var g0_256 = shaCommon.g0_256;
    var g1_256 = shaCommon.g1_256;
    var BlockHash = common.BlockHash;
    var sha256_K = [
      1116352408,
      1899447441,
      3049323471,
      3921009573,
      961987163,
      1508970993,
      2453635748,
      2870763221,
      3624381080,
      310598401,
      607225278,
      1426881987,
      1925078388,
      2162078206,
      2614888103,
      3248222580,
      3835390401,
      4022224774,
      264347078,
      604807628,
      770255983,
      1249150122,
      1555081692,
      1996064986,
      2554220882,
      2821834349,
      2952996808,
      3210313671,
      3336571891,
      3584528711,
      113926993,
      338241895,
      666307205,
      773529912,
      1294757372,
      1396182291,
      1695183700,
      1986661051,
      2177026350,
      2456956037,
      2730485921,
      2820302411,
      3259730800,
      3345764771,
      3516065817,
      3600352804,
      4094571909,
      275423344,
      430227734,
      506948616,
      659060556,
      883997877,
      958139571,
      1322822218,
      1537002063,
      1747873779,
      1955562222,
      2024104815,
      2227730452,
      2361852424,
      2428436474,
      2756734187,
      3204031479,
      3329325298
    ];
    function SHA256() {
      if (!(this instanceof SHA256))
        return new SHA256();
      BlockHash.call(this);
      this.h = [
        1779033703,
        3144134277,
        1013904242,
        2773480762,
        1359893119,
        2600822924,
        528734635,
        1541459225
      ];
      this.k = sha256_K;
      this.W = new Array(64);
    }
    utils.inherits(SHA256, BlockHash);
    module.exports = SHA256;
    SHA256.blockSize = 512;
    SHA256.outSize = 256;
    SHA256.hmacStrength = 192;
    SHA256.padLength = 64;
    SHA256.prototype._update = function _update(msg, start) {
      var W3 = this.W;
      for (var i2 = 0; i2 < 16; i2++)
        W3[i2] = msg[start + i2];
      for (; i2 < W3.length; i2++)
        W3[i2] = sum32_4(g1_256(W3[i2 - 2]), W3[i2 - 7], g0_256(W3[i2 - 15]), W3[i2 - 16]);
      var a = this.h[0];
      var b2 = this.h[1];
      var c2 = this.h[2];
      var d2 = this.h[3];
      var e = this.h[4];
      var f3 = this.h[5];
      var g3 = this.h[6];
      var h2 = this.h[7];
      assert2(this.k.length === W3.length);
      for (i2 = 0; i2 < W3.length; i2++) {
        var T12 = sum32_5(h2, s1_256(e), ch32(e, f3, g3), this.k[i2], W3[i2]);
        var T22 = sum32(s0_256(a), maj32(a, b2, c2));
        h2 = g3;
        g3 = f3;
        f3 = e;
        e = sum32(d2, T12);
        d2 = c2;
        c2 = b2;
        b2 = a;
        a = sum32(T12, T22);
      }
      this.h[0] = sum32(this.h[0], a);
      this.h[1] = sum32(this.h[1], b2);
      this.h[2] = sum32(this.h[2], c2);
      this.h[3] = sum32(this.h[3], d2);
      this.h[4] = sum32(this.h[4], e);
      this.h[5] = sum32(this.h[5], f3);
      this.h[6] = sum32(this.h[6], g3);
      this.h[7] = sum32(this.h[7], h2);
    };
    SHA256.prototype._digest = function digest(enc) {
      if (enc === "hex")
        return utils.toHex32(this.h, "big");
      else
        return utils.split32(this.h, "big");
    };
  }
});

// node_modules/hash.js/lib/hash/sha/224.js
var require__3 = __commonJS({
  "node_modules/hash.js/lib/hash/sha/224.js"(exports, module) {
    init_define_process();
    "use strict";
    var utils = require_utils();
    var SHA256 = require__2();
    function SHA224() {
      if (!(this instanceof SHA224))
        return new SHA224();
      SHA256.call(this);
      this.h = [
        3238371032,
        914150663,
        812702999,
        4144912697,
        4290775857,
        1750603025,
        1694076839,
        3204075428
      ];
    }
    utils.inherits(SHA224, SHA256);
    module.exports = SHA224;
    SHA224.blockSize = 512;
    SHA224.outSize = 224;
    SHA224.hmacStrength = 192;
    SHA224.padLength = 64;
    SHA224.prototype._digest = function digest(enc) {
      if (enc === "hex")
        return utils.toHex32(this.h.slice(0, 7), "big");
      else
        return utils.split32(this.h.slice(0, 7), "big");
    };
  }
});

// node_modules/hash.js/lib/hash/sha/512.js
var require__4 = __commonJS({
  "node_modules/hash.js/lib/hash/sha/512.js"(exports, module) {
    init_define_process();
    "use strict";
    var utils = require_utils();
    var common = require_common();
    var assert2 = require_minimalistic_assert();
    var rotr64_hi = utils.rotr64_hi;
    var rotr64_lo = utils.rotr64_lo;
    var shr64_hi = utils.shr64_hi;
    var shr64_lo = utils.shr64_lo;
    var sum64 = utils.sum64;
    var sum64_hi = utils.sum64_hi;
    var sum64_lo = utils.sum64_lo;
    var sum64_4_hi = utils.sum64_4_hi;
    var sum64_4_lo = utils.sum64_4_lo;
    var sum64_5_hi = utils.sum64_5_hi;
    var sum64_5_lo = utils.sum64_5_lo;
    var BlockHash = common.BlockHash;
    var sha512_K = [
      1116352408,
      3609767458,
      1899447441,
      602891725,
      3049323471,
      3964484399,
      3921009573,
      2173295548,
      961987163,
      4081628472,
      1508970993,
      3053834265,
      2453635748,
      2937671579,
      2870763221,
      3664609560,
      3624381080,
      2734883394,
      310598401,
      1164996542,
      607225278,
      1323610764,
      1426881987,
      3590304994,
      1925078388,
      4068182383,
      2162078206,
      991336113,
      2614888103,
      633803317,
      3248222580,
      3479774868,
      3835390401,
      2666613458,
      4022224774,
      944711139,
      264347078,
      2341262773,
      604807628,
      2007800933,
      770255983,
      1495990901,
      1249150122,
      1856431235,
      1555081692,
      3175218132,
      1996064986,
      2198950837,
      2554220882,
      3999719339,
      2821834349,
      766784016,
      2952996808,
      2566594879,
      3210313671,
      3203337956,
      3336571891,
      1034457026,
      3584528711,
      2466948901,
      113926993,
      3758326383,
      338241895,
      168717936,
      666307205,
      1188179964,
      773529912,
      1546045734,
      1294757372,
      1522805485,
      1396182291,
      2643833823,
      1695183700,
      2343527390,
      1986661051,
      1014477480,
      2177026350,
      1206759142,
      2456956037,
      344077627,
      2730485921,
      1290863460,
      2820302411,
      3158454273,
      3259730800,
      3505952657,
      3345764771,
      106217008,
      3516065817,
      3606008344,
      3600352804,
      1432725776,
      4094571909,
      1467031594,
      275423344,
      851169720,
      430227734,
      3100823752,
      506948616,
      1363258195,
      659060556,
      3750685593,
      883997877,
      3785050280,
      958139571,
      3318307427,
      1322822218,
      3812723403,
      1537002063,
      2003034995,
      1747873779,
      3602036899,
      1955562222,
      1575990012,
      2024104815,
      1125592928,
      2227730452,
      2716904306,
      2361852424,
      442776044,
      2428436474,
      593698344,
      2756734187,
      3733110249,
      3204031479,
      2999351573,
      3329325298,
      3815920427,
      3391569614,
      3928383900,
      3515267271,
      566280711,
      3940187606,
      3454069534,
      4118630271,
      4000239992,
      116418474,
      1914138554,
      174292421,
      2731055270,
      289380356,
      3203993006,
      460393269,
      320620315,
      685471733,
      587496836,
      852142971,
      1086792851,
      1017036298,
      365543100,
      1126000580,
      2618297676,
      1288033470,
      3409855158,
      1501505948,
      4234509866,
      1607167915,
      987167468,
      1816402316,
      1246189591
    ];
    function SHA512() {
      if (!(this instanceof SHA512))
        return new SHA512();
      BlockHash.call(this);
      this.h = [
        1779033703,
        4089235720,
        3144134277,
        2227873595,
        1013904242,
        4271175723,
        2773480762,
        1595750129,
        1359893119,
        2917565137,
        2600822924,
        725511199,
        528734635,
        4215389547,
        1541459225,
        327033209
      ];
      this.k = sha512_K;
      this.W = new Array(160);
    }
    utils.inherits(SHA512, BlockHash);
    module.exports = SHA512;
    SHA512.blockSize = 1024;
    SHA512.outSize = 512;
    SHA512.hmacStrength = 192;
    SHA512.padLength = 128;
    SHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {
      var W3 = this.W;
      for (var i2 = 0; i2 < 32; i2++)
        W3[i2] = msg[start + i2];
      for (; i2 < W3.length; i2 += 2) {
        var c0_hi = g1_512_hi(W3[i2 - 4], W3[i2 - 3]);
        var c0_lo = g1_512_lo(W3[i2 - 4], W3[i2 - 3]);
        var c1_hi = W3[i2 - 14];
        var c1_lo = W3[i2 - 13];
        var c2_hi = g0_512_hi(W3[i2 - 30], W3[i2 - 29]);
        var c2_lo = g0_512_lo(W3[i2 - 30], W3[i2 - 29]);
        var c3_hi = W3[i2 - 32];
        var c3_lo = W3[i2 - 31];
        W3[i2] = sum64_4_hi(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo);
        W3[i2 + 1] = sum64_4_lo(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo);
      }
    };
    SHA512.prototype._update = function _update(msg, start) {
      this._prepareBlock(msg, start);
      var W3 = this.W;
      var ah = this.h[0];
      var al = this.h[1];
      var bh = this.h[2];
      var bl = this.h[3];
      var ch = this.h[4];
      var cl = this.h[5];
      var dh = this.h[6];
      var dl = this.h[7];
      var eh = this.h[8];
      var el = this.h[9];
      var fh = this.h[10];
      var fl = this.h[11];
      var gh = this.h[12];
      var gl = this.h[13];
      var hh = this.h[14];
      var hl = this.h[15];
      assert2(this.k.length === W3.length);
      for (var i2 = 0; i2 < W3.length; i2 += 2) {
        var c0_hi = hh;
        var c0_lo = hl;
        var c1_hi = s1_512_hi(eh, el);
        var c1_lo = s1_512_lo(eh, el);
        var c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);
        var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);
        var c3_hi = this.k[i2];
        var c3_lo = this.k[i2 + 1];
        var c4_hi = W3[i2];
        var c4_lo = W3[i2 + 1];
        var T1_hi = sum64_5_hi(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo, c4_hi, c4_lo);
        var T1_lo = sum64_5_lo(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo, c4_hi, c4_lo);
        c0_hi = s0_512_hi(ah, al);
        c0_lo = s0_512_lo(ah, al);
        c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);
        c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);
        var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);
        var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);
        hh = gh;
        hl = gl;
        gh = fh;
        gl = fl;
        fh = eh;
        fl = el;
        eh = sum64_hi(dh, dl, T1_hi, T1_lo);
        el = sum64_lo(dl, dl, T1_hi, T1_lo);
        dh = ch;
        dl = cl;
        ch = bh;
        cl = bl;
        bh = ah;
        bl = al;
        ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);
        al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);
      }
      sum64(this.h, 0, ah, al);
      sum64(this.h, 2, bh, bl);
      sum64(this.h, 4, ch, cl);
      sum64(this.h, 6, dh, dl);
      sum64(this.h, 8, eh, el);
      sum64(this.h, 10, fh, fl);
      sum64(this.h, 12, gh, gl);
      sum64(this.h, 14, hh, hl);
    };
    SHA512.prototype._digest = function digest(enc) {
      if (enc === "hex")
        return utils.toHex32(this.h, "big");
      else
        return utils.split32(this.h, "big");
    };
    function ch64_hi(xh, xl, yh, yl, zh) {
      var r2 = xh & yh ^ ~xh & zh;
      if (r2 < 0)
        r2 += 4294967296;
      return r2;
    }
    function ch64_lo(xh, xl, yh, yl, zh, zl) {
      var r2 = xl & yl ^ ~xl & zl;
      if (r2 < 0)
        r2 += 4294967296;
      return r2;
    }
    function maj64_hi(xh, xl, yh, yl, zh) {
      var r2 = xh & yh ^ xh & zh ^ yh & zh;
      if (r2 < 0)
        r2 += 4294967296;
      return r2;
    }
    function maj64_lo(xh, xl, yh, yl, zh, zl) {
      var r2 = xl & yl ^ xl & zl ^ yl & zl;
      if (r2 < 0)
        r2 += 4294967296;
      return r2;
    }
    function s0_512_hi(xh, xl) {
      var c0_hi = rotr64_hi(xh, xl, 28);
      var c1_hi = rotr64_hi(xl, xh, 2);
      var c2_hi = rotr64_hi(xl, xh, 7);
      var r2 = c0_hi ^ c1_hi ^ c2_hi;
      if (r2 < 0)
        r2 += 4294967296;
      return r2;
    }
    function s0_512_lo(xh, xl) {
      var c0_lo = rotr64_lo(xh, xl, 28);
      var c1_lo = rotr64_lo(xl, xh, 2);
      var c2_lo = rotr64_lo(xl, xh, 7);
      var r2 = c0_lo ^ c1_lo ^ c2_lo;
      if (r2 < 0)
        r2 += 4294967296;
      return r2;
    }
    function s1_512_hi(xh, xl) {
      var c0_hi = rotr64_hi(xh, xl, 14);
      var c1_hi = rotr64_hi(xh, xl, 18);
      var c2_hi = rotr64_hi(xl, xh, 9);
      var r2 = c0_hi ^ c1_hi ^ c2_hi;
      if (r2 < 0)
        r2 += 4294967296;
      return r2;
    }
    function s1_512_lo(xh, xl) {
      var c0_lo = rotr64_lo(xh, xl, 14);
      var c1_lo = rotr64_lo(xh, xl, 18);
      var c2_lo = rotr64_lo(xl, xh, 9);
      var r2 = c0_lo ^ c1_lo ^ c2_lo;
      if (r2 < 0)
        r2 += 4294967296;
      return r2;
    }
    function g0_512_hi(xh, xl) {
      var c0_hi = rotr64_hi(xh, xl, 1);
      var c1_hi = rotr64_hi(xh, xl, 8);
      var c2_hi = shr64_hi(xh, xl, 7);
      var r2 = c0_hi ^ c1_hi ^ c2_hi;
      if (r2 < 0)
        r2 += 4294967296;
      return r2;
    }
    function g0_512_lo(xh, xl) {
      var c0_lo = rotr64_lo(xh, xl, 1);
      var c1_lo = rotr64_lo(xh, xl, 8);
      var c2_lo = shr64_lo(xh, xl, 7);
      var r2 = c0_lo ^ c1_lo ^ c2_lo;
      if (r2 < 0)
        r2 += 4294967296;
      return r2;
    }
    function g1_512_hi(xh, xl) {
      var c0_hi = rotr64_hi(xh, xl, 19);
      var c1_hi = rotr64_hi(xl, xh, 29);
      var c2_hi = shr64_hi(xh, xl, 6);
      var r2 = c0_hi ^ c1_hi ^ c2_hi;
      if (r2 < 0)
        r2 += 4294967296;
      return r2;
    }
    function g1_512_lo(xh, xl) {
      var c0_lo = rotr64_lo(xh, xl, 19);
      var c1_lo = rotr64_lo(xl, xh, 29);
      var c2_lo = shr64_lo(xh, xl, 6);
      var r2 = c0_lo ^ c1_lo ^ c2_lo;
      if (r2 < 0)
        r2 += 4294967296;
      return r2;
    }
  }
});

// node_modules/hash.js/lib/hash/sha/384.js
var require__5 = __commonJS({
  "node_modules/hash.js/lib/hash/sha/384.js"(exports, module) {
    init_define_process();
    "use strict";
    var utils = require_utils();
    var SHA512 = require__4();
    function SHA384() {
      if (!(this instanceof SHA384))
        return new SHA384();
      SHA512.call(this);
      this.h = [
        3418070365,
        3238371032,
        1654270250,
        914150663,
        2438529370,
        812702999,
        355462360,
        4144912697,
        1731405415,
        4290775857,
        2394180231,
        1750603025,
        3675008525,
        1694076839,
        1203062813,
        3204075428
      ];
    }
    utils.inherits(SHA384, SHA512);
    module.exports = SHA384;
    SHA384.blockSize = 1024;
    SHA384.outSize = 384;
    SHA384.hmacStrength = 192;
    SHA384.padLength = 128;
    SHA384.prototype._digest = function digest(enc) {
      if (enc === "hex")
        return utils.toHex32(this.h.slice(0, 12), "big");
      else
        return utils.split32(this.h.slice(0, 12), "big");
    };
  }
});

// node_modules/hash.js/lib/hash/sha.js
var require_sha = __commonJS({
  "node_modules/hash.js/lib/hash/sha.js"(exports) {
    init_define_process();
    "use strict";
    exports.sha1 = require__();
    exports.sha224 = require__3();
    exports.sha256 = require__2();
    exports.sha384 = require__5();
    exports.sha512 = require__4();
  }
});

// node_modules/hash.js/lib/hash/ripemd.js
var require_ripemd = __commonJS({
  "node_modules/hash.js/lib/hash/ripemd.js"(exports) {
    init_define_process();
    "use strict";
    var utils = require_utils();
    var common = require_common();
    var rotl32 = utils.rotl32;
    var sum32 = utils.sum32;
    var sum32_3 = utils.sum32_3;
    var sum32_4 = utils.sum32_4;
    var BlockHash = common.BlockHash;
    function RIPEMD160() {
      if (!(this instanceof RIPEMD160))
        return new RIPEMD160();
      BlockHash.call(this);
      this.h = [1732584193, 4023233417, 2562383102, 271733878, 3285377520];
      this.endian = "little";
    }
    utils.inherits(RIPEMD160, BlockHash);
    exports.ripemd160 = RIPEMD160;
    RIPEMD160.blockSize = 512;
    RIPEMD160.outSize = 160;
    RIPEMD160.hmacStrength = 192;
    RIPEMD160.padLength = 64;
    RIPEMD160.prototype._update = function update2(msg, start) {
      var A3 = this.h[0];
      var B3 = this.h[1];
      var C3 = this.h[2];
      var D3 = this.h[3];
      var E3 = this.h[4];
      var Ah = A3;
      var Bh = B3;
      var Ch = C3;
      var Dh = D3;
      var Eh = E3;
      for (var j3 = 0; j3 < 80; j3++) {
        var T3 = sum32(rotl32(sum32_4(A3, f3(j3, B3, C3, D3), msg[r2[j3] + start], K3(j3)), s2[j3]), E3);
        A3 = E3;
        E3 = D3;
        D3 = rotl32(C3, 10);
        C3 = B3;
        B3 = T3;
        T3 = sum32(rotl32(sum32_4(Ah, f3(79 - j3, Bh, Ch, Dh), msg[rh[j3] + start], Kh(j3)), sh[j3]), Eh);
        Ah = Eh;
        Eh = Dh;
        Dh = rotl32(Ch, 10);
        Ch = Bh;
        Bh = T3;
      }
      T3 = sum32_3(this.h[1], C3, Dh);
      this.h[1] = sum32_3(this.h[2], D3, Eh);
      this.h[2] = sum32_3(this.h[3], E3, Ah);
      this.h[3] = sum32_3(this.h[4], A3, Bh);
      this.h[4] = sum32_3(this.h[0], B3, Ch);
      this.h[0] = T3;
    };
    RIPEMD160.prototype._digest = function digest(enc) {
      if (enc === "hex")
        return utils.toHex32(this.h, "little");
      else
        return utils.split32(this.h, "little");
    };
    function f3(j3, x4, y2, z3) {
      if (j3 <= 15)
        return x4 ^ y2 ^ z3;
      else if (j3 <= 31)
        return x4 & y2 | ~x4 & z3;
      else if (j3 <= 47)
        return (x4 | ~y2) ^ z3;
      else if (j3 <= 63)
        return x4 & z3 | y2 & ~z3;
      else
        return x4 ^ (y2 | ~z3);
    }
    function K3(j3) {
      if (j3 <= 15)
        return 0;
      else if (j3 <= 31)
        return 1518500249;
      else if (j3 <= 47)
        return 1859775393;
      else if (j3 <= 63)
        return 2400959708;
      else
        return 2840853838;
    }
    function Kh(j3) {
      if (j3 <= 15)
        return 1352829926;
      else if (j3 <= 31)
        return 1548603684;
      else if (j3 <= 47)
        return 1836072691;
      else if (j3 <= 63)
        return 2053994217;
      else
        return 0;
    }
    var r2 = [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9,
      10,
      11,
      12,
      13,
      14,
      15,
      7,
      4,
      13,
      1,
      10,
      6,
      15,
      3,
      12,
      0,
      9,
      5,
      2,
      14,
      11,
      8,
      3,
      10,
      14,
      4,
      9,
      15,
      8,
      1,
      2,
      7,
      0,
      6,
      13,
      11,
      5,
      12,
      1,
      9,
      11,
      10,
      0,
      8,
      12,
      4,
      13,
      3,
      7,
      15,
      14,
      5,
      6,
      2,
      4,
      0,
      5,
      9,
      7,
      12,
      2,
      10,
      14,
      1,
      3,
      8,
      11,
      6,
      15,
      13
    ];
    var rh = [
      5,
      14,
      7,
      0,
      9,
      2,
      11,
      4,
      13,
      6,
      15,
      8,
      1,
      10,
      3,
      12,
      6,
      11,
      3,
      7,
      0,
      13,
      5,
      10,
      14,
      15,
      8,
      12,
      4,
      9,
      1,
      2,
      15,
      5,
      1,
      3,
      7,
      14,
      6,
      9,
      11,
      8,
      12,
      2,
      10,
      0,
      4,
      13,
      8,
      6,
      4,
      1,
      3,
      11,
      15,
      0,
      5,
      12,
      2,
      13,
      9,
      7,
      10,
      14,
      12,
      15,
      10,
      4,
      1,
      5,
      8,
      7,
      6,
      2,
      13,
      14,
      0,
      3,
      9,
      11
    ];
    var s2 = [
      11,
      14,
      15,
      12,
      5,
      8,
      7,
      9,
      11,
      13,
      14,
      15,
      6,
      7,
      9,
      8,
      7,
      6,
      8,
      13,
      11,
      9,
      7,
      15,
      7,
      12,
      15,
      9,
      11,
      7,
      13,
      12,
      11,
      13,
      6,
      7,
      14,
      9,
      13,
      15,
      14,
      8,
      13,
      6,
      5,
      12,
      7,
      5,
      11,
      12,
      14,
      15,
      14,
      15,
      9,
      8,
      9,
      14,
      5,
      6,
      8,
      6,
      5,
      12,
      9,
      15,
      5,
      11,
      6,
      8,
      13,
      12,
      5,
      12,
      13,
      14,
      11,
      8,
      5,
      6
    ];
    var sh = [
      8,
      9,
      9,
      11,
      13,
      15,
      15,
      5,
      7,
      7,
      8,
      11,
      14,
      14,
      12,
      6,
      9,
      13,
      15,
      7,
      12,
      8,
      9,
      11,
      7,
      7,
      12,
      7,
      6,
      15,
      13,
      11,
      9,
      7,
      15,
      11,
      8,
      6,
      6,
      14,
      12,
      13,
      5,
      14,
      13,
      13,
      7,
      5,
      15,
      5,
      8,
      11,
      14,
      14,
      6,
      14,
      6,
      9,
      12,
      9,
      12,
      5,
      15,
      8,
      8,
      5,
      12,
      9,
      12,
      5,
      14,
      6,
      8,
      13,
      6,
      5,
      15,
      13,
      11,
      11
    ];
  }
});

// node_modules/hash.js/lib/hash/hmac.js
var require_hmac = __commonJS({
  "node_modules/hash.js/lib/hash/hmac.js"(exports, module) {
    init_define_process();
    "use strict";
    var utils = require_utils();
    var assert2 = require_minimalistic_assert();
    function Hmac(hash3, key2, enc) {
      if (!(this instanceof Hmac))
        return new Hmac(hash3, key2, enc);
      this.Hash = hash3;
      this.blockSize = hash3.blockSize / 8;
      this.outSize = hash3.outSize / 8;
      this.inner = null;
      this.outer = null;
      this._init(utils.toArray(key2, enc));
    }
    module.exports = Hmac;
    Hmac.prototype._init = function init2(key2) {
      if (key2.length > this.blockSize)
        key2 = new this.Hash().update(key2).digest();
      assert2(key2.length <= this.blockSize);
      for (var i2 = key2.length; i2 < this.blockSize; i2++)
        key2.push(0);
      for (i2 = 0; i2 < key2.length; i2++)
        key2[i2] ^= 54;
      this.inner = new this.Hash().update(key2);
      for (i2 = 0; i2 < key2.length; i2++)
        key2[i2] ^= 106;
      this.outer = new this.Hash().update(key2);
    };
    Hmac.prototype.update = function update2(msg, enc) {
      this.inner.update(msg, enc);
      return this;
    };
    Hmac.prototype.digest = function digest(enc) {
      this.outer.update(this.inner.digest());
      return this.outer.digest(enc);
    };
  }
});

// node_modules/hash.js/lib/hash.js
var require_hash = __commonJS({
  "node_modules/hash.js/lib/hash.js"(exports) {
    init_define_process();
    var hash3 = exports;
    hash3.utils = require_utils();
    hash3.common = require_common();
    hash3.sha = require_sha();
    hash3.ripemd = require_ripemd();
    hash3.hmac = require_hmac();
    hash3.sha1 = hash3.sha.sha1;
    hash3.sha256 = hash3.sha.sha256;
    hash3.sha224 = hash3.sha.sha224;
    hash3.sha384 = hash3.sha.sha384;
    hash3.sha512 = hash3.sha.sha512;
    hash3.ripemd160 = hash3.ripemd.ripemd160;
  }
});

// node_modules/@ethersproject/signing-key/lib.esm/elliptic.js
function createCommonjsModule(fn, basedir, module) {
  return module = {
    path: basedir,
    exports: {},
    require: function(path, base2) {
      return commonjsRequire(path, base2 === void 0 || base2 === null ? module.path : base2);
    }
  }, fn(module, module.exports), module.exports;
}
function commonjsRequire() {
  throw new Error("Dynamic requires are not currently supported by @rollup/plugin-commonjs");
}
function assert(val, msg) {
  if (!val)
    throw new Error(msg || "Assertion failed");
}
function BaseCurve(type, conf) {
  this.type = type;
  this.p = new import_bn2.default(conf.p, 16);
  this.red = conf.prime ? import_bn2.default.red(conf.prime) : import_bn2.default.mont(this.p);
  this.zero = new import_bn2.default(0).toRed(this.red);
  this.one = new import_bn2.default(1).toRed(this.red);
  this.two = new import_bn2.default(2).toRed(this.red);
  this.n = conf.n && new import_bn2.default(conf.n, 16);
  this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);
  this._wnafT1 = new Array(4);
  this._wnafT2 = new Array(4);
  this._wnafT3 = new Array(4);
  this._wnafT4 = new Array(4);
  this._bitLength = this.n ? this.n.bitLength() : 0;
  var adjustCount = this.n && this.p.div(this.n);
  if (!adjustCount || adjustCount.cmpn(100) > 0) {
    this.redN = null;
  } else {
    this._maxwellTrick = true;
    this.redN = this.n.toRed(this.red);
  }
}
function BasePoint(curve, type) {
  this.curve = curve;
  this.type = type;
  this.precomputed = null;
}
function ShortCurve(conf) {
  base.call(this, "short", conf);
  this.a = new import_bn2.default(conf.a, 16).toRed(this.red);
  this.b = new import_bn2.default(conf.b, 16).toRed(this.red);
  this.tinv = this.two.redInvm();
  this.zeroA = this.a.fromRed().cmpn(0) === 0;
  this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;
  this.endo = this._getEndomorphism(conf);
  this._endoWnafT1 = new Array(4);
  this._endoWnafT2 = new Array(4);
}
function Point(curve, x4, y2, isRed) {
  base.BasePoint.call(this, curve, "affine");
  if (x4 === null && y2 === null) {
    this.x = null;
    this.y = null;
    this.inf = true;
  } else {
    this.x = new import_bn2.default(x4, 16);
    this.y = new import_bn2.default(y2, 16);
    if (isRed) {
      this.x.forceRed(this.curve.red);
      this.y.forceRed(this.curve.red);
    }
    if (!this.x.red)
      this.x = this.x.toRed(this.curve.red);
    if (!this.y.red)
      this.y = this.y.toRed(this.curve.red);
    this.inf = false;
  }
}
function JPoint(curve, x4, y2, z3) {
  base.BasePoint.call(this, curve, "jacobian");
  if (x4 === null && y2 === null && z3 === null) {
    this.x = this.curve.one;
    this.y = this.curve.one;
    this.z = new import_bn2.default(0);
  } else {
    this.x = new import_bn2.default(x4, 16);
    this.y = new import_bn2.default(y2, 16);
    this.z = new import_bn2.default(z3, 16);
  }
  if (!this.x.red)
    this.x = this.x.toRed(this.curve.red);
  if (!this.y.red)
    this.y = this.y.toRed(this.curve.red);
  if (!this.z.red)
    this.z = this.z.toRed(this.curve.red);
  this.zOne = this.z === this.curve.one;
}
function HmacDRBG(options) {
  if (!(this instanceof HmacDRBG))
    return new HmacDRBG(options);
  this.hash = options.hash;
  this.predResist = !!options.predResist;
  this.outLen = this.hash.outSize;
  this.minEntropy = options.minEntropy || this.hash.hmacStrength;
  this._reseed = null;
  this.reseedInterval = null;
  this.K = null;
  this.V = null;
  var entropy = utils_1.toArray(options.entropy, options.entropyEnc || "hex");
  var nonce = utils_1.toArray(options.nonce, options.nonceEnc || "hex");
  var pers = utils_1.toArray(options.pers, options.persEnc || "hex");
  minimalisticAssert(entropy.length >= this.minEntropy / 8, "Not enough entropy. Minimum is: " + this.minEntropy + " bits");
  this._init(entropy, nonce, pers);
}
function KeyPair(ec2, options) {
  this.ec = ec2;
  this.priv = null;
  this.pub = null;
  if (options.priv)
    this._importPrivate(options.priv, options.privEnc);
  if (options.pub)
    this._importPublic(options.pub, options.pubEnc);
}
function Signature(options, enc) {
  if (options instanceof Signature)
    return options;
  if (this._importDER(options, enc))
    return;
  assert$4(options.r && options.s, "Signature without r or s");
  this.r = new import_bn2.default(options.r, 16);
  this.s = new import_bn2.default(options.s, 16);
  if (options.recoveryParam === void 0)
    this.recoveryParam = null;
  else
    this.recoveryParam = options.recoveryParam;
}
function Position() {
  this.place = 0;
}
function getLength(buf, p3) {
  var initial = buf[p3.place++];
  if (!(initial & 128)) {
    return initial;
  }
  var octetLen = initial & 15;
  if (octetLen === 0 || octetLen > 4) {
    return false;
  }
  var val = 0;
  for (var i2 = 0, off = p3.place; i2 < octetLen; i2++, off++) {
    val <<= 8;
    val |= buf[off];
    val >>>= 0;
  }
  if (val <= 127) {
    return false;
  }
  p3.place = off;
  return val;
}
function rmPadding(buf) {
  var i2 = 0;
  var len = buf.length - 1;
  while (!buf[i2] && !(buf[i2 + 1] & 128) && i2 < len) {
    i2++;
  }
  if (i2 === 0) {
    return buf;
  }
  return buf.slice(i2);
}
function constructLength(arr, len) {
  if (len < 128) {
    arr.push(len);
    return;
  }
  var octets = 1 + (Math.log(len) / Math.LN2 >>> 3);
  arr.push(octets | 128);
  while (--octets) {
    arr.push(len >>> (octets << 3) & 255);
  }
  arr.push(len);
}
function EC(options) {
  if (!(this instanceof EC))
    return new EC(options);
  if (typeof options === "string") {
    assert$5(Object.prototype.hasOwnProperty.call(curves_1, options), "Unknown curve " + options);
    options = curves_1[options];
  }
  if (options instanceof curves_1.PresetCurve)
    options = { curve: options };
  this.curve = options.curve.curve;
  this.n = this.curve.n;
  this.nh = this.n.ushrn(1);
  this.g = this.curve.g;
  this.g = options.curve.g;
  this.g.precompute(options.curve.n.bitLength() + 1);
  this.hash = options.hash || options.curve.hash;
}
var import_bn2, import_hash2, commonjsGlobal, minimalisticAssert, utils_1, utils_1$1, getNAF, getJSF, assert$1, base, inherits_browser, assert$2, short_1, curve_1, curves_1, hmacDrbg, assert$3, key, assert$4, signature, rand, assert$5, ec, elliptic_1, EC$1;
var init_elliptic = __esm({
  "node_modules/@ethersproject/signing-key/lib.esm/elliptic.js"() {
    init_define_process();
    import_bn2 = __toModule(require_bn());
    import_hash2 = __toModule(require_hash());
    commonjsGlobal = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : {};
    minimalisticAssert = assert;
    assert.equal = function assertEqual(l2, r2, msg) {
      if (l2 != r2)
        throw new Error(msg || "Assertion failed: " + l2 + " != " + r2);
    };
    utils_1 = createCommonjsModule(function(module, exports) {
      "use strict";
      var utils = exports;
      function toArray(msg, enc) {
        if (Array.isArray(msg))
          return msg.slice();
        if (!msg)
          return [];
        var res = [];
        if (typeof msg !== "string") {
          for (var i2 = 0; i2 < msg.length; i2++)
            res[i2] = msg[i2] | 0;
          return res;
        }
        if (enc === "hex") {
          msg = msg.replace(/[^a-z0-9]+/ig, "");
          if (msg.length % 2 !== 0)
            msg = "0" + msg;
          for (var i2 = 0; i2 < msg.length; i2 += 2)
            res.push(parseInt(msg[i2] + msg[i2 + 1], 16));
        } else {
          for (var i2 = 0; i2 < msg.length; i2++) {
            var c2 = msg.charCodeAt(i2);
            var hi = c2 >> 8;
            var lo2 = c2 & 255;
            if (hi)
              res.push(hi, lo2);
            else
              res.push(lo2);
          }
        }
        return res;
      }
      utils.toArray = toArray;
      function zero2(word) {
        if (word.length === 1)
          return "0" + word;
        else
          return word;
      }
      utils.zero2 = zero2;
      function toHex2(msg) {
        var res = "";
        for (var i2 = 0; i2 < msg.length; i2++)
          res += zero2(msg[i2].toString(16));
        return res;
      }
      utils.toHex = toHex2;
      utils.encode = function encode4(arr, enc) {
        if (enc === "hex")
          return toHex2(arr);
        else
          return arr;
      };
    });
    utils_1$1 = createCommonjsModule(function(module, exports) {
      "use strict";
      var utils = exports;
      utils.assert = minimalisticAssert;
      utils.toArray = utils_1.toArray;
      utils.zero2 = utils_1.zero2;
      utils.toHex = utils_1.toHex;
      utils.encode = utils_1.encode;
      function getNAF2(num, w3, bits) {
        var naf = new Array(Math.max(num.bitLength(), bits) + 1);
        naf.fill(0);
        var ws2 = 1 << w3 + 1;
        var k4 = num.clone();
        for (var i2 = 0; i2 < naf.length; i2++) {
          var z3;
          var mod2 = k4.andln(ws2 - 1);
          if (k4.isOdd()) {
            if (mod2 > (ws2 >> 1) - 1)
              z3 = (ws2 >> 1) - mod2;
            else
              z3 = mod2;
            k4.isubn(z3);
          } else {
            z3 = 0;
          }
          naf[i2] = z3;
          k4.iushrn(1);
        }
        return naf;
      }
      utils.getNAF = getNAF2;
      function getJSF2(k12, k22) {
        var jsf = [
          [],
          []
        ];
        k12 = k12.clone();
        k22 = k22.clone();
        var d12 = 0;
        var d2 = 0;
        var m8;
        while (k12.cmpn(-d12) > 0 || k22.cmpn(-d2) > 0) {
          var m14 = k12.andln(3) + d12 & 3;
          var m24 = k22.andln(3) + d2 & 3;
          if (m14 === 3)
            m14 = -1;
          if (m24 === 3)
            m24 = -1;
          var u12;
          if ((m14 & 1) === 0) {
            u12 = 0;
          } else {
            m8 = k12.andln(7) + d12 & 7;
            if ((m8 === 3 || m8 === 5) && m24 === 2)
              u12 = -m14;
            else
              u12 = m14;
          }
          jsf[0].push(u12);
          var u2;
          if ((m24 & 1) === 0) {
            u2 = 0;
          } else {
            m8 = k22.andln(7) + d2 & 7;
            if ((m8 === 3 || m8 === 5) && m14 === 2)
              u2 = -m24;
            else
              u2 = m24;
          }
          jsf[1].push(u2);
          if (2 * d12 === u12 + 1)
            d12 = 1 - d12;
          if (2 * d2 === u2 + 1)
            d2 = 1 - d2;
          k12.iushrn(1);
          k22.iushrn(1);
        }
        return jsf;
      }
      utils.getJSF = getJSF2;
      function cachedProperty(obj, name2, computer) {
        var key2 = "_" + name2;
        obj.prototype[name2] = function cachedProperty2() {
          return this[key2] !== void 0 ? this[key2] : this[key2] = computer.call(this);
        };
      }
      utils.cachedProperty = cachedProperty;
      function parseBytes(bytes) {
        return typeof bytes === "string" ? utils.toArray(bytes, "hex") : bytes;
      }
      utils.parseBytes = parseBytes;
      function intFromLE(bytes) {
        return new import_bn2.default(bytes, "hex", "le");
      }
      utils.intFromLE = intFromLE;
    });
    getNAF = utils_1$1.getNAF;
    getJSF = utils_1$1.getJSF;
    assert$1 = utils_1$1.assert;
    base = BaseCurve;
    BaseCurve.prototype.point = function point() {
      throw new Error("Not implemented");
    };
    BaseCurve.prototype.validate = function validate() {
      throw new Error("Not implemented");
    };
    BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p3, k4) {
      assert$1(p3.precomputed);
      var doubles = p3._getDoubles();
      var naf = getNAF(k4, 1, this._bitLength);
      var I3 = (1 << doubles.step + 1) - (doubles.step % 2 === 0 ? 2 : 1);
      I3 /= 3;
      var repr = [];
      var j3;
      var nafW;
      for (j3 = 0; j3 < naf.length; j3 += doubles.step) {
        nafW = 0;
        for (var l2 = j3 + doubles.step - 1; l2 >= j3; l2--)
          nafW = (nafW << 1) + naf[l2];
        repr.push(nafW);
      }
      var a = this.jpoint(null, null, null);
      var b2 = this.jpoint(null, null, null);
      for (var i2 = I3; i2 > 0; i2--) {
        for (j3 = 0; j3 < repr.length; j3++) {
          nafW = repr[j3];
          if (nafW === i2)
            b2 = b2.mixedAdd(doubles.points[j3]);
          else if (nafW === -i2)
            b2 = b2.mixedAdd(doubles.points[j3].neg());
        }
        a = a.add(b2);
      }
      return a.toP();
    };
    BaseCurve.prototype._wnafMul = function _wnafMul(p3, k4) {
      var w3 = 4;
      var nafPoints = p3._getNAFPoints(w3);
      w3 = nafPoints.wnd;
      var wnd = nafPoints.points;
      var naf = getNAF(k4, w3, this._bitLength);
      var acc = this.jpoint(null, null, null);
      for (var i2 = naf.length - 1; i2 >= 0; i2--) {
        for (var l2 = 0; i2 >= 0 && naf[i2] === 0; i2--)
          l2++;
        if (i2 >= 0)
          l2++;
        acc = acc.dblp(l2);
        if (i2 < 0)
          break;
        var z3 = naf[i2];
        assert$1(z3 !== 0);
        if (p3.type === "affine") {
          if (z3 > 0)
            acc = acc.mixedAdd(wnd[z3 - 1 >> 1]);
          else
            acc = acc.mixedAdd(wnd[-z3 - 1 >> 1].neg());
        } else {
          if (z3 > 0)
            acc = acc.add(wnd[z3 - 1 >> 1]);
          else
            acc = acc.add(wnd[-z3 - 1 >> 1].neg());
        }
      }
      return p3.type === "affine" ? acc.toP() : acc;
    };
    BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW, points, coeffs, len, jacobianResult) {
      var wndWidth = this._wnafT1;
      var wnd = this._wnafT2;
      var naf = this._wnafT3;
      var max = 0;
      var i2;
      var j3;
      var p3;
      for (i2 = 0; i2 < len; i2++) {
        p3 = points[i2];
        var nafPoints = p3._getNAFPoints(defW);
        wndWidth[i2] = nafPoints.wnd;
        wnd[i2] = nafPoints.points;
      }
      for (i2 = len - 1; i2 >= 1; i2 -= 2) {
        var a = i2 - 1;
        var b2 = i2;
        if (wndWidth[a] !== 1 || wndWidth[b2] !== 1) {
          naf[a] = getNAF(coeffs[a], wndWidth[a], this._bitLength);
          naf[b2] = getNAF(coeffs[b2], wndWidth[b2], this._bitLength);
          max = Math.max(naf[a].length, max);
          max = Math.max(naf[b2].length, max);
          continue;
        }
        var comb = [
          points[a],
          null,
          null,
          points[b2]
        ];
        if (points[a].y.cmp(points[b2].y) === 0) {
          comb[1] = points[a].add(points[b2]);
          comb[2] = points[a].toJ().mixedAdd(points[b2].neg());
        } else if (points[a].y.cmp(points[b2].y.redNeg()) === 0) {
          comb[1] = points[a].toJ().mixedAdd(points[b2]);
          comb[2] = points[a].add(points[b2].neg());
        } else {
          comb[1] = points[a].toJ().mixedAdd(points[b2]);
          comb[2] = points[a].toJ().mixedAdd(points[b2].neg());
        }
        var index = [
          -3,
          -1,
          -5,
          -7,
          0,
          7,
          5,
          1,
          3
        ];
        var jsf = getJSF(coeffs[a], coeffs[b2]);
        max = Math.max(jsf[0].length, max);
        naf[a] = new Array(max);
        naf[b2] = new Array(max);
        for (j3 = 0; j3 < max; j3++) {
          var ja = jsf[0][j3] | 0;
          var jb = jsf[1][j3] | 0;
          naf[a][j3] = index[(ja + 1) * 3 + (jb + 1)];
          naf[b2][j3] = 0;
          wnd[a] = comb;
        }
      }
      var acc = this.jpoint(null, null, null);
      var tmp = this._wnafT4;
      for (i2 = max; i2 >= 0; i2--) {
        var k4 = 0;
        while (i2 >= 0) {
          var zero = true;
          for (j3 = 0; j3 < len; j3++) {
            tmp[j3] = naf[j3][i2] | 0;
            if (tmp[j3] !== 0)
              zero = false;
          }
          if (!zero)
            break;
          k4++;
          i2--;
        }
        if (i2 >= 0)
          k4++;
        acc = acc.dblp(k4);
        if (i2 < 0)
          break;
        for (j3 = 0; j3 < len; j3++) {
          var z3 = tmp[j3];
          p3;
          if (z3 === 0)
            continue;
          else if (z3 > 0)
            p3 = wnd[j3][z3 - 1 >> 1];
          else if (z3 < 0)
            p3 = wnd[j3][-z3 - 1 >> 1].neg();
          if (p3.type === "affine")
            acc = acc.mixedAdd(p3);
          else
            acc = acc.add(p3);
        }
      }
      for (i2 = 0; i2 < len; i2++)
        wnd[i2] = null;
      if (jacobianResult)
        return acc;
      else
        return acc.toP();
    };
    BaseCurve.BasePoint = BasePoint;
    BasePoint.prototype.eq = function eq() {
      throw new Error("Not implemented");
    };
    BasePoint.prototype.validate = function validate2() {
      return this.curve.validate(this);
    };
    BaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
      bytes = utils_1$1.toArray(bytes, enc);
      var len = this.p.byteLength();
      if ((bytes[0] === 4 || bytes[0] === 6 || bytes[0] === 7) && bytes.length - 1 === 2 * len) {
        if (bytes[0] === 6)
          assert$1(bytes[bytes.length - 1] % 2 === 0);
        else if (bytes[0] === 7)
          assert$1(bytes[bytes.length - 1] % 2 === 1);
        var res = this.point(bytes.slice(1, 1 + len), bytes.slice(1 + len, 1 + 2 * len));
        return res;
      } else if ((bytes[0] === 2 || bytes[0] === 3) && bytes.length - 1 === len) {
        return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 3);
      }
      throw new Error("Unknown point format");
    };
    BasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {
      return this.encode(enc, true);
    };
    BasePoint.prototype._encode = function _encode2(compact) {
      var len = this.curve.p.byteLength();
      var x4 = this.getX().toArray("be", len);
      if (compact)
        return [this.getY().isEven() ? 2 : 3].concat(x4);
      return [4].concat(x4, this.getY().toArray("be", len));
    };
    BasePoint.prototype.encode = function encode2(enc, compact) {
      return utils_1$1.encode(this._encode(compact), enc);
    };
    BasePoint.prototype.precompute = function precompute(power) {
      if (this.precomputed)
        return this;
      var precomputed = {
        doubles: null,
        naf: null,
        beta: null
      };
      precomputed.naf = this._getNAFPoints(8);
      precomputed.doubles = this._getDoubles(4, power);
      precomputed.beta = this._getBeta();
      this.precomputed = precomputed;
      return this;
    };
    BasePoint.prototype._hasDoubles = function _hasDoubles(k4) {
      if (!this.precomputed)
        return false;
      var doubles = this.precomputed.doubles;
      if (!doubles)
        return false;
      return doubles.points.length >= Math.ceil((k4.bitLength() + 1) / doubles.step);
    };
    BasePoint.prototype._getDoubles = function _getDoubles(step, power) {
      if (this.precomputed && this.precomputed.doubles)
        return this.precomputed.doubles;
      var doubles = [this];
      var acc = this;
      for (var i2 = 0; i2 < power; i2 += step) {
        for (var j3 = 0; j3 < step; j3++)
          acc = acc.dbl();
        doubles.push(acc);
      }
      return {
        step,
        points: doubles
      };
    };
    BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {
      if (this.precomputed && this.precomputed.naf)
        return this.precomputed.naf;
      var res = [this];
      var max = (1 << wnd) - 1;
      var dbl3 = max === 1 ? null : this.dbl();
      for (var i2 = 1; i2 < max; i2++)
        res[i2] = res[i2 - 1].add(dbl3);
      return {
        wnd,
        points: res
      };
    };
    BasePoint.prototype._getBeta = function _getBeta() {
      return null;
    };
    BasePoint.prototype.dblp = function dblp(k4) {
      var r2 = this;
      for (var i2 = 0; i2 < k4; i2++)
        r2 = r2.dbl();
      return r2;
    };
    inherits_browser = createCommonjsModule(function(module) {
      if (typeof Object.create === "function") {
        module.exports = function inherits(ctor, superCtor) {
          if (superCtor) {
            ctor.super_ = superCtor;
            ctor.prototype = Object.create(superCtor.prototype, {
              constructor: {
                value: ctor,
                enumerable: false,
                writable: true,
                configurable: true
              }
            });
          }
        };
      } else {
        module.exports = function inherits(ctor, superCtor) {
          if (superCtor) {
            ctor.super_ = superCtor;
            var TempCtor = function() {
            };
            TempCtor.prototype = superCtor.prototype;
            ctor.prototype = new TempCtor();
            ctor.prototype.constructor = ctor;
          }
        };
      }
    });
    assert$2 = utils_1$1.assert;
    inherits_browser(ShortCurve, base);
    short_1 = ShortCurve;
    ShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {
      if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1)
        return;
      var beta;
      var lambda;
      if (conf.beta) {
        beta = new import_bn2.default(conf.beta, 16).toRed(this.red);
      } else {
        var betas = this._getEndoRoots(this.p);
        beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
        beta = beta.toRed(this.red);
      }
      if (conf.lambda) {
        lambda = new import_bn2.default(conf.lambda, 16);
      } else {
        var lambdas = this._getEndoRoots(this.n);
        if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {
          lambda = lambdas[0];
        } else {
          lambda = lambdas[1];
          assert$2(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
        }
      }
      var basis;
      if (conf.basis) {
        basis = conf.basis.map(function(vec) {
          return {
            a: new import_bn2.default(vec.a, 16),
            b: new import_bn2.default(vec.b, 16)
          };
        });
      } else {
        basis = this._getEndoBasis(lambda);
      }
      return {
        beta,
        lambda,
        basis
      };
    };
    ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {
      var red = num === this.p ? this.red : import_bn2.default.mont(num);
      var tinv = new import_bn2.default(2).toRed(red).redInvm();
      var ntinv = tinv.redNeg();
      var s2 = new import_bn2.default(3).toRed(red).redNeg().redSqrt().redMul(tinv);
      var l12 = ntinv.redAdd(s2).fromRed();
      var l2 = ntinv.redSub(s2).fromRed();
      return [l12, l2];
    };
    ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {
      var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));
      var u2 = lambda;
      var v7 = this.n.clone();
      var x12 = new import_bn2.default(1);
      var y12 = new import_bn2.default(0);
      var x22 = new import_bn2.default(0);
      var y2 = new import_bn2.default(1);
      var a02;
      var b0;
      var a12;
      var b12;
      var a2;
      var b2;
      var prevR;
      var i2 = 0;
      var r2;
      var x4;
      while (u2.cmpn(0) !== 0) {
        var q3 = v7.div(u2);
        r2 = v7.sub(q3.mul(u2));
        x4 = x22.sub(q3.mul(x12));
        var y3 = y2.sub(q3.mul(y12));
        if (!a12 && r2.cmp(aprxSqrt) < 0) {
          a02 = prevR.neg();
          b0 = x12;
          a12 = r2.neg();
          b12 = x4;
        } else if (a12 && ++i2 === 2) {
          break;
        }
        prevR = r2;
        v7 = u2;
        u2 = r2;
        x22 = x12;
        x12 = x4;
        y2 = y12;
        y12 = y3;
      }
      a2 = r2.neg();
      b2 = x4;
      var len1 = a12.sqr().add(b12.sqr());
      var len2 = a2.sqr().add(b2.sqr());
      if (len2.cmp(len1) >= 0) {
        a2 = a02;
        b2 = b0;
      }
      if (a12.negative) {
        a12 = a12.neg();
        b12 = b12.neg();
      }
      if (a2.negative) {
        a2 = a2.neg();
        b2 = b2.neg();
      }
      return [
        { a: a12, b: b12 },
        { a: a2, b: b2 }
      ];
    };
    ShortCurve.prototype._endoSplit = function _endoSplit(k4) {
      var basis = this.endo.basis;
      var v12 = basis[0];
      var v22 = basis[1];
      var c12 = v22.b.mul(k4).divRound(this.n);
      var c2 = v12.b.neg().mul(k4).divRound(this.n);
      var p12 = c12.mul(v12.a);
      var p22 = c2.mul(v22.a);
      var q12 = c12.mul(v12.b);
      var q22 = c2.mul(v22.b);
      var k12 = k4.sub(p12).sub(p22);
      var k22 = q12.add(q22).neg();
      return { k1: k12, k2: k22 };
    };
    ShortCurve.prototype.pointFromX = function pointFromX(x4, odd) {
      x4 = new import_bn2.default(x4, 16);
      if (!x4.red)
        x4 = x4.toRed(this.red);
      var y2 = x4.redSqr().redMul(x4).redIAdd(x4.redMul(this.a)).redIAdd(this.b);
      var y3 = y2.redSqrt();
      if (y3.redSqr().redSub(y2).cmp(this.zero) !== 0)
        throw new Error("invalid point");
      var isOdd = y3.fromRed().isOdd();
      if (odd && !isOdd || !odd && isOdd)
        y3 = y3.redNeg();
      return this.point(x4, y3);
    };
    ShortCurve.prototype.validate = function validate3(point3) {
      if (point3.inf)
        return true;
      var x4 = point3.x;
      var y2 = point3.y;
      var ax = this.a.redMul(x4);
      var rhs = x4.redSqr().redMul(x4).redIAdd(ax).redIAdd(this.b);
      return y2.redSqr().redISub(rhs).cmpn(0) === 0;
    };
    ShortCurve.prototype._endoWnafMulAdd = function _endoWnafMulAdd(points, coeffs, jacobianResult) {
      var npoints = this._endoWnafT1;
      var ncoeffs = this._endoWnafT2;
      for (var i2 = 0; i2 < points.length; i2++) {
        var split = this._endoSplit(coeffs[i2]);
        var p3 = points[i2];
        var beta = p3._getBeta();
        if (split.k1.negative) {
          split.k1.ineg();
          p3 = p3.neg(true);
        }
        if (split.k2.negative) {
          split.k2.ineg();
          beta = beta.neg(true);
        }
        npoints[i2 * 2] = p3;
        npoints[i2 * 2 + 1] = beta;
        ncoeffs[i2 * 2] = split.k1;
        ncoeffs[i2 * 2 + 1] = split.k2;
      }
      var res = this._wnafMulAdd(1, npoints, ncoeffs, i2 * 2, jacobianResult);
      for (var j3 = 0; j3 < i2 * 2; j3++) {
        npoints[j3] = null;
        ncoeffs[j3] = null;
      }
      return res;
    };
    inherits_browser(Point, base.BasePoint);
    ShortCurve.prototype.point = function point2(x4, y2, isRed) {
      return new Point(this, x4, y2, isRed);
    };
    ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {
      return Point.fromJSON(this, obj, red);
    };
    Point.prototype._getBeta = function _getBeta2() {
      if (!this.curve.endo)
        return;
      var pre = this.precomputed;
      if (pre && pre.beta)
        return pre.beta;
      var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
      if (pre) {
        var curve = this.curve;
        var endoMul = function(p3) {
          return curve.point(p3.x.redMul(curve.endo.beta), p3.y);
        };
        pre.beta = beta;
        beta.precomputed = {
          beta: null,
          naf: pre.naf && {
            wnd: pre.naf.wnd,
            points: pre.naf.points.map(endoMul)
          },
          doubles: pre.doubles && {
            step: pre.doubles.step,
            points: pre.doubles.points.map(endoMul)
          }
        };
      }
      return beta;
    };
    Point.prototype.toJSON = function toJSON() {
      if (!this.precomputed)
        return [this.x, this.y];
      return [this.x, this.y, this.precomputed && {
        doubles: this.precomputed.doubles && {
          step: this.precomputed.doubles.step,
          points: this.precomputed.doubles.points.slice(1)
        },
        naf: this.precomputed.naf && {
          wnd: this.precomputed.naf.wnd,
          points: this.precomputed.naf.points.slice(1)
        }
      }];
    };
    Point.fromJSON = function fromJSON(curve, obj, red) {
      if (typeof obj === "string")
        obj = JSON.parse(obj);
      var res = curve.point(obj[0], obj[1], red);
      if (!obj[2])
        return res;
      function obj2point(obj2) {
        return curve.point(obj2[0], obj2[1], red);
      }
      var pre = obj[2];
      res.precomputed = {
        beta: null,
        doubles: pre.doubles && {
          step: pre.doubles.step,
          points: [res].concat(pre.doubles.points.map(obj2point))
        },
        naf: pre.naf && {
          wnd: pre.naf.wnd,
          points: [res].concat(pre.naf.points.map(obj2point))
        }
      };
      return res;
    };
    Point.prototype.inspect = function inspect() {
      if (this.isInfinity())
        return "<EC Point Infinity>";
      return "<EC Point x: " + this.x.fromRed().toString(16, 2) + " y: " + this.y.fromRed().toString(16, 2) + ">";
    };
    Point.prototype.isInfinity = function isInfinity() {
      return this.inf;
    };
    Point.prototype.add = function add(p3) {
      if (this.inf)
        return p3;
      if (p3.inf)
        return this;
      if (this.eq(p3))
        return this.dbl();
      if (this.neg().eq(p3))
        return this.curve.point(null, null);
      if (this.x.cmp(p3.x) === 0)
        return this.curve.point(null, null);
      var c2 = this.y.redSub(p3.y);
      if (c2.cmpn(0) !== 0)
        c2 = c2.redMul(this.x.redSub(p3.x).redInvm());
      var nx = c2.redSqr().redISub(this.x).redISub(p3.x);
      var ny = c2.redMul(this.x.redSub(nx)).redISub(this.y);
      return this.curve.point(nx, ny);
    };
    Point.prototype.dbl = function dbl() {
      if (this.inf)
        return this;
      var ys1 = this.y.redAdd(this.y);
      if (ys1.cmpn(0) === 0)
        return this.curve.point(null, null);
      var a = this.curve.a;
      var x22 = this.x.redSqr();
      var dyinv = ys1.redInvm();
      var c2 = x22.redAdd(x22).redIAdd(x22).redIAdd(a).redMul(dyinv);
      var nx = c2.redSqr().redISub(this.x.redAdd(this.x));
      var ny = c2.redMul(this.x.redSub(nx)).redISub(this.y);
      return this.curve.point(nx, ny);
    };
    Point.prototype.getX = function getX() {
      return this.x.fromRed();
    };
    Point.prototype.getY = function getY() {
      return this.y.fromRed();
    };
    Point.prototype.mul = function mul(k4) {
      k4 = new import_bn2.default(k4, 16);
      if (this.isInfinity())
        return this;
      else if (this._hasDoubles(k4))
        return this.curve._fixedNafMul(this, k4);
      else if (this.curve.endo)
        return this.curve._endoWnafMulAdd([this], [k4]);
      else
        return this.curve._wnafMul(this, k4);
    };
    Point.prototype.mulAdd = function mulAdd(k12, p22, k22) {
      var points = [this, p22];
      var coeffs = [k12, k22];
      if (this.curve.endo)
        return this.curve._endoWnafMulAdd(points, coeffs);
      else
        return this.curve._wnafMulAdd(1, points, coeffs, 2);
    };
    Point.prototype.jmulAdd = function jmulAdd(k12, p22, k22) {
      var points = [this, p22];
      var coeffs = [k12, k22];
      if (this.curve.endo)
        return this.curve._endoWnafMulAdd(points, coeffs, true);
      else
        return this.curve._wnafMulAdd(1, points, coeffs, 2, true);
    };
    Point.prototype.eq = function eq2(p3) {
      return this === p3 || this.inf === p3.inf && (this.inf || this.x.cmp(p3.x) === 0 && this.y.cmp(p3.y) === 0);
    };
    Point.prototype.neg = function neg(_precompute) {
      if (this.inf)
        return this;
      var res = this.curve.point(this.x, this.y.redNeg());
      if (_precompute && this.precomputed) {
        var pre = this.precomputed;
        var negate = function(p3) {
          return p3.neg();
        };
        res.precomputed = {
          naf: pre.naf && {
            wnd: pre.naf.wnd,
            points: pre.naf.points.map(negate)
          },
          doubles: pre.doubles && {
            step: pre.doubles.step,
            points: pre.doubles.points.map(negate)
          }
        };
      }
      return res;
    };
    Point.prototype.toJ = function toJ() {
      if (this.inf)
        return this.curve.jpoint(null, null, null);
      var res = this.curve.jpoint(this.x, this.y, this.curve.one);
      return res;
    };
    inherits_browser(JPoint, base.BasePoint);
    ShortCurve.prototype.jpoint = function jpoint(x4, y2, z3) {
      return new JPoint(this, x4, y2, z3);
    };
    JPoint.prototype.toP = function toP() {
      if (this.isInfinity())
        return this.curve.point(null, null);
      var zinv = this.z.redInvm();
      var zinv2 = zinv.redSqr();
      var ax = this.x.redMul(zinv2);
      var ay = this.y.redMul(zinv2).redMul(zinv);
      return this.curve.point(ax, ay);
    };
    JPoint.prototype.neg = function neg2() {
      return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
    };
    JPoint.prototype.add = function add2(p3) {
      if (this.isInfinity())
        return p3;
      if (p3.isInfinity())
        return this;
      var pz2 = p3.z.redSqr();
      var z22 = this.z.redSqr();
      var u12 = this.x.redMul(pz2);
      var u2 = p3.x.redMul(z22);
      var s12 = this.y.redMul(pz2.redMul(p3.z));
      var s2 = p3.y.redMul(z22.redMul(this.z));
      var h2 = u12.redSub(u2);
      var r2 = s12.redSub(s2);
      if (h2.cmpn(0) === 0) {
        if (r2.cmpn(0) !== 0)
          return this.curve.jpoint(null, null, null);
        else
          return this.dbl();
      }
      var h22 = h2.redSqr();
      var h3 = h22.redMul(h2);
      var v7 = u12.redMul(h22);
      var nx = r2.redSqr().redIAdd(h3).redISub(v7).redISub(v7);
      var ny = r2.redMul(v7.redISub(nx)).redISub(s12.redMul(h3));
      var nz = this.z.redMul(p3.z).redMul(h2);
      return this.curve.jpoint(nx, ny, nz);
    };
    JPoint.prototype.mixedAdd = function mixedAdd(p3) {
      if (this.isInfinity())
        return p3.toJ();
      if (p3.isInfinity())
        return this;
      var z22 = this.z.redSqr();
      var u12 = this.x;
      var u2 = p3.x.redMul(z22);
      var s12 = this.y;
      var s2 = p3.y.redMul(z22).redMul(this.z);
      var h2 = u12.redSub(u2);
      var r2 = s12.redSub(s2);
      if (h2.cmpn(0) === 0) {
        if (r2.cmpn(0) !== 0)
          return this.curve.jpoint(null, null, null);
        else
          return this.dbl();
      }
      var h22 = h2.redSqr();
      var h3 = h22.redMul(h2);
      var v7 = u12.redMul(h22);
      var nx = r2.redSqr().redIAdd(h3).redISub(v7).redISub(v7);
      var ny = r2.redMul(v7.redISub(nx)).redISub(s12.redMul(h3));
      var nz = this.z.redMul(h2);
      return this.curve.jpoint(nx, ny, nz);
    };
    JPoint.prototype.dblp = function dblp2(pow) {
      if (pow === 0)
        return this;
      if (this.isInfinity())
        return this;
      if (!pow)
        return this.dbl();
      var i2;
      if (this.curve.zeroA || this.curve.threeA) {
        var r2 = this;
        for (i2 = 0; i2 < pow; i2++)
          r2 = r2.dbl();
        return r2;
      }
      var a = this.curve.a;
      var tinv = this.curve.tinv;
      var jx = this.x;
      var jy = this.y;
      var jz = this.z;
      var jz4 = jz.redSqr().redSqr();
      var jyd = jy.redAdd(jy);
      for (i2 = 0; i2 < pow; i2++) {
        var jx2 = jx.redSqr();
        var jyd2 = jyd.redSqr();
        var jyd4 = jyd2.redSqr();
        var c2 = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));
        var t12 = jx.redMul(jyd2);
        var nx = c2.redSqr().redISub(t12.redAdd(t12));
        var t2 = t12.redISub(nx);
        var dny = c2.redMul(t2);
        dny = dny.redIAdd(dny).redISub(jyd4);
        var nz = jyd.redMul(jz);
        if (i2 + 1 < pow)
          jz4 = jz4.redMul(jyd4);
        jx = nx;
        jz = nz;
        jyd = dny;
      }
      return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
    };
    JPoint.prototype.dbl = function dbl2() {
      if (this.isInfinity())
        return this;
      if (this.curve.zeroA)
        return this._zeroDbl();
      else if (this.curve.threeA)
        return this._threeDbl();
      else
        return this._dbl();
    };
    JPoint.prototype._zeroDbl = function _zeroDbl() {
      var nx;
      var ny;
      var nz;
      if (this.zOne) {
        var xx = this.x.redSqr();
        var yy = this.y.redSqr();
        var yyyy = yy.redSqr();
        var s2 = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
        s2 = s2.redIAdd(s2);
        var m3 = xx.redAdd(xx).redIAdd(xx);
        var t = m3.redSqr().redISub(s2).redISub(s2);
        var yyyy8 = yyyy.redIAdd(yyyy);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        nx = t;
        ny = m3.redMul(s2.redISub(t)).redISub(yyyy8);
        nz = this.y.redAdd(this.y);
      } else {
        var a = this.x.redSqr();
        var b2 = this.y.redSqr();
        var c2 = b2.redSqr();
        var d2 = this.x.redAdd(b2).redSqr().redISub(a).redISub(c2);
        d2 = d2.redIAdd(d2);
        var e = a.redAdd(a).redIAdd(a);
        var f3 = e.redSqr();
        var c8 = c2.redIAdd(c2);
        c8 = c8.redIAdd(c8);
        c8 = c8.redIAdd(c8);
        nx = f3.redISub(d2).redISub(d2);
        ny = e.redMul(d2.redISub(nx)).redISub(c8);
        nz = this.y.redMul(this.z);
        nz = nz.redIAdd(nz);
      }
      return this.curve.jpoint(nx, ny, nz);
    };
    JPoint.prototype._threeDbl = function _threeDbl() {
      var nx;
      var ny;
      var nz;
      if (this.zOne) {
        var xx = this.x.redSqr();
        var yy = this.y.redSqr();
        var yyyy = yy.redSqr();
        var s2 = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
        s2 = s2.redIAdd(s2);
        var m3 = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);
        var t = m3.redSqr().redISub(s2).redISub(s2);
        nx = t;
        var yyyy8 = yyyy.redIAdd(yyyy);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        ny = m3.redMul(s2.redISub(t)).redISub(yyyy8);
        nz = this.y.redAdd(this.y);
      } else {
        var delta = this.z.redSqr();
        var gamma = this.y.redSqr();
        var beta = this.x.redMul(gamma);
        var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
        alpha = alpha.redAdd(alpha).redIAdd(alpha);
        var beta4 = beta.redIAdd(beta);
        beta4 = beta4.redIAdd(beta4);
        var beta8 = beta4.redAdd(beta4);
        nx = alpha.redSqr().redISub(beta8);
        nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);
        var ggamma8 = gamma.redSqr();
        ggamma8 = ggamma8.redIAdd(ggamma8);
        ggamma8 = ggamma8.redIAdd(ggamma8);
        ggamma8 = ggamma8.redIAdd(ggamma8);
        ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
      }
      return this.curve.jpoint(nx, ny, nz);
    };
    JPoint.prototype._dbl = function _dbl() {
      var a = this.curve.a;
      var jx = this.x;
      var jy = this.y;
      var jz = this.z;
      var jz4 = jz.redSqr().redSqr();
      var jx2 = jx.redSqr();
      var jy2 = jy.redSqr();
      var c2 = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));
      var jxd4 = jx.redAdd(jx);
      jxd4 = jxd4.redIAdd(jxd4);
      var t12 = jxd4.redMul(jy2);
      var nx = c2.redSqr().redISub(t12.redAdd(t12));
      var t2 = t12.redISub(nx);
      var jyd8 = jy2.redSqr();
      jyd8 = jyd8.redIAdd(jyd8);
      jyd8 = jyd8.redIAdd(jyd8);
      jyd8 = jyd8.redIAdd(jyd8);
      var ny = c2.redMul(t2).redISub(jyd8);
      var nz = jy.redAdd(jy).redMul(jz);
      return this.curve.jpoint(nx, ny, nz);
    };
    JPoint.prototype.trpl = function trpl() {
      if (!this.curve.zeroA)
        return this.dbl().add(this);
      var xx = this.x.redSqr();
      var yy = this.y.redSqr();
      var zz = this.z.redSqr();
      var yyyy = yy.redSqr();
      var m3 = xx.redAdd(xx).redIAdd(xx);
      var mm = m3.redSqr();
      var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
      e = e.redIAdd(e);
      e = e.redAdd(e).redIAdd(e);
      e = e.redISub(mm);
      var ee3 = e.redSqr();
      var t = yyyy.redIAdd(yyyy);
      t = t.redIAdd(t);
      t = t.redIAdd(t);
      t = t.redIAdd(t);
      var u2 = m3.redIAdd(e).redSqr().redISub(mm).redISub(ee3).redISub(t);
      var yyu4 = yy.redMul(u2);
      yyu4 = yyu4.redIAdd(yyu4);
      yyu4 = yyu4.redIAdd(yyu4);
      var nx = this.x.redMul(ee3).redISub(yyu4);
      nx = nx.redIAdd(nx);
      nx = nx.redIAdd(nx);
      var ny = this.y.redMul(u2.redMul(t.redISub(u2)).redISub(e.redMul(ee3)));
      ny = ny.redIAdd(ny);
      ny = ny.redIAdd(ny);
      ny = ny.redIAdd(ny);
      var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee3);
      return this.curve.jpoint(nx, ny, nz);
    };
    JPoint.prototype.mul = function mul2(k4, kbase) {
      k4 = new import_bn2.default(k4, kbase);
      return this.curve._wnafMul(this, k4);
    };
    JPoint.prototype.eq = function eq3(p3) {
      if (p3.type === "affine")
        return this.eq(p3.toJ());
      if (this === p3)
        return true;
      var z22 = this.z.redSqr();
      var pz2 = p3.z.redSqr();
      if (this.x.redMul(pz2).redISub(p3.x.redMul(z22)).cmpn(0) !== 0)
        return false;
      var z3 = z22.redMul(this.z);
      var pz3 = pz2.redMul(p3.z);
      return this.y.redMul(pz3).redISub(p3.y.redMul(z3)).cmpn(0) === 0;
    };
    JPoint.prototype.eqXToP = function eqXToP(x4) {
      var zs = this.z.redSqr();
      var rx = x4.toRed(this.curve.red).redMul(zs);
      if (this.x.cmp(rx) === 0)
        return true;
      var xc = x4.clone();
      var t = this.curve.redN.redMul(zs);
      for (; ; ) {
        xc.iadd(this.curve.n);
        if (xc.cmp(this.curve.p) >= 0)
          return false;
        rx.redIAdd(t);
        if (this.x.cmp(rx) === 0)
          return true;
      }
    };
    JPoint.prototype.inspect = function inspect2() {
      if (this.isInfinity())
        return "<EC JPoint Infinity>";
      return "<EC JPoint x: " + this.x.toString(16, 2) + " y: " + this.y.toString(16, 2) + " z: " + this.z.toString(16, 2) + ">";
    };
    JPoint.prototype.isInfinity = function isInfinity2() {
      return this.z.cmpn(0) === 0;
    };
    curve_1 = createCommonjsModule(function(module, exports) {
      "use strict";
      var curve = exports;
      curve.base = base;
      curve.short = short_1;
      curve.mont = null;
      curve.edwards = null;
    });
    curves_1 = createCommonjsModule(function(module, exports) {
      "use strict";
      var curves = exports;
      var assert2 = utils_1$1.assert;
      function PresetCurve(options) {
        if (options.type === "short")
          this.curve = new curve_1.short(options);
        else if (options.type === "edwards")
          this.curve = new curve_1.edwards(options);
        else
          this.curve = new curve_1.mont(options);
        this.g = this.curve.g;
        this.n = this.curve.n;
        this.hash = options.hash;
        assert2(this.g.validate(), "Invalid curve");
        assert2(this.g.mul(this.n).isInfinity(), "Invalid curve, G*N != O");
      }
      curves.PresetCurve = PresetCurve;
      function defineCurve(name2, options) {
        Object.defineProperty(curves, name2, {
          configurable: true,
          enumerable: true,
          get: function() {
            var curve = new PresetCurve(options);
            Object.defineProperty(curves, name2, {
              configurable: true,
              enumerable: true,
              value: curve
            });
            return curve;
          }
        });
      }
      defineCurve("p192", {
        type: "short",
        prime: "p192",
        p: "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff",
        a: "ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc",
        b: "64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1",
        n: "ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831",
        hash: import_hash2.default.sha256,
        gRed: false,
        g: [
          "188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012",
          "07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811"
        ]
      });
      defineCurve("p224", {
        type: "short",
        prime: "p224",
        p: "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001",
        a: "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe",
        b: "b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4",
        n: "ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d",
        hash: import_hash2.default.sha256,
        gRed: false,
        g: [
          "b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21",
          "bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34"
        ]
      });
      defineCurve("p256", {
        type: "short",
        prime: null,
        p: "ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff",
        a: "ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc",
        b: "5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b",
        n: "ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551",
        hash: import_hash2.default.sha256,
        gRed: false,
        g: [
          "6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296",
          "4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5"
        ]
      });
      defineCurve("p384", {
        type: "short",
        prime: null,
        p: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 ffffffff",
        a: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 fffffffc",
        b: "b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f 5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef",
        n: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 f4372ddf 581a0db2 48b0a77a ecec196a ccc52973",
        hash: import_hash2.default.sha384,
        gRed: false,
        g: [
          "aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 5502f25d bf55296c 3a545e38 72760ab7",
          "3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 0a60b1ce 1d7e819d 7a431d7c 90ea0e5f"
        ]
      });
      defineCurve("p521", {
        type: "short",
        prime: null,
        p: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff",
        a: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffc",
        b: "00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b 99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd 3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00",
        n: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409",
        hash: import_hash2.default.sha512,
        gRed: false,
        g: [
          "000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66",
          "00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 3fad0761 353c7086 a272c240 88be9476 9fd16650"
        ]
      });
      defineCurve("curve25519", {
        type: "mont",
        prime: "p25519",
        p: "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",
        a: "76d06",
        b: "1",
        n: "1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",
        hash: import_hash2.default.sha256,
        gRed: false,
        g: [
          "9"
        ]
      });
      defineCurve("ed25519", {
        type: "edwards",
        prime: "p25519",
        p: "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",
        a: "-1",
        c: "1",
        d: "52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3",
        n: "1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",
        hash: import_hash2.default.sha256,
        gRed: false,
        g: [
          "216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a",
          "6666666666666666666666666666666666666666666666666666666666666658"
        ]
      });
      var pre;
      try {
        pre = null.crash();
      } catch (e) {
        pre = void 0;
      }
      defineCurve("secp256k1", {
        type: "short",
        prime: "k256",
        p: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f",
        a: "0",
        b: "7",
        n: "ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141",
        h: "1",
        hash: import_hash2.default.sha256,
        beta: "7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee",
        lambda: "5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72",
        basis: [
          {
            a: "3086d221a7d46bcde86c90e49284eb15",
            b: "-e4437ed6010e88286f547fa90abfe4c3"
          },
          {
            a: "114ca50f7a8e2f3f657c1108d9d44cfd8",
            b: "3086d221a7d46bcde86c90e49284eb15"
          }
        ],
        gRed: false,
        g: [
          "79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798",
          "483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8",
          pre
        ]
      });
    });
    hmacDrbg = HmacDRBG;
    HmacDRBG.prototype._init = function init(entropy, nonce, pers) {
      var seed = entropy.concat(nonce).concat(pers);
      this.K = new Array(this.outLen / 8);
      this.V = new Array(this.outLen / 8);
      for (var i2 = 0; i2 < this.V.length; i2++) {
        this.K[i2] = 0;
        this.V[i2] = 1;
      }
      this._update(seed);
      this._reseed = 1;
      this.reseedInterval = 281474976710656;
    };
    HmacDRBG.prototype._hmac = function hmac() {
      return new import_hash2.default.hmac(this.hash, this.K);
    };
    HmacDRBG.prototype._update = function update(seed) {
      var kmac = this._hmac().update(this.V).update([0]);
      if (seed)
        kmac = kmac.update(seed);
      this.K = kmac.digest();
      this.V = this._hmac().update(this.V).digest();
      if (!seed)
        return;
      this.K = this._hmac().update(this.V).update([1]).update(seed).digest();
      this.V = this._hmac().update(this.V).digest();
    };
    HmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add3, addEnc) {
      if (typeof entropyEnc !== "string") {
        addEnc = add3;
        add3 = entropyEnc;
        entropyEnc = null;
      }
      entropy = utils_1.toArray(entropy, entropyEnc);
      add3 = utils_1.toArray(add3, addEnc);
      minimalisticAssert(entropy.length >= this.minEntropy / 8, "Not enough entropy. Minimum is: " + this.minEntropy + " bits");
      this._update(entropy.concat(add3 || []));
      this._reseed = 1;
    };
    HmacDRBG.prototype.generate = function generate(len, enc, add3, addEnc) {
      if (this._reseed > this.reseedInterval)
        throw new Error("Reseed is required");
      if (typeof enc !== "string") {
        addEnc = add3;
        add3 = enc;
        enc = null;
      }
      if (add3) {
        add3 = utils_1.toArray(add3, addEnc || "hex");
        this._update(add3);
      }
      var temp = [];
      while (temp.length < len) {
        this.V = this._hmac().update(this.V).digest();
        temp = temp.concat(this.V);
      }
      var res = temp.slice(0, len);
      this._update(add3);
      this._reseed++;
      return utils_1.encode(res, enc);
    };
    assert$3 = utils_1$1.assert;
    key = KeyPair;
    KeyPair.fromPublic = function fromPublic(ec2, pub, enc) {
      if (pub instanceof KeyPair)
        return pub;
      return new KeyPair(ec2, {
        pub,
        pubEnc: enc
      });
    };
    KeyPair.fromPrivate = function fromPrivate(ec2, priv, enc) {
      if (priv instanceof KeyPair)
        return priv;
      return new KeyPair(ec2, {
        priv,
        privEnc: enc
      });
    };
    KeyPair.prototype.validate = function validate4() {
      var pub = this.getPublic();
      if (pub.isInfinity())
        return { result: false, reason: "Invalid public key" };
      if (!pub.validate())
        return { result: false, reason: "Public key is not a point" };
      if (!pub.mul(this.ec.curve.n).isInfinity())
        return { result: false, reason: "Public key * N != O" };
      return { result: true, reason: null };
    };
    KeyPair.prototype.getPublic = function getPublic(compact, enc) {
      if (typeof compact === "string") {
        enc = compact;
        compact = null;
      }
      if (!this.pub)
        this.pub = this.ec.g.mul(this.priv);
      if (!enc)
        return this.pub;
      return this.pub.encode(enc, compact);
    };
    KeyPair.prototype.getPrivate = function getPrivate(enc) {
      if (enc === "hex")
        return this.priv.toString(16, 2);
      else
        return this.priv;
    };
    KeyPair.prototype._importPrivate = function _importPrivate(key2, enc) {
      this.priv = new import_bn2.default(key2, enc || 16);
      this.priv = this.priv.umod(this.ec.curve.n);
    };
    KeyPair.prototype._importPublic = function _importPublic(key2, enc) {
      if (key2.x || key2.y) {
        if (this.ec.curve.type === "mont") {
          assert$3(key2.x, "Need x coordinate");
        } else if (this.ec.curve.type === "short" || this.ec.curve.type === "edwards") {
          assert$3(key2.x && key2.y, "Need both x and y coordinate");
        }
        this.pub = this.ec.curve.point(key2.x, key2.y);
        return;
      }
      this.pub = this.ec.curve.decodePoint(key2, enc);
    };
    KeyPair.prototype.derive = function derive(pub) {
      if (!pub.validate()) {
        assert$3(pub.validate(), "public point not validated");
      }
      return pub.mul(this.priv).getX();
    };
    KeyPair.prototype.sign = function sign(msg, enc, options) {
      return this.ec.sign(msg, this, enc, options);
    };
    KeyPair.prototype.verify = function verify(msg, signature2) {
      return this.ec.verify(msg, signature2, this);
    };
    KeyPair.prototype.inspect = function inspect3() {
      return "<Key priv: " + (this.priv && this.priv.toString(16, 2)) + " pub: " + (this.pub && this.pub.inspect()) + " >";
    };
    assert$4 = utils_1$1.assert;
    signature = Signature;
    Signature.prototype._importDER = function _importDER(data, enc) {
      data = utils_1$1.toArray(data, enc);
      var p3 = new Position();
      if (data[p3.place++] !== 48) {
        return false;
      }
      var len = getLength(data, p3);
      if (len === false) {
        return false;
      }
      if (len + p3.place !== data.length) {
        return false;
      }
      if (data[p3.place++] !== 2) {
        return false;
      }
      var rlen = getLength(data, p3);
      if (rlen === false) {
        return false;
      }
      var r2 = data.slice(p3.place, rlen + p3.place);
      p3.place += rlen;
      if (data[p3.place++] !== 2) {
        return false;
      }
      var slen = getLength(data, p3);
      if (slen === false) {
        return false;
      }
      if (data.length !== slen + p3.place) {
        return false;
      }
      var s2 = data.slice(p3.place, slen + p3.place);
      if (r2[0] === 0) {
        if (r2[1] & 128) {
          r2 = r2.slice(1);
        } else {
          return false;
        }
      }
      if (s2[0] === 0) {
        if (s2[1] & 128) {
          s2 = s2.slice(1);
        } else {
          return false;
        }
      }
      this.r = new import_bn2.default(r2);
      this.s = new import_bn2.default(s2);
      this.recoveryParam = null;
      return true;
    };
    Signature.prototype.toDER = function toDER(enc) {
      var r2 = this.r.toArray();
      var s2 = this.s.toArray();
      if (r2[0] & 128)
        r2 = [0].concat(r2);
      if (s2[0] & 128)
        s2 = [0].concat(s2);
      r2 = rmPadding(r2);
      s2 = rmPadding(s2);
      while (!s2[0] && !(s2[1] & 128)) {
        s2 = s2.slice(1);
      }
      var arr = [2];
      constructLength(arr, r2.length);
      arr = arr.concat(r2);
      arr.push(2);
      constructLength(arr, s2.length);
      var backHalf = arr.concat(s2);
      var res = [48];
      constructLength(res, backHalf.length);
      res = res.concat(backHalf);
      return utils_1$1.encode(res, enc);
    };
    rand = function() {
      throw new Error("unsupported");
    };
    assert$5 = utils_1$1.assert;
    ec = EC;
    EC.prototype.keyPair = function keyPair(options) {
      return new key(this, options);
    };
    EC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {
      return key.fromPrivate(this, priv, enc);
    };
    EC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {
      return key.fromPublic(this, pub, enc);
    };
    EC.prototype.genKeyPair = function genKeyPair(options) {
      if (!options)
        options = {};
      var drbg = new hmacDrbg({
        hash: this.hash,
        pers: options.pers,
        persEnc: options.persEnc || "utf8",
        entropy: options.entropy || rand(this.hash.hmacStrength),
        entropyEnc: options.entropy && options.entropyEnc || "utf8",
        nonce: this.n.toArray()
      });
      var bytes = this.n.byteLength();
      var ns2 = this.n.sub(new import_bn2.default(2));
      for (; ; ) {
        var priv = new import_bn2.default(drbg.generate(bytes));
        if (priv.cmp(ns2) > 0)
          continue;
        priv.iaddn(1);
        return this.keyFromPrivate(priv);
      }
    };
    EC.prototype._truncateToN = function _truncateToN(msg, truncOnly) {
      var delta = msg.byteLength() * 8 - this.n.bitLength();
      if (delta > 0)
        msg = msg.ushrn(delta);
      if (!truncOnly && msg.cmp(this.n) >= 0)
        return msg.sub(this.n);
      else
        return msg;
    };
    EC.prototype.sign = function sign2(msg, key2, enc, options) {
      if (typeof enc === "object") {
        options = enc;
        enc = null;
      }
      if (!options)
        options = {};
      key2 = this.keyFromPrivate(key2, enc);
      msg = this._truncateToN(new import_bn2.default(msg, 16));
      var bytes = this.n.byteLength();
      var bkey = key2.getPrivate().toArray("be", bytes);
      var nonce = msg.toArray("be", bytes);
      var drbg = new hmacDrbg({
        hash: this.hash,
        entropy: bkey,
        nonce,
        pers: options.pers,
        persEnc: options.persEnc || "utf8"
      });
      var ns1 = this.n.sub(new import_bn2.default(1));
      for (var iter = 0; ; iter++) {
        var k4 = options.k ? options.k(iter) : new import_bn2.default(drbg.generate(this.n.byteLength()));
        k4 = this._truncateToN(k4, true);
        if (k4.cmpn(1) <= 0 || k4.cmp(ns1) >= 0)
          continue;
        var kp = this.g.mul(k4);
        if (kp.isInfinity())
          continue;
        var kpX = kp.getX();
        var r2 = kpX.umod(this.n);
        if (r2.cmpn(0) === 0)
          continue;
        var s2 = k4.invm(this.n).mul(r2.mul(key2.getPrivate()).iadd(msg));
        s2 = s2.umod(this.n);
        if (s2.cmpn(0) === 0)
          continue;
        var recoveryParam = (kp.getY().isOdd() ? 1 : 0) | (kpX.cmp(r2) !== 0 ? 2 : 0);
        if (options.canonical && s2.cmp(this.nh) > 0) {
          s2 = this.n.sub(s2);
          recoveryParam ^= 1;
        }
        return new signature({ r: r2, s: s2, recoveryParam });
      }
    };
    EC.prototype.verify = function verify2(msg, signature$1, key2, enc) {
      msg = this._truncateToN(new import_bn2.default(msg, 16));
      key2 = this.keyFromPublic(key2, enc);
      signature$1 = new signature(signature$1, "hex");
      var r2 = signature$1.r;
      var s2 = signature$1.s;
      if (r2.cmpn(1) < 0 || r2.cmp(this.n) >= 0)
        return false;
      if (s2.cmpn(1) < 0 || s2.cmp(this.n) >= 0)
        return false;
      var sinv = s2.invm(this.n);
      var u12 = sinv.mul(msg).umod(this.n);
      var u2 = sinv.mul(r2).umod(this.n);
      var p3;
      if (!this.curve._maxwellTrick) {
        p3 = this.g.mulAdd(u12, key2.getPublic(), u2);
        if (p3.isInfinity())
          return false;
        return p3.getX().umod(this.n).cmp(r2) === 0;
      }
      p3 = this.g.jmulAdd(u12, key2.getPublic(), u2);
      if (p3.isInfinity())
        return false;
      return p3.eqXToP(r2);
    };
    EC.prototype.recoverPubKey = function(msg, signature$1, j3, enc) {
      assert$5((3 & j3) === j3, "The recovery param is more than two bits");
      signature$1 = new signature(signature$1, enc);
      var n = this.n;
      var e = new import_bn2.default(msg);
      var r2 = signature$1.r;
      var s2 = signature$1.s;
      var isYOdd = j3 & 1;
      var isSecondKey = j3 >> 1;
      if (r2.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey)
        throw new Error("Unable to find sencond key candinate");
      if (isSecondKey)
        r2 = this.curve.pointFromX(r2.add(this.curve.n), isYOdd);
      else
        r2 = this.curve.pointFromX(r2, isYOdd);
      var rInv = signature$1.r.invm(n);
      var s12 = n.sub(e).mul(rInv).umod(n);
      var s22 = s2.mul(rInv).umod(n);
      return this.g.mulAdd(s12, r2, s22);
    };
    EC.prototype.getKeyRecoveryParam = function(e, signature$1, Q2, enc) {
      signature$1 = new signature(signature$1, enc);
      if (signature$1.recoveryParam !== null)
        return signature$1.recoveryParam;
      for (var i2 = 0; i2 < 4; i2++) {
        var Qprime;
        try {
          Qprime = this.recoverPubKey(e, signature$1, i2);
        } catch (e2) {
          continue;
        }
        if (Qprime.eq(Q2))
          return i2;
      }
      throw new Error("Unable to find valid recovery factor");
    };
    elliptic_1 = createCommonjsModule(function(module, exports) {
      "use strict";
      var elliptic = exports;
      elliptic.version = { version: "6.5.4" }.version;
      elliptic.utils = utils_1$1;
      elliptic.rand = function() {
        throw new Error("unsupported");
      };
      elliptic.curve = curve_1;
      elliptic.curves = curves_1;
      elliptic.ec = ec;
      elliptic.eddsa = null;
    });
    EC$1 = elliptic_1.ec;
  }
});

// node_modules/@ethersproject/signing-key/lib.esm/_version.js
var version12;
var init_version12 = __esm({
  "node_modules/@ethersproject/signing-key/lib.esm/_version.js"() {
    init_define_process();
    version12 = "signing-key/5.6.0";
  }
});

// node_modules/@ethersproject/signing-key/lib.esm/index.js
var lib_exports11 = {};
__export(lib_exports11, {
  SigningKey: () => SigningKey,
  computePublicKey: () => computePublicKey,
  recoverPublicKey: () => recoverPublicKey
});
function getCurve() {
  if (!_curve) {
    _curve = new EC$1("secp256k1");
  }
  return _curve;
}
function recoverPublicKey(digest, signature2) {
  const sig = splitSignature(signature2);
  const rs2 = { r: arrayify(sig.r), s: arrayify(sig.s) };
  return "0x" + getCurve().recoverPubKey(arrayify(digest), rs2, sig.recoveryParam).encode("hex", false);
}
function computePublicKey(key2, compressed) {
  const bytes = arrayify(key2);
  if (bytes.length === 32) {
    const signingKey = new SigningKey(bytes);
    if (compressed) {
      return "0x" + getCurve().keyFromPrivate(bytes).getPublic(true, "hex");
    }
    return signingKey.publicKey;
  } else if (bytes.length === 33) {
    if (compressed) {
      return hexlify(bytes);
    }
    return "0x" + getCurve().keyFromPublic(bytes).getPublic(false, "hex");
  } else if (bytes.length === 65) {
    if (!compressed) {
      return hexlify(bytes);
    }
    return "0x" + getCurve().keyFromPublic(bytes).getPublic(true, "hex");
  }
  return logger17.throwArgumentError("invalid public or private key", "key", "[REDACTED]");
}
var logger17, _curve, SigningKey;
var init_lib14 = __esm({
  "node_modules/@ethersproject/signing-key/lib.esm/index.js"() {
    init_define_process();
    init_elliptic();
    init_lib2();
    init_lib4();
    init_lib();
    init_version12();
    "use strict";
    logger17 = new Logger(version12);
    _curve = null;
    SigningKey = class {
      constructor(privateKey) {
        defineReadOnly(this, "curve", "secp256k1");
        defineReadOnly(this, "privateKey", hexlify(privateKey));
        const keyPair2 = getCurve().keyFromPrivate(arrayify(this.privateKey));
        defineReadOnly(this, "publicKey", "0x" + keyPair2.getPublic(false, "hex"));
        defineReadOnly(this, "compressedPublicKey", "0x" + keyPair2.getPublic(true, "hex"));
        defineReadOnly(this, "_isSigningKey", true);
      }
      _addPoint(other) {
        const p02 = getCurve().keyFromPublic(arrayify(this.publicKey));
        const p12 = getCurve().keyFromPublic(arrayify(other));
        return "0x" + p02.pub.add(p12.pub).encodeCompressed("hex");
      }
      signDigest(digest) {
        const keyPair2 = getCurve().keyFromPrivate(arrayify(this.privateKey));
        const digestBytes = arrayify(digest);
        if (digestBytes.length !== 32) {
          logger17.throwArgumentError("bad digest length", "digest", digest);
        }
        const signature2 = keyPair2.sign(digestBytes, { canonical: true });
        return splitSignature({
          recoveryParam: signature2.recoveryParam,
          r: hexZeroPad("0x" + signature2.r.toString(16), 32),
          s: hexZeroPad("0x" + signature2.s.toString(16), 32)
        });
      }
      computeSharedSecret(otherKey) {
        const keyPair2 = getCurve().keyFromPrivate(arrayify(this.privateKey));
        const otherKeyPair = getCurve().keyFromPublic(arrayify(computePublicKey(otherKey)));
        return hexZeroPad("0x" + keyPair2.derive(otherKeyPair.getPublic()).toString(16), 32);
      }
      static isSigningKey(value2) {
        return !!(value2 && value2._isSigningKey);
      }
    };
  }
});

// node_modules/@ethersproject/transactions/lib.esm/_version.js
var version13;
var init_version13 = __esm({
  "node_modules/@ethersproject/transactions/lib.esm/_version.js"() {
    init_define_process();
    version13 = "transactions/5.6.0";
  }
});

// node_modules/@ethersproject/transactions/lib.esm/index.js
var lib_exports12 = {};
__export(lib_exports12, {
  TransactionTypes: () => TransactionTypes,
  accessListify: () => accessListify,
  computeAddress: () => computeAddress,
  parse: () => parse,
  recoverAddress: () => recoverAddress,
  serialize: () => serialize
});
function handleAddress(value2) {
  if (value2 === "0x") {
    return null;
  }
  return getAddress(value2);
}
function handleNumber(value2) {
  if (value2 === "0x") {
    return Zero2;
  }
  return BigNumber.from(value2);
}
function computeAddress(key2) {
  const publicKey = computePublicKey(key2);
  return getAddress(hexDataSlice(keccak256(hexDataSlice(publicKey, 1)), 12));
}
function recoverAddress(digest, signature2) {
  return computeAddress(recoverPublicKey(arrayify(digest), signature2));
}
function formatNumber(value2, name2) {
  const result = stripZeros(BigNumber.from(value2).toHexString());
  if (result.length > 32) {
    logger18.throwArgumentError("invalid length for " + name2, "transaction:" + name2, value2);
  }
  return result;
}
function accessSetify(addr, storageKeys) {
  return {
    address: getAddress(addr),
    storageKeys: (storageKeys || []).map((storageKey, index) => {
      if (hexDataLength(storageKey) !== 32) {
        logger18.throwArgumentError("invalid access list storageKey", `accessList[${addr}:${index}]`, storageKey);
      }
      return storageKey.toLowerCase();
    })
  };
}
function accessListify(value2) {
  if (Array.isArray(value2)) {
    return value2.map((set, index) => {
      if (Array.isArray(set)) {
        if (set.length > 2) {
          logger18.throwArgumentError("access list expected to be [ address, storageKeys[] ]", `value[${index}]`, set);
        }
        return accessSetify(set[0], set[1]);
      }
      return accessSetify(set.address, set.storageKeys);
    });
  }
  const result = Object.keys(value2).map((addr) => {
    const storageKeys = value2[addr].reduce((accum, storageKey) => {
      accum[storageKey] = true;
      return accum;
    }, {});
    return accessSetify(addr, Object.keys(storageKeys).sort());
  });
  result.sort((a, b2) => a.address.localeCompare(b2.address));
  return result;
}
function formatAccessList(value2) {
  return accessListify(value2).map((set) => [set.address, set.storageKeys]);
}
function _serializeEip1559(transaction, signature2) {
  if (transaction.gasPrice != null) {
    const gasPrice = BigNumber.from(transaction.gasPrice);
    const maxFeePerGas = BigNumber.from(transaction.maxFeePerGas || 0);
    if (!gasPrice.eq(maxFeePerGas)) {
      logger18.throwArgumentError("mismatch EIP-1559 gasPrice != maxFeePerGas", "tx", {
        gasPrice,
        maxFeePerGas
      });
    }
  }
  const fields = [
    formatNumber(transaction.chainId || 0, "chainId"),
    formatNumber(transaction.nonce || 0, "nonce"),
    formatNumber(transaction.maxPriorityFeePerGas || 0, "maxPriorityFeePerGas"),
    formatNumber(transaction.maxFeePerGas || 0, "maxFeePerGas"),
    formatNumber(transaction.gasLimit || 0, "gasLimit"),
    transaction.to != null ? getAddress(transaction.to) : "0x",
    formatNumber(transaction.value || 0, "value"),
    transaction.data || "0x",
    formatAccessList(transaction.accessList || [])
  ];
  if (signature2) {
    const sig = splitSignature(signature2);
    fields.push(formatNumber(sig.recoveryParam, "recoveryParam"));
    fields.push(stripZeros(sig.r));
    fields.push(stripZeros(sig.s));
  }
  return hexConcat(["0x02", encode(fields)]);
}
function _serializeEip2930(transaction, signature2) {
  const fields = [
    formatNumber(transaction.chainId || 0, "chainId"),
    formatNumber(transaction.nonce || 0, "nonce"),
    formatNumber(transaction.gasPrice || 0, "gasPrice"),
    formatNumber(transaction.gasLimit || 0, "gasLimit"),
    transaction.to != null ? getAddress(transaction.to) : "0x",
    formatNumber(transaction.value || 0, "value"),
    transaction.data || "0x",
    formatAccessList(transaction.accessList || [])
  ];
  if (signature2) {
    const sig = splitSignature(signature2);
    fields.push(formatNumber(sig.recoveryParam, "recoveryParam"));
    fields.push(stripZeros(sig.r));
    fields.push(stripZeros(sig.s));
  }
  return hexConcat(["0x01", encode(fields)]);
}
function _serialize(transaction, signature2) {
  checkProperties(transaction, allowedTransactionKeys2);
  const raw = [];
  transactionFields.forEach(function(fieldInfo) {
    let value2 = transaction[fieldInfo.name] || [];
    const options = {};
    if (fieldInfo.numeric) {
      options.hexPad = "left";
    }
    value2 = arrayify(hexlify(value2, options));
    if (fieldInfo.length && value2.length !== fieldInfo.length && value2.length > 0) {
      logger18.throwArgumentError("invalid length for " + fieldInfo.name, "transaction:" + fieldInfo.name, value2);
    }
    if (fieldInfo.maxLength) {
      value2 = stripZeros(value2);
      if (value2.length > fieldInfo.maxLength) {
        logger18.throwArgumentError("invalid length for " + fieldInfo.name, "transaction:" + fieldInfo.name, value2);
      }
    }
    raw.push(hexlify(value2));
  });
  let chainId = 0;
  if (transaction.chainId != null) {
    chainId = transaction.chainId;
    if (typeof chainId !== "number") {
      logger18.throwArgumentError("invalid transaction.chainId", "transaction", transaction);
    }
  } else if (signature2 && !isBytesLike(signature2) && signature2.v > 28) {
    chainId = Math.floor((signature2.v - 35) / 2);
  }
  if (chainId !== 0) {
    raw.push(hexlify(chainId));
    raw.push("0x");
    raw.push("0x");
  }
  if (!signature2) {
    return encode(raw);
  }
  const sig = splitSignature(signature2);
  let v7 = 27 + sig.recoveryParam;
  if (chainId !== 0) {
    raw.pop();
    raw.pop();
    raw.pop();
    v7 += chainId * 2 + 8;
    if (sig.v > 28 && sig.v !== v7) {
      logger18.throwArgumentError("transaction.chainId/signature.v mismatch", "signature", signature2);
    }
  } else if (sig.v !== v7) {
    logger18.throwArgumentError("transaction.chainId/signature.v mismatch", "signature", signature2);
  }
  raw.push(hexlify(v7));
  raw.push(stripZeros(arrayify(sig.r)));
  raw.push(stripZeros(arrayify(sig.s)));
  return encode(raw);
}
function serialize(transaction, signature2) {
  if (transaction.type == null || transaction.type === 0) {
    if (transaction.accessList != null) {
      logger18.throwArgumentError("untyped transactions do not support accessList; include type: 1", "transaction", transaction);
    }
    return _serialize(transaction, signature2);
  }
  switch (transaction.type) {
    case 1:
      return _serializeEip2930(transaction, signature2);
    case 2:
      return _serializeEip1559(transaction, signature2);
    default:
      break;
  }
  return logger18.throwError(`unsupported transaction type: ${transaction.type}`, Logger.errors.UNSUPPORTED_OPERATION, {
    operation: "serializeTransaction",
    transactionType: transaction.type
  });
}
function _parseEipSignature(tx, fields, serialize3) {
  try {
    const recid = handleNumber(fields[0]).toNumber();
    if (recid !== 0 && recid !== 1) {
      throw new Error("bad recid");
    }
    tx.v = recid;
  } catch (error) {
    logger18.throwArgumentError("invalid v for transaction type: 1", "v", fields[0]);
  }
  tx.r = hexZeroPad(fields[1], 32);
  tx.s = hexZeroPad(fields[2], 32);
  try {
    const digest = keccak256(serialize3(tx));
    tx.from = recoverAddress(digest, { r: tx.r, s: tx.s, recoveryParam: tx.v });
  } catch (error) {
    console.log(error);
  }
}
function _parseEip1559(payload) {
  const transaction = decode(payload.slice(1));
  if (transaction.length !== 9 && transaction.length !== 12) {
    logger18.throwArgumentError("invalid component count for transaction type: 2", "payload", hexlify(payload));
  }
  const maxPriorityFeePerGas = handleNumber(transaction[2]);
  const maxFeePerGas = handleNumber(transaction[3]);
  const tx = {
    type: 2,
    chainId: handleNumber(transaction[0]).toNumber(),
    nonce: handleNumber(transaction[1]).toNumber(),
    maxPriorityFeePerGas,
    maxFeePerGas,
    gasPrice: null,
    gasLimit: handleNumber(transaction[4]),
    to: handleAddress(transaction[5]),
    value: handleNumber(transaction[6]),
    data: transaction[7],
    accessList: accessListify(transaction[8])
  };
  if (transaction.length === 9) {
    return tx;
  }
  tx.hash = keccak256(payload);
  _parseEipSignature(tx, transaction.slice(9), _serializeEip1559);
  return tx;
}
function _parseEip2930(payload) {
  const transaction = decode(payload.slice(1));
  if (transaction.length !== 8 && transaction.length !== 11) {
    logger18.throwArgumentError("invalid component count for transaction type: 1", "payload", hexlify(payload));
  }
  const tx = {
    type: 1,
    chainId: handleNumber(transaction[0]).toNumber(),
    nonce: handleNumber(transaction[1]).toNumber(),
    gasPrice: handleNumber(transaction[2]),
    gasLimit: handleNumber(transaction[3]),
    to: handleAddress(transaction[4]),
    value: handleNumber(transaction[5]),
    data: transaction[6],
    accessList: accessListify(transaction[7])
  };
  if (transaction.length === 8) {
    return tx;
  }
  tx.hash = keccak256(payload);
  _parseEipSignature(tx, transaction.slice(8), _serializeEip2930);
  return tx;
}
function _parse(rawTransaction) {
  const transaction = decode(rawTransaction);
  if (transaction.length !== 9 && transaction.length !== 6) {
    logger18.throwArgumentError("invalid raw transaction", "rawTransaction", rawTransaction);
  }
  const tx = {
    nonce: handleNumber(transaction[0]).toNumber(),
    gasPrice: handleNumber(transaction[1]),
    gasLimit: handleNumber(transaction[2]),
    to: handleAddress(transaction[3]),
    value: handleNumber(transaction[4]),
    data: transaction[5],
    chainId: 0
  };
  if (transaction.length === 6) {
    return tx;
  }
  try {
    tx.v = BigNumber.from(transaction[6]).toNumber();
  } catch (error) {
    console.log(error);
    return tx;
  }
  tx.r = hexZeroPad(transaction[7], 32);
  tx.s = hexZeroPad(transaction[8], 32);
  if (BigNumber.from(tx.r).isZero() && BigNumber.from(tx.s).isZero()) {
    tx.chainId = tx.v;
    tx.v = 0;
  } else {
    tx.chainId = Math.floor((tx.v - 35) / 2);
    if (tx.chainId < 0) {
      tx.chainId = 0;
    }
    let recoveryParam = tx.v - 27;
    const raw = transaction.slice(0, 6);
    if (tx.chainId !== 0) {
      raw.push(hexlify(tx.chainId));
      raw.push("0x");
      raw.push("0x");
      recoveryParam -= tx.chainId * 2 + 8;
    }
    const digest = keccak256(encode(raw));
    try {
      tx.from = recoverAddress(digest, { r: hexlify(tx.r), s: hexlify(tx.s), recoveryParam });
    } catch (error) {
      console.log(error);
    }
    tx.hash = keccak256(rawTransaction);
  }
  tx.type = null;
  return tx;
}
function parse(rawTransaction) {
  const payload = arrayify(rawTransaction);
  if (payload[0] > 127) {
    return _parse(payload);
  }
  switch (payload[0]) {
    case 1:
      return _parseEip2930(payload);
    case 2:
      return _parseEip1559(payload);
    default:
      break;
  }
  return logger18.throwError(`unsupported transaction type: ${payload[0]}`, Logger.errors.UNSUPPORTED_OPERATION, {
    operation: "parseTransaction",
    transactionType: payload[0]
  });
}
var logger18, TransactionTypes, transactionFields, allowedTransactionKeys2;
var init_lib15 = __esm({
  "node_modules/@ethersproject/transactions/lib.esm/index.js"() {
    init_define_process();
    init_lib7();
    init_lib3();
    init_lib2();
    init_lib8();
    init_lib5();
    init_lib4();
    init_lib6();
    init_lib14();
    init_lib();
    init_version13();
    "use strict";
    logger18 = new Logger(version13);
    (function(TransactionTypes2) {
      TransactionTypes2[TransactionTypes2["legacy"] = 0] = "legacy";
      TransactionTypes2[TransactionTypes2["eip2930"] = 1] = "eip2930";
      TransactionTypes2[TransactionTypes2["eip1559"] = 2] = "eip1559";
    })(TransactionTypes || (TransactionTypes = {}));
    transactionFields = [
      { name: "nonce", maxLength: 32, numeric: true },
      { name: "gasPrice", maxLength: 32, numeric: true },
      { name: "gasLimit", maxLength: 32, numeric: true },
      { name: "to", length: 20 },
      { name: "value", maxLength: 32, numeric: true },
      { name: "data" }
    ];
    allowedTransactionKeys2 = {
      chainId: true,
      data: true,
      gasLimit: true,
      gasPrice: true,
      nonce: true,
      to: true,
      type: true,
      value: true
    };
  }
});

// node_modules/@ethersproject/basex/lib.esm/index.js
var lib_exports13 = {};
__export(lib_exports13, {
  Base32: () => Base32,
  Base58: () => Base58,
  BaseX: () => BaseX
});
var BaseX, Base32, Base58;
var init_lib16 = __esm({
  "node_modules/@ethersproject/basex/lib.esm/index.js"() {
    init_define_process();
    init_lib2();
    init_lib4();
    BaseX = class {
      constructor(alphabet) {
        defineReadOnly(this, "alphabet", alphabet);
        defineReadOnly(this, "base", alphabet.length);
        defineReadOnly(this, "_alphabetMap", {});
        defineReadOnly(this, "_leader", alphabet.charAt(0));
        for (let i2 = 0; i2 < alphabet.length; i2++) {
          this._alphabetMap[alphabet.charAt(i2)] = i2;
        }
      }
      encode(value2) {
        let source = arrayify(value2);
        if (source.length === 0) {
          return "";
        }
        let digits = [0];
        for (let i2 = 0; i2 < source.length; ++i2) {
          let carry = source[i2];
          for (let j3 = 0; j3 < digits.length; ++j3) {
            carry += digits[j3] << 8;
            digits[j3] = carry % this.base;
            carry = carry / this.base | 0;
          }
          while (carry > 0) {
            digits.push(carry % this.base);
            carry = carry / this.base | 0;
          }
        }
        let string = "";
        for (let k4 = 0; source[k4] === 0 && k4 < source.length - 1; ++k4) {
          string += this._leader;
        }
        for (let q3 = digits.length - 1; q3 >= 0; --q3) {
          string += this.alphabet[digits[q3]];
        }
        return string;
      }
      decode(value2) {
        if (typeof value2 !== "string") {
          throw new TypeError("Expected String");
        }
        let bytes = [];
        if (value2.length === 0) {
          return new Uint8Array(bytes);
        }
        bytes.push(0);
        for (let i2 = 0; i2 < value2.length; i2++) {
          let byte = this._alphabetMap[value2[i2]];
          if (byte === void 0) {
            throw new Error("Non-base" + this.base + " character");
          }
          let carry = byte;
          for (let j3 = 0; j3 < bytes.length; ++j3) {
            carry += bytes[j3] * this.base;
            bytes[j3] = carry & 255;
            carry >>= 8;
          }
          while (carry > 0) {
            bytes.push(carry & 255);
            carry >>= 8;
          }
        }
        for (let k4 = 0; value2[k4] === this._leader && k4 < value2.length - 1; ++k4) {
          bytes.push(0);
        }
        return arrayify(new Uint8Array(bytes.reverse()));
      }
    };
    Base32 = new BaseX("abcdefghijklmnopqrstuvwxyz234567");
    Base58 = new BaseX("123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz");
  }
});

// node_modules/@ethersproject/sha2/lib.esm/types.js
var SupportedAlgorithm;
var init_types = __esm({
  "node_modules/@ethersproject/sha2/lib.esm/types.js"() {
    init_define_process();
    (function(SupportedAlgorithm2) {
      SupportedAlgorithm2["sha256"] = "sha256";
      SupportedAlgorithm2["sha512"] = "sha512";
    })(SupportedAlgorithm || (SupportedAlgorithm = {}));
  }
});

// node_modules/@ethersproject/sha2/lib.esm/_version.js
var version15;
var init_version14 = __esm({
  "node_modules/@ethersproject/sha2/lib.esm/_version.js"() {
    init_define_process();
    version15 = "sha2/5.6.0";
  }
});

// node_modules/@ethersproject/sha2/lib.esm/sha2.js
function ripemd160(data) {
  return "0x" + import_hash3.default.ripemd160().update(arrayify(data)).digest("hex");
}
function sha256(data) {
  return "0x" + import_hash3.default.sha256().update(arrayify(data)).digest("hex");
}
function sha512(data) {
  return "0x" + import_hash3.default.sha512().update(arrayify(data)).digest("hex");
}
function computeHmac(algorithm, key2, data) {
  if (!SupportedAlgorithm[algorithm]) {
    logger20.throwError("unsupported algorithm " + algorithm, Logger.errors.UNSUPPORTED_OPERATION, {
      operation: "hmac",
      algorithm
    });
  }
  return "0x" + import_hash3.default.hmac(import_hash3.default[algorithm], arrayify(key2)).update(arrayify(data)).digest("hex");
}
var import_hash3, logger20;
var init_sha2 = __esm({
  "node_modules/@ethersproject/sha2/lib.esm/sha2.js"() {
    init_define_process();
    import_hash3 = __toModule(require_hash());
    init_lib2();
    init_types();
    init_lib();
    init_version14();
    "use strict";
    logger20 = new Logger(version15);
  }
});

// node_modules/@ethersproject/sha2/lib.esm/index.js
var lib_exports14 = {};
__export(lib_exports14, {
  SupportedAlgorithm: () => SupportedAlgorithm,
  computeHmac: () => computeHmac,
  ripemd160: () => ripemd160,
  sha256: () => sha256,
  sha512: () => sha512
});
var init_lib17 = __esm({
  "node_modules/@ethersproject/sha2/lib.esm/index.js"() {
    init_define_process();
    init_sha2();
    init_types();
  }
});

// node_modules/@ethersproject/pbkdf2/lib.esm/pbkdf2.js
function pbkdf2(password, salt, iterations, keylen, hashAlgorithm) {
  password = arrayify(password);
  salt = arrayify(salt);
  let hLen;
  let l2 = 1;
  const DK = new Uint8Array(keylen);
  const block1 = new Uint8Array(salt.length + 4);
  block1.set(salt);
  let r2;
  let T3;
  for (let i2 = 1; i2 <= l2; i2++) {
    block1[salt.length] = i2 >> 24 & 255;
    block1[salt.length + 1] = i2 >> 16 & 255;
    block1[salt.length + 2] = i2 >> 8 & 255;
    block1[salt.length + 3] = i2 & 255;
    let U3 = arrayify(computeHmac(hashAlgorithm, password, block1));
    if (!hLen) {
      hLen = U3.length;
      T3 = new Uint8Array(hLen);
      l2 = Math.ceil(keylen / hLen);
      r2 = keylen - (l2 - 1) * hLen;
    }
    T3.set(U3);
    for (let j3 = 1; j3 < iterations; j3++) {
      U3 = arrayify(computeHmac(hashAlgorithm, password, U3));
      for (let k4 = 0; k4 < hLen; k4++)
        T3[k4] ^= U3[k4];
    }
    const destPos = (i2 - 1) * hLen;
    const len = i2 === l2 ? r2 : hLen;
    DK.set(arrayify(T3).slice(0, len), destPos);
  }
  return hexlify(DK);
}
var init_pbkdf2 = __esm({
  "node_modules/@ethersproject/pbkdf2/lib.esm/pbkdf2.js"() {
    init_define_process();
    init_lib2();
    init_lib17();
    "use strict";
  }
});

// node_modules/@ethersproject/pbkdf2/lib.esm/index.js
var init_lib18 = __esm({
  "node_modules/@ethersproject/pbkdf2/lib.esm/index.js"() {
    init_define_process();
    init_pbkdf2();
  }
});

// node_modules/@ethersproject/wordlists/lib.esm/_version.js
var version16;
var init_version15 = __esm({
  "node_modules/@ethersproject/wordlists/lib.esm/_version.js"() {
    init_define_process();
    version16 = "wordlists/5.6.0";
  }
});

// node_modules/@ethersproject/wordlists/lib.esm/wordlist.js
var exportWordlist, logger21, Wordlist;
var init_wordlist = __esm({
  "node_modules/@ethersproject/wordlists/lib.esm/wordlist.js"() {
    init_define_process();
    init_lib10();
    init_lib4();
    init_lib();
    init_version15();
    "use strict";
    exportWordlist = false;
    logger21 = new Logger(version16);
    Wordlist = class {
      constructor(locale) {
        logger21.checkAbstract(new.target, Wordlist);
        defineReadOnly(this, "locale", locale);
      }
      split(mnemonic) {
        return mnemonic.toLowerCase().split(/ +/g);
      }
      join(words2) {
        return words2.join(" ");
      }
      static check(wordlist2) {
        const words2 = [];
        for (let i2 = 0; i2 < 2048; i2++) {
          const word = wordlist2.getWord(i2);
          if (i2 !== wordlist2.getWordIndex(word)) {
            return "0x";
          }
          words2.push(word);
        }
        return id(words2.join("\n") + "\n");
      }
      static register(lang, name2) {
        if (!name2) {
          name2 = lang.locale;
        }
        if (exportWordlist) {
          try {
            const anyGlobal2 = window;
            if (anyGlobal2._ethers && anyGlobal2._ethers.wordlists) {
              if (!anyGlobal2._ethers.wordlists[name2]) {
                defineReadOnly(anyGlobal2._ethers.wordlists, name2, lang);
              }
            }
          } catch (error) {
          }
        }
      }
    };
  }
});

// node_modules/@ethersproject/wordlists/lib.esm/lang-en.js
function loadWords(lang) {
  if (wordlist != null) {
    return;
  }
  wordlist = words.replace(/([A-Z])/g, " $1").toLowerCase().substring(1).split(" ");
  if (Wordlist.check(lang) !== "0x3c8acc1e7b08d8e76f9fda015ef48dc8c710a73cb7e0f77b2c18a9b5a7adde60") {
    wordlist = null;
    throw new Error("BIP39 Wordlist for en (English) FAILED");
  }
}
var words, wordlist, LangEn, langEn;
var init_lang_en = __esm({
  "node_modules/@ethersproject/wordlists/lib.esm/lang-en.js"() {
    init_define_process();
    init_wordlist();
    "use strict";
    words = "AbandonAbilityAbleAboutAboveAbsentAbsorbAbstractAbsurdAbuseAccessAccidentAccountAccuseAchieveAcidAcousticAcquireAcrossActActionActorActressActualAdaptAddAddictAddressAdjustAdmitAdultAdvanceAdviceAerobicAffairAffordAfraidAgainAgeAgentAgreeAheadAimAirAirportAisleAlarmAlbumAlcoholAlertAlienAllAlleyAllowAlmostAloneAlphaAlreadyAlsoAlterAlwaysAmateurAmazingAmongAmountAmusedAnalystAnchorAncientAngerAngleAngryAnimalAnkleAnnounceAnnualAnotherAnswerAntennaAntiqueAnxietyAnyApartApologyAppearAppleApproveAprilArchArcticAreaArenaArgueArmArmedArmorArmyAroundArrangeArrestArriveArrowArtArtefactArtistArtworkAskAspectAssaultAssetAssistAssumeAsthmaAthleteAtomAttackAttendAttitudeAttractAuctionAuditAugustAuntAuthorAutoAutumnAverageAvocadoAvoidAwakeAwareAwayAwesomeAwfulAwkwardAxisBabyBachelorBaconBadgeBagBalanceBalconyBallBambooBananaBannerBarBarelyBargainBarrelBaseBasicBasketBattleBeachBeanBeautyBecauseBecomeBeefBeforeBeginBehaveBehindBelieveBelowBeltBenchBenefitBestBetrayBetterBetweenBeyondBicycleBidBikeBindBiologyBirdBirthBitterBlackBladeBlameBlanketBlastBleakBlessBlindBloodBlossomBlouseBlueBlurBlushBoardBoatBodyBoilBombBoneBonusBookBoostBorderBoringBorrowBossBottomBounceBoxBoyBracketBrainBrandBrassBraveBreadBreezeBrickBridgeBriefBrightBringBriskBroccoliBrokenBronzeBroomBrotherBrownBrushBubbleBuddyBudgetBuffaloBuildBulbBulkBulletBundleBunkerBurdenBurgerBurstBusBusinessBusyButterBuyerBuzzCabbageCabinCableCactusCageCakeCallCalmCameraCampCanCanalCancelCandyCannonCanoeCanvasCanyonCapableCapitalCaptainCarCarbonCardCargoCarpetCarryCartCaseCashCasinoCastleCasualCatCatalogCatchCategoryCattleCaughtCauseCautionCaveCeilingCeleryCementCensusCenturyCerealCertainChairChalkChampionChangeChaosChapterChargeChaseChatCheapCheckCheeseChefCherryChestChickenChiefChildChimneyChoiceChooseChronicChuckleChunkChurnCigarCinnamonCircleCitizenCityCivilClaimClapClarifyClawClayCleanClerkCleverClickClientCliffClimbClinicClipClockClogCloseClothCloudClownClubClumpClusterClutchCoachCoastCoconutCodeCoffeeCoilCoinCollectColorColumnCombineComeComfortComicCommonCompanyConcertConductConfirmCongressConnectConsiderControlConvinceCookCoolCopperCopyCoralCoreCornCorrectCostCottonCouchCountryCoupleCourseCousinCoverCoyoteCrackCradleCraftCramCraneCrashCraterCrawlCrazyCreamCreditCreekCrewCricketCrimeCrispCriticCropCrossCrouchCrowdCrucialCruelCruiseCrumbleCrunchCrushCryCrystalCubeCultureCupCupboardCuriousCurrentCurtainCurveCushionCustomCuteCycleDadDamageDampDanceDangerDaringDashDaughterDawnDayDealDebateDebrisDecadeDecemberDecideDeclineDecorateDecreaseDeerDefenseDefineDefyDegreeDelayDeliverDemandDemiseDenialDentistDenyDepartDependDepositDepthDeputyDeriveDescribeDesertDesignDeskDespairDestroyDetailDetectDevelopDeviceDevoteDiagramDialDiamondDiaryDiceDieselDietDifferDigitalDignityDilemmaDinnerDinosaurDirectDirtDisagreeDiscoverDiseaseDishDismissDisorderDisplayDistanceDivertDivideDivorceDizzyDoctorDocumentDogDollDolphinDomainDonateDonkeyDonorDoorDoseDoubleDoveDraftDragonDramaDrasticDrawDreamDressDriftDrillDrinkDripDriveDropDrumDryDuckDumbDuneDuringDustDutchDutyDwarfDynamicEagerEagleEarlyEarnEarthEasilyEastEasyEchoEcologyEconomyEdgeEditEducateEffortEggEightEitherElbowElderElectricElegantElementElephantElevatorEliteElseEmbarkEmbodyEmbraceEmergeEmotionEmployEmpowerEmptyEnableEnactEndEndlessEndorseEnemyEnergyEnforceEngageEngineEnhanceEnjoyEnlistEnoughEnrichEnrollEnsureEnterEntireEntryEnvelopeEpisodeEqualEquipEraEraseErodeErosionErrorEruptEscapeEssayEssenceEstateEternalEthicsEvidenceEvilEvokeEvolveExactExampleExcessExchangeExciteExcludeExcuseExecuteExerciseExhaustExhibitExileExistExitExoticExpandExpectExpireExplainExposeExpressExtendExtraEyeEyebrowFabricFaceFacultyFadeFaintFaithFallFalseFameFamilyFamousFanFancyFantasyFarmFashionFatFatalFatherFatigueFaultFavoriteFeatureFebruaryFederalFeeFeedFeelFemaleFenceFestivalFetchFeverFewFiberFictionFieldFigureFileFilmFilterFinalFindFineFingerFinishFireFirmFirstFiscalFishFitFitnessFixFlagFlameFlashFlatFlavorFleeFlightFlipFloatFlockFloorFlowerFluidFlushFlyFoamFocusFogFoilFoldFollowFoodFootForceForestForgetForkFortuneForumForwardFossilFosterFoundFoxFragileFrameFrequentFreshFriendFringeFrogFrontFrostFrownFrozenFruitFuelFunFunnyFurnaceFuryFutureGadgetGainGalaxyGalleryGameGapGarageGarbageGardenGarlicGarmentGasGaspGateGatherGaugeGazeGeneralGeniusGenreGentleGenuineGestureGhostGiantGiftGiggleGingerGiraffeGirlGiveGladGlanceGlareGlassGlideGlimpseGlobeGloomGloryGloveGlowGlueGoatGoddessGoldGoodGooseGorillaGospelGossipGovernGownGrabGraceGrainGrantGrapeGrassGravityGreatGreenGridGriefGritGroceryGroupGrowGruntGuardGuessGuideGuiltGuitarGunGymHabitHairHalfHammerHamsterHandHappyHarborHardHarshHarvestHatHaveHawkHazardHeadHealthHeartHeavyHedgehogHeightHelloHelmetHelpHenHeroHiddenHighHillHintHipHireHistoryHobbyHockeyHoldHoleHolidayHollowHomeHoneyHoodHopeHornHorrorHorseHospitalHostHotelHourHoverHubHugeHumanHumbleHumorHundredHungryHuntHurdleHurryHurtHusbandHybridIceIconIdeaIdentifyIdleIgnoreIllIllegalIllnessImageImitateImmenseImmuneImpactImposeImproveImpulseInchIncludeIncomeIncreaseIndexIndicateIndoorIndustryInfantInflictInformInhaleInheritInitialInjectInjuryInmateInnerInnocentInputInquiryInsaneInsectInsideInspireInstallIntactInterestIntoInvestInviteInvolveIronIslandIsolateIssueItemIvoryJacketJaguarJarJazzJealousJeansJellyJewelJobJoinJokeJourneyJoyJudgeJuiceJumpJungleJuniorJunkJustKangarooKeenKeepKetchupKeyKickKidKidneyKindKingdomKissKitKitchenKiteKittenKiwiKneeKnifeKnockKnowLabLabelLaborLadderLadyLakeLampLanguageLaptopLargeLaterLatinLaughLaundryLavaLawLawnLawsuitLayerLazyLeaderLeafLearnLeaveLectureLeftLegLegalLegendLeisureLemonLendLengthLensLeopardLessonLetterLevelLiarLibertyLibraryLicenseLifeLiftLightLikeLimbLimitLinkLionLiquidListLittleLiveLizardLoadLoanLobsterLocalLockLogicLonelyLongLoopLotteryLoudLoungeLoveLoyalLuckyLuggageLumberLunarLunchLuxuryLyricsMachineMadMagicMagnetMaidMailMainMajorMakeMammalManManageMandateMangoMansionManualMapleMarbleMarchMarginMarineMarketMarriageMaskMassMasterMatchMaterialMathMatrixMatterMaximumMazeMeadowMeanMeasureMeatMechanicMedalMediaMelodyMeltMemberMemoryMentionMenuMercyMergeMeritMerryMeshMessageMetalMethodMiddleMidnightMilkMillionMimicMindMinimumMinorMinuteMiracleMirrorMiseryMissMistakeMixMixedMixtureMobileModelModifyMomMomentMonitorMonkeyMonsterMonthMoonMoralMoreMorningMosquitoMotherMotionMotorMountainMouseMoveMovieMuchMuffinMuleMultiplyMuscleMuseumMushroomMusicMustMutualMyselfMysteryMythNaiveNameNapkinNarrowNastyNationNatureNearNeckNeedNegativeNeglectNeitherNephewNerveNestNetNetworkNeutralNeverNewsNextNiceNightNobleNoiseNomineeNoodleNormalNorthNoseNotableNoteNothingNoticeNovelNowNuclearNumberNurseNutOakObeyObjectObligeObscureObserveObtainObviousOccurOceanOctoberOdorOffOfferOfficeOftenOilOkayOldOliveOlympicOmitOnceOneOnionOnlineOnlyOpenOperaOpinionOpposeOptionOrangeOrbitOrchardOrderOrdinaryOrganOrientOriginalOrphanOstrichOtherOutdoorOuterOutputOutsideOvalOvenOverOwnOwnerOxygenOysterOzonePactPaddlePagePairPalacePalmPandaPanelPanicPantherPaperParadeParentParkParrotPartyPassPatchPathPatientPatrolPatternPausePavePaymentPeacePeanutPearPeasantPelicanPenPenaltyPencilPeoplePepperPerfectPermitPersonPetPhonePhotoPhrasePhysicalPianoPicnicPicturePiecePigPigeonPillPilotPinkPioneerPipePistolPitchPizzaPlacePlanetPlasticPlatePlayPleasePledgePluckPlugPlungePoemPoetPointPolarPolePolicePondPonyPoolPopularPortionPositionPossiblePostPotatoPotteryPovertyPowderPowerPracticePraisePredictPreferPreparePresentPrettyPreventPricePridePrimaryPrintPriorityPrisonPrivatePrizeProblemProcessProduceProfitProgramProjectPromoteProofPropertyProsperProtectProudProvidePublicPuddingPullPulpPulsePumpkinPunchPupilPuppyPurchasePurityPurposePursePushPutPuzzlePyramidQualityQuantumQuarterQuestionQuickQuitQuizQuoteRabbitRaccoonRaceRackRadarRadioRailRainRaiseRallyRampRanchRandomRangeRapidRareRateRatherRavenRawRazorReadyRealReasonRebelRebuildRecallReceiveRecipeRecordRecycleReduceReflectReformRefuseRegionRegretRegularRejectRelaxReleaseReliefRelyRemainRememberRemindRemoveRenderRenewRentReopenRepairRepeatReplaceReportRequireRescueResembleResistResourceResponseResultRetireRetreatReturnReunionRevealReviewRewardRhythmRibRibbonRiceRichRideRidgeRifleRightRigidRingRiotRippleRiskRitualRivalRiverRoadRoastRobotRobustRocketRomanceRoofRookieRoomRoseRotateRoughRoundRouteRoyalRubberRudeRugRuleRunRunwayRuralSadSaddleSadnessSafeSailSaladSalmonSalonSaltSaluteSameSampleSandSatisfySatoshiSauceSausageSaveSayScaleScanScareScatterSceneSchemeSchoolScienceScissorsScorpionScoutScrapScreenScriptScrubSeaSearchSeasonSeatSecondSecretSectionSecuritySeedSeekSegmentSelectSellSeminarSeniorSenseSentenceSeriesServiceSessionSettleSetupSevenShadowShaftShallowShareShedShellSheriffShieldShiftShineShipShiverShockShoeShootShopShortShoulderShoveShrimpShrugShuffleShySiblingSickSideSiegeSightSignSilentSilkSillySilverSimilarSimpleSinceSingSirenSisterSituateSixSizeSkateSketchSkiSkillSkinSkirtSkullSlabSlamSleepSlenderSliceSlideSlightSlimSloganSlotSlowSlushSmallSmartSmileSmokeSmoothSnackSnakeSnapSniffSnowSoapSoccerSocialSockSodaSoftSolarSoldierSolidSolutionSolveSomeoneSongSoonSorrySortSoulSoundSoupSourceSouthSpaceSpareSpatialSpawnSpeakSpecialSpeedSpellSpendSphereSpiceSpiderSpikeSpinSpiritSplitSpoilSponsorSpoonSportSpotSpraySpreadSpringSpySquareSqueezeSquirrelStableStadiumStaffStageStairsStampStandStartStateStaySteakSteelStemStepStereoStickStillStingStockStomachStoneStoolStoryStoveStrategyStreetStrikeStrongStruggleStudentStuffStumbleStyleSubjectSubmitSubwaySuccessSuchSuddenSufferSugarSuggestSuitSummerSunSunnySunsetSuperSupplySupremeSureSurfaceSurgeSurpriseSurroundSurveySuspectSustainSwallowSwampSwapSwarmSwearSweetSwiftSwimSwingSwitchSwordSymbolSymptomSyrupSystemTableTackleTagTailTalentTalkTankTapeTargetTaskTasteTattooTaxiTeachTeamTellTenTenantTennisTentTermTestTextThankThatThemeThenTheoryThereTheyThingThisThoughtThreeThriveThrowThumbThunderTicketTideTigerTiltTimberTimeTinyTipTiredTissueTitleToastTobaccoTodayToddlerToeTogetherToiletTokenTomatoTomorrowToneTongueTonightToolToothTopTopicToppleTorchTornadoTortoiseTossTotalTouristTowardTowerTownToyTrackTradeTrafficTragicTrainTransferTrapTrashTravelTrayTreatTreeTrendTrialTribeTrickTriggerTrimTripTrophyTroubleTruckTrueTrulyTrumpetTrustTruthTryTubeTuitionTumbleTunaTunnelTurkeyTurnTurtleTwelveTwentyTwiceTwinTwistTwoTypeTypicalUglyUmbrellaUnableUnawareUncleUncoverUnderUndoUnfairUnfoldUnhappyUniformUniqueUnitUniverseUnknownUnlockUntilUnusualUnveilUpdateUpgradeUpholdUponUpperUpsetUrbanUrgeUsageUseUsedUsefulUselessUsualUtilityVacantVacuumVagueValidValleyValveVanVanishVaporVariousVastVaultVehicleVelvetVendorVentureVenueVerbVerifyVersionVeryVesselVeteranViableVibrantViciousVictoryVideoViewVillageVintageViolinVirtualVirusVisaVisitVisualVitalVividVocalVoiceVoidVolcanoVolumeVoteVoyageWageWagonWaitWalkWallWalnutWantWarfareWarmWarriorWashWaspWasteWaterWaveWayWealthWeaponWearWeaselWeatherWebWeddingWeekendWeirdWelcomeWestWetWhaleWhatWheatWheelWhenWhereWhipWhisperWideWidthWifeWildWillWinWindowWineWingWinkWinnerWinterWireWisdomWiseWishWitnessWolfWomanWonderWoodWoolWordWorkWorldWorryWorthWrapWreckWrestleWristWriteWrongYardYearYellowYouYoungYouthZebraZeroZoneZoo";
    wordlist = null;
    LangEn = class extends Wordlist {
      constructor() {
        super("en");
      }
      getWord(index) {
        loadWords(this);
        return wordlist[index];
      }
      getWordIndex(word) {
        loadWords(this);
        return wordlist.indexOf(word);
      }
    };
    langEn = new LangEn();
    Wordlist.register(langEn);
  }
});

// node_modules/@ethersproject/wordlists/lib.esm/wordlists.js
var wordlists;
var init_wordlists = __esm({
  "node_modules/@ethersproject/wordlists/lib.esm/wordlists.js"() {
    init_define_process();
    init_lang_en();
    "use strict";
    wordlists = {
      en: langEn
    };
  }
});

// node_modules/@ethersproject/wordlists/lib.esm/index.js
var init_lib19 = __esm({
  "node_modules/@ethersproject/wordlists/lib.esm/index.js"() {
    init_define_process();
    init_wordlist();
    init_wordlists();
    "use strict";
  }
});

// node_modules/@ethersproject/hdnode/lib.esm/_version.js
var version17;
var init_version16 = __esm({
  "node_modules/@ethersproject/hdnode/lib.esm/_version.js"() {
    init_define_process();
    version17 = "hdnode/5.6.0";
  }
});

// node_modules/@ethersproject/hdnode/lib.esm/index.js
var lib_exports15 = {};
__export(lib_exports15, {
  HDNode: () => HDNode,
  defaultPath: () => defaultPath,
  entropyToMnemonic: () => entropyToMnemonic,
  getAccountPath: () => getAccountPath,
  isValidMnemonic: () => isValidMnemonic,
  mnemonicToEntropy: () => mnemonicToEntropy,
  mnemonicToSeed: () => mnemonicToSeed
});
function getUpperMask(bits) {
  return (1 << bits) - 1 << 8 - bits;
}
function getLowerMask(bits) {
  return (1 << bits) - 1;
}
function bytes32(value2) {
  return hexZeroPad(hexlify(value2), 32);
}
function base58check(data) {
  return Base58.encode(concat([data, hexDataSlice(sha256(sha256(data)), 0, 4)]));
}
function getWordlist(wordlist2) {
  if (wordlist2 == null) {
    return wordlists["en"];
  }
  if (typeof wordlist2 === "string") {
    const words2 = wordlists[wordlist2];
    if (words2 == null) {
      logger22.throwArgumentError("unknown locale", "wordlist", wordlist2);
    }
    return words2;
  }
  return wordlist2;
}
function mnemonicToSeed(mnemonic, password) {
  if (!password) {
    password = "";
  }
  const salt = toUtf8Bytes("mnemonic" + password, UnicodeNormalizationForm.NFKD);
  return pbkdf2(toUtf8Bytes(mnemonic, UnicodeNormalizationForm.NFKD), salt, 2048, 64, "sha512");
}
function mnemonicToEntropy(mnemonic, wordlist2) {
  wordlist2 = getWordlist(wordlist2);
  logger22.checkNormalize();
  const words2 = wordlist2.split(mnemonic);
  if (words2.length % 3 !== 0) {
    throw new Error("invalid mnemonic");
  }
  const entropy = arrayify(new Uint8Array(Math.ceil(11 * words2.length / 8)));
  let offset = 0;
  for (let i2 = 0; i2 < words2.length; i2++) {
    let index = wordlist2.getWordIndex(words2[i2].normalize("NFKD"));
    if (index === -1) {
      throw new Error("invalid mnemonic");
    }
    for (let bit = 0; bit < 11; bit++) {
      if (index & 1 << 10 - bit) {
        entropy[offset >> 3] |= 1 << 7 - offset % 8;
      }
      offset++;
    }
  }
  const entropyBits = 32 * words2.length / 3;
  const checksumBits = words2.length / 3;
  const checksumMask = getUpperMask(checksumBits);
  const checksum = arrayify(sha256(entropy.slice(0, entropyBits / 8)))[0] & checksumMask;
  if (checksum !== (entropy[entropy.length - 1] & checksumMask)) {
    throw new Error("invalid checksum");
  }
  return hexlify(entropy.slice(0, entropyBits / 8));
}
function entropyToMnemonic(entropy, wordlist2) {
  wordlist2 = getWordlist(wordlist2);
  entropy = arrayify(entropy);
  if (entropy.length % 4 !== 0 || entropy.length < 16 || entropy.length > 32) {
    throw new Error("invalid entropy");
  }
  const indices = [0];
  let remainingBits = 11;
  for (let i2 = 0; i2 < entropy.length; i2++) {
    if (remainingBits > 8) {
      indices[indices.length - 1] <<= 8;
      indices[indices.length - 1] |= entropy[i2];
      remainingBits -= 8;
    } else {
      indices[indices.length - 1] <<= remainingBits;
      indices[indices.length - 1] |= entropy[i2] >> 8 - remainingBits;
      indices.push(entropy[i2] & getLowerMask(8 - remainingBits));
      remainingBits += 3;
    }
  }
  const checksumBits = entropy.length / 4;
  const checksum = arrayify(sha256(entropy))[0] & getUpperMask(checksumBits);
  indices[indices.length - 1] <<= checksumBits;
  indices[indices.length - 1] |= checksum >> 8 - checksumBits;
  return wordlist2.join(indices.map((index) => wordlist2.getWord(index)));
}
function isValidMnemonic(mnemonic, wordlist2) {
  try {
    mnemonicToEntropy(mnemonic, wordlist2);
    return true;
  } catch (error) {
  }
  return false;
}
function getAccountPath(index) {
  if (typeof index !== "number" || index < 0 || index >= HardenedBit || index % 1) {
    logger22.throwArgumentError("invalid account index", "index", index);
  }
  return `m/44'/60'/${index}'/0/0`;
}
var logger22, N, MasterSecret, HardenedBit, _constructorGuard4, defaultPath, HDNode;
var init_lib20 = __esm({
  "node_modules/@ethersproject/hdnode/lib.esm/index.js"() {
    init_define_process();
    init_lib16();
    init_lib2();
    init_lib3();
    init_lib9();
    init_lib18();
    init_lib4();
    init_lib14();
    init_lib17();
    init_lib15();
    init_lib19();
    init_lib();
    init_version16();
    "use strict";
    logger22 = new Logger(version17);
    N = BigNumber.from("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141");
    MasterSecret = toUtf8Bytes("Bitcoin seed");
    HardenedBit = 2147483648;
    _constructorGuard4 = {};
    defaultPath = "m/44'/60'/0'/0/0";
    HDNode = class {
      constructor(constructorGuard, privateKey, publicKey, parentFingerprint, chainCode, index, depth, mnemonicOrPath) {
        logger22.checkNew(new.target, HDNode);
        if (constructorGuard !== _constructorGuard4) {
          throw new Error("HDNode constructor cannot be called directly");
        }
        if (privateKey) {
          const signingKey = new SigningKey(privateKey);
          defineReadOnly(this, "privateKey", signingKey.privateKey);
          defineReadOnly(this, "publicKey", signingKey.compressedPublicKey);
        } else {
          defineReadOnly(this, "privateKey", null);
          defineReadOnly(this, "publicKey", hexlify(publicKey));
        }
        defineReadOnly(this, "parentFingerprint", parentFingerprint);
        defineReadOnly(this, "fingerprint", hexDataSlice(ripemd160(sha256(this.publicKey)), 0, 4));
        defineReadOnly(this, "address", computeAddress(this.publicKey));
        defineReadOnly(this, "chainCode", chainCode);
        defineReadOnly(this, "index", index);
        defineReadOnly(this, "depth", depth);
        if (mnemonicOrPath == null) {
          defineReadOnly(this, "mnemonic", null);
          defineReadOnly(this, "path", null);
        } else if (typeof mnemonicOrPath === "string") {
          defineReadOnly(this, "mnemonic", null);
          defineReadOnly(this, "path", mnemonicOrPath);
        } else {
          defineReadOnly(this, "mnemonic", mnemonicOrPath);
          defineReadOnly(this, "path", mnemonicOrPath.path);
        }
      }
      get extendedKey() {
        if (this.depth >= 256) {
          throw new Error("Depth too large!");
        }
        return base58check(concat([
          this.privateKey != null ? "0x0488ADE4" : "0x0488B21E",
          hexlify(this.depth),
          this.parentFingerprint,
          hexZeroPad(hexlify(this.index), 4),
          this.chainCode,
          this.privateKey != null ? concat(["0x00", this.privateKey]) : this.publicKey
        ]));
      }
      neuter() {
        return new HDNode(_constructorGuard4, null, this.publicKey, this.parentFingerprint, this.chainCode, this.index, this.depth, this.path);
      }
      _derive(index) {
        if (index > 4294967295) {
          throw new Error("invalid index - " + String(index));
        }
        let path = this.path;
        if (path) {
          path += "/" + (index & ~HardenedBit);
        }
        const data = new Uint8Array(37);
        if (index & HardenedBit) {
          if (!this.privateKey) {
            throw new Error("cannot derive child of neutered node");
          }
          data.set(arrayify(this.privateKey), 1);
          if (path) {
            path += "'";
          }
        } else {
          data.set(arrayify(this.publicKey));
        }
        for (let i2 = 24; i2 >= 0; i2 -= 8) {
          data[33 + (i2 >> 3)] = index >> 24 - i2 & 255;
        }
        const I3 = arrayify(computeHmac(SupportedAlgorithm.sha512, this.chainCode, data));
        const IL = I3.slice(0, 32);
        const IR = I3.slice(32);
        let ki = null;
        let Ki = null;
        if (this.privateKey) {
          ki = bytes32(BigNumber.from(IL).add(this.privateKey).mod(N));
        } else {
          const ek = new SigningKey(hexlify(IL));
          Ki = ek._addPoint(this.publicKey);
        }
        let mnemonicOrPath = path;
        const srcMnemonic = this.mnemonic;
        if (srcMnemonic) {
          mnemonicOrPath = Object.freeze({
            phrase: srcMnemonic.phrase,
            path,
            locale: srcMnemonic.locale || "en"
          });
        }
        return new HDNode(_constructorGuard4, ki, Ki, this.fingerprint, bytes32(IR), index, this.depth + 1, mnemonicOrPath);
      }
      derivePath(path) {
        const components = path.split("/");
        if (components.length === 0 || components[0] === "m" && this.depth !== 0) {
          throw new Error("invalid path - " + path);
        }
        if (components[0] === "m") {
          components.shift();
        }
        let result = this;
        for (let i2 = 0; i2 < components.length; i2++) {
          const component = components[i2];
          if (component.match(/^[0-9]+'$/)) {
            const index = parseInt(component.substring(0, component.length - 1));
            if (index >= HardenedBit) {
              throw new Error("invalid path index - " + component);
            }
            result = result._derive(HardenedBit + index);
          } else if (component.match(/^[0-9]+$/)) {
            const index = parseInt(component);
            if (index >= HardenedBit) {
              throw new Error("invalid path index - " + component);
            }
            result = result._derive(index);
          } else {
            throw new Error("invalid path component - " + component);
          }
        }
        return result;
      }
      static _fromSeed(seed, mnemonic) {
        const seedArray = arrayify(seed);
        if (seedArray.length < 16 || seedArray.length > 64) {
          throw new Error("invalid seed");
        }
        const I3 = arrayify(computeHmac(SupportedAlgorithm.sha512, MasterSecret, seedArray));
        return new HDNode(_constructorGuard4, bytes32(I3.slice(0, 32)), null, "0x00000000", bytes32(I3.slice(32)), 0, 0, mnemonic);
      }
      static fromMnemonic(mnemonic, password, wordlist2) {
        wordlist2 = getWordlist(wordlist2);
        mnemonic = entropyToMnemonic(mnemonicToEntropy(mnemonic, wordlist2), wordlist2);
        return HDNode._fromSeed(mnemonicToSeed(mnemonic, password), {
          phrase: mnemonic,
          path: "m",
          locale: wordlist2.locale
        });
      }
      static fromSeed(seed) {
        return HDNode._fromSeed(seed, null);
      }
      static fromExtendedKey(extendedKey) {
        const bytes = Base58.decode(extendedKey);
        if (bytes.length !== 82 || base58check(bytes.slice(0, 78)) !== extendedKey) {
          logger22.throwArgumentError("invalid extended key", "extendedKey", "[REDACTED]");
        }
        const depth = bytes[4];
        const parentFingerprint = hexlify(bytes.slice(5, 9));
        const index = parseInt(hexlify(bytes.slice(9, 13)).substring(2), 16);
        const chainCode = hexlify(bytes.slice(13, 45));
        const key2 = bytes.slice(45, 78);
        switch (hexlify(bytes.slice(0, 4))) {
          case "0x0488b21e":
          case "0x043587cf":
            return new HDNode(_constructorGuard4, null, hexlify(key2), parentFingerprint, chainCode, index, depth, null);
          case "0x0488ade4":
          case "0x04358394 ":
            if (key2[0] !== 0) {
              break;
            }
            return new HDNode(_constructorGuard4, hexlify(key2.slice(1)), null, parentFingerprint, chainCode, index, depth, null);
        }
        return logger22.throwArgumentError("invalid extended key", "extendedKey", "[REDACTED]");
      }
    };
  }
});

// node_modules/@ethersproject/random/lib.esm/_version.js
var version18;
var init_version17 = __esm({
  "node_modules/@ethersproject/random/lib.esm/_version.js"() {
    init_define_process();
    version18 = "random/5.6.0";
  }
});

// node_modules/@ethersproject/random/lib.esm/random.js
function getGlobal() {
  if (typeof self !== "undefined") {
    return self;
  }
  if (typeof window !== "undefined") {
    return window;
  }
  if (typeof globalThis !== "undefined") {
    return globalThis;
  }
  throw new Error("unable to locate global object");
}
function randomBytes(length) {
  if (length <= 0 || length > 1024 || length % 1 || length != length) {
    logger23.throwArgumentError("invalid length", "length", length);
  }
  const result = new Uint8Array(length);
  crypto2.getRandomValues(result);
  return arrayify(result);
}
var logger23, anyGlobal, crypto2;
var init_random = __esm({
  "node_modules/@ethersproject/random/lib.esm/random.js"() {
    init_define_process();
    init_lib2();
    init_lib();
    init_version17();
    "use strict";
    logger23 = new Logger(version18);
    anyGlobal = getGlobal();
    crypto2 = anyGlobal.crypto || anyGlobal.msCrypto;
    if (!crypto2 || !crypto2.getRandomValues) {
      logger23.warn("WARNING: Missing strong random number source");
      crypto2 = {
        getRandomValues: function(buffer) {
          return logger23.throwError("no secure random source avaialble", Logger.errors.UNSUPPORTED_OPERATION, {
            operation: "crypto.getRandomValues"
          });
        }
      };
    }
  }
});

// node_modules/@ethersproject/random/lib.esm/shuffle.js
function shuffled(array) {
  array = array.slice();
  for (let i2 = array.length - 1; i2 > 0; i2--) {
    const j3 = Math.floor(Math.random() * (i2 + 1));
    const tmp = array[i2];
    array[i2] = array[j3];
    array[j3] = tmp;
  }
  return array;
}
var init_shuffle = __esm({
  "node_modules/@ethersproject/random/lib.esm/shuffle.js"() {
    init_define_process();
    "use strict";
  }
});

// node_modules/@ethersproject/random/lib.esm/index.js
var lib_exports16 = {};
__export(lib_exports16, {
  randomBytes: () => randomBytes,
  shuffled: () => shuffled
});
var init_lib21 = __esm({
  "node_modules/@ethersproject/random/lib.esm/index.js"() {
    init_define_process();
    init_random();
    init_shuffle();
    "use strict";
  }
});

// node_modules/@ethersproject/json-wallets/node_modules/aes-js/index.js
var require_aes_js = __commonJS({
  "node_modules/@ethersproject/json-wallets/node_modules/aes-js/index.js"(exports, module) {
    init_define_process();
    "use strict";
    (function(root) {
      function checkInt(value2) {
        return parseInt(value2) === value2;
      }
      function checkInts(arrayish) {
        if (!checkInt(arrayish.length)) {
          return false;
        }
        for (var i2 = 0; i2 < arrayish.length; i2++) {
          if (!checkInt(arrayish[i2]) || arrayish[i2] < 0 || arrayish[i2] > 255) {
            return false;
          }
        }
        return true;
      }
      function coerceArray(arg, copy) {
        if (arg.buffer && ArrayBuffer.isView(arg) && arg.name === "Uint8Array") {
          if (copy) {
            if (arg.slice) {
              arg = arg.slice();
            } else {
              arg = Array.prototype.slice.call(arg);
            }
          }
          return arg;
        }
        if (Array.isArray(arg)) {
          if (!checkInts(arg)) {
            throw new Error("Array contains invalid value: " + arg);
          }
          return new Uint8Array(arg);
        }
        if (checkInt(arg.length) && checkInts(arg)) {
          return new Uint8Array(arg);
        }
        throw new Error("unsupported array-like object");
      }
      function createArray(length) {
        return new Uint8Array(length);
      }
      function copyArray(sourceArray, targetArray, targetStart, sourceStart, sourceEnd) {
        if (sourceStart != null || sourceEnd != null) {
          if (sourceArray.slice) {
            sourceArray = sourceArray.slice(sourceStart, sourceEnd);
          } else {
            sourceArray = Array.prototype.slice.call(sourceArray, sourceStart, sourceEnd);
          }
        }
        targetArray.set(sourceArray, targetStart);
      }
      var convertUtf8 = function() {
        function toBytes(text) {
          var result = [], i2 = 0;
          text = encodeURI(text);
          while (i2 < text.length) {
            var c2 = text.charCodeAt(i2++);
            if (c2 === 37) {
              result.push(parseInt(text.substr(i2, 2), 16));
              i2 += 2;
            } else {
              result.push(c2);
            }
          }
          return coerceArray(result);
        }
        function fromBytes(bytes) {
          var result = [], i2 = 0;
          while (i2 < bytes.length) {
            var c2 = bytes[i2];
            if (c2 < 128) {
              result.push(String.fromCharCode(c2));
              i2++;
            } else if (c2 > 191 && c2 < 224) {
              result.push(String.fromCharCode((c2 & 31) << 6 | bytes[i2 + 1] & 63));
              i2 += 2;
            } else {
              result.push(String.fromCharCode((c2 & 15) << 12 | (bytes[i2 + 1] & 63) << 6 | bytes[i2 + 2] & 63));
              i2 += 3;
            }
          }
          return result.join("");
        }
        return {
          toBytes,
          fromBytes
        };
      }();
      var convertHex = function() {
        function toBytes(text) {
          var result = [];
          for (var i2 = 0; i2 < text.length; i2 += 2) {
            result.push(parseInt(text.substr(i2, 2), 16));
          }
          return result;
        }
        var Hex = "0123456789abcdef";
        function fromBytes(bytes) {
          var result = [];
          for (var i2 = 0; i2 < bytes.length; i2++) {
            var v7 = bytes[i2];
            result.push(Hex[(v7 & 240) >> 4] + Hex[v7 & 15]);
          }
          return result.join("");
        }
        return {
          toBytes,
          fromBytes
        };
      }();
      var numberOfRounds = { 16: 10, 24: 12, 32: 14 };
      var rcon = [1, 2, 4, 8, 16, 32, 64, 128, 27, 54, 108, 216, 171, 77, 154, 47, 94, 188, 99, 198, 151, 53, 106, 212, 179, 125, 250, 239, 197, 145];
      var S2 = [99, 124, 119, 123, 242, 107, 111, 197, 48, 1, 103, 43, 254, 215, 171, 118, 202, 130, 201, 125, 250, 89, 71, 240, 173, 212, 162, 175, 156, 164, 114, 192, 183, 253, 147, 38, 54, 63, 247, 204, 52, 165, 229, 241, 113, 216, 49, 21, 4, 199, 35, 195, 24, 150, 5, 154, 7, 18, 128, 226, 235, 39, 178, 117, 9, 131, 44, 26, 27, 110, 90, 160, 82, 59, 214, 179, 41, 227, 47, 132, 83, 209, 0, 237, 32, 252, 177, 91, 106, 203, 190, 57, 74, 76, 88, 207, 208, 239, 170, 251, 67, 77, 51, 133, 69, 249, 2, 127, 80, 60, 159, 168, 81, 163, 64, 143, 146, 157, 56, 245, 188, 182, 218, 33, 16, 255, 243, 210, 205, 12, 19, 236, 95, 151, 68, 23, 196, 167, 126, 61, 100, 93, 25, 115, 96, 129, 79, 220, 34, 42, 144, 136, 70, 238, 184, 20, 222, 94, 11, 219, 224, 50, 58, 10, 73, 6, 36, 92, 194, 211, 172, 98, 145, 149, 228, 121, 231, 200, 55, 109, 141, 213, 78, 169, 108, 86, 244, 234, 101, 122, 174, 8, 186, 120, 37, 46, 28, 166, 180, 198, 232, 221, 116, 31, 75, 189, 139, 138, 112, 62, 181, 102, 72, 3, 246, 14, 97, 53, 87, 185, 134, 193, 29, 158, 225, 248, 152, 17, 105, 217, 142, 148, 155, 30, 135, 233, 206, 85, 40, 223, 140, 161, 137, 13, 191, 230, 66, 104, 65, 153, 45, 15, 176, 84, 187, 22];
      var Si = [82, 9, 106, 213, 48, 54, 165, 56, 191, 64, 163, 158, 129, 243, 215, 251, 124, 227, 57, 130, 155, 47, 255, 135, 52, 142, 67, 68, 196, 222, 233, 203, 84, 123, 148, 50, 166, 194, 35, 61, 238, 76, 149, 11, 66, 250, 195, 78, 8, 46, 161, 102, 40, 217, 36, 178, 118, 91, 162, 73, 109, 139, 209, 37, 114, 248, 246, 100, 134, 104, 152, 22, 212, 164, 92, 204, 93, 101, 182, 146, 108, 112, 72, 80, 253, 237, 185, 218, 94, 21, 70, 87, 167, 141, 157, 132, 144, 216, 171, 0, 140, 188, 211, 10, 247, 228, 88, 5, 184, 179, 69, 6, 208, 44, 30, 143, 202, 63, 15, 2, 193, 175, 189, 3, 1, 19, 138, 107, 58, 145, 17, 65, 79, 103, 220, 234, 151, 242, 207, 206, 240, 180, 230, 115, 150, 172, 116, 34, 231, 173, 53, 133, 226, 249, 55, 232, 28, 117, 223, 110, 71, 241, 26, 113, 29, 41, 197, 137, 111, 183, 98, 14, 170, 24, 190, 27, 252, 86, 62, 75, 198, 210, 121, 32, 154, 219, 192, 254, 120, 205, 90, 244, 31, 221, 168, 51, 136, 7, 199, 49, 177, 18, 16, 89, 39, 128, 236, 95, 96, 81, 127, 169, 25, 181, 74, 13, 45, 229, 122, 159, 147, 201, 156, 239, 160, 224, 59, 77, 174, 42, 245, 176, 200, 235, 187, 60, 131, 83, 153, 97, 23, 43, 4, 126, 186, 119, 214, 38, 225, 105, 20, 99, 85, 33, 12, 125];
      var T12 = [3328402341, 4168907908, 4000806809, 4135287693, 4294111757, 3597364157, 3731845041, 2445657428, 1613770832, 33620227, 3462883241, 1445669757, 3892248089, 3050821474, 1303096294, 3967186586, 2412431941, 528646813, 2311702848, 4202528135, 4026202645, 2992200171, 2387036105, 4226871307, 1101901292, 3017069671, 1604494077, 1169141738, 597466303, 1403299063, 3832705686, 2613100635, 1974974402, 3791519004, 1033081774, 1277568618, 1815492186, 2118074177, 4126668546, 2211236943, 1748251740, 1369810420, 3521504564, 4193382664, 3799085459, 2883115123, 1647391059, 706024767, 134480908, 2512897874, 1176707941, 2646852446, 806885416, 932615841, 168101135, 798661301, 235341577, 605164086, 461406363, 3756188221, 3454790438, 1311188841, 2142417613, 3933566367, 302582043, 495158174, 1479289972, 874125870, 907746093, 3698224818, 3025820398, 1537253627, 2756858614, 1983593293, 3084310113, 2108928974, 1378429307, 3722699582, 1580150641, 327451799, 2790478837, 3117535592, 0, 3253595436, 1075847264, 3825007647, 2041688520, 3059440621, 3563743934, 2378943302, 1740553945, 1916352843, 2487896798, 2555137236, 2958579944, 2244988746, 3151024235, 3320835882, 1336584933, 3992714006, 2252555205, 2588757463, 1714631509, 293963156, 2319795663, 3925473552, 67240454, 4269768577, 2689618160, 2017213508, 631218106, 1269344483, 2723238387, 1571005438, 2151694528, 93294474, 1066570413, 563977660, 1882732616, 4059428100, 1673313503, 2008463041, 2950355573, 1109467491, 537923632, 3858759450, 4260623118, 3218264685, 2177748300, 403442708, 638784309, 3287084079, 3193921505, 899127202, 2286175436, 773265209, 2479146071, 1437050866, 4236148354, 2050833735, 3362022572, 3126681063, 840505643, 3866325909, 3227541664, 427917720, 2655997905, 2749160575, 1143087718, 1412049534, 999329963, 193497219, 2353415882, 3354324521, 1807268051, 672404540, 2816401017, 3160301282, 369822493, 2916866934, 3688947771, 1681011286, 1949973070, 336202270, 2454276571, 201721354, 1210328172, 3093060836, 2680341085, 3184776046, 1135389935, 3294782118, 965841320, 831886756, 3554993207, 4068047243, 3588745010, 2345191491, 1849112409, 3664604599, 26054028, 2983581028, 2622377682, 1235855840, 3630984372, 2891339514, 4092916743, 3488279077, 3395642799, 4101667470, 1202630377, 268961816, 1874508501, 4034427016, 1243948399, 1546530418, 941366308, 1470539505, 1941222599, 2546386513, 3421038627, 2715671932, 3899946140, 1042226977, 2521517021, 1639824860, 227249030, 260737669, 3765465232, 2084453954, 1907733956, 3429263018, 2420656344, 100860677, 4160157185, 470683154, 3261161891, 1781871967, 2924959737, 1773779408, 394692241, 2579611992, 974986535, 664706745, 3655459128, 3958962195, 731420851, 571543859, 3530123707, 2849626480, 126783113, 865375399, 765172662, 1008606754, 361203602, 3387549984, 2278477385, 2857719295, 1344809080, 2782912378, 59542671, 1503764984, 160008576, 437062935, 1707065306, 3622233649, 2218934982, 3496503480, 2185314755, 697932208, 1512910199, 504303377, 2075177163, 2824099068, 1841019862, 739644986];
      var T22 = [2781242211, 2230877308, 2582542199, 2381740923, 234877682, 3184946027, 2984144751, 1418839493, 1348481072, 50462977, 2848876391, 2102799147, 434634494, 1656084439, 3863849899, 2599188086, 1167051466, 2636087938, 1082771913, 2281340285, 368048890, 3954334041, 3381544775, 201060592, 3963727277, 1739838676, 4250903202, 3930435503, 3206782108, 4149453988, 2531553906, 1536934080, 3262494647, 484572669, 2923271059, 1783375398, 1517041206, 1098792767, 49674231, 1334037708, 1550332980, 4098991525, 886171109, 150598129, 2481090929, 1940642008, 1398944049, 1059722517, 201851908, 1385547719, 1699095331, 1587397571, 674240536, 2704774806, 252314885, 3039795866, 151914247, 908333586, 2602270848, 1038082786, 651029483, 1766729511, 3447698098, 2682942837, 454166793, 2652734339, 1951935532, 775166490, 758520603, 3000790638, 4004797018, 4217086112, 4137964114, 1299594043, 1639438038, 3464344499, 2068982057, 1054729187, 1901997871, 2534638724, 4121318227, 1757008337, 0, 750906861, 1614815264, 535035132, 3363418545, 3988151131, 3201591914, 1183697867, 3647454910, 1265776953, 3734260298, 3566750796, 3903871064, 1250283471, 1807470800, 717615087, 3847203498, 384695291, 3313910595, 3617213773, 1432761139, 2484176261, 3481945413, 283769337, 100925954, 2180939647, 4037038160, 1148730428, 3123027871, 3813386408, 4087501137, 4267549603, 3229630528, 2315620239, 2906624658, 3156319645, 1215313976, 82966005, 3747855548, 3245848246, 1974459098, 1665278241, 807407632, 451280895, 251524083, 1841287890, 1283575245, 337120268, 891687699, 801369324, 3787349855, 2721421207, 3431482436, 959321879, 1469301956, 4065699751, 2197585534, 1199193405, 2898814052, 3887750493, 724703513, 2514908019, 2696962144, 2551808385, 3516813135, 2141445340, 1715741218, 2119445034, 2872807568, 2198571144, 3398190662, 700968686, 3547052216, 1009259540, 2041044702, 3803995742, 487983883, 1991105499, 1004265696, 1449407026, 1316239930, 504629770, 3683797321, 168560134, 1816667172, 3837287516, 1570751170, 1857934291, 4014189740, 2797888098, 2822345105, 2754712981, 936633572, 2347923833, 852879335, 1133234376, 1500395319, 3084545389, 2348912013, 1689376213, 3533459022, 3762923945, 3034082412, 4205598294, 133428468, 634383082, 2949277029, 2398386810, 3913789102, 403703816, 3580869306, 2297460856, 1867130149, 1918643758, 607656988, 4049053350, 3346248884, 1368901318, 600565992, 2090982877, 2632479860, 557719327, 3717614411, 3697393085, 2249034635, 2232388234, 2430627952, 1115438654, 3295786421, 2865522278, 3633334344, 84280067, 33027830, 303828494, 2747425121, 1600795957, 4188952407, 3496589753, 2434238086, 1486471617, 658119965, 3106381470, 953803233, 334231800, 3005978776, 857870609, 3151128937, 1890179545, 2298973838, 2805175444, 3056442267, 574365214, 2450884487, 550103529, 1233637070, 4289353045, 2018519080, 2057691103, 2399374476, 4166623649, 2148108681, 387583245, 3664101311, 836232934, 3330556482, 3100665960, 3280093505, 2955516313, 2002398509, 287182607, 3413881008, 4238890068, 3597515707, 975967766];
      var T3 = [1671808611, 2089089148, 2006576759, 2072901243, 4061003762, 1807603307, 1873927791, 3310653893, 810573872, 16974337, 1739181671, 729634347, 4263110654, 3613570519, 2883997099, 1989864566, 3393556426, 2191335298, 3376449993, 2106063485, 4195741690, 1508618841, 1204391495, 4027317232, 2917941677, 3563566036, 2734514082, 2951366063, 2629772188, 2767672228, 1922491506, 3227229120, 3082974647, 4246528509, 2477669779, 644500518, 911895606, 1061256767, 4144166391, 3427763148, 878471220, 2784252325, 3845444069, 4043897329, 1905517169, 3631459288, 827548209, 356461077, 67897348, 3344078279, 593839651, 3277757891, 405286936, 2527147926, 84871685, 2595565466, 118033927, 305538066, 2157648768, 3795705826, 3945188843, 661212711, 2999812018, 1973414517, 152769033, 2208177539, 745822252, 439235610, 455947803, 1857215598, 1525593178, 2700827552, 1391895634, 994932283, 3596728278, 3016654259, 695947817, 3812548067, 795958831, 2224493444, 1408607827, 3513301457, 0, 3979133421, 543178784, 4229948412, 2982705585, 1542305371, 1790891114, 3410398667, 3201918910, 961245753, 1256100938, 1289001036, 1491644504, 3477767631, 3496721360, 4012557807, 2867154858, 4212583931, 1137018435, 1305975373, 861234739, 2241073541, 1171229253, 4178635257, 33948674, 2139225727, 1357946960, 1011120188, 2679776671, 2833468328, 1374921297, 2751356323, 1086357568, 2408187279, 2460827538, 2646352285, 944271416, 4110742005, 3168756668, 3066132406, 3665145818, 560153121, 271589392, 4279952895, 4077846003, 3530407890, 3444343245, 202643468, 322250259, 3962553324, 1608629855, 2543990167, 1154254916, 389623319, 3294073796, 2817676711, 2122513534, 1028094525, 1689045092, 1575467613, 422261273, 1939203699, 1621147744, 2174228865, 1339137615, 3699352540, 577127458, 712922154, 2427141008, 2290289544, 1187679302, 3995715566, 3100863416, 339486740, 3732514782, 1591917662, 186455563, 3681988059, 3762019296, 844522546, 978220090, 169743370, 1239126601, 101321734, 611076132, 1558493276, 3260915650, 3547250131, 2901361580, 1655096418, 2443721105, 2510565781, 3828863972, 2039214713, 3878868455, 3359869896, 928607799, 1840765549, 2374762893, 3580146133, 1322425422, 2850048425, 1823791212, 1459268694, 4094161908, 3928346602, 1706019429, 2056189050, 2934523822, 135794696, 3134549946, 2022240376, 628050469, 779246638, 472135708, 2800834470, 3032970164, 3327236038, 3894660072, 3715932637, 1956440180, 522272287, 1272813131, 3185336765, 2340818315, 2323976074, 1888542832, 1044544574, 3049550261, 1722469478, 1222152264, 50660867, 4127324150, 236067854, 1638122081, 895445557, 1475980887, 3117443513, 2257655686, 3243809217, 489110045, 2662934430, 3778599393, 4162055160, 2561878936, 288563729, 1773916777, 3648039385, 2391345038, 2493985684, 2612407707, 505560094, 2274497927, 3911240169, 3460925390, 1442818645, 678973480, 3749357023, 2358182796, 2717407649, 2306869641, 219617805, 3218761151, 3862026214, 1120306242, 1756942440, 1103331905, 2578459033, 762796589, 252780047, 2966125488, 1425844308, 3151392187, 372911126];
      var T4 = [1667474886, 2088535288, 2004326894, 2071694838, 4075949567, 1802223062, 1869591006, 3318043793, 808472672, 16843522, 1734846926, 724270422, 4278065639, 3621216949, 2880169549, 1987484396, 3402253711, 2189597983, 3385409673, 2105378810, 4210693615, 1499065266, 1195886990, 4042263547, 2913856577, 3570689971, 2728590687, 2947541573, 2627518243, 2762274643, 1920112356, 3233831835, 3082273397, 4261223649, 2475929149, 640051788, 909531756, 1061110142, 4160160501, 3435941763, 875846760, 2779116625, 3857003729, 4059105529, 1903268834, 3638064043, 825316194, 353713962, 67374088, 3351728789, 589522246, 3284360861, 404236336, 2526454071, 84217610, 2593830191, 117901582, 303183396, 2155911963, 3806477791, 3958056653, 656894286, 2998062463, 1970642922, 151591698, 2206440989, 741110872, 437923380, 454765878, 1852748508, 1515908788, 2694904667, 1381168804, 993742198, 3604373943, 3014905469, 690584402, 3823320797, 791638366, 2223281939, 1398011302, 3520161977, 0, 3991743681, 538992704, 4244381667, 2981218425, 1532751286, 1785380564, 3419096717, 3200178535, 960056178, 1246420628, 1280103576, 1482221744, 3486468741, 3503319995, 4025428677, 2863326543, 4227536621, 1128514950, 1296947098, 859002214, 2240123921, 1162203018, 4193849577, 33687044, 2139062782, 1347481760, 1010582648, 2678045221, 2829640523, 1364325282, 2745433693, 1077985408, 2408548869, 2459086143, 2644360225, 943212656, 4126475505, 3166494563, 3065430391, 3671750063, 555836226, 269496352, 4294908645, 4092792573, 3537006015, 3452783745, 202118168, 320025894, 3974901699, 1600119230, 2543297077, 1145359496, 387397934, 3301201811, 2812801621, 2122220284, 1027426170, 1684319432, 1566435258, 421079858, 1936954854, 1616945344, 2172753945, 1330631070, 3705438115, 572679748, 707427924, 2425400123, 2290647819, 1179044492, 4008585671, 3099120491, 336870440, 3739122087, 1583276732, 185277718, 3688593069, 3772791771, 842159716, 976899700, 168435220, 1229577106, 101059084, 606366792, 1549591736, 3267517855, 3553849021, 2897014595, 1650632388, 2442242105, 2509612081, 3840161747, 2038008818, 3890688725, 3368567691, 926374254, 1835907034, 2374863873, 3587531953, 1313788572, 2846482505, 1819063512, 1448540844, 4109633523, 3941213647, 1701162954, 2054852340, 2930698567, 134748176, 3132806511, 2021165296, 623210314, 774795868, 471606328, 2795958615, 3031746419, 3334885783, 3907527627, 3722280097, 1953799400, 522133822, 1263263126, 3183336545, 2341176845, 2324333839, 1886425312, 1044267644, 3048588401, 1718004428, 1212733584, 50529542, 4143317495, 235803164, 1633788866, 892690282, 1465383342, 3115962473, 2256965911, 3250673817, 488449850, 2661202215, 3789633753, 4177007595, 2560144171, 286339874, 1768537042, 3654906025, 2391705863, 2492770099, 2610673197, 505291324, 2273808917, 3924369609, 3469625735, 1431699370, 673740880, 3755965093, 2358021891, 2711746649, 2307489801, 218961690, 3217021541, 3873845719, 1111672452, 1751693520, 1094828930, 2576986153, 757954394, 252645662, 2964376443, 1414855848, 3149649517, 370555436];
      var T5 = [1374988112, 2118214995, 437757123, 975658646, 1001089995, 530400753, 2902087851, 1273168787, 540080725, 2910219766, 2295101073, 4110568485, 1340463100, 3307916247, 641025152, 3043140495, 3736164937, 632953703, 1172967064, 1576976609, 3274667266, 2169303058, 2370213795, 1809054150, 59727847, 361929877, 3211623147, 2505202138, 3569255213, 1484005843, 1239443753, 2395588676, 1975683434, 4102977912, 2572697195, 666464733, 3202437046, 4035489047, 3374361702, 2110667444, 1675577880, 3843699074, 2538681184, 1649639237, 2976151520, 3144396420, 4269907996, 4178062228, 1883793496, 2403728665, 2497604743, 1383856311, 2876494627, 1917518562, 3810496343, 1716890410, 3001755655, 800440835, 2261089178, 3543599269, 807962610, 599762354, 33778362, 3977675356, 2328828971, 2809771154, 4077384432, 1315562145, 1708848333, 101039829, 3509871135, 3299278474, 875451293, 2733856160, 92987698, 2767645557, 193195065, 1080094634, 1584504582, 3178106961, 1042385657, 2531067453, 3711829422, 1306967366, 2438237621, 1908694277, 67556463, 1615861247, 429456164, 3602770327, 2302690252, 1742315127, 2968011453, 126454664, 3877198648, 2043211483, 2709260871, 2084704233, 4169408201, 0, 159417987, 841739592, 504459436, 1817866830, 4245618683, 260388950, 1034867998, 908933415, 168810852, 1750902305, 2606453969, 607530554, 202008497, 2472011535, 3035535058, 463180190, 2160117071, 1641816226, 1517767529, 470948374, 3801332234, 3231722213, 1008918595, 303765277, 235474187, 4069246893, 766945465, 337553864, 1475418501, 2943682380, 4003061179, 2743034109, 4144047775, 1551037884, 1147550661, 1543208500, 2336434550, 3408119516, 3069049960, 3102011747, 3610369226, 1113818384, 328671808, 2227573024, 2236228733, 3535486456, 2935566865, 3341394285, 496906059, 3702665459, 226906860, 2009195472, 733156972, 2842737049, 294930682, 1206477858, 2835123396, 2700099354, 1451044056, 573804783, 2269728455, 3644379585, 2362090238, 2564033334, 2801107407, 2776292904, 3669462566, 1068351396, 742039012, 1350078989, 1784663195, 1417561698, 4136440770, 2430122216, 775550814, 2193862645, 2673705150, 1775276924, 1876241833, 3475313331, 3366754619, 270040487, 3902563182, 3678124923, 3441850377, 1851332852, 3969562369, 2203032232, 3868552805, 2868897406, 566021896, 4011190502, 3135740889, 1248802510, 3936291284, 699432150, 832877231, 708780849, 3332740144, 899835584, 1951317047, 4236429990, 3767586992, 866637845, 4043610186, 1106041591, 2144161806, 395441711, 1984812685, 1139781709, 3433712980, 3835036895, 2664543715, 1282050075, 3240894392, 1181045119, 2640243204, 25965917, 4203181171, 4211818798, 3009879386, 2463879762, 3910161971, 1842759443, 2597806476, 933301370, 1509430414, 3943906441, 3467192302, 3076639029, 3776767469, 2051518780, 2631065433, 1441952575, 404016761, 1942435775, 1408749034, 1610459739, 3745345300, 2017778566, 3400528769, 3110650942, 941896748, 3265478751, 371049330, 3168937228, 675039627, 4279080257, 967311729, 135050206, 3635733660, 1683407248, 2076935265, 3576870512, 1215061108, 3501741890];
      var T62 = [1347548327, 1400783205, 3273267108, 2520393566, 3409685355, 4045380933, 2880240216, 2471224067, 1428173050, 4138563181, 2441661558, 636813900, 4233094615, 3620022987, 2149987652, 2411029155, 1239331162, 1730525723, 2554718734, 3781033664, 46346101, 310463728, 2743944855, 3328955385, 3875770207, 2501218972, 3955191162, 3667219033, 768917123, 3545789473, 692707433, 1150208456, 1786102409, 2029293177, 1805211710, 3710368113, 3065962831, 401639597, 1724457132, 3028143674, 409198410, 2196052529, 1620529459, 1164071807, 3769721975, 2226875310, 486441376, 2499348523, 1483753576, 428819965, 2274680428, 3075636216, 598438867, 3799141122, 1474502543, 711349675, 129166120, 53458370, 2592523643, 2782082824, 4063242375, 2988687269, 3120694122, 1559041666, 730517276, 2460449204, 4042459122, 2706270690, 3446004468, 3573941694, 533804130, 2328143614, 2637442643, 2695033685, 839224033, 1973745387, 957055980, 2856345839, 106852767, 1371368976, 4181598602, 1033297158, 2933734917, 1179510461, 3046200461, 91341917, 1862534868, 4284502037, 605657339, 2547432937, 3431546947, 2003294622, 3182487618, 2282195339, 954669403, 3682191598, 1201765386, 3917234703, 3388507166, 0, 2198438022, 1211247597, 2887651696, 1315723890, 4227665663, 1443857720, 507358933, 657861945, 1678381017, 560487590, 3516619604, 975451694, 2970356327, 261314535, 3535072918, 2652609425, 1333838021, 2724322336, 1767536459, 370938394, 182621114, 3854606378, 1128014560, 487725847, 185469197, 2918353863, 3106780840, 3356761769, 2237133081, 1286567175, 3152976349, 4255350624, 2683765030, 3160175349, 3309594171, 878443390, 1988838185, 3704300486, 1756818940, 1673061617, 3403100636, 272786309, 1075025698, 545572369, 2105887268, 4174560061, 296679730, 1841768865, 1260232239, 4091327024, 3960309330, 3497509347, 1814803222, 2578018489, 4195456072, 575138148, 3299409036, 446754879, 3629546796, 4011996048, 3347532110, 3252238545, 4270639778, 915985419, 3483825537, 681933534, 651868046, 2755636671, 3828103837, 223377554, 2607439820, 1649704518, 3270937875, 3901806776, 1580087799, 4118987695, 3198115200, 2087309459, 2842678573, 3016697106, 1003007129, 2802849917, 1860738147, 2077965243, 164439672, 4100872472, 32283319, 2827177882, 1709610350, 2125135846, 136428751, 3874428392, 3652904859, 3460984630, 3572145929, 3593056380, 2939266226, 824852259, 818324884, 3224740454, 930369212, 2801566410, 2967507152, 355706840, 1257309336, 4148292826, 243256656, 790073846, 2373340630, 1296297904, 1422699085, 3756299780, 3818836405, 457992840, 3099667487, 2135319889, 77422314, 1560382517, 1945798516, 788204353, 1521706781, 1385356242, 870912086, 325965383, 2358957921, 2050466060, 2388260884, 2313884476, 4006521127, 901210569, 3990953189, 1014646705, 1503449823, 1062597235, 2031621326, 3212035895, 3931371469, 1533017514, 350174575, 2256028891, 2177544179, 1052338372, 741876788, 1606591296, 1914052035, 213705253, 2334669897, 1107234197, 1899603969, 3725069491, 2631447780, 2422494913, 1635502980, 1893020342, 1950903388, 1120974935];
      var T7 = [2807058932, 1699970625, 2764249623, 1586903591, 1808481195, 1173430173, 1487645946, 59984867, 4199882800, 1844882806, 1989249228, 1277555970, 3623636965, 3419915562, 1149249077, 2744104290, 1514790577, 459744698, 244860394, 3235995134, 1963115311, 4027744588, 2544078150, 4190530515, 1608975247, 2627016082, 2062270317, 1507497298, 2200818878, 567498868, 1764313568, 3359936201, 2305455554, 2037970062, 1047239e3, 1910319033, 1337376481, 2904027272, 2892417312, 984907214, 1243112415, 830661914, 861968209, 2135253587, 2011214180, 2927934315, 2686254721, 731183368, 1750626376, 4246310725, 1820824798, 4172763771, 3542330227, 48394827, 2404901663, 2871682645, 671593195, 3254988725, 2073724613, 145085239, 2280796200, 2779915199, 1790575107, 2187128086, 472615631, 3029510009, 4075877127, 3802222185, 4107101658, 3201631749, 1646252340, 4270507174, 1402811438, 1436590835, 3778151818, 3950355702, 3963161475, 4020912224, 2667994737, 273792366, 2331590177, 104699613, 95345982, 3175501286, 2377486676, 1560637892, 3564045318, 369057872, 4213447064, 3919042237, 1137477952, 2658625497, 1119727848, 2340947849, 1530455833, 4007360968, 172466556, 266959938, 516552836, 0, 2256734592, 3980931627, 1890328081, 1917742170, 4294704398, 945164165, 3575528878, 958871085, 3647212047, 2787207260, 1423022939, 775562294, 1739656202, 3876557655, 2530391278, 2443058075, 3310321856, 547512796, 1265195639, 437656594, 3121275539, 719700128, 3762502690, 387781147, 218828297, 3350065803, 2830708150, 2848461854, 428169201, 122466165, 3720081049, 1627235199, 648017665, 4122762354, 1002783846, 2117360635, 695634755, 3336358691, 4234721005, 4049844452, 3704280881, 2232435299, 574624663, 287343814, 612205898, 1039717051, 840019705, 2708326185, 793451934, 821288114, 1391201670, 3822090177, 376187827, 3113855344, 1224348052, 1679968233, 2361698556, 1058709744, 752375421, 2431590963, 1321699145, 3519142200, 2734591178, 188127444, 2177869557, 3727205754, 2384911031, 3215212461, 2648976442, 2450346104, 3432737375, 1180849278, 331544205, 3102249176, 4150144569, 2952102595, 2159976285, 2474404304, 766078933, 313773861, 2570832044, 2108100632, 1668212892, 3145456443, 2013908262, 418672217, 3070356634, 2594734927, 1852171925, 3867060991, 3473416636, 3907448597, 2614737639, 919489135, 164948639, 2094410160, 2997825956, 590424639, 2486224549, 1723872674, 3157750862, 3399941250, 3501252752, 3625268135, 2555048196, 3673637356, 1343127501, 4130281361, 3599595085, 2957853679, 1297403050, 81781910, 3051593425, 2283490410, 532201772, 1367295589, 3926170974, 895287692, 1953757831, 1093597963, 492483431, 3528626907, 1446242576, 1192455638, 1636604631, 209336225, 344873464, 1015671571, 669961897, 3375740769, 3857572124, 2973530695, 3747192018, 1933530610, 3464042516, 935293895, 3454686199, 2858115069, 1863638845, 3683022916, 4085369519, 3292445032, 875313188, 1080017571, 3279033885, 621591778, 1233856572, 2504130317, 24197544, 3017672716, 3835484340, 3247465558, 2220981195, 3060847922, 1551124588, 1463996600];
      var T8 = [4104605777, 1097159550, 396673818, 660510266, 2875968315, 2638606623, 4200115116, 3808662347, 821712160, 1986918061, 3430322568, 38544885, 3856137295, 718002117, 893681702, 1654886325, 2975484382, 3122358053, 3926825029, 4274053469, 796197571, 1290801793, 1184342925, 3556361835, 2405426947, 2459735317, 1836772287, 1381620373, 3196267988, 1948373848, 3764988233, 3385345166, 3263785589, 2390325492, 1480485785, 3111247143, 3780097726, 2293045232, 548169417, 3459953789, 3746175075, 439452389, 1362321559, 1400849762, 1685577905, 1806599355, 2174754046, 137073913, 1214797936, 1174215055, 3731654548, 2079897426, 1943217067, 1258480242, 529487843, 1437280870, 3945269170, 3049390895, 3313212038, 923313619, 679998e3, 3215307299, 57326082, 377642221, 3474729866, 2041877159, 133361907, 1776460110, 3673476453, 96392454, 878845905, 2801699524, 777231668, 4082475170, 2330014213, 4142626212, 2213296395, 1626319424, 1906247262, 1846563261, 562755902, 3708173718, 1040559837, 3871163981, 1418573201, 3294430577, 114585348, 1343618912, 2566595609, 3186202582, 1078185097, 3651041127, 3896688048, 2307622919, 425408743, 3371096953, 2081048481, 1108339068, 2216610296, 0, 2156299017, 736970802, 292596766, 1517440620, 251657213, 2235061775, 2933202493, 758720310, 265905162, 1554391400, 1532285339, 908999204, 174567692, 1474760595, 4002861748, 2610011675, 3234156416, 3693126241, 2001430874, 303699484, 2478443234, 2687165888, 585122620, 454499602, 151849742, 2345119218, 3064510765, 514443284, 4044981591, 1963412655, 2581445614, 2137062819, 19308535, 1928707164, 1715193156, 4219352155, 1126790795, 600235211, 3992742070, 3841024952, 836553431, 1669664834, 2535604243, 3323011204, 1243905413, 3141400786, 4180808110, 698445255, 2653899549, 2989552604, 2253581325, 3252932727, 3004591147, 1891211689, 2487810577, 3915653703, 4237083816, 4030667424, 2100090966, 865136418, 1229899655, 953270745, 3399679628, 3557504664, 4118925222, 2061379749, 3079546586, 2915017791, 983426092, 2022837584, 1607244650, 2118541908, 2366882550, 3635996816, 972512814, 3283088770, 1568718495, 3499326569, 3576539503, 621982671, 2895723464, 410887952, 2623762152, 1002142683, 645401037, 1494807662, 2595684844, 1335535747, 2507040230, 4293295786, 3167684641, 367585007, 3885750714, 1865862730, 2668221674, 2960971305, 2763173681, 1059270954, 2777952454, 2724642869, 1320957812, 2194319100, 2429595872, 2815956275, 77089521, 3973773121, 3444575871, 2448830231, 1305906550, 4021308739, 2857194700, 2516901860, 3518358430, 1787304780, 740276417, 1699839814, 1592394909, 2352307457, 2272556026, 188821243, 1729977011, 3687994002, 274084841, 3594982253, 3613494426, 2701949495, 4162096729, 322734571, 2837966542, 1640576439, 484830689, 1202797690, 3537852828, 4067639125, 349075736, 3342319475, 4157467219, 4255800159, 1030690015, 1155237496, 2951971274, 1757691577, 607398968, 2738905026, 499347990, 3794078908, 1011452712, 227885567, 2818666809, 213114376, 3034881240, 1455525988, 3414450555, 850817237, 1817998408, 3092726480];
      var U12 = [0, 235474187, 470948374, 303765277, 941896748, 908933415, 607530554, 708780849, 1883793496, 2118214995, 1817866830, 1649639237, 1215061108, 1181045119, 1417561698, 1517767529, 3767586992, 4003061179, 4236429990, 4069246893, 3635733660, 3602770327, 3299278474, 3400528769, 2430122216, 2664543715, 2362090238, 2193862645, 2835123396, 2801107407, 3035535058, 3135740889, 3678124923, 3576870512, 3341394285, 3374361702, 3810496343, 3977675356, 4279080257, 4043610186, 2876494627, 2776292904, 3076639029, 3110650942, 2472011535, 2640243204, 2403728665, 2169303058, 1001089995, 899835584, 666464733, 699432150, 59727847, 226906860, 530400753, 294930682, 1273168787, 1172967064, 1475418501, 1509430414, 1942435775, 2110667444, 1876241833, 1641816226, 2910219766, 2743034109, 2976151520, 3211623147, 2505202138, 2606453969, 2302690252, 2269728455, 3711829422, 3543599269, 3240894392, 3475313331, 3843699074, 3943906441, 4178062228, 4144047775, 1306967366, 1139781709, 1374988112, 1610459739, 1975683434, 2076935265, 1775276924, 1742315127, 1034867998, 866637845, 566021896, 800440835, 92987698, 193195065, 429456164, 395441711, 1984812685, 2017778566, 1784663195, 1683407248, 1315562145, 1080094634, 1383856311, 1551037884, 101039829, 135050206, 437757123, 337553864, 1042385657, 807962610, 573804783, 742039012, 2531067453, 2564033334, 2328828971, 2227573024, 2935566865, 2700099354, 3001755655, 3168937228, 3868552805, 3902563182, 4203181171, 4102977912, 3736164937, 3501741890, 3265478751, 3433712980, 1106041591, 1340463100, 1576976609, 1408749034, 2043211483, 2009195472, 1708848333, 1809054150, 832877231, 1068351396, 766945465, 599762354, 159417987, 126454664, 361929877, 463180190, 2709260871, 2943682380, 3178106961, 3009879386, 2572697195, 2538681184, 2236228733, 2336434550, 3509871135, 3745345300, 3441850377, 3274667266, 3910161971, 3877198648, 4110568485, 4211818798, 2597806476, 2497604743, 2261089178, 2295101073, 2733856160, 2902087851, 3202437046, 2968011453, 3936291284, 3835036895, 4136440770, 4169408201, 3535486456, 3702665459, 3467192302, 3231722213, 2051518780, 1951317047, 1716890410, 1750902305, 1113818384, 1282050075, 1584504582, 1350078989, 168810852, 67556463, 371049330, 404016761, 841739592, 1008918595, 775550814, 540080725, 3969562369, 3801332234, 4035489047, 4269907996, 3569255213, 3669462566, 3366754619, 3332740144, 2631065433, 2463879762, 2160117071, 2395588676, 2767645557, 2868897406, 3102011747, 3069049960, 202008497, 33778362, 270040487, 504459436, 875451293, 975658646, 675039627, 641025152, 2084704233, 1917518562, 1615861247, 1851332852, 1147550661, 1248802510, 1484005843, 1451044056, 933301370, 967311729, 733156972, 632953703, 260388950, 25965917, 328671808, 496906059, 1206477858, 1239443753, 1543208500, 1441952575, 2144161806, 1908694277, 1675577880, 1842759443, 3610369226, 3644379585, 3408119516, 3307916247, 4011190502, 3776767469, 4077384432, 4245618683, 2809771154, 2842737049, 3144396420, 3043140495, 2673705150, 2438237621, 2203032232, 2370213795];
      var U22 = [0, 185469197, 370938394, 487725847, 741876788, 657861945, 975451694, 824852259, 1483753576, 1400783205, 1315723890, 1164071807, 1950903388, 2135319889, 1649704518, 1767536459, 2967507152, 3152976349, 2801566410, 2918353863, 2631447780, 2547432937, 2328143614, 2177544179, 3901806776, 3818836405, 4270639778, 4118987695, 3299409036, 3483825537, 3535072918, 3652904859, 2077965243, 1893020342, 1841768865, 1724457132, 1474502543, 1559041666, 1107234197, 1257309336, 598438867, 681933534, 901210569, 1052338372, 261314535, 77422314, 428819965, 310463728, 3409685355, 3224740454, 3710368113, 3593056380, 3875770207, 3960309330, 4045380933, 4195456072, 2471224067, 2554718734, 2237133081, 2388260884, 3212035895, 3028143674, 2842678573, 2724322336, 4138563181, 4255350624, 3769721975, 3955191162, 3667219033, 3516619604, 3431546947, 3347532110, 2933734917, 2782082824, 3099667487, 3016697106, 2196052529, 2313884476, 2499348523, 2683765030, 1179510461, 1296297904, 1347548327, 1533017514, 1786102409, 1635502980, 2087309459, 2003294622, 507358933, 355706840, 136428751, 53458370, 839224033, 957055980, 605657339, 790073846, 2373340630, 2256028891, 2607439820, 2422494913, 2706270690, 2856345839, 3075636216, 3160175349, 3573941694, 3725069491, 3273267108, 3356761769, 4181598602, 4063242375, 4011996048, 3828103837, 1033297158, 915985419, 730517276, 545572369, 296679730, 446754879, 129166120, 213705253, 1709610350, 1860738147, 1945798516, 2029293177, 1239331162, 1120974935, 1606591296, 1422699085, 4148292826, 4233094615, 3781033664, 3931371469, 3682191598, 3497509347, 3446004468, 3328955385, 2939266226, 2755636671, 3106780840, 2988687269, 2198438022, 2282195339, 2501218972, 2652609425, 1201765386, 1286567175, 1371368976, 1521706781, 1805211710, 1620529459, 2105887268, 1988838185, 533804130, 350174575, 164439672, 46346101, 870912086, 954669403, 636813900, 788204353, 2358957921, 2274680428, 2592523643, 2441661558, 2695033685, 2880240216, 3065962831, 3182487618, 3572145929, 3756299780, 3270937875, 3388507166, 4174560061, 4091327024, 4006521127, 3854606378, 1014646705, 930369212, 711349675, 560487590, 272786309, 457992840, 106852767, 223377554, 1678381017, 1862534868, 1914052035, 2031621326, 1211247597, 1128014560, 1580087799, 1428173050, 32283319, 182621114, 401639597, 486441376, 768917123, 651868046, 1003007129, 818324884, 1503449823, 1385356242, 1333838021, 1150208456, 1973745387, 2125135846, 1673061617, 1756818940, 2970356327, 3120694122, 2802849917, 2887651696, 2637442643, 2520393566, 2334669897, 2149987652, 3917234703, 3799141122, 4284502037, 4100872472, 3309594171, 3460984630, 3545789473, 3629546796, 2050466060, 1899603969, 1814803222, 1730525723, 1443857720, 1560382517, 1075025698, 1260232239, 575138148, 692707433, 878443390, 1062597235, 243256656, 91341917, 409198410, 325965383, 3403100636, 3252238545, 3704300486, 3620022987, 3874428392, 3990953189, 4042459122, 4227665663, 2460449204, 2578018489, 2226875310, 2411029155, 3198115200, 3046200461, 2827177882, 2743944855];
      var U3 = [0, 218828297, 437656594, 387781147, 875313188, 958871085, 775562294, 590424639, 1750626376, 1699970625, 1917742170, 2135253587, 1551124588, 1367295589, 1180849278, 1265195639, 3501252752, 3720081049, 3399941250, 3350065803, 3835484340, 3919042237, 4270507174, 4085369519, 3102249176, 3051593425, 2734591178, 2952102595, 2361698556, 2177869557, 2530391278, 2614737639, 3145456443, 3060847922, 2708326185, 2892417312, 2404901663, 2187128086, 2504130317, 2555048196, 3542330227, 3727205754, 3375740769, 3292445032, 3876557655, 3926170974, 4246310725, 4027744588, 1808481195, 1723872674, 1910319033, 2094410160, 1608975247, 1391201670, 1173430173, 1224348052, 59984867, 244860394, 428169201, 344873464, 935293895, 984907214, 766078933, 547512796, 1844882806, 1627235199, 2011214180, 2062270317, 1507497298, 1423022939, 1137477952, 1321699145, 95345982, 145085239, 532201772, 313773861, 830661914, 1015671571, 731183368, 648017665, 3175501286, 2957853679, 2807058932, 2858115069, 2305455554, 2220981195, 2474404304, 2658625497, 3575528878, 3625268135, 3473416636, 3254988725, 3778151818, 3963161475, 4213447064, 4130281361, 3599595085, 3683022916, 3432737375, 3247465558, 3802222185, 4020912224, 4172763771, 4122762354, 3201631749, 3017672716, 2764249623, 2848461854, 2331590177, 2280796200, 2431590963, 2648976442, 104699613, 188127444, 472615631, 287343814, 840019705, 1058709744, 671593195, 621591778, 1852171925, 1668212892, 1953757831, 2037970062, 1514790577, 1463996600, 1080017571, 1297403050, 3673637356, 3623636965, 3235995134, 3454686199, 4007360968, 3822090177, 4107101658, 4190530515, 2997825956, 3215212461, 2830708150, 2779915199, 2256734592, 2340947849, 2627016082, 2443058075, 172466556, 122466165, 273792366, 492483431, 1047239e3, 861968209, 612205898, 695634755, 1646252340, 1863638845, 2013908262, 1963115311, 1446242576, 1530455833, 1277555970, 1093597963, 1636604631, 1820824798, 2073724613, 1989249228, 1436590835, 1487645946, 1337376481, 1119727848, 164948639, 81781910, 331544205, 516552836, 1039717051, 821288114, 669961897, 719700128, 2973530695, 3157750862, 2871682645, 2787207260, 2232435299, 2283490410, 2667994737, 2450346104, 3647212047, 3564045318, 3279033885, 3464042516, 3980931627, 3762502690, 4150144569, 4199882800, 3070356634, 3121275539, 2904027272, 2686254721, 2200818878, 2384911031, 2570832044, 2486224549, 3747192018, 3528626907, 3310321856, 3359936201, 3950355702, 3867060991, 4049844452, 4234721005, 1739656202, 1790575107, 2108100632, 1890328081, 1402811438, 1586903591, 1233856572, 1149249077, 266959938, 48394827, 369057872, 418672217, 1002783846, 919489135, 567498868, 752375421, 209336225, 24197544, 376187827, 459744698, 945164165, 895287692, 574624663, 793451934, 1679968233, 1764313568, 2117360635, 1933530610, 1343127501, 1560637892, 1243112415, 1192455638, 3704280881, 3519142200, 3336358691, 3419915562, 3907448597, 3857572124, 4075877127, 4294704398, 3029510009, 3113855344, 2927934315, 2744104290, 2159976285, 2377486676, 2594734927, 2544078150];
      var U4 = [0, 151849742, 303699484, 454499602, 607398968, 758720310, 908999204, 1059270954, 1214797936, 1097159550, 1517440620, 1400849762, 1817998408, 1699839814, 2118541908, 2001430874, 2429595872, 2581445614, 2194319100, 2345119218, 3034881240, 3186202582, 2801699524, 2951971274, 3635996816, 3518358430, 3399679628, 3283088770, 4237083816, 4118925222, 4002861748, 3885750714, 1002142683, 850817237, 698445255, 548169417, 529487843, 377642221, 227885567, 77089521, 1943217067, 2061379749, 1640576439, 1757691577, 1474760595, 1592394909, 1174215055, 1290801793, 2875968315, 2724642869, 3111247143, 2960971305, 2405426947, 2253581325, 2638606623, 2487810577, 3808662347, 3926825029, 4044981591, 4162096729, 3342319475, 3459953789, 3576539503, 3693126241, 1986918061, 2137062819, 1685577905, 1836772287, 1381620373, 1532285339, 1078185097, 1229899655, 1040559837, 923313619, 740276417, 621982671, 439452389, 322734571, 137073913, 19308535, 3871163981, 4021308739, 4104605777, 4255800159, 3263785589, 3414450555, 3499326569, 3651041127, 2933202493, 2815956275, 3167684641, 3049390895, 2330014213, 2213296395, 2566595609, 2448830231, 1305906550, 1155237496, 1607244650, 1455525988, 1776460110, 1626319424, 2079897426, 1928707164, 96392454, 213114376, 396673818, 514443284, 562755902, 679998e3, 865136418, 983426092, 3708173718, 3557504664, 3474729866, 3323011204, 4180808110, 4030667424, 3945269170, 3794078908, 2507040230, 2623762152, 2272556026, 2390325492, 2975484382, 3092726480, 2738905026, 2857194700, 3973773121, 3856137295, 4274053469, 4157467219, 3371096953, 3252932727, 3673476453, 3556361835, 2763173681, 2915017791, 3064510765, 3215307299, 2156299017, 2307622919, 2459735317, 2610011675, 2081048481, 1963412655, 1846563261, 1729977011, 1480485785, 1362321559, 1243905413, 1126790795, 878845905, 1030690015, 645401037, 796197571, 274084841, 425408743, 38544885, 188821243, 3613494426, 3731654548, 3313212038, 3430322568, 4082475170, 4200115116, 3780097726, 3896688048, 2668221674, 2516901860, 2366882550, 2216610296, 3141400786, 2989552604, 2837966542, 2687165888, 1202797690, 1320957812, 1437280870, 1554391400, 1669664834, 1787304780, 1906247262, 2022837584, 265905162, 114585348, 499347990, 349075736, 736970802, 585122620, 972512814, 821712160, 2595684844, 2478443234, 2293045232, 2174754046, 3196267988, 3079546586, 2895723464, 2777952454, 3537852828, 3687994002, 3234156416, 3385345166, 4142626212, 4293295786, 3841024952, 3992742070, 174567692, 57326082, 410887952, 292596766, 777231668, 660510266, 1011452712, 893681702, 1108339068, 1258480242, 1343618912, 1494807662, 1715193156, 1865862730, 1948373848, 2100090966, 2701949495, 2818666809, 3004591147, 3122358053, 2235061775, 2352307457, 2535604243, 2653899549, 3915653703, 3764988233, 4219352155, 4067639125, 3444575871, 3294430577, 3746175075, 3594982253, 836553431, 953270745, 600235211, 718002117, 367585007, 484830689, 133361907, 251657213, 2041877159, 1891211689, 1806599355, 1654886325, 1568718495, 1418573201, 1335535747, 1184342925];
      function convertToInt32(bytes) {
        var result = [];
        for (var i2 = 0; i2 < bytes.length; i2 += 4) {
          result.push(bytes[i2] << 24 | bytes[i2 + 1] << 16 | bytes[i2 + 2] << 8 | bytes[i2 + 3]);
        }
        return result;
      }
      var AES = function(key2) {
        if (!(this instanceof AES)) {
          throw Error("AES must be instanitated with `new`");
        }
        Object.defineProperty(this, "key", {
          value: coerceArray(key2, true)
        });
        this._prepare();
      };
      AES.prototype._prepare = function() {
        var rounds = numberOfRounds[this.key.length];
        if (rounds == null) {
          throw new Error("invalid key size (must be 16, 24 or 32 bytes)");
        }
        this._Ke = [];
        this._Kd = [];
        for (var i2 = 0; i2 <= rounds; i2++) {
          this._Ke.push([0, 0, 0, 0]);
          this._Kd.push([0, 0, 0, 0]);
        }
        var roundKeyCount = (rounds + 1) * 4;
        var KC = this.key.length / 4;
        var tk = convertToInt32(this.key);
        var index;
        for (var i2 = 0; i2 < KC; i2++) {
          index = i2 >> 2;
          this._Ke[index][i2 % 4] = tk[i2];
          this._Kd[rounds - index][i2 % 4] = tk[i2];
        }
        var rconpointer = 0;
        var t = KC, tt2;
        while (t < roundKeyCount) {
          tt2 = tk[KC - 1];
          tk[0] ^= S2[tt2 >> 16 & 255] << 24 ^ S2[tt2 >> 8 & 255] << 16 ^ S2[tt2 & 255] << 8 ^ S2[tt2 >> 24 & 255] ^ rcon[rconpointer] << 24;
          rconpointer += 1;
          if (KC != 8) {
            for (var i2 = 1; i2 < KC; i2++) {
              tk[i2] ^= tk[i2 - 1];
            }
          } else {
            for (var i2 = 1; i2 < KC / 2; i2++) {
              tk[i2] ^= tk[i2 - 1];
            }
            tt2 = tk[KC / 2 - 1];
            tk[KC / 2] ^= S2[tt2 & 255] ^ S2[tt2 >> 8 & 255] << 8 ^ S2[tt2 >> 16 & 255] << 16 ^ S2[tt2 >> 24 & 255] << 24;
            for (var i2 = KC / 2 + 1; i2 < KC; i2++) {
              tk[i2] ^= tk[i2 - 1];
            }
          }
          var i2 = 0, r2, c2;
          while (i2 < KC && t < roundKeyCount) {
            r2 = t >> 2;
            c2 = t % 4;
            this._Ke[r2][c2] = tk[i2];
            this._Kd[rounds - r2][c2] = tk[i2++];
            t++;
          }
        }
        for (var r2 = 1; r2 < rounds; r2++) {
          for (var c2 = 0; c2 < 4; c2++) {
            tt2 = this._Kd[r2][c2];
            this._Kd[r2][c2] = U12[tt2 >> 24 & 255] ^ U22[tt2 >> 16 & 255] ^ U3[tt2 >> 8 & 255] ^ U4[tt2 & 255];
          }
        }
      };
      AES.prototype.encrypt = function(plaintext) {
        if (plaintext.length != 16) {
          throw new Error("invalid plaintext size (must be 16 bytes)");
        }
        var rounds = this._Ke.length - 1;
        var a = [0, 0, 0, 0];
        var t = convertToInt32(plaintext);
        for (var i2 = 0; i2 < 4; i2++) {
          t[i2] ^= this._Ke[0][i2];
        }
        for (var r2 = 1; r2 < rounds; r2++) {
          for (var i2 = 0; i2 < 4; i2++) {
            a[i2] = T12[t[i2] >> 24 & 255] ^ T22[t[(i2 + 1) % 4] >> 16 & 255] ^ T3[t[(i2 + 2) % 4] >> 8 & 255] ^ T4[t[(i2 + 3) % 4] & 255] ^ this._Ke[r2][i2];
          }
          t = a.slice();
        }
        var result = createArray(16), tt2;
        for (var i2 = 0; i2 < 4; i2++) {
          tt2 = this._Ke[rounds][i2];
          result[4 * i2] = (S2[t[i2] >> 24 & 255] ^ tt2 >> 24) & 255;
          result[4 * i2 + 1] = (S2[t[(i2 + 1) % 4] >> 16 & 255] ^ tt2 >> 16) & 255;
          result[4 * i2 + 2] = (S2[t[(i2 + 2) % 4] >> 8 & 255] ^ tt2 >> 8) & 255;
          result[4 * i2 + 3] = (S2[t[(i2 + 3) % 4] & 255] ^ tt2) & 255;
        }
        return result;
      };
      AES.prototype.decrypt = function(ciphertext) {
        if (ciphertext.length != 16) {
          throw new Error("invalid ciphertext size (must be 16 bytes)");
        }
        var rounds = this._Kd.length - 1;
        var a = [0, 0, 0, 0];
        var t = convertToInt32(ciphertext);
        for (var i2 = 0; i2 < 4; i2++) {
          t[i2] ^= this._Kd[0][i2];
        }
        for (var r2 = 1; r2 < rounds; r2++) {
          for (var i2 = 0; i2 < 4; i2++) {
            a[i2] = T5[t[i2] >> 24 & 255] ^ T62[t[(i2 + 3) % 4] >> 16 & 255] ^ T7[t[(i2 + 2) % 4] >> 8 & 255] ^ T8[t[(i2 + 1) % 4] & 255] ^ this._Kd[r2][i2];
          }
          t = a.slice();
        }
        var result = createArray(16), tt2;
        for (var i2 = 0; i2 < 4; i2++) {
          tt2 = this._Kd[rounds][i2];
          result[4 * i2] = (Si[t[i2] >> 24 & 255] ^ tt2 >> 24) & 255;
          result[4 * i2 + 1] = (Si[t[(i2 + 3) % 4] >> 16 & 255] ^ tt2 >> 16) & 255;
          result[4 * i2 + 2] = (Si[t[(i2 + 2) % 4] >> 8 & 255] ^ tt2 >> 8) & 255;
          result[4 * i2 + 3] = (Si[t[(i2 + 1) % 4] & 255] ^ tt2) & 255;
        }
        return result;
      };
      var ModeOfOperationECB = function(key2) {
        if (!(this instanceof ModeOfOperationECB)) {
          throw Error("AES must be instanitated with `new`");
        }
        this.description = "Electronic Code Block";
        this.name = "ecb";
        this._aes = new AES(key2);
      };
      ModeOfOperationECB.prototype.encrypt = function(plaintext) {
        plaintext = coerceArray(plaintext);
        if (plaintext.length % 16 !== 0) {
          throw new Error("invalid plaintext size (must be multiple of 16 bytes)");
        }
        var ciphertext = createArray(plaintext.length);
        var block = createArray(16);
        for (var i2 = 0; i2 < plaintext.length; i2 += 16) {
          copyArray(plaintext, block, 0, i2, i2 + 16);
          block = this._aes.encrypt(block);
          copyArray(block, ciphertext, i2);
        }
        return ciphertext;
      };
      ModeOfOperationECB.prototype.decrypt = function(ciphertext) {
        ciphertext = coerceArray(ciphertext);
        if (ciphertext.length % 16 !== 0) {
          throw new Error("invalid ciphertext size (must be multiple of 16 bytes)");
        }
        var plaintext = createArray(ciphertext.length);
        var block = createArray(16);
        for (var i2 = 0; i2 < ciphertext.length; i2 += 16) {
          copyArray(ciphertext, block, 0, i2, i2 + 16);
          block = this._aes.decrypt(block);
          copyArray(block, plaintext, i2);
        }
        return plaintext;
      };
      var ModeOfOperationCBC = function(key2, iv) {
        if (!(this instanceof ModeOfOperationCBC)) {
          throw Error("AES must be instanitated with `new`");
        }
        this.description = "Cipher Block Chaining";
        this.name = "cbc";
        if (!iv) {
          iv = createArray(16);
        } else if (iv.length != 16) {
          throw new Error("invalid initialation vector size (must be 16 bytes)");
        }
        this._lastCipherblock = coerceArray(iv, true);
        this._aes = new AES(key2);
      };
      ModeOfOperationCBC.prototype.encrypt = function(plaintext) {
        plaintext = coerceArray(plaintext);
        if (plaintext.length % 16 !== 0) {
          throw new Error("invalid plaintext size (must be multiple of 16 bytes)");
        }
        var ciphertext = createArray(plaintext.length);
        var block = createArray(16);
        for (var i2 = 0; i2 < plaintext.length; i2 += 16) {
          copyArray(plaintext, block, 0, i2, i2 + 16);
          for (var j3 = 0; j3 < 16; j3++) {
            block[j3] ^= this._lastCipherblock[j3];
          }
          this._lastCipherblock = this._aes.encrypt(block);
          copyArray(this._lastCipherblock, ciphertext, i2);
        }
        return ciphertext;
      };
      ModeOfOperationCBC.prototype.decrypt = function(ciphertext) {
        ciphertext = coerceArray(ciphertext);
        if (ciphertext.length % 16 !== 0) {
          throw new Error("invalid ciphertext size (must be multiple of 16 bytes)");
        }
        var plaintext = createArray(ciphertext.length);
        var block = createArray(16);
        for (var i2 = 0; i2 < ciphertext.length; i2 += 16) {
          copyArray(ciphertext, block, 0, i2, i2 + 16);
          block = this._aes.decrypt(block);
          for (var j3 = 0; j3 < 16; j3++) {
            plaintext[i2 + j3] = block[j3] ^ this._lastCipherblock[j3];
          }
          copyArray(ciphertext, this._lastCipherblock, 0, i2, i2 + 16);
        }
        return plaintext;
      };
      var ModeOfOperationCFB = function(key2, iv, segmentSize) {
        if (!(this instanceof ModeOfOperationCFB)) {
          throw Error("AES must be instanitated with `new`");
        }
        this.description = "Cipher Feedback";
        this.name = "cfb";
        if (!iv) {
          iv = createArray(16);
        } else if (iv.length != 16) {
          throw new Error("invalid initialation vector size (must be 16 size)");
        }
        if (!segmentSize) {
          segmentSize = 1;
        }
        this.segmentSize = segmentSize;
        this._shiftRegister = coerceArray(iv, true);
        this._aes = new AES(key2);
      };
      ModeOfOperationCFB.prototype.encrypt = function(plaintext) {
        if (plaintext.length % this.segmentSize != 0) {
          throw new Error("invalid plaintext size (must be segmentSize bytes)");
        }
        var encrypted = coerceArray(plaintext, true);
        var xorSegment;
        for (var i2 = 0; i2 < encrypted.length; i2 += this.segmentSize) {
          xorSegment = this._aes.encrypt(this._shiftRegister);
          for (var j3 = 0; j3 < this.segmentSize; j3++) {
            encrypted[i2 + j3] ^= xorSegment[j3];
          }
          copyArray(this._shiftRegister, this._shiftRegister, 0, this.segmentSize);
          copyArray(encrypted, this._shiftRegister, 16 - this.segmentSize, i2, i2 + this.segmentSize);
        }
        return encrypted;
      };
      ModeOfOperationCFB.prototype.decrypt = function(ciphertext) {
        if (ciphertext.length % this.segmentSize != 0) {
          throw new Error("invalid ciphertext size (must be segmentSize bytes)");
        }
        var plaintext = coerceArray(ciphertext, true);
        var xorSegment;
        for (var i2 = 0; i2 < plaintext.length; i2 += this.segmentSize) {
          xorSegment = this._aes.encrypt(this._shiftRegister);
          for (var j3 = 0; j3 < this.segmentSize; j3++) {
            plaintext[i2 + j3] ^= xorSegment[j3];
          }
          copyArray(this._shiftRegister, this._shiftRegister, 0, this.segmentSize);
          copyArray(ciphertext, this._shiftRegister, 16 - this.segmentSize, i2, i2 + this.segmentSize);
        }
        return plaintext;
      };
      var ModeOfOperationOFB = function(key2, iv) {
        if (!(this instanceof ModeOfOperationOFB)) {
          throw Error("AES must be instanitated with `new`");
        }
        this.description = "Output Feedback";
        this.name = "ofb";
        if (!iv) {
          iv = createArray(16);
        } else if (iv.length != 16) {
          throw new Error("invalid initialation vector size (must be 16 bytes)");
        }
        this._lastPrecipher = coerceArray(iv, true);
        this._lastPrecipherIndex = 16;
        this._aes = new AES(key2);
      };
      ModeOfOperationOFB.prototype.encrypt = function(plaintext) {
        var encrypted = coerceArray(plaintext, true);
        for (var i2 = 0; i2 < encrypted.length; i2++) {
          if (this._lastPrecipherIndex === 16) {
            this._lastPrecipher = this._aes.encrypt(this._lastPrecipher);
            this._lastPrecipherIndex = 0;
          }
          encrypted[i2] ^= this._lastPrecipher[this._lastPrecipherIndex++];
        }
        return encrypted;
      };
      ModeOfOperationOFB.prototype.decrypt = ModeOfOperationOFB.prototype.encrypt;
      var Counter = function(initialValue) {
        if (!(this instanceof Counter)) {
          throw Error("Counter must be instanitated with `new`");
        }
        if (initialValue !== 0 && !initialValue) {
          initialValue = 1;
        }
        if (typeof initialValue === "number") {
          this._counter = createArray(16);
          this.setValue(initialValue);
        } else {
          this.setBytes(initialValue);
        }
      };
      Counter.prototype.setValue = function(value2) {
        if (typeof value2 !== "number" || parseInt(value2) != value2) {
          throw new Error("invalid counter value (must be an integer)");
        }
        for (var index = 15; index >= 0; --index) {
          this._counter[index] = value2 % 256;
          value2 = value2 >> 8;
        }
      };
      Counter.prototype.setBytes = function(bytes) {
        bytes = coerceArray(bytes, true);
        if (bytes.length != 16) {
          throw new Error("invalid counter bytes size (must be 16 bytes)");
        }
        this._counter = bytes;
      };
      Counter.prototype.increment = function() {
        for (var i2 = 15; i2 >= 0; i2--) {
          if (this._counter[i2] === 255) {
            this._counter[i2] = 0;
          } else {
            this._counter[i2]++;
            break;
          }
        }
      };
      var ModeOfOperationCTR = function(key2, counter) {
        if (!(this instanceof ModeOfOperationCTR)) {
          throw Error("AES must be instanitated with `new`");
        }
        this.description = "Counter";
        this.name = "ctr";
        if (!(counter instanceof Counter)) {
          counter = new Counter(counter);
        }
        this._counter = counter;
        this._remainingCounter = null;
        this._remainingCounterIndex = 16;
        this._aes = new AES(key2);
      };
      ModeOfOperationCTR.prototype.encrypt = function(plaintext) {
        var encrypted = coerceArray(plaintext, true);
        for (var i2 = 0; i2 < encrypted.length; i2++) {
          if (this._remainingCounterIndex === 16) {
            this._remainingCounter = this._aes.encrypt(this._counter._counter);
            this._remainingCounterIndex = 0;
            this._counter.increment();
          }
          encrypted[i2] ^= this._remainingCounter[this._remainingCounterIndex++];
        }
        return encrypted;
      };
      ModeOfOperationCTR.prototype.decrypt = ModeOfOperationCTR.prototype.encrypt;
      function pkcs7pad(data) {
        data = coerceArray(data, true);
        var padder = 16 - data.length % 16;
        var result = createArray(data.length + padder);
        copyArray(data, result);
        for (var i2 = data.length; i2 < result.length; i2++) {
          result[i2] = padder;
        }
        return result;
      }
      function pkcs7strip(data) {
        data = coerceArray(data, true);
        if (data.length < 16) {
          throw new Error("PKCS#7 invalid length");
        }
        var padder = data[data.length - 1];
        if (padder > 16) {
          throw new Error("PKCS#7 padding byte out of range");
        }
        var length = data.length - padder;
        for (var i2 = 0; i2 < padder; i2++) {
          if (data[length + i2] !== padder) {
            throw new Error("PKCS#7 invalid padding byte");
          }
        }
        var result = createArray(length);
        copyArray(data, result, 0, 0, length);
        return result;
      }
      var aesjs = {
        AES,
        Counter,
        ModeOfOperation: {
          ecb: ModeOfOperationECB,
          cbc: ModeOfOperationCBC,
          cfb: ModeOfOperationCFB,
          ofb: ModeOfOperationOFB,
          ctr: ModeOfOperationCTR
        },
        utils: {
          hex: convertHex,
          utf8: convertUtf8
        },
        padding: {
          pkcs7: {
            pad: pkcs7pad,
            strip: pkcs7strip
          }
        },
        _arrayTest: {
          coerceArray,
          createArray,
          copyArray
        }
      };
      if (typeof exports !== "undefined") {
        module.exports = aesjs;
      } else if (typeof define === "function" && define.amd) {
        define(aesjs);
      } else {
        if (root.aesjs) {
          aesjs._aesjs = root.aesjs;
        }
        root.aesjs = aesjs;
      }
    })(exports);
  }
});

// node_modules/@ethersproject/json-wallets/lib.esm/_version.js
var version19;
var init_version18 = __esm({
  "node_modules/@ethersproject/json-wallets/lib.esm/_version.js"() {
    init_define_process();
    version19 = "json-wallets/5.6.0";
  }
});

// node_modules/@ethersproject/json-wallets/lib.esm/utils.js
function looseArrayify(hexString) {
  if (typeof hexString === "string" && hexString.substring(0, 2) !== "0x") {
    hexString = "0x" + hexString;
  }
  return arrayify(hexString);
}
function zpad(value2, length) {
  value2 = String(value2);
  while (value2.length < length) {
    value2 = "0" + value2;
  }
  return value2;
}
function getPassword(password) {
  if (typeof password === "string") {
    return toUtf8Bytes(password, UnicodeNormalizationForm.NFKC);
  }
  return arrayify(password);
}
function searchPath(object, path) {
  let currentChild = object;
  const comps = path.toLowerCase().split("/");
  for (let i2 = 0; i2 < comps.length; i2++) {
    let matchingChild = null;
    for (const key2 in currentChild) {
      if (key2.toLowerCase() === comps[i2]) {
        matchingChild = currentChild[key2];
        break;
      }
    }
    if (matchingChild === null) {
      return null;
    }
    currentChild = matchingChild;
  }
  return currentChild;
}
function uuidV4(randomBytes2) {
  const bytes = arrayify(randomBytes2);
  bytes[6] = bytes[6] & 15 | 64;
  bytes[8] = bytes[8] & 63 | 128;
  const value2 = hexlify(bytes);
  return [
    value2.substring(2, 10),
    value2.substring(10, 14),
    value2.substring(14, 18),
    value2.substring(18, 22),
    value2.substring(22, 34)
  ].join("-");
}
var init_utils = __esm({
  "node_modules/@ethersproject/json-wallets/lib.esm/utils.js"() {
    init_define_process();
    init_lib2();
    init_lib9();
    "use strict";
  }
});

// node_modules/@ethersproject/json-wallets/lib.esm/crowdsale.js
function decrypt(json, password) {
  const data = JSON.parse(json);
  password = getPassword(password);
  const ethaddr = getAddress(searchPath(data, "ethaddr"));
  const encseed = looseArrayify(searchPath(data, "encseed"));
  if (!encseed || encseed.length % 16 !== 0) {
    logger24.throwArgumentError("invalid encseed", "json", json);
  }
  const key2 = arrayify(pbkdf2(password, password, 2e3, 32, "sha256")).slice(0, 16);
  const iv = encseed.slice(0, 16);
  const encryptedSeed = encseed.slice(16);
  const aesCbc = new import_aes_js.default.ModeOfOperation.cbc(key2, iv);
  const seed = import_aes_js.default.padding.pkcs7.strip(arrayify(aesCbc.decrypt(encryptedSeed)));
  let seedHex = "";
  for (let i2 = 0; i2 < seed.length; i2++) {
    seedHex += String.fromCharCode(seed[i2]);
  }
  const seedHexBytes = toUtf8Bytes(seedHex);
  const privateKey = keccak256(seedHexBytes);
  return new CrowdsaleAccount({
    _isCrowdsaleAccount: true,
    address: ethaddr,
    privateKey
  });
}
var import_aes_js, logger24, CrowdsaleAccount;
var init_crowdsale = __esm({
  "node_modules/@ethersproject/json-wallets/lib.esm/crowdsale.js"() {
    init_define_process();
    import_aes_js = __toModule(require_aes_js());
    init_lib7();
    init_lib2();
    init_lib5();
    init_lib18();
    init_lib9();
    init_lib4();
    init_lib();
    init_version18();
    init_utils();
    "use strict";
    logger24 = new Logger(version19);
    CrowdsaleAccount = class extends Description {
      isCrowdsaleAccount(value2) {
        return !!(value2 && value2._isCrowdsaleAccount);
      }
    };
  }
});

// node_modules/@ethersproject/json-wallets/lib.esm/inspect.js
function isCrowdsaleWallet(json) {
  let data = null;
  try {
    data = JSON.parse(json);
  } catch (error) {
    return false;
  }
  return data.encseed && data.ethaddr;
}
function isKeystoreWallet(json) {
  let data = null;
  try {
    data = JSON.parse(json);
  } catch (error) {
    return false;
  }
  if (!data.version || parseInt(data.version) !== data.version || parseInt(data.version) !== 3) {
    return false;
  }
  return true;
}
function getJsonWalletAddress(json) {
  if (isCrowdsaleWallet(json)) {
    try {
      return getAddress(JSON.parse(json).ethaddr);
    } catch (error) {
      return null;
    }
  }
  if (isKeystoreWallet(json)) {
    try {
      return getAddress(JSON.parse(json).address);
    } catch (error) {
      return null;
    }
  }
  return null;
}
var init_inspect = __esm({
  "node_modules/@ethersproject/json-wallets/lib.esm/inspect.js"() {
    init_define_process();
    init_lib7();
    "use strict";
  }
});

// node_modules/scrypt-js/scrypt.js
var require_scrypt = __commonJS({
  "node_modules/scrypt-js/scrypt.js"(exports, module) {
    init_define_process();
    "use strict";
    (function(root) {
      const MAX_VALUE = 2147483647;
      function SHA256(m3) {
        const K3 = new Uint32Array([
          1116352408,
          1899447441,
          3049323471,
          3921009573,
          961987163,
          1508970993,
          2453635748,
          2870763221,
          3624381080,
          310598401,
          607225278,
          1426881987,
          1925078388,
          2162078206,
          2614888103,
          3248222580,
          3835390401,
          4022224774,
          264347078,
          604807628,
          770255983,
          1249150122,
          1555081692,
          1996064986,
          2554220882,
          2821834349,
          2952996808,
          3210313671,
          3336571891,
          3584528711,
          113926993,
          338241895,
          666307205,
          773529912,
          1294757372,
          1396182291,
          1695183700,
          1986661051,
          2177026350,
          2456956037,
          2730485921,
          2820302411,
          3259730800,
          3345764771,
          3516065817,
          3600352804,
          4094571909,
          275423344,
          430227734,
          506948616,
          659060556,
          883997877,
          958139571,
          1322822218,
          1537002063,
          1747873779,
          1955562222,
          2024104815,
          2227730452,
          2361852424,
          2428436474,
          2756734187,
          3204031479,
          3329325298
        ]);
        let h02 = 1779033703, h12 = 3144134277, h2 = 1013904242, h3 = 2773480762;
        let h4 = 1359893119, h52 = 2600822924, h62 = 528734635, h7 = 1541459225;
        const w3 = new Uint32Array(64);
        function blocks(p4) {
          let off = 0, len = p4.length;
          while (len >= 64) {
            let a = h02, b2 = h12, c2 = h2, d2 = h3, e = h4, f3 = h52, g3 = h62, h8 = h7, u2, i3, j3, t12, t2;
            for (i3 = 0; i3 < 16; i3++) {
              j3 = off + i3 * 4;
              w3[i3] = (p4[j3] & 255) << 24 | (p4[j3 + 1] & 255) << 16 | (p4[j3 + 2] & 255) << 8 | p4[j3 + 3] & 255;
            }
            for (i3 = 16; i3 < 64; i3++) {
              u2 = w3[i3 - 2];
              t12 = (u2 >>> 17 | u2 << 32 - 17) ^ (u2 >>> 19 | u2 << 32 - 19) ^ u2 >>> 10;
              u2 = w3[i3 - 15];
              t2 = (u2 >>> 7 | u2 << 32 - 7) ^ (u2 >>> 18 | u2 << 32 - 18) ^ u2 >>> 3;
              w3[i3] = (t12 + w3[i3 - 7] | 0) + (t2 + w3[i3 - 16] | 0) | 0;
            }
            for (i3 = 0; i3 < 64; i3++) {
              t12 = (((e >>> 6 | e << 32 - 6) ^ (e >>> 11 | e << 32 - 11) ^ (e >>> 25 | e << 32 - 25)) + (e & f3 ^ ~e & g3) | 0) + (h8 + (K3[i3] + w3[i3] | 0) | 0) | 0;
              t2 = ((a >>> 2 | a << 32 - 2) ^ (a >>> 13 | a << 32 - 13) ^ (a >>> 22 | a << 32 - 22)) + (a & b2 ^ a & c2 ^ b2 & c2) | 0;
              h8 = g3;
              g3 = f3;
              f3 = e;
              e = d2 + t12 | 0;
              d2 = c2;
              c2 = b2;
              b2 = a;
              a = t12 + t2 | 0;
            }
            h02 = h02 + a | 0;
            h12 = h12 + b2 | 0;
            h2 = h2 + c2 | 0;
            h3 = h3 + d2 | 0;
            h4 = h4 + e | 0;
            h52 = h52 + f3 | 0;
            h62 = h62 + g3 | 0;
            h7 = h7 + h8 | 0;
            off += 64;
            len -= 64;
          }
        }
        blocks(m3);
        let i2, bytesLeft = m3.length % 64, bitLenHi = m3.length / 536870912 | 0, bitLenLo = m3.length << 3, numZeros = bytesLeft < 56 ? 56 : 120, p3 = m3.slice(m3.length - bytesLeft, m3.length);
        p3.push(128);
        for (i2 = bytesLeft + 1; i2 < numZeros; i2++) {
          p3.push(0);
        }
        p3.push(bitLenHi >>> 24 & 255);
        p3.push(bitLenHi >>> 16 & 255);
        p3.push(bitLenHi >>> 8 & 255);
        p3.push(bitLenHi >>> 0 & 255);
        p3.push(bitLenLo >>> 24 & 255);
        p3.push(bitLenLo >>> 16 & 255);
        p3.push(bitLenLo >>> 8 & 255);
        p3.push(bitLenLo >>> 0 & 255);
        blocks(p3);
        return [
          h02 >>> 24 & 255,
          h02 >>> 16 & 255,
          h02 >>> 8 & 255,
          h02 >>> 0 & 255,
          h12 >>> 24 & 255,
          h12 >>> 16 & 255,
          h12 >>> 8 & 255,
          h12 >>> 0 & 255,
          h2 >>> 24 & 255,
          h2 >>> 16 & 255,
          h2 >>> 8 & 255,
          h2 >>> 0 & 255,
          h3 >>> 24 & 255,
          h3 >>> 16 & 255,
          h3 >>> 8 & 255,
          h3 >>> 0 & 255,
          h4 >>> 24 & 255,
          h4 >>> 16 & 255,
          h4 >>> 8 & 255,
          h4 >>> 0 & 255,
          h52 >>> 24 & 255,
          h52 >>> 16 & 255,
          h52 >>> 8 & 255,
          h52 >>> 0 & 255,
          h62 >>> 24 & 255,
          h62 >>> 16 & 255,
          h62 >>> 8 & 255,
          h62 >>> 0 & 255,
          h7 >>> 24 & 255,
          h7 >>> 16 & 255,
          h7 >>> 8 & 255,
          h7 >>> 0 & 255
        ];
      }
      function PBKDF2_HMAC_SHA256_OneIter(password, salt, dkLen) {
        password = password.length <= 64 ? password : SHA256(password);
        const innerLen = 64 + salt.length + 4;
        const inner = new Array(innerLen);
        const outerKey = new Array(64);
        let i2;
        let dk = [];
        for (i2 = 0; i2 < 64; i2++) {
          inner[i2] = 54;
        }
        for (i2 = 0; i2 < password.length; i2++) {
          inner[i2] ^= password[i2];
        }
        for (i2 = 0; i2 < salt.length; i2++) {
          inner[64 + i2] = salt[i2];
        }
        for (i2 = innerLen - 4; i2 < innerLen; i2++) {
          inner[i2] = 0;
        }
        for (i2 = 0; i2 < 64; i2++)
          outerKey[i2] = 92;
        for (i2 = 0; i2 < password.length; i2++)
          outerKey[i2] ^= password[i2];
        function incrementCounter() {
          for (let i3 = innerLen - 1; i3 >= innerLen - 4; i3--) {
            inner[i3]++;
            if (inner[i3] <= 255)
              return;
            inner[i3] = 0;
          }
        }
        while (dkLen >= 32) {
          incrementCounter();
          dk = dk.concat(SHA256(outerKey.concat(SHA256(inner))));
          dkLen -= 32;
        }
        if (dkLen > 0) {
          incrementCounter();
          dk = dk.concat(SHA256(outerKey.concat(SHA256(inner))).slice(0, dkLen));
        }
        return dk;
      }
      function blockmix_salsa8(BY, Yi, r2, x4, _X) {
        let i2;
        arraycopy(BY, (2 * r2 - 1) * 16, _X, 0, 16);
        for (i2 = 0; i2 < 2 * r2; i2++) {
          blockxor(BY, i2 * 16, _X, 16);
          salsa20_8(_X, x4);
          arraycopy(_X, 0, BY, Yi + i2 * 16, 16);
        }
        for (i2 = 0; i2 < r2; i2++) {
          arraycopy(BY, Yi + i2 * 2 * 16, BY, i2 * 16, 16);
        }
        for (i2 = 0; i2 < r2; i2++) {
          arraycopy(BY, Yi + (i2 * 2 + 1) * 16, BY, (i2 + r2) * 16, 16);
        }
      }
      function R3(a, b2) {
        return a << b2 | a >>> 32 - b2;
      }
      function salsa20_8(B3, x4) {
        arraycopy(B3, 0, x4, 0, 16);
        for (let i2 = 8; i2 > 0; i2 -= 2) {
          x4[4] ^= R3(x4[0] + x4[12], 7);
          x4[8] ^= R3(x4[4] + x4[0], 9);
          x4[12] ^= R3(x4[8] + x4[4], 13);
          x4[0] ^= R3(x4[12] + x4[8], 18);
          x4[9] ^= R3(x4[5] + x4[1], 7);
          x4[13] ^= R3(x4[9] + x4[5], 9);
          x4[1] ^= R3(x4[13] + x4[9], 13);
          x4[5] ^= R3(x4[1] + x4[13], 18);
          x4[14] ^= R3(x4[10] + x4[6], 7);
          x4[2] ^= R3(x4[14] + x4[10], 9);
          x4[6] ^= R3(x4[2] + x4[14], 13);
          x4[10] ^= R3(x4[6] + x4[2], 18);
          x4[3] ^= R3(x4[15] + x4[11], 7);
          x4[7] ^= R3(x4[3] + x4[15], 9);
          x4[11] ^= R3(x4[7] + x4[3], 13);
          x4[15] ^= R3(x4[11] + x4[7], 18);
          x4[1] ^= R3(x4[0] + x4[3], 7);
          x4[2] ^= R3(x4[1] + x4[0], 9);
          x4[3] ^= R3(x4[2] + x4[1], 13);
          x4[0] ^= R3(x4[3] + x4[2], 18);
          x4[6] ^= R3(x4[5] + x4[4], 7);
          x4[7] ^= R3(x4[6] + x4[5], 9);
          x4[4] ^= R3(x4[7] + x4[6], 13);
          x4[5] ^= R3(x4[4] + x4[7], 18);
          x4[11] ^= R3(x4[10] + x4[9], 7);
          x4[8] ^= R3(x4[11] + x4[10], 9);
          x4[9] ^= R3(x4[8] + x4[11], 13);
          x4[10] ^= R3(x4[9] + x4[8], 18);
          x4[12] ^= R3(x4[15] + x4[14], 7);
          x4[13] ^= R3(x4[12] + x4[15], 9);
          x4[14] ^= R3(x4[13] + x4[12], 13);
          x4[15] ^= R3(x4[14] + x4[13], 18);
        }
        for (let i2 = 0; i2 < 16; ++i2) {
          B3[i2] += x4[i2];
        }
      }
      function blockxor(S2, Si, D3, len) {
        for (let i2 = 0; i2 < len; i2++) {
          D3[i2] ^= S2[Si + i2];
        }
      }
      function arraycopy(src, srcPos, dest, destPos, length) {
        while (length--) {
          dest[destPos++] = src[srcPos++];
        }
      }
      function checkBufferish(o2) {
        if (!o2 || typeof o2.length !== "number") {
          return false;
        }
        for (let i2 = 0; i2 < o2.length; i2++) {
          const v7 = o2[i2];
          if (typeof v7 !== "number" || v7 % 1 || v7 < 0 || v7 >= 256) {
            return false;
          }
        }
        return true;
      }
      function ensureInteger(value2, name2) {
        if (typeof value2 !== "number" || value2 % 1) {
          throw new Error("invalid " + name2);
        }
        return value2;
      }
      function _scrypt(password, salt, N3, r2, p3, dkLen, callback) {
        N3 = ensureInteger(N3, "N");
        r2 = ensureInteger(r2, "r");
        p3 = ensureInteger(p3, "p");
        dkLen = ensureInteger(dkLen, "dkLen");
        if (N3 === 0 || (N3 & N3 - 1) !== 0) {
          throw new Error("N must be power of 2");
        }
        if (N3 > MAX_VALUE / 128 / r2) {
          throw new Error("N too large");
        }
        if (r2 > MAX_VALUE / 128 / p3) {
          throw new Error("r too large");
        }
        if (!checkBufferish(password)) {
          throw new Error("password must be an array or buffer");
        }
        password = Array.prototype.slice.call(password);
        if (!checkBufferish(salt)) {
          throw new Error("salt must be an array or buffer");
        }
        salt = Array.prototype.slice.call(salt);
        let b2 = PBKDF2_HMAC_SHA256_OneIter(password, salt, p3 * 128 * r2);
        const B3 = new Uint32Array(p3 * 32 * r2);
        for (let i2 = 0; i2 < B3.length; i2++) {
          const j3 = i2 * 4;
          B3[i2] = (b2[j3 + 3] & 255) << 24 | (b2[j3 + 2] & 255) << 16 | (b2[j3 + 1] & 255) << 8 | (b2[j3 + 0] & 255) << 0;
        }
        const XY = new Uint32Array(64 * r2);
        const V3 = new Uint32Array(32 * r2 * N3);
        const Yi = 32 * r2;
        const x4 = new Uint32Array(16);
        const _X = new Uint32Array(16);
        const totalOps = p3 * N3 * 2;
        let currentOp = 0;
        let lastPercent10 = null;
        let stop = false;
        let state = 0;
        let i02 = 0, i12;
        let Bi;
        const limit = callback ? parseInt(1e3 / r2) : 4294967295;
        const nextTick = typeof setImmediate !== "undefined" ? setImmediate : setTimeout;
        const incrementalSMix = function() {
          if (stop) {
            return callback(new Error("cancelled"), currentOp / totalOps);
          }
          let steps;
          switch (state) {
            case 0:
              Bi = i02 * 32 * r2;
              arraycopy(B3, Bi, XY, 0, Yi);
              state = 1;
              i12 = 0;
            case 1:
              steps = N3 - i12;
              if (steps > limit) {
                steps = limit;
              }
              for (let i2 = 0; i2 < steps; i2++) {
                arraycopy(XY, 0, V3, (i12 + i2) * Yi, Yi);
                blockmix_salsa8(XY, Yi, r2, x4, _X);
              }
              i12 += steps;
              currentOp += steps;
              if (callback) {
                const percent10 = parseInt(1e3 * currentOp / totalOps);
                if (percent10 !== lastPercent10) {
                  stop = callback(null, currentOp / totalOps);
                  if (stop) {
                    break;
                  }
                  lastPercent10 = percent10;
                }
              }
              if (i12 < N3) {
                break;
              }
              i12 = 0;
              state = 2;
            case 2:
              steps = N3 - i12;
              if (steps > limit) {
                steps = limit;
              }
              for (let i2 = 0; i2 < steps; i2++) {
                const offset = (2 * r2 - 1) * 16;
                const j3 = XY[offset] & N3 - 1;
                blockxor(V3, j3 * Yi, XY, Yi);
                blockmix_salsa8(XY, Yi, r2, x4, _X);
              }
              i12 += steps;
              currentOp += steps;
              if (callback) {
                const percent10 = parseInt(1e3 * currentOp / totalOps);
                if (percent10 !== lastPercent10) {
                  stop = callback(null, currentOp / totalOps);
                  if (stop) {
                    break;
                  }
                  lastPercent10 = percent10;
                }
              }
              if (i12 < N3) {
                break;
              }
              arraycopy(XY, 0, B3, Bi, Yi);
              i02++;
              if (i02 < p3) {
                state = 0;
                break;
              }
              b2 = [];
              for (let i2 = 0; i2 < B3.length; i2++) {
                b2.push(B3[i2] >> 0 & 255);
                b2.push(B3[i2] >> 8 & 255);
                b2.push(B3[i2] >> 16 & 255);
                b2.push(B3[i2] >> 24 & 255);
              }
              const derivedKey = PBKDF2_HMAC_SHA256_OneIter(password, b2, dkLen);
              if (callback) {
                callback(null, 1, derivedKey);
              }
              return derivedKey;
          }
          if (callback) {
            nextTick(incrementalSMix);
          }
        };
        if (!callback) {
          while (true) {
            const derivedKey = incrementalSMix();
            if (derivedKey != void 0) {
              return derivedKey;
            }
          }
        }
        incrementalSMix();
      }
      const lib = {
        scrypt: function(password, salt, N3, r2, p3, dkLen, progressCallback) {
          return new Promise(function(resolve, reject) {
            let lastProgress = 0;
            if (progressCallback) {
              progressCallback(0);
            }
            _scrypt(password, salt, N3, r2, p3, dkLen, function(error, progress, key2) {
              if (error) {
                reject(error);
              } else if (key2) {
                if (progressCallback && lastProgress !== 1) {
                  progressCallback(1);
                }
                resolve(new Uint8Array(key2));
              } else if (progressCallback && progress !== lastProgress) {
                lastProgress = progress;
                return progressCallback(progress);
              }
            });
          });
        },
        syncScrypt: function(password, salt, N3, r2, p3, dkLen) {
          return new Uint8Array(_scrypt(password, salt, N3, r2, p3, dkLen));
        }
      };
      if (typeof exports !== "undefined") {
        module.exports = lib;
      } else if (typeof define === "function" && define.amd) {
        define(lib);
      } else if (root) {
        if (root.scrypt) {
          root._scrypt = root.scrypt;
        }
        root.scrypt = lib;
      }
    })(exports);
  }
});

// node_modules/@ethersproject/json-wallets/lib.esm/keystore.js
function hasMnemonic(value2) {
  return value2 != null && value2.mnemonic && value2.mnemonic.phrase;
}
function _decrypt(data, key2, ciphertext) {
  const cipher = searchPath(data, "crypto/cipher");
  if (cipher === "aes-128-ctr") {
    const iv = looseArrayify(searchPath(data, "crypto/cipherparams/iv"));
    const counter = new import_aes_js2.default.Counter(iv);
    const aesCtr = new import_aes_js2.default.ModeOfOperation.ctr(key2, counter);
    return arrayify(aesCtr.decrypt(ciphertext));
  }
  return null;
}
function _getAccount(data, key2) {
  const ciphertext = looseArrayify(searchPath(data, "crypto/ciphertext"));
  const computedMAC = hexlify(keccak256(concat([key2.slice(16, 32), ciphertext]))).substring(2);
  if (computedMAC !== searchPath(data, "crypto/mac").toLowerCase()) {
    throw new Error("invalid password");
  }
  const privateKey = _decrypt(data, key2.slice(0, 16), ciphertext);
  if (!privateKey) {
    logger25.throwError("unsupported cipher", Logger.errors.UNSUPPORTED_OPERATION, {
      operation: "decrypt"
    });
  }
  const mnemonicKey = key2.slice(32, 64);
  const address = computeAddress(privateKey);
  if (data.address) {
    let check = data.address.toLowerCase();
    if (check.substring(0, 2) !== "0x") {
      check = "0x" + check;
    }
    if (getAddress(check) !== address) {
      throw new Error("address mismatch");
    }
  }
  const account = {
    _isKeystoreAccount: true,
    address,
    privateKey: hexlify(privateKey)
  };
  if (searchPath(data, "x-ethers/version") === "0.1") {
    const mnemonicCiphertext = looseArrayify(searchPath(data, "x-ethers/mnemonicCiphertext"));
    const mnemonicIv = looseArrayify(searchPath(data, "x-ethers/mnemonicCounter"));
    const mnemonicCounter = new import_aes_js2.default.Counter(mnemonicIv);
    const mnemonicAesCtr = new import_aes_js2.default.ModeOfOperation.ctr(mnemonicKey, mnemonicCounter);
    const path = searchPath(data, "x-ethers/path") || defaultPath;
    const locale = searchPath(data, "x-ethers/locale") || "en";
    const entropy = arrayify(mnemonicAesCtr.decrypt(mnemonicCiphertext));
    try {
      const mnemonic = entropyToMnemonic(entropy, locale);
      const node = HDNode.fromMnemonic(mnemonic, null, locale).derivePath(path);
      if (node.privateKey != account.privateKey) {
        throw new Error("mnemonic mismatch");
      }
      account.mnemonic = node.mnemonic;
    } catch (error) {
      if (error.code !== Logger.errors.INVALID_ARGUMENT || error.argument !== "wordlist") {
        throw error;
      }
    }
  }
  return new KeystoreAccount(account);
}
function pbkdf2Sync(passwordBytes, salt, count, dkLen, prfFunc) {
  return arrayify(pbkdf2(passwordBytes, salt, count, dkLen, prfFunc));
}
function pbkdf22(passwordBytes, salt, count, dkLen, prfFunc) {
  return Promise.resolve(pbkdf2Sync(passwordBytes, salt, count, dkLen, prfFunc));
}
function _computeKdfKey(data, password, pbkdf2Func, scryptFunc, progressCallback) {
  const passwordBytes = getPassword(password);
  const kdf = searchPath(data, "crypto/kdf");
  if (kdf && typeof kdf === "string") {
    const throwError = function(name2, value2) {
      return logger25.throwArgumentError("invalid key-derivation function parameters", name2, value2);
    };
    if (kdf.toLowerCase() === "scrypt") {
      const salt = looseArrayify(searchPath(data, "crypto/kdfparams/salt"));
      const N3 = parseInt(searchPath(data, "crypto/kdfparams/n"));
      const r2 = parseInt(searchPath(data, "crypto/kdfparams/r"));
      const p3 = parseInt(searchPath(data, "crypto/kdfparams/p"));
      if (!N3 || !r2 || !p3) {
        throwError("kdf", kdf);
      }
      if ((N3 & N3 - 1) !== 0) {
        throwError("N", N3);
      }
      const dkLen = parseInt(searchPath(data, "crypto/kdfparams/dklen"));
      if (dkLen !== 32) {
        throwError("dklen", dkLen);
      }
      return scryptFunc(passwordBytes, salt, N3, r2, p3, 64, progressCallback);
    } else if (kdf.toLowerCase() === "pbkdf2") {
      const salt = looseArrayify(searchPath(data, "crypto/kdfparams/salt"));
      let prfFunc = null;
      const prf = searchPath(data, "crypto/kdfparams/prf");
      if (prf === "hmac-sha256") {
        prfFunc = "sha256";
      } else if (prf === "hmac-sha512") {
        prfFunc = "sha512";
      } else {
        throwError("prf", prf);
      }
      const count = parseInt(searchPath(data, "crypto/kdfparams/c"));
      const dkLen = parseInt(searchPath(data, "crypto/kdfparams/dklen"));
      if (dkLen !== 32) {
        throwError("dklen", dkLen);
      }
      return pbkdf2Func(passwordBytes, salt, count, dkLen, prfFunc);
    }
  }
  return logger25.throwArgumentError("unsupported key-derivation function", "kdf", kdf);
}
function decryptSync(json, password) {
  const data = JSON.parse(json);
  const key2 = _computeKdfKey(data, password, pbkdf2Sync, import_scrypt_js.default.syncScrypt);
  return _getAccount(data, key2);
}
function decrypt2(json, password, progressCallback) {
  return __awaiter6(this, void 0, void 0, function* () {
    const data = JSON.parse(json);
    const key2 = yield _computeKdfKey(data, password, pbkdf22, import_scrypt_js.default.scrypt, progressCallback);
    return _getAccount(data, key2);
  });
}
function encrypt(account, password, options, progressCallback) {
  try {
    if (getAddress(account.address) !== computeAddress(account.privateKey)) {
      throw new Error("address/privateKey mismatch");
    }
    if (hasMnemonic(account)) {
      const mnemonic = account.mnemonic;
      const node = HDNode.fromMnemonic(mnemonic.phrase, null, mnemonic.locale).derivePath(mnemonic.path || defaultPath);
      if (node.privateKey != account.privateKey) {
        throw new Error("mnemonic mismatch");
      }
    }
  } catch (e) {
    return Promise.reject(e);
  }
  if (typeof options === "function" && !progressCallback) {
    progressCallback = options;
    options = {};
  }
  if (!options) {
    options = {};
  }
  const privateKey = arrayify(account.privateKey);
  const passwordBytes = getPassword(password);
  let entropy = null;
  let path = null;
  let locale = null;
  if (hasMnemonic(account)) {
    const srcMnemonic = account.mnemonic;
    entropy = arrayify(mnemonicToEntropy(srcMnemonic.phrase, srcMnemonic.locale || "en"));
    path = srcMnemonic.path || defaultPath;
    locale = srcMnemonic.locale || "en";
  }
  let client = options.client;
  if (!client) {
    client = "ethers.js";
  }
  let salt = null;
  if (options.salt) {
    salt = arrayify(options.salt);
  } else {
    salt = randomBytes(32);
    ;
  }
  let iv = null;
  if (options.iv) {
    iv = arrayify(options.iv);
    if (iv.length !== 16) {
      throw new Error("invalid iv");
    }
  } else {
    iv = randomBytes(16);
  }
  let uuidRandom = null;
  if (options.uuid) {
    uuidRandom = arrayify(options.uuid);
    if (uuidRandom.length !== 16) {
      throw new Error("invalid uuid");
    }
  } else {
    uuidRandom = randomBytes(16);
  }
  let N3 = 1 << 17, r2 = 8, p3 = 1;
  if (options.scrypt) {
    if (options.scrypt.N) {
      N3 = options.scrypt.N;
    }
    if (options.scrypt.r) {
      r2 = options.scrypt.r;
    }
    if (options.scrypt.p) {
      p3 = options.scrypt.p;
    }
  }
  return import_scrypt_js.default.scrypt(passwordBytes, salt, N3, r2, p3, 64, progressCallback).then((key2) => {
    key2 = arrayify(key2);
    const derivedKey = key2.slice(0, 16);
    const macPrefix = key2.slice(16, 32);
    const mnemonicKey = key2.slice(32, 64);
    const counter = new import_aes_js2.default.Counter(iv);
    const aesCtr = new import_aes_js2.default.ModeOfOperation.ctr(derivedKey, counter);
    const ciphertext = arrayify(aesCtr.encrypt(privateKey));
    const mac = keccak256(concat([macPrefix, ciphertext]));
    const data = {
      address: account.address.substring(2).toLowerCase(),
      id: uuidV4(uuidRandom),
      version: 3,
      Crypto: {
        cipher: "aes-128-ctr",
        cipherparams: {
          iv: hexlify(iv).substring(2)
        },
        ciphertext: hexlify(ciphertext).substring(2),
        kdf: "scrypt",
        kdfparams: {
          salt: hexlify(salt).substring(2),
          n: N3,
          dklen: 32,
          p: p3,
          r: r2
        },
        mac: mac.substring(2)
      }
    };
    if (entropy) {
      const mnemonicIv = randomBytes(16);
      const mnemonicCounter = new import_aes_js2.default.Counter(mnemonicIv);
      const mnemonicAesCtr = new import_aes_js2.default.ModeOfOperation.ctr(mnemonicKey, mnemonicCounter);
      const mnemonicCiphertext = arrayify(mnemonicAesCtr.encrypt(entropy));
      const now2 = new Date();
      const timestamp = now2.getUTCFullYear() + "-" + zpad(now2.getUTCMonth() + 1, 2) + "-" + zpad(now2.getUTCDate(), 2) + "T" + zpad(now2.getUTCHours(), 2) + "-" + zpad(now2.getUTCMinutes(), 2) + "-" + zpad(now2.getUTCSeconds(), 2) + ".0Z";
      data["x-ethers"] = {
        client,
        gethFilename: "UTC--" + timestamp + "--" + data.address,
        mnemonicCounter: hexlify(mnemonicIv).substring(2),
        mnemonicCiphertext: hexlify(mnemonicCiphertext).substring(2),
        path,
        locale,
        version: "0.1"
      };
    }
    return JSON.stringify(data);
  });
}
var import_aes_js2, import_scrypt_js, __awaiter6, logger25, KeystoreAccount;
var init_keystore = __esm({
  "node_modules/@ethersproject/json-wallets/lib.esm/keystore.js"() {
    init_define_process();
    import_aes_js2 = __toModule(require_aes_js());
    import_scrypt_js = __toModule(require_scrypt());
    init_lib7();
    init_lib2();
    init_lib20();
    init_lib5();
    init_lib18();
    init_lib21();
    init_lib4();
    init_lib15();
    init_utils();
    init_lib();
    init_version18();
    "use strict";
    __awaiter6 = function(thisArg, _arguments, P3, generator) {
      function adopt(value2) {
        return value2 instanceof P3 ? value2 : new P3(function(resolve) {
          resolve(value2);
        });
      }
      return new (P3 || (P3 = Promise))(function(resolve, reject) {
        function fulfilled(value2) {
          try {
            step(generator.next(value2));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value2) {
          try {
            step(generator["throw"](value2));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    logger25 = new Logger(version19);
    KeystoreAccount = class extends Description {
      isKeystoreAccount(value2) {
        return !!(value2 && value2._isKeystoreAccount);
      }
    };
  }
});

// node_modules/@ethersproject/json-wallets/lib.esm/index.js
var lib_exports17 = {};
__export(lib_exports17, {
  decryptCrowdsale: () => decrypt,
  decryptJsonWallet: () => decryptJsonWallet,
  decryptJsonWalletSync: () => decryptJsonWalletSync,
  decryptKeystore: () => decrypt2,
  decryptKeystoreSync: () => decryptSync,
  encryptKeystore: () => encrypt,
  getJsonWalletAddress: () => getJsonWalletAddress,
  isCrowdsaleWallet: () => isCrowdsaleWallet,
  isKeystoreWallet: () => isKeystoreWallet
});
function decryptJsonWallet(json, password, progressCallback) {
  if (isCrowdsaleWallet(json)) {
    if (progressCallback) {
      progressCallback(0);
    }
    const account = decrypt(json, password);
    if (progressCallback) {
      progressCallback(1);
    }
    return Promise.resolve(account);
  }
  if (isKeystoreWallet(json)) {
    return decrypt2(json, password, progressCallback);
  }
  return Promise.reject(new Error("invalid JSON wallet"));
}
function decryptJsonWalletSync(json, password) {
  if (isCrowdsaleWallet(json)) {
    return decrypt(json, password);
  }
  if (isKeystoreWallet(json)) {
    return decryptSync(json, password);
  }
  throw new Error("invalid JSON wallet");
}
var init_lib22 = __esm({
  "node_modules/@ethersproject/json-wallets/lib.esm/index.js"() {
    init_define_process();
    init_crowdsale();
    init_inspect();
    init_keystore();
    "use strict";
  }
});

// node_modules/@ethersproject/wallet/lib.esm/_version.js
var version20;
var init_version19 = __esm({
  "node_modules/@ethersproject/wallet/lib.esm/_version.js"() {
    init_define_process();
    version20 = "wallet/5.6.0";
  }
});

// node_modules/@ethersproject/wallet/lib.esm/index.js
var lib_exports18 = {};
__export(lib_exports18, {
  Wallet: () => Wallet,
  verifyMessage: () => verifyMessage,
  verifyTypedData: () => verifyTypedData
});
function isAccount(value2) {
  return value2 != null && isHexString(value2.privateKey, 32) && value2.address != null;
}
function hasMnemonic2(value2) {
  const mnemonic = value2.mnemonic;
  return mnemonic && mnemonic.phrase;
}
function verifyMessage(message, signature2) {
  return recoverAddress(hashMessage(message), signature2);
}
function verifyTypedData(domain, types, value2, signature2) {
  return recoverAddress(TypedDataEncoder.hash(domain, types, value2), signature2);
}
var __awaiter7, logger26, Wallet;
var init_lib23 = __esm({
  "node_modules/@ethersproject/wallet/lib.esm/index.js"() {
    init_define_process();
    init_lib7();
    init_lib12();
    init_lib13();
    init_lib2();
    init_lib10();
    init_lib20();
    init_lib5();
    init_lib4();
    init_lib21();
    init_lib14();
    init_lib22();
    init_lib15();
    init_lib();
    init_version19();
    "use strict";
    __awaiter7 = function(thisArg, _arguments, P3, generator) {
      function adopt(value2) {
        return value2 instanceof P3 ? value2 : new P3(function(resolve) {
          resolve(value2);
        });
      }
      return new (P3 || (P3 = Promise))(function(resolve, reject) {
        function fulfilled(value2) {
          try {
            step(generator.next(value2));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value2) {
          try {
            step(generator["throw"](value2));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    logger26 = new Logger(version20);
    Wallet = class extends Signer {
      constructor(privateKey, provider) {
        logger26.checkNew(new.target, Wallet);
        super();
        if (isAccount(privateKey)) {
          const signingKey = new SigningKey(privateKey.privateKey);
          defineReadOnly(this, "_signingKey", () => signingKey);
          defineReadOnly(this, "address", computeAddress(this.publicKey));
          if (this.address !== getAddress(privateKey.address)) {
            logger26.throwArgumentError("privateKey/address mismatch", "privateKey", "[REDACTED]");
          }
          if (hasMnemonic2(privateKey)) {
            const srcMnemonic = privateKey.mnemonic;
            defineReadOnly(this, "_mnemonic", () => ({
              phrase: srcMnemonic.phrase,
              path: srcMnemonic.path || defaultPath,
              locale: srcMnemonic.locale || "en"
            }));
            const mnemonic = this.mnemonic;
            const node = HDNode.fromMnemonic(mnemonic.phrase, null, mnemonic.locale).derivePath(mnemonic.path);
            if (computeAddress(node.privateKey) !== this.address) {
              logger26.throwArgumentError("mnemonic/address mismatch", "privateKey", "[REDACTED]");
            }
          } else {
            defineReadOnly(this, "_mnemonic", () => null);
          }
        } else {
          if (SigningKey.isSigningKey(privateKey)) {
            if (privateKey.curve !== "secp256k1") {
              logger26.throwArgumentError("unsupported curve; must be secp256k1", "privateKey", "[REDACTED]");
            }
            defineReadOnly(this, "_signingKey", () => privateKey);
          } else {
            if (typeof privateKey === "string") {
              if (privateKey.match(/^[0-9a-f]*$/i) && privateKey.length === 64) {
                privateKey = "0x" + privateKey;
              }
            }
            const signingKey = new SigningKey(privateKey);
            defineReadOnly(this, "_signingKey", () => signingKey);
          }
          defineReadOnly(this, "_mnemonic", () => null);
          defineReadOnly(this, "address", computeAddress(this.publicKey));
        }
        if (provider && !Provider.isProvider(provider)) {
          logger26.throwArgumentError("invalid provider", "provider", provider);
        }
        defineReadOnly(this, "provider", provider || null);
      }
      get mnemonic() {
        return this._mnemonic();
      }
      get privateKey() {
        return this._signingKey().privateKey;
      }
      get publicKey() {
        return this._signingKey().publicKey;
      }
      getAddress() {
        return Promise.resolve(this.address);
      }
      connect(provider) {
        return new Wallet(this, provider);
      }
      signTransaction(transaction) {
        return resolveProperties(transaction).then((tx) => {
          if (tx.from != null) {
            if (getAddress(tx.from) !== this.address) {
              logger26.throwArgumentError("transaction from address mismatch", "transaction.from", transaction.from);
            }
            delete tx.from;
          }
          const signature2 = this._signingKey().signDigest(keccak256(serialize(tx)));
          return serialize(tx, signature2);
        });
      }
      signMessage(message) {
        return __awaiter7(this, void 0, void 0, function* () {
          return joinSignature(this._signingKey().signDigest(hashMessage(message)));
        });
      }
      _signTypedData(domain, types, value2) {
        return __awaiter7(this, void 0, void 0, function* () {
          const populated = yield TypedDataEncoder.resolveNames(domain, types, value2, (name2) => {
            if (this.provider == null) {
              logger26.throwError("cannot resolve ENS names without a provider", Logger.errors.UNSUPPORTED_OPERATION, {
                operation: "resolveName",
                value: name2
              });
            }
            return this.provider.resolveName(name2);
          });
          return joinSignature(this._signingKey().signDigest(TypedDataEncoder.hash(populated.domain, types, populated.value)));
        });
      }
      encrypt(password, options, progressCallback) {
        if (typeof options === "function" && !progressCallback) {
          progressCallback = options;
          options = {};
        }
        if (progressCallback && typeof progressCallback !== "function") {
          throw new Error("invalid callback");
        }
        if (!options) {
          options = {};
        }
        return encrypt(this, password, options, progressCallback);
      }
      static createRandom(options) {
        let entropy = randomBytes(16);
        if (!options) {
          options = {};
        }
        if (options.extraEntropy) {
          entropy = arrayify(hexDataSlice(keccak256(concat([entropy, options.extraEntropy])), 0, 16));
        }
        const mnemonic = entropyToMnemonic(entropy, options.locale);
        return Wallet.fromMnemonic(mnemonic, options.path, options.locale);
      }
      static fromEncryptedJson(json, password, progressCallback) {
        return decryptJsonWallet(json, password, progressCallback).then((account) => {
          return new Wallet(account);
        });
      }
      static fromEncryptedJsonSync(json, password) {
        return new Wallet(decryptJsonWalletSync(json, password));
      }
      static fromMnemonic(mnemonic, path, wordlist2) {
        if (!path) {
          path = defaultPath;
        }
        return new Wallet(HDNode.fromMnemonic(mnemonic, null, wordlist2).derivePath(path));
      }
    };
  }
});

// node_modules/@ethersproject/base64/lib.esm/base64.js
function decode2(textData) {
  textData = atob(textData);
  const data = [];
  for (let i2 = 0; i2 < textData.length; i2++) {
    data.push(textData.charCodeAt(i2));
  }
  return arrayify(data);
}
function encode3(data) {
  data = arrayify(data);
  let textData = "";
  for (let i2 = 0; i2 < data.length; i2++) {
    textData += String.fromCharCode(data[i2]);
  }
  return btoa(textData);
}
var init_base64 = __esm({
  "node_modules/@ethersproject/base64/lib.esm/base64.js"() {
    init_define_process();
    init_lib2();
    "use strict";
  }
});

// node_modules/@ethersproject/base64/lib.esm/index.js
var lib_exports19 = {};
__export(lib_exports19, {
  decode: () => decode2,
  encode: () => encode3
});
var init_lib24 = __esm({
  "node_modules/@ethersproject/base64/lib.esm/index.js"() {
    init_define_process();
    init_base64();
    "use strict";
  }
});

// node_modules/@ethersproject/web/lib.esm/_version.js
var version22;
var init_version20 = __esm({
  "node_modules/@ethersproject/web/lib.esm/_version.js"() {
    init_define_process();
    version22 = "web/5.6.0";
  }
});

// node_modules/@ethersproject/web/lib.esm/geturl.js
function getUrl(href, options) {
  return __awaiter8(this, void 0, void 0, function* () {
    if (options == null) {
      options = {};
    }
    const request = {
      method: options.method || "GET",
      headers: options.headers || {},
      body: options.body || void 0
    };
    if (options.skipFetchSetup !== true) {
      request.mode = "cors";
      request.cache = "no-cache";
      request.credentials = "same-origin";
      request.redirect = "follow";
      request.referrer = "client";
    }
    ;
    const response = yield fetch(href, request);
    const body = yield response.arrayBuffer();
    const headers = {};
    if (response.headers.forEach) {
      response.headers.forEach((value2, key2) => {
        headers[key2.toLowerCase()] = value2;
      });
    } else {
      response.headers.keys().forEach((key2) => {
        headers[key2.toLowerCase()] = response.headers.get(key2);
      });
    }
    return {
      headers,
      statusCode: response.status,
      statusMessage: response.statusText,
      body: arrayify(new Uint8Array(body))
    };
  });
}
var __awaiter8;
var init_geturl = __esm({
  "node_modules/@ethersproject/web/lib.esm/geturl.js"() {
    init_define_process();
    init_lib2();
    "use strict";
    __awaiter8 = function(thisArg, _arguments, P3, generator) {
      function adopt(value2) {
        return value2 instanceof P3 ? value2 : new P3(function(resolve) {
          resolve(value2);
        });
      }
      return new (P3 || (P3 = Promise))(function(resolve, reject) {
        function fulfilled(value2) {
          try {
            step(generator.next(value2));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value2) {
          try {
            step(generator["throw"](value2));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
  }
});

// node_modules/@ethersproject/web/lib.esm/index.js
var lib_exports20 = {};
__export(lib_exports20, {
  _fetchData: () => _fetchData,
  fetchJson: () => fetchJson,
  poll: () => poll
});
function staller(duration) {
  return new Promise((resolve) => {
    setTimeout(resolve, duration);
  });
}
function bodyify(value2, type) {
  if (value2 == null) {
    return null;
  }
  if (typeof value2 === "string") {
    return value2;
  }
  if (isBytesLike(value2)) {
    if (type && (type.split("/")[0] === "text" || type.split(";")[0].trim() === "application/json")) {
      try {
        return toUtf8String(value2);
      } catch (error) {
      }
      ;
    }
    return hexlify(value2);
  }
  return value2;
}
function _fetchData(connection, body, processFunc) {
  const attemptLimit = typeof connection === "object" && connection.throttleLimit != null ? connection.throttleLimit : 12;
  logger28.assertArgument(attemptLimit > 0 && attemptLimit % 1 === 0, "invalid connection throttle limit", "connection.throttleLimit", attemptLimit);
  const throttleCallback = typeof connection === "object" ? connection.throttleCallback : null;
  const throttleSlotInterval = typeof connection === "object" && typeof connection.throttleSlotInterval === "number" ? connection.throttleSlotInterval : 100;
  logger28.assertArgument(throttleSlotInterval > 0 && throttleSlotInterval % 1 === 0, "invalid connection throttle slot interval", "connection.throttleSlotInterval", throttleSlotInterval);
  const errorPassThrough = typeof connection === "object" ? !!connection.errorPassThrough : false;
  const headers = {};
  let url = null;
  const options = {
    method: "GET"
  };
  let allow304 = false;
  let timeout = 2 * 60 * 1e3;
  if (typeof connection === "string") {
    url = connection;
  } else if (typeof connection === "object") {
    if (connection == null || connection.url == null) {
      logger28.throwArgumentError("missing URL", "connection.url", connection);
    }
    url = connection.url;
    if (typeof connection.timeout === "number" && connection.timeout > 0) {
      timeout = connection.timeout;
    }
    if (connection.headers) {
      for (const key2 in connection.headers) {
        headers[key2.toLowerCase()] = { key: key2, value: String(connection.headers[key2]) };
        if (["if-none-match", "if-modified-since"].indexOf(key2.toLowerCase()) >= 0) {
          allow304 = true;
        }
      }
    }
    options.allowGzip = !!connection.allowGzip;
    if (connection.user != null && connection.password != null) {
      if (url.substring(0, 6) !== "https:" && connection.allowInsecureAuthentication !== true) {
        logger28.throwError("basic authentication requires a secure https url", Logger.errors.INVALID_ARGUMENT, { argument: "url", url, user: connection.user, password: "[REDACTED]" });
      }
      const authorization = connection.user + ":" + connection.password;
      headers["authorization"] = {
        key: "Authorization",
        value: "Basic " + encode3(toUtf8Bytes(authorization))
      };
    }
    if (connection.skipFetchSetup != null) {
      options.skipFetchSetup = !!connection.skipFetchSetup;
    }
  }
  const reData = new RegExp("^data:([a-z0-9-]+/[a-z0-9-]+);base64,(.*)$", "i");
  const dataMatch = url ? url.match(reData) : null;
  if (dataMatch) {
    try {
      const response = {
        statusCode: 200,
        statusMessage: "OK",
        headers: { "content-type": dataMatch[1] },
        body: decode2(dataMatch[2])
      };
      let result = response.body;
      if (processFunc) {
        result = processFunc(response.body, response);
      }
      return Promise.resolve(result);
    } catch (error) {
      logger28.throwError("processing response error", Logger.errors.SERVER_ERROR, {
        body: bodyify(dataMatch[1], dataMatch[2]),
        error,
        requestBody: null,
        requestMethod: "GET",
        url
      });
    }
  }
  if (body) {
    options.method = "POST";
    options.body = body;
    if (headers["content-type"] == null) {
      headers["content-type"] = { key: "Content-Type", value: "application/octet-stream" };
    }
    if (headers["content-length"] == null) {
      headers["content-length"] = { key: "Content-Length", value: String(body.length) };
    }
  }
  const flatHeaders = {};
  Object.keys(headers).forEach((key2) => {
    const header = headers[key2];
    flatHeaders[header.key] = header.value;
  });
  options.headers = flatHeaders;
  const runningTimeout = function() {
    let timer2 = null;
    const promise = new Promise(function(resolve, reject) {
      if (timeout) {
        timer2 = setTimeout(() => {
          if (timer2 == null) {
            return;
          }
          timer2 = null;
          reject(logger28.makeError("timeout", Logger.errors.TIMEOUT, {
            requestBody: bodyify(options.body, flatHeaders["content-type"]),
            requestMethod: options.method,
            timeout,
            url
          }));
        }, timeout);
      }
    });
    const cancel = function() {
      if (timer2 == null) {
        return;
      }
      clearTimeout(timer2);
      timer2 = null;
    };
    return { promise, cancel };
  }();
  const runningFetch = function() {
    return __awaiter9(this, void 0, void 0, function* () {
      for (let attempt = 0; attempt < attemptLimit; attempt++) {
        let response = null;
        try {
          response = yield getUrl(url, options);
          if (attempt < attemptLimit) {
            if (response.statusCode === 301 || response.statusCode === 302) {
              const location = response.headers.location || "";
              if (options.method === "GET" && location.match(/^https:/)) {
                url = response.headers.location;
                continue;
              }
            } else if (response.statusCode === 429) {
              let tryAgain = true;
              if (throttleCallback) {
                tryAgain = yield throttleCallback(attempt, url);
              }
              if (tryAgain) {
                let stall3 = 0;
                const retryAfter = response.headers["retry-after"];
                if (typeof retryAfter === "string" && retryAfter.match(/^[1-9][0-9]*$/)) {
                  stall3 = parseInt(retryAfter) * 1e3;
                } else {
                  stall3 = throttleSlotInterval * parseInt(String(Math.random() * Math.pow(2, attempt)));
                }
                yield staller(stall3);
                continue;
              }
            }
          }
        } catch (error) {
          response = error.response;
          if (response == null) {
            runningTimeout.cancel();
            logger28.throwError("missing response", Logger.errors.SERVER_ERROR, {
              requestBody: bodyify(options.body, flatHeaders["content-type"]),
              requestMethod: options.method,
              serverError: error,
              url
            });
          }
        }
        let body2 = response.body;
        if (allow304 && response.statusCode === 304) {
          body2 = null;
        } else if (!errorPassThrough && (response.statusCode < 200 || response.statusCode >= 300)) {
          runningTimeout.cancel();
          logger28.throwError("bad response", Logger.errors.SERVER_ERROR, {
            status: response.statusCode,
            headers: response.headers,
            body: bodyify(body2, response.headers ? response.headers["content-type"] : null),
            requestBody: bodyify(options.body, flatHeaders["content-type"]),
            requestMethod: options.method,
            url
          });
        }
        if (processFunc) {
          try {
            const result = yield processFunc(body2, response);
            runningTimeout.cancel();
            return result;
          } catch (error) {
            if (error.throttleRetry && attempt < attemptLimit) {
              let tryAgain = true;
              if (throttleCallback) {
                tryAgain = yield throttleCallback(attempt, url);
              }
              if (tryAgain) {
                const timeout2 = throttleSlotInterval * parseInt(String(Math.random() * Math.pow(2, attempt)));
                yield staller(timeout2);
                continue;
              }
            }
            runningTimeout.cancel();
            logger28.throwError("processing response error", Logger.errors.SERVER_ERROR, {
              body: bodyify(body2, response.headers ? response.headers["content-type"] : null),
              error,
              requestBody: bodyify(options.body, flatHeaders["content-type"]),
              requestMethod: options.method,
              url
            });
          }
        }
        runningTimeout.cancel();
        return body2;
      }
      return logger28.throwError("failed response", Logger.errors.SERVER_ERROR, {
        requestBody: bodyify(options.body, flatHeaders["content-type"]),
        requestMethod: options.method,
        url
      });
    });
  }();
  return Promise.race([runningTimeout.promise, runningFetch]);
}
function fetchJson(connection, json, processFunc) {
  let processJsonFunc = (value2, response) => {
    let result = null;
    if (value2 != null) {
      try {
        result = JSON.parse(toUtf8String(value2));
      } catch (error) {
        logger28.throwError("invalid JSON", Logger.errors.SERVER_ERROR, {
          body: value2,
          error
        });
      }
    }
    if (processFunc) {
      result = processFunc(result, response);
    }
    return result;
  };
  let body = null;
  if (json != null) {
    body = toUtf8Bytes(json);
    const updated = typeof connection === "string" ? { url: connection } : shallowCopy(connection);
    if (updated.headers) {
      const hasContentType = Object.keys(updated.headers).filter((k4) => k4.toLowerCase() === "content-type").length !== 0;
      if (!hasContentType) {
        updated.headers = shallowCopy(updated.headers);
        updated.headers["content-type"] = "application/json";
      }
    } else {
      updated.headers = { "content-type": "application/json" };
    }
    connection = updated;
  }
  return _fetchData(connection, body, processJsonFunc);
}
function poll(func, options) {
  if (!options) {
    options = {};
  }
  options = shallowCopy(options);
  if (options.floor == null) {
    options.floor = 0;
  }
  if (options.ceiling == null) {
    options.ceiling = 1e4;
  }
  if (options.interval == null) {
    options.interval = 250;
  }
  return new Promise(function(resolve, reject) {
    let timer2 = null;
    let done = false;
    const cancel = () => {
      if (done) {
        return false;
      }
      done = true;
      if (timer2) {
        clearTimeout(timer2);
      }
      return true;
    };
    if (options.timeout) {
      timer2 = setTimeout(() => {
        if (cancel()) {
          reject(new Error("timeout"));
        }
      }, options.timeout);
    }
    const retryLimit = options.retryLimit;
    let attempt = 0;
    function check() {
      return func().then(function(result) {
        if (result !== void 0) {
          if (cancel()) {
            resolve(result);
          }
        } else if (options.oncePoll) {
          options.oncePoll.once("poll", check);
        } else if (options.onceBlock) {
          options.onceBlock.once("block", check);
        } else if (!done) {
          attempt++;
          if (attempt > retryLimit) {
            if (cancel()) {
              reject(new Error("retry limit reached"));
            }
            return;
          }
          let timeout = options.interval * parseInt(String(Math.random() * Math.pow(2, attempt)));
          if (timeout < options.floor) {
            timeout = options.floor;
          }
          if (timeout > options.ceiling) {
            timeout = options.ceiling;
          }
          setTimeout(check, timeout);
        }
        return null;
      }, function(error) {
        if (cancel()) {
          reject(error);
        }
      });
    }
    check();
  });
}
var __awaiter9, logger28;
var init_lib25 = __esm({
  "node_modules/@ethersproject/web/lib.esm/index.js"() {
    init_define_process();
    init_lib24();
    init_lib2();
    init_lib4();
    init_lib9();
    init_lib();
    init_version20();
    init_geturl();
    "use strict";
    __awaiter9 = function(thisArg, _arguments, P3, generator) {
      function adopt(value2) {
        return value2 instanceof P3 ? value2 : new P3(function(resolve) {
          resolve(value2);
        });
      }
      return new (P3 || (P3 = Promise))(function(resolve, reject) {
        function fulfilled(value2) {
          try {
            step(generator.next(value2));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value2) {
          try {
            step(generator["throw"](value2));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    logger28 = new Logger(version22);
  }
});

// node_modules/bech32/index.js
var require_bech32 = __commonJS({
  "node_modules/bech32/index.js"(exports, module) {
    init_define_process();
    "use strict";
    var ALPHABET = "qpzry9x8gf2tvdw0s3jn54khce6mua7l";
    var ALPHABET_MAP = {};
    for (var z3 = 0; z3 < ALPHABET.length; z3++) {
      x4 = ALPHABET.charAt(z3);
      if (ALPHABET_MAP[x4] !== void 0)
        throw new TypeError(x4 + " is ambiguous");
      ALPHABET_MAP[x4] = z3;
    }
    var x4;
    function polymodStep(pre) {
      var b2 = pre >> 25;
      return (pre & 33554431) << 5 ^ -(b2 >> 0 & 1) & 996825010 ^ -(b2 >> 1 & 1) & 642813549 ^ -(b2 >> 2 & 1) & 513874426 ^ -(b2 >> 3 & 1) & 1027748829 ^ -(b2 >> 4 & 1) & 705979059;
    }
    function prefixChk(prefix2) {
      var chk = 1;
      for (var i2 = 0; i2 < prefix2.length; ++i2) {
        var c2 = prefix2.charCodeAt(i2);
        if (c2 < 33 || c2 > 126)
          return "Invalid prefix (" + prefix2 + ")";
        chk = polymodStep(chk) ^ c2 >> 5;
      }
      chk = polymodStep(chk);
      for (i2 = 0; i2 < prefix2.length; ++i2) {
        var v7 = prefix2.charCodeAt(i2);
        chk = polymodStep(chk) ^ v7 & 31;
      }
      return chk;
    }
    function encode4(prefix2, words2, LIMIT) {
      LIMIT = LIMIT || 90;
      if (prefix2.length + 7 + words2.length > LIMIT)
        throw new TypeError("Exceeds length limit");
      prefix2 = prefix2.toLowerCase();
      var chk = prefixChk(prefix2);
      if (typeof chk === "string")
        throw new Error(chk);
      var result = prefix2 + "1";
      for (var i2 = 0; i2 < words2.length; ++i2) {
        var x5 = words2[i2];
        if (x5 >> 5 !== 0)
          throw new Error("Non 5-bit word");
        chk = polymodStep(chk) ^ x5;
        result += ALPHABET.charAt(x5);
      }
      for (i2 = 0; i2 < 6; ++i2) {
        chk = polymodStep(chk);
      }
      chk ^= 1;
      for (i2 = 0; i2 < 6; ++i2) {
        var v7 = chk >> (5 - i2) * 5 & 31;
        result += ALPHABET.charAt(v7);
      }
      return result;
    }
    function __decode(str, LIMIT) {
      LIMIT = LIMIT || 90;
      if (str.length < 8)
        return str + " too short";
      if (str.length > LIMIT)
        return "Exceeds length limit";
      var lowered = str.toLowerCase();
      var uppered = str.toUpperCase();
      if (str !== lowered && str !== uppered)
        return "Mixed-case string " + str;
      str = lowered;
      var split = str.lastIndexOf("1");
      if (split === -1)
        return "No separator character for " + str;
      if (split === 0)
        return "Missing prefix for " + str;
      var prefix2 = str.slice(0, split);
      var wordChars = str.slice(split + 1);
      if (wordChars.length < 6)
        return "Data too short";
      var chk = prefixChk(prefix2);
      if (typeof chk === "string")
        return chk;
      var words2 = [];
      for (var i2 = 0; i2 < wordChars.length; ++i2) {
        var c2 = wordChars.charAt(i2);
        var v7 = ALPHABET_MAP[c2];
        if (v7 === void 0)
          return "Unknown character " + c2;
        chk = polymodStep(chk) ^ v7;
        if (i2 + 6 >= wordChars.length)
          continue;
        words2.push(v7);
      }
      if (chk !== 1)
        return "Invalid checksum for " + str;
      return { prefix: prefix2, words: words2 };
    }
    function decodeUnsafe() {
      var res = __decode.apply(null, arguments);
      if (typeof res === "object")
        return res;
    }
    function decode3(str) {
      var res = __decode.apply(null, arguments);
      if (typeof res === "object")
        return res;
      throw new Error(res);
    }
    function convert(data, inBits, outBits, pad) {
      var value2 = 0;
      var bits = 0;
      var maxV = (1 << outBits) - 1;
      var result = [];
      for (var i2 = 0; i2 < data.length; ++i2) {
        value2 = value2 << inBits | data[i2];
        bits += inBits;
        while (bits >= outBits) {
          bits -= outBits;
          result.push(value2 >> bits & maxV);
        }
      }
      if (pad) {
        if (bits > 0) {
          result.push(value2 << outBits - bits & maxV);
        }
      } else {
        if (bits >= inBits)
          return "Excess padding";
        if (value2 << outBits - bits & maxV)
          return "Non-zero padding";
      }
      return result;
    }
    function toWordsUnsafe(bytes) {
      var res = convert(bytes, 8, 5, true);
      if (Array.isArray(res))
        return res;
    }
    function toWords(bytes) {
      var res = convert(bytes, 8, 5, true);
      if (Array.isArray(res))
        return res;
      throw new Error(res);
    }
    function fromWordsUnsafe(words2) {
      var res = convert(words2, 5, 8, false);
      if (Array.isArray(res))
        return res;
    }
    function fromWords(words2) {
      var res = convert(words2, 5, 8, false);
      if (Array.isArray(res))
        return res;
      throw new Error(res);
    }
    module.exports = {
      decodeUnsafe,
      decode: decode3,
      encode: encode4,
      toWordsUnsafe,
      toWords,
      fromWordsUnsafe,
      fromWords
    };
  }
});

// node_modules/@ethersproject/solidity/lib.esm/_version.js
var version24;
var init_version21 = __esm({
  "node_modules/@ethersproject/solidity/lib.esm/_version.js"() {
    init_define_process();
    version24 = "solidity/5.6.0";
  }
});

// node_modules/@ethersproject/solidity/lib.esm/index.js
var lib_exports22 = {};
__export(lib_exports22, {
  keccak256: () => keccak2562,
  pack: () => pack2,
  sha256: () => sha2562
});
function _pack(type, value2, isArray) {
  switch (type) {
    case "address":
      if (isArray) {
        return zeroPad(value2, 32);
      }
      return arrayify(value2);
    case "string":
      return toUtf8Bytes(value2);
    case "bytes":
      return arrayify(value2);
    case "bool":
      value2 = value2 ? "0x01" : "0x00";
      if (isArray) {
        return zeroPad(value2, 32);
      }
      return arrayify(value2);
  }
  let match = type.match(regexNumber);
  if (match) {
    let size = parseInt(match[2] || "256");
    if (match[2] && String(size) !== match[2] || size % 8 !== 0 || size === 0 || size > 256) {
      logger44.throwArgumentError("invalid number type", "type", type);
    }
    if (isArray) {
      size = 256;
    }
    value2 = BigNumber.from(value2).toTwos(size);
    return zeroPad(value2, size / 8);
  }
  match = type.match(regexBytes);
  if (match) {
    const size = parseInt(match[1]);
    if (String(size) !== match[1] || size === 0 || size > 32) {
      logger44.throwArgumentError("invalid bytes type", "type", type);
    }
    if (arrayify(value2).byteLength !== size) {
      logger44.throwArgumentError(`invalid value for ${type}`, "value", value2);
    }
    if (isArray) {
      return arrayify((value2 + Zeros2).substring(0, 66));
    }
    return value2;
  }
  match = type.match(regexArray);
  if (match && Array.isArray(value2)) {
    const baseType = match[1];
    const count = parseInt(match[2] || String(value2.length));
    if (count != value2.length) {
      logger44.throwArgumentError(`invalid array length for ${type}`, "value", value2);
    }
    const result = [];
    value2.forEach(function(value3) {
      result.push(_pack(baseType, value3, true));
    });
    return concat(result);
  }
  return logger44.throwArgumentError("invalid type", "type", type);
}
function pack2(types, values) {
  if (types.length != values.length) {
    logger44.throwArgumentError("wrong number of values; expected ${ types.length }", "values", values);
  }
  const tight = [];
  types.forEach(function(type, index) {
    tight.push(_pack(type, values[index]));
  });
  return hexlify(concat(tight));
}
function keccak2562(types, values) {
  return keccak256(pack2(types, values));
}
function sha2562(types, values) {
  return sha256(pack2(types, values));
}
var regexBytes, regexNumber, regexArray, Zeros2, logger44;
var init_lib26 = __esm({
  "node_modules/@ethersproject/solidity/lib.esm/index.js"() {
    init_define_process();
    init_lib3();
    init_lib2();
    init_lib5();
    init_lib17();
    init_lib9();
    init_lib();
    init_version21();
    "use strict";
    regexBytes = new RegExp("^bytes([0-9]+)$");
    regexNumber = new RegExp("^(u?int)([0-9]*)$");
    regexArray = new RegExp("^(.*)\\[([0-9]*)\\]$");
    Zeros2 = "0000000000000000000000000000000000000000000000000000000000000000";
    logger44 = new Logger(version24);
  }
});

// node_modules/@ethersproject/units/lib.esm/_version.js
var version25;
var init_version22 = __esm({
  "node_modules/@ethersproject/units/lib.esm/_version.js"() {
    init_define_process();
    version25 = "units/5.6.0";
  }
});

// node_modules/@ethersproject/units/lib.esm/index.js
var lib_exports23 = {};
__export(lib_exports23, {
  commify: () => commify,
  formatEther: () => formatEther,
  formatUnits: () => formatUnits,
  parseEther: () => parseEther,
  parseUnits: () => parseUnits
});
function commify(value2) {
  const comps = String(value2).split(".");
  if (comps.length > 2 || !comps[0].match(/^-?[0-9]*$/) || comps[1] && !comps[1].match(/^[0-9]*$/) || value2 === "." || value2 === "-.") {
    logger45.throwArgumentError("invalid value", "value", value2);
  }
  let whole = comps[0];
  let negative = "";
  if (whole.substring(0, 1) === "-") {
    negative = "-";
    whole = whole.substring(1);
  }
  while (whole.substring(0, 1) === "0") {
    whole = whole.substring(1);
  }
  if (whole === "") {
    whole = "0";
  }
  let suffix = "";
  if (comps.length === 2) {
    suffix = "." + (comps[1] || "0");
  }
  while (suffix.length > 2 && suffix[suffix.length - 1] === "0") {
    suffix = suffix.substring(0, suffix.length - 1);
  }
  const formatted = [];
  while (whole.length) {
    if (whole.length <= 3) {
      formatted.unshift(whole);
      break;
    } else {
      const index = whole.length - 3;
      formatted.unshift(whole.substring(index));
      whole = whole.substring(0, index);
    }
  }
  return negative + formatted.join(",") + suffix;
}
function formatUnits(value2, unitName) {
  if (typeof unitName === "string") {
    const index = names.indexOf(unitName);
    if (index !== -1) {
      unitName = 3 * index;
    }
  }
  return formatFixed(value2, unitName != null ? unitName : 18);
}
function parseUnits(value2, unitName) {
  if (typeof value2 !== "string") {
    logger45.throwArgumentError("value must be a string", "value", value2);
  }
  if (typeof unitName === "string") {
    const index = names.indexOf(unitName);
    if (index !== -1) {
      unitName = 3 * index;
    }
  }
  return parseFixed(value2, unitName != null ? unitName : 18);
}
function formatEther(wei) {
  return formatUnits(wei, 18);
}
function parseEther(ether) {
  return parseUnits(ether, 18);
}
var logger45, names;
var init_lib27 = __esm({
  "node_modules/@ethersproject/units/lib.esm/index.js"() {
    init_define_process();
    init_lib3();
    init_lib();
    init_version22();
    "use strict";
    logger45 = new Logger(version25);
    names = [
      "wei",
      "kwei",
      "mwei",
      "gwei",
      "szabo",
      "finney",
      "ether"
    ];
  }
});

// node_modules/ethers/lib/utils.js
var require_utils2 = __commonJS({
  "node_modules/ethers/lib/utils.js"(exports) {
    init_define_process();
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m3, k4, k22) {
      if (k22 === void 0)
        k22 = k4;
      Object.defineProperty(o2, k22, { enumerable: true, get: function() {
        return m3[k4];
      } });
    } : function(o2, m3, k4, k22) {
      if (k22 === void 0)
        k22 = k4;
      o2[k22] = m3[k4];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v7) {
      Object.defineProperty(o2, "default", { enumerable: true, value: v7 });
    } : function(o2, v7) {
      o2["default"] = v7;
    });
    var __importStar = exports && exports.__importStar || function(mod2) {
      if (mod2 && mod2.__esModule)
        return mod2;
      var result = {};
      if (mod2 != null) {
        for (var k4 in mod2)
          if (k4 !== "default" && Object.prototype.hasOwnProperty.call(mod2, k4))
            __createBinding(result, mod2, k4);
      }
      __setModuleDefault(result, mod2);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.formatBytes32String = exports.Utf8ErrorFuncs = exports.toUtf8String = exports.toUtf8CodePoints = exports.toUtf8Bytes = exports._toEscapedUtf8String = exports.nameprep = exports.hexDataSlice = exports.hexDataLength = exports.hexZeroPad = exports.hexValue = exports.hexStripZeros = exports.hexConcat = exports.isHexString = exports.hexlify = exports.base64 = exports.base58 = exports.TransactionDescription = exports.LogDescription = exports.Interface = exports.SigningKey = exports.HDNode = exports.defaultPath = exports.isBytesLike = exports.isBytes = exports.zeroPad = exports.stripZeros = exports.concat = exports.arrayify = exports.shallowCopy = exports.resolveProperties = exports.getStatic = exports.defineReadOnly = exports.deepCopy = exports.checkProperties = exports.poll = exports.fetchJson = exports._fetchData = exports.RLP = exports.Logger = exports.checkResultErrors = exports.FormatTypes = exports.ParamType = exports.FunctionFragment = exports.EventFragment = exports.ErrorFragment = exports.ConstructorFragment = exports.Fragment = exports.defaultAbiCoder = exports.AbiCoder = void 0;
    exports.Indexed = exports.Utf8ErrorReason = exports.UnicodeNormalizationForm = exports.SupportedAlgorithm = exports.mnemonicToSeed = exports.isValidMnemonic = exports.entropyToMnemonic = exports.mnemonicToEntropy = exports.getAccountPath = exports.verifyTypedData = exports.verifyMessage = exports.recoverPublicKey = exports.computePublicKey = exports.recoverAddress = exports.computeAddress = exports.getJsonWalletAddress = exports.TransactionTypes = exports.serializeTransaction = exports.parseTransaction = exports.accessListify = exports.joinSignature = exports.splitSignature = exports.soliditySha256 = exports.solidityKeccak256 = exports.solidityPack = exports.shuffled = exports.randomBytes = exports.sha512 = exports.sha256 = exports.ripemd160 = exports.keccak256 = exports.computeHmac = exports.commify = exports.parseUnits = exports.formatUnits = exports.parseEther = exports.formatEther = exports.isAddress = exports.getCreate2Address = exports.getContractAddress = exports.getIcapAddress = exports.getAddress = exports._TypedDataEncoder = exports.id = exports.isValidName = exports.namehash = exports.hashMessage = exports.dnsEncode = exports.parseBytes32String = void 0;
    var abi_1 = (init_lib11(), lib_exports10);
    Object.defineProperty(exports, "AbiCoder", { enumerable: true, get: function() {
      return abi_1.AbiCoder;
    } });
    Object.defineProperty(exports, "checkResultErrors", { enumerable: true, get: function() {
      return abi_1.checkResultErrors;
    } });
    Object.defineProperty(exports, "ConstructorFragment", { enumerable: true, get: function() {
      return abi_1.ConstructorFragment;
    } });
    Object.defineProperty(exports, "defaultAbiCoder", { enumerable: true, get: function() {
      return abi_1.defaultAbiCoder;
    } });
    Object.defineProperty(exports, "ErrorFragment", { enumerable: true, get: function() {
      return abi_1.ErrorFragment;
    } });
    Object.defineProperty(exports, "EventFragment", { enumerable: true, get: function() {
      return abi_1.EventFragment;
    } });
    Object.defineProperty(exports, "FormatTypes", { enumerable: true, get: function() {
      return abi_1.FormatTypes;
    } });
    Object.defineProperty(exports, "Fragment", { enumerable: true, get: function() {
      return abi_1.Fragment;
    } });
    Object.defineProperty(exports, "FunctionFragment", { enumerable: true, get: function() {
      return abi_1.FunctionFragment;
    } });
    Object.defineProperty(exports, "Indexed", { enumerable: true, get: function() {
      return abi_1.Indexed;
    } });
    Object.defineProperty(exports, "Interface", { enumerable: true, get: function() {
      return abi_1.Interface;
    } });
    Object.defineProperty(exports, "LogDescription", { enumerable: true, get: function() {
      return abi_1.LogDescription;
    } });
    Object.defineProperty(exports, "ParamType", { enumerable: true, get: function() {
      return abi_1.ParamType;
    } });
    Object.defineProperty(exports, "TransactionDescription", { enumerable: true, get: function() {
      return abi_1.TransactionDescription;
    } });
    var address_1 = (init_lib7(), lib_exports6);
    Object.defineProperty(exports, "getAddress", { enumerable: true, get: function() {
      return address_1.getAddress;
    } });
    Object.defineProperty(exports, "getCreate2Address", { enumerable: true, get: function() {
      return address_1.getCreate2Address;
    } });
    Object.defineProperty(exports, "getContractAddress", { enumerable: true, get: function() {
      return address_1.getContractAddress;
    } });
    Object.defineProperty(exports, "getIcapAddress", { enumerable: true, get: function() {
      return address_1.getIcapAddress;
    } });
    Object.defineProperty(exports, "isAddress", { enumerable: true, get: function() {
      return address_1.isAddress;
    } });
    var base64 = __importStar((init_lib24(), lib_exports19));
    exports.base64 = base64;
    var basex_1 = (init_lib16(), lib_exports13);
    Object.defineProperty(exports, "base58", { enumerable: true, get: function() {
      return basex_1.Base58;
    } });
    var bytes_1 = (init_lib2(), lib_exports2);
    Object.defineProperty(exports, "arrayify", { enumerable: true, get: function() {
      return bytes_1.arrayify;
    } });
    Object.defineProperty(exports, "concat", { enumerable: true, get: function() {
      return bytes_1.concat;
    } });
    Object.defineProperty(exports, "hexConcat", { enumerable: true, get: function() {
      return bytes_1.hexConcat;
    } });
    Object.defineProperty(exports, "hexDataSlice", { enumerable: true, get: function() {
      return bytes_1.hexDataSlice;
    } });
    Object.defineProperty(exports, "hexDataLength", { enumerable: true, get: function() {
      return bytes_1.hexDataLength;
    } });
    Object.defineProperty(exports, "hexlify", { enumerable: true, get: function() {
      return bytes_1.hexlify;
    } });
    Object.defineProperty(exports, "hexStripZeros", { enumerable: true, get: function() {
      return bytes_1.hexStripZeros;
    } });
    Object.defineProperty(exports, "hexValue", { enumerable: true, get: function() {
      return bytes_1.hexValue;
    } });
    Object.defineProperty(exports, "hexZeroPad", { enumerable: true, get: function() {
      return bytes_1.hexZeroPad;
    } });
    Object.defineProperty(exports, "isBytes", { enumerable: true, get: function() {
      return bytes_1.isBytes;
    } });
    Object.defineProperty(exports, "isBytesLike", { enumerable: true, get: function() {
      return bytes_1.isBytesLike;
    } });
    Object.defineProperty(exports, "isHexString", { enumerable: true, get: function() {
      return bytes_1.isHexString;
    } });
    Object.defineProperty(exports, "joinSignature", { enumerable: true, get: function() {
      return bytes_1.joinSignature;
    } });
    Object.defineProperty(exports, "zeroPad", { enumerable: true, get: function() {
      return bytes_1.zeroPad;
    } });
    Object.defineProperty(exports, "splitSignature", { enumerable: true, get: function() {
      return bytes_1.splitSignature;
    } });
    Object.defineProperty(exports, "stripZeros", { enumerable: true, get: function() {
      return bytes_1.stripZeros;
    } });
    var hash_1 = (init_lib10(), lib_exports9);
    Object.defineProperty(exports, "_TypedDataEncoder", { enumerable: true, get: function() {
      return hash_1._TypedDataEncoder;
    } });
    Object.defineProperty(exports, "dnsEncode", { enumerable: true, get: function() {
      return hash_1.dnsEncode;
    } });
    Object.defineProperty(exports, "hashMessage", { enumerable: true, get: function() {
      return hash_1.hashMessage;
    } });
    Object.defineProperty(exports, "id", { enumerable: true, get: function() {
      return hash_1.id;
    } });
    Object.defineProperty(exports, "isValidName", { enumerable: true, get: function() {
      return hash_1.isValidName;
    } });
    Object.defineProperty(exports, "namehash", { enumerable: true, get: function() {
      return hash_1.namehash;
    } });
    var hdnode_1 = (init_lib20(), lib_exports15);
    Object.defineProperty(exports, "defaultPath", { enumerable: true, get: function() {
      return hdnode_1.defaultPath;
    } });
    Object.defineProperty(exports, "entropyToMnemonic", { enumerable: true, get: function() {
      return hdnode_1.entropyToMnemonic;
    } });
    Object.defineProperty(exports, "getAccountPath", { enumerable: true, get: function() {
      return hdnode_1.getAccountPath;
    } });
    Object.defineProperty(exports, "HDNode", { enumerable: true, get: function() {
      return hdnode_1.HDNode;
    } });
    Object.defineProperty(exports, "isValidMnemonic", { enumerable: true, get: function() {
      return hdnode_1.isValidMnemonic;
    } });
    Object.defineProperty(exports, "mnemonicToEntropy", { enumerable: true, get: function() {
      return hdnode_1.mnemonicToEntropy;
    } });
    Object.defineProperty(exports, "mnemonicToSeed", { enumerable: true, get: function() {
      return hdnode_1.mnemonicToSeed;
    } });
    var json_wallets_1 = (init_lib22(), lib_exports17);
    Object.defineProperty(exports, "getJsonWalletAddress", { enumerable: true, get: function() {
      return json_wallets_1.getJsonWalletAddress;
    } });
    var keccak256_1 = (init_lib5(), lib_exports4);
    Object.defineProperty(exports, "keccak256", { enumerable: true, get: function() {
      return keccak256_1.keccak256;
    } });
    var logger_1 = (init_lib(), lib_exports);
    Object.defineProperty(exports, "Logger", { enumerable: true, get: function() {
      return logger_1.Logger;
    } });
    var sha2_1 = (init_lib17(), lib_exports14);
    Object.defineProperty(exports, "computeHmac", { enumerable: true, get: function() {
      return sha2_1.computeHmac;
    } });
    Object.defineProperty(exports, "ripemd160", { enumerable: true, get: function() {
      return sha2_1.ripemd160;
    } });
    Object.defineProperty(exports, "sha256", { enumerable: true, get: function() {
      return sha2_1.sha256;
    } });
    Object.defineProperty(exports, "sha512", { enumerable: true, get: function() {
      return sha2_1.sha512;
    } });
    var solidity_1 = (init_lib26(), lib_exports22);
    Object.defineProperty(exports, "solidityKeccak256", { enumerable: true, get: function() {
      return solidity_1.keccak256;
    } });
    Object.defineProperty(exports, "solidityPack", { enumerable: true, get: function() {
      return solidity_1.pack;
    } });
    Object.defineProperty(exports, "soliditySha256", { enumerable: true, get: function() {
      return solidity_1.sha256;
    } });
    var random_1 = (init_lib21(), lib_exports16);
    Object.defineProperty(exports, "randomBytes", { enumerable: true, get: function() {
      return random_1.randomBytes;
    } });
    Object.defineProperty(exports, "shuffled", { enumerable: true, get: function() {
      return random_1.shuffled;
    } });
    var properties_1 = (init_lib4(), lib_exports3);
    Object.defineProperty(exports, "checkProperties", { enumerable: true, get: function() {
      return properties_1.checkProperties;
    } });
    Object.defineProperty(exports, "deepCopy", { enumerable: true, get: function() {
      return properties_1.deepCopy;
    } });
    Object.defineProperty(exports, "defineReadOnly", { enumerable: true, get: function() {
      return properties_1.defineReadOnly;
    } });
    Object.defineProperty(exports, "getStatic", { enumerable: true, get: function() {
      return properties_1.getStatic;
    } });
    Object.defineProperty(exports, "resolveProperties", { enumerable: true, get: function() {
      return properties_1.resolveProperties;
    } });
    Object.defineProperty(exports, "shallowCopy", { enumerable: true, get: function() {
      return properties_1.shallowCopy;
    } });
    var RLP2 = __importStar((init_lib6(), lib_exports5));
    exports.RLP = RLP2;
    var signing_key_1 = (init_lib14(), lib_exports11);
    Object.defineProperty(exports, "computePublicKey", { enumerable: true, get: function() {
      return signing_key_1.computePublicKey;
    } });
    Object.defineProperty(exports, "recoverPublicKey", { enumerable: true, get: function() {
      return signing_key_1.recoverPublicKey;
    } });
    Object.defineProperty(exports, "SigningKey", { enumerable: true, get: function() {
      return signing_key_1.SigningKey;
    } });
    var strings_1 = (init_lib9(), lib_exports8);
    Object.defineProperty(exports, "formatBytes32String", { enumerable: true, get: function() {
      return strings_1.formatBytes32String;
    } });
    Object.defineProperty(exports, "nameprep", { enumerable: true, get: function() {
      return strings_1.nameprep;
    } });
    Object.defineProperty(exports, "parseBytes32String", { enumerable: true, get: function() {
      return strings_1.parseBytes32String;
    } });
    Object.defineProperty(exports, "_toEscapedUtf8String", { enumerable: true, get: function() {
      return strings_1._toEscapedUtf8String;
    } });
    Object.defineProperty(exports, "toUtf8Bytes", { enumerable: true, get: function() {
      return strings_1.toUtf8Bytes;
    } });
    Object.defineProperty(exports, "toUtf8CodePoints", { enumerable: true, get: function() {
      return strings_1.toUtf8CodePoints;
    } });
    Object.defineProperty(exports, "toUtf8String", { enumerable: true, get: function() {
      return strings_1.toUtf8String;
    } });
    Object.defineProperty(exports, "Utf8ErrorFuncs", { enumerable: true, get: function() {
      return strings_1.Utf8ErrorFuncs;
    } });
    var transactions_1 = (init_lib15(), lib_exports12);
    Object.defineProperty(exports, "accessListify", { enumerable: true, get: function() {
      return transactions_1.accessListify;
    } });
    Object.defineProperty(exports, "computeAddress", { enumerable: true, get: function() {
      return transactions_1.computeAddress;
    } });
    Object.defineProperty(exports, "parseTransaction", { enumerable: true, get: function() {
      return transactions_1.parse;
    } });
    Object.defineProperty(exports, "recoverAddress", { enumerable: true, get: function() {
      return transactions_1.recoverAddress;
    } });
    Object.defineProperty(exports, "serializeTransaction", { enumerable: true, get: function() {
      return transactions_1.serialize;
    } });
    Object.defineProperty(exports, "TransactionTypes", { enumerable: true, get: function() {
      return transactions_1.TransactionTypes;
    } });
    var units_1 = (init_lib27(), lib_exports23);
    Object.defineProperty(exports, "commify", { enumerable: true, get: function() {
      return units_1.commify;
    } });
    Object.defineProperty(exports, "formatEther", { enumerable: true, get: function() {
      return units_1.formatEther;
    } });
    Object.defineProperty(exports, "parseEther", { enumerable: true, get: function() {
      return units_1.parseEther;
    } });
    Object.defineProperty(exports, "formatUnits", { enumerable: true, get: function() {
      return units_1.formatUnits;
    } });
    Object.defineProperty(exports, "parseUnits", { enumerable: true, get: function() {
      return units_1.parseUnits;
    } });
    var wallet_1 = (init_lib23(), lib_exports18);
    Object.defineProperty(exports, "verifyMessage", { enumerable: true, get: function() {
      return wallet_1.verifyMessage;
    } });
    Object.defineProperty(exports, "verifyTypedData", { enumerable: true, get: function() {
      return wallet_1.verifyTypedData;
    } });
    var web_1 = (init_lib25(), lib_exports20);
    Object.defineProperty(exports, "_fetchData", { enumerable: true, get: function() {
      return web_1._fetchData;
    } });
    Object.defineProperty(exports, "fetchJson", { enumerable: true, get: function() {
      return web_1.fetchJson;
    } });
    Object.defineProperty(exports, "poll", { enumerable: true, get: function() {
      return web_1.poll;
    } });
    var sha2_2 = (init_lib17(), lib_exports14);
    Object.defineProperty(exports, "SupportedAlgorithm", { enumerable: true, get: function() {
      return sha2_2.SupportedAlgorithm;
    } });
    var strings_2 = (init_lib9(), lib_exports8);
    Object.defineProperty(exports, "UnicodeNormalizationForm", { enumerable: true, get: function() {
      return strings_2.UnicodeNormalizationForm;
    } });
    Object.defineProperty(exports, "Utf8ErrorReason", { enumerable: true, get: function() {
      return strings_2.Utf8ErrorReason;
    } });
  }
});

// node_modules/eventemitter2/lib/eventemitter2.js
var require_eventemitter2 = __commonJS({
  "node_modules/eventemitter2/lib/eventemitter2.js"(exports, module) {
    init_define_process();
    !function(undefined2) {
      var hasOwnProperty = Object.hasOwnProperty;
      var isArray = Array.isArray ? Array.isArray : function _isArray(obj) {
        return Object.prototype.toString.call(obj) === "[object Array]";
      };
      var defaultMaxListeners = 10;
      var nextTickSupported = typeof define_process_default == "object" && typeof define_process_default.nextTick == "function";
      var symbolsSupported = typeof Symbol === "function";
      var reflectSupported = typeof Reflect === "object";
      var setImmediateSupported = typeof setImmediate === "function";
      var _setImmediate = setImmediateSupported ? setImmediate : setTimeout;
      var ownKeys = symbolsSupported ? reflectSupported && typeof Reflect.ownKeys === "function" ? Reflect.ownKeys : function(obj) {
        var arr = Object.getOwnPropertyNames(obj);
        arr.push.apply(arr, Object.getOwnPropertySymbols(obj));
        return arr;
      } : Object.keys;
      function init2() {
        this._events = {};
        if (this._conf) {
          configure.call(this, this._conf);
        }
      }
      function configure(conf) {
        if (conf) {
          this._conf = conf;
          conf.delimiter && (this.delimiter = conf.delimiter);
          if (conf.maxListeners !== undefined2) {
            this._maxListeners = conf.maxListeners;
          }
          conf.wildcard && (this.wildcard = conf.wildcard);
          conf.newListener && (this._newListener = conf.newListener);
          conf.removeListener && (this._removeListener = conf.removeListener);
          conf.verboseMemoryLeak && (this.verboseMemoryLeak = conf.verboseMemoryLeak);
          conf.ignoreErrors && (this.ignoreErrors = conf.ignoreErrors);
          if (this.wildcard) {
            this.listenerTree = {};
          }
        }
      }
      function logPossibleMemoryLeak(count, eventName) {
        var errorMsg = "(node) warning: possible EventEmitter memory leak detected. " + count + " listeners added. Use emitter.setMaxListeners() to increase limit.";
        if (this.verboseMemoryLeak) {
          errorMsg += " Event name: " + eventName + ".";
        }
        if (typeof define_process_default !== "undefined" && define_process_default.emitWarning) {
          var e = new Error(errorMsg);
          e.name = "MaxListenersExceededWarning";
          e.emitter = this;
          e.count = count;
          define_process_default.emitWarning(e);
        } else {
          console.error(errorMsg);
          if (console.trace) {
            console.trace();
          }
        }
      }
      var toArray = function(a, b2, c2) {
        var n = arguments.length;
        switch (n) {
          case 0:
            return [];
          case 1:
            return [a];
          case 2:
            return [a, b2];
          case 3:
            return [a, b2, c2];
          default:
            var arr = new Array(n);
            while (n--) {
              arr[n] = arguments[n];
            }
            return arr;
        }
      };
      function toObject(keys, values) {
        var obj = {};
        var key2;
        var len = keys.length;
        var valuesCount = values ? value.length : 0;
        for (var i2 = 0; i2 < len; i2++) {
          key2 = keys[i2];
          obj[key2] = i2 < valuesCount ? values[i2] : undefined2;
        }
        return obj;
      }
      function TargetObserver(emitter, target, options) {
        this._emitter = emitter;
        this._target = target;
        this._listeners = {};
        this._listenersCount = 0;
        var on2, off;
        if (options.on || options.off) {
          on2 = options.on;
          off = options.off;
        }
        if (target.addEventListener) {
          on2 = target.addEventListener;
          off = target.removeEventListener;
        } else if (target.addListener) {
          on2 = target.addListener;
          off = target.removeListener;
        } else if (target.on) {
          on2 = target.on;
          off = target.off;
        }
        if (!on2 && !off) {
          throw Error("target does not implement any known event API");
        }
        if (typeof on2 !== "function") {
          throw TypeError("on method must be a function");
        }
        if (typeof off !== "function") {
          throw TypeError("off method must be a function");
        }
        this._on = on2;
        this._off = off;
        var _observers = emitter._observers;
        if (_observers) {
          _observers.push(this);
        } else {
          emitter._observers = [this];
        }
      }
      Object.assign(TargetObserver.prototype, {
        subscribe: function(event, localEvent, reducer) {
          var observer = this;
          var target = this._target;
          var emitter = this._emitter;
          var listeners = this._listeners;
          var handler = function() {
            var args = toArray.apply(null, arguments);
            var eventObj = {
              data: args,
              name: localEvent,
              original: event
            };
            if (reducer) {
              var result = reducer.call(target, eventObj);
              if (result !== false) {
                emitter.emit.apply(emitter, [eventObj.name].concat(args));
              }
              return;
            }
            emitter.emit.apply(emitter, [localEvent].concat(args));
          };
          if (listeners[event]) {
            throw Error("Event '" + event + "' is already listening");
          }
          this._listenersCount++;
          if (emitter._newListener && emitter._removeListener && !observer._onNewListener) {
            this._onNewListener = function(_event) {
              if (_event === localEvent && listeners[event] === null) {
                listeners[event] = handler;
                observer._on.call(target, event, handler);
              }
            };
            emitter.on("newListener", this._onNewListener);
            this._onRemoveListener = function(_event) {
              if (_event === localEvent && !emitter.hasListeners(_event) && listeners[event]) {
                listeners[event] = null;
                observer._off.call(target, event, handler);
              }
            };
            listeners[event] = null;
            emitter.on("removeListener", this._onRemoveListener);
          } else {
            listeners[event] = handler;
            observer._on.call(target, event, handler);
          }
        },
        unsubscribe: function(event) {
          var observer = this;
          var listeners = this._listeners;
          var emitter = this._emitter;
          var handler;
          var events;
          var off = this._off;
          var target = this._target;
          var i2;
          if (event && typeof event !== "string") {
            throw TypeError("event must be a string");
          }
          function clearRefs() {
            if (observer._onNewListener) {
              emitter.off("newListener", observer._onNewListener);
              emitter.off("removeListener", observer._onRemoveListener);
              observer._onNewListener = null;
              observer._onRemoveListener = null;
            }
            var index = findTargetIndex.call(emitter, observer);
            emitter._observers.splice(index, 1);
          }
          if (event) {
            handler = listeners[event];
            if (!handler)
              return;
            off.call(target, event, handler);
            delete listeners[event];
            if (!--this._listenersCount) {
              clearRefs();
            }
          } else {
            events = ownKeys(listeners);
            i2 = events.length;
            while (i2-- > 0) {
              event = events[i2];
              off.call(target, event, listeners[event]);
            }
            this._listeners = {};
            this._listenersCount = 0;
            clearRefs();
          }
        }
      });
      function resolveOptions(options, schema, reducers, allowUnknown) {
        var computedOptions = Object.assign({}, schema);
        if (!options)
          return computedOptions;
        if (typeof options !== "object") {
          throw TypeError("options must be an object");
        }
        var keys = Object.keys(options);
        var length = keys.length;
        var option, value2;
        var reducer;
        function reject(reason) {
          throw Error('Invalid "' + option + '" option value' + (reason ? ". Reason: " + reason : ""));
        }
        for (var i2 = 0; i2 < length; i2++) {
          option = keys[i2];
          if (!allowUnknown && !hasOwnProperty.call(schema, option)) {
            throw Error('Unknown "' + option + '" option');
          }
          value2 = options[option];
          if (value2 !== undefined2) {
            reducer = reducers[option];
            computedOptions[option] = reducer ? reducer(value2, reject) : value2;
          }
        }
        return computedOptions;
      }
      function constructorReducer(value2, reject) {
        if (typeof value2 !== "function" || !value2.hasOwnProperty("prototype")) {
          reject("value must be a constructor");
        }
        return value2;
      }
      function makeTypeReducer(types) {
        var message = "value must be type of " + types.join("|");
        var len = types.length;
        var firstType = types[0];
        var secondType = types[1];
        if (len === 1) {
          return function(v7, reject) {
            if (typeof v7 === firstType) {
              return v7;
            }
            reject(message);
          };
        }
        if (len === 2) {
          return function(v7, reject) {
            var kind = typeof v7;
            if (kind === firstType || kind === secondType)
              return v7;
            reject(message);
          };
        }
        return function(v7, reject) {
          var kind = typeof v7;
          var i2 = len;
          while (i2-- > 0) {
            if (kind === types[i2])
              return v7;
          }
          reject(message);
        };
      }
      var functionReducer = makeTypeReducer(["function"]);
      var objectFunctionReducer = makeTypeReducer(["object", "function"]);
      function makeCancelablePromise(Promise2, executor, options) {
        var isCancelable;
        var callbacks;
        var timer2 = 0;
        var subscriptionClosed;
        var promise = new Promise2(function(resolve, reject, onCancel) {
          options = resolveOptions(options, {
            timeout: 0,
            overload: false
          }, {
            timeout: function(value2, reject2) {
              value2 *= 1;
              if (typeof value2 !== "number" || value2 < 0 || !Number.isFinite(value2)) {
                reject2("timeout must be a positive number");
              }
              return value2;
            }
          });
          isCancelable = !options.overload && typeof Promise2.prototype.cancel === "function" && typeof onCancel === "function";
          function cleanup() {
            if (callbacks) {
              callbacks = null;
            }
            if (timer2) {
              clearTimeout(timer2);
              timer2 = 0;
            }
          }
          var _resolve = function(value2) {
            cleanup();
            resolve(value2);
          };
          var _reject = function(err) {
            cleanup();
            reject(err);
          };
          if (isCancelable) {
            executor(_resolve, _reject, onCancel);
          } else {
            callbacks = [function(reason) {
              _reject(reason || Error("canceled"));
            }];
            executor(_resolve, _reject, function(cb) {
              if (subscriptionClosed) {
                throw Error("Unable to subscribe on cancel event asynchronously");
              }
              if (typeof cb !== "function") {
                throw TypeError("onCancel callback must be a function");
              }
              callbacks.push(cb);
            });
            subscriptionClosed = true;
          }
          if (options.timeout > 0) {
            timer2 = setTimeout(function() {
              var reason = Error("timeout");
              reason.code = "ETIMEDOUT";
              timer2 = 0;
              promise.cancel(reason);
              reject(reason);
            }, options.timeout);
          }
        });
        if (!isCancelable) {
          promise.cancel = function(reason) {
            if (!callbacks) {
              return;
            }
            var length = callbacks.length;
            for (var i2 = 1; i2 < length; i2++) {
              callbacks[i2](reason);
            }
            callbacks[0](reason);
            callbacks = null;
          };
        }
        return promise;
      }
      function findTargetIndex(observer) {
        var observers = this._observers;
        if (!observers) {
          return -1;
        }
        var len = observers.length;
        for (var i2 = 0; i2 < len; i2++) {
          if (observers[i2]._target === observer)
            return i2;
        }
        return -1;
      }
      function searchListenerTree(handlers, type, tree, i2, typeLength) {
        if (!tree) {
          return null;
        }
        if (i2 === 0) {
          var kind = typeof type;
          if (kind === "string") {
            var ns, n, l2 = 0, j3 = 0, delimiter = this.delimiter, dl = delimiter.length;
            if ((n = type.indexOf(delimiter)) !== -1) {
              ns = new Array(5);
              do {
                ns[l2++] = type.slice(j3, n);
                j3 = n + dl;
              } while ((n = type.indexOf(delimiter, j3)) !== -1);
              ns[l2++] = type.slice(j3);
              type = ns;
              typeLength = l2;
            } else {
              type = [type];
              typeLength = 1;
            }
          } else if (kind === "object") {
            typeLength = type.length;
          } else {
            type = [type];
            typeLength = 1;
          }
        }
        var listeners = null, branch, xTree, xxTree, isolatedBranch, endReached, currentType = type[i2], nextType = type[i2 + 1], branches, _listeners;
        if (i2 === typeLength) {
          if (tree._listeners) {
            if (typeof tree._listeners === "function") {
              handlers && handlers.push(tree._listeners);
              listeners = [tree];
            } else {
              handlers && handlers.push.apply(handlers, tree._listeners);
              listeners = [tree];
            }
          }
        } else {
          if (currentType === "*") {
            branches = ownKeys(tree);
            n = branches.length;
            while (n-- > 0) {
              branch = branches[n];
              if (branch !== "_listeners") {
                _listeners = searchListenerTree(handlers, type, tree[branch], i2 + 1, typeLength);
                if (_listeners) {
                  if (listeners) {
                    listeners.push.apply(listeners, _listeners);
                  } else {
                    listeners = _listeners;
                  }
                }
              }
            }
            return listeners;
          } else if (currentType === "**") {
            endReached = i2 + 1 === typeLength || i2 + 2 === typeLength && nextType === "*";
            if (endReached && tree._listeners) {
              listeners = searchListenerTree(handlers, type, tree, typeLength, typeLength);
            }
            branches = ownKeys(tree);
            n = branches.length;
            while (n-- > 0) {
              branch = branches[n];
              if (branch !== "_listeners") {
                if (branch === "*" || branch === "**") {
                  if (tree[branch]._listeners && !endReached) {
                    _listeners = searchListenerTree(handlers, type, tree[branch], typeLength, typeLength);
                    if (_listeners) {
                      if (listeners) {
                        listeners.push.apply(listeners, _listeners);
                      } else {
                        listeners = _listeners;
                      }
                    }
                  }
                  _listeners = searchListenerTree(handlers, type, tree[branch], i2, typeLength);
                } else if (branch === nextType) {
                  _listeners = searchListenerTree(handlers, type, tree[branch], i2 + 2, typeLength);
                } else {
                  _listeners = searchListenerTree(handlers, type, tree[branch], i2, typeLength);
                }
                if (_listeners) {
                  if (listeners) {
                    listeners.push.apply(listeners, _listeners);
                  } else {
                    listeners = _listeners;
                  }
                }
              }
            }
            return listeners;
          } else if (tree[currentType]) {
            listeners = searchListenerTree(handlers, type, tree[currentType], i2 + 1, typeLength);
          }
        }
        xTree = tree["*"];
        if (xTree) {
          searchListenerTree(handlers, type, xTree, i2 + 1, typeLength);
        }
        xxTree = tree["**"];
        if (xxTree) {
          if (i2 < typeLength) {
            if (xxTree._listeners) {
              searchListenerTree(handlers, type, xxTree, typeLength, typeLength);
            }
            branches = ownKeys(xxTree);
            n = branches.length;
            while (n-- > 0) {
              branch = branches[n];
              if (branch !== "_listeners") {
                if (branch === nextType) {
                  searchListenerTree(handlers, type, xxTree[branch], i2 + 2, typeLength);
                } else if (branch === currentType) {
                  searchListenerTree(handlers, type, xxTree[branch], i2 + 1, typeLength);
                } else {
                  isolatedBranch = {};
                  isolatedBranch[branch] = xxTree[branch];
                  searchListenerTree(handlers, type, { "**": isolatedBranch }, i2 + 1, typeLength);
                }
              }
            }
          } else if (xxTree._listeners) {
            searchListenerTree(handlers, type, xxTree, typeLength, typeLength);
          } else if (xxTree["*"] && xxTree["*"]._listeners) {
            searchListenerTree(handlers, type, xxTree["*"], typeLength, typeLength);
          }
        }
        return listeners;
      }
      function growListenerTree(type, listener, prepend) {
        var len = 0, j3 = 0, i2, delimiter = this.delimiter, dl = delimiter.length, ns;
        if (typeof type === "string") {
          if ((i2 = type.indexOf(delimiter)) !== -1) {
            ns = new Array(5);
            do {
              ns[len++] = type.slice(j3, i2);
              j3 = i2 + dl;
            } while ((i2 = type.indexOf(delimiter, j3)) !== -1);
            ns[len++] = type.slice(j3);
          } else {
            ns = [type];
            len = 1;
          }
        } else {
          ns = type;
          len = type.length;
        }
        if (len > 1) {
          for (i2 = 0; i2 + 1 < len; i2++) {
            if (ns[i2] === "**" && ns[i2 + 1] === "**") {
              return;
            }
          }
        }
        var tree = this.listenerTree, name2;
        for (i2 = 0; i2 < len; i2++) {
          name2 = ns[i2];
          tree = tree[name2] || (tree[name2] = {});
          if (i2 === len - 1) {
            if (!tree._listeners) {
              tree._listeners = listener;
            } else {
              if (typeof tree._listeners === "function") {
                tree._listeners = [tree._listeners];
              }
              if (prepend) {
                tree._listeners.unshift(listener);
              } else {
                tree._listeners.push(listener);
              }
              if (!tree._listeners.warned && this._maxListeners > 0 && tree._listeners.length > this._maxListeners) {
                tree._listeners.warned = true;
                logPossibleMemoryLeak.call(this, tree._listeners.length, name2);
              }
            }
            return true;
          }
        }
        return true;
      }
      function collectTreeEvents(tree, events, root, asArray) {
        var branches = ownKeys(tree);
        var i2 = branches.length;
        var branch, branchName, path;
        var hasListeners = tree["_listeners"];
        var isArrayPath;
        while (i2-- > 0) {
          branchName = branches[i2];
          branch = tree[branchName];
          if (branchName === "_listeners") {
            path = root;
          } else {
            path = root ? root.concat(branchName) : [branchName];
          }
          isArrayPath = asArray || typeof branchName === "symbol";
          hasListeners && events.push(isArrayPath ? path : path.join(this.delimiter));
          if (typeof branch === "object") {
            collectTreeEvents.call(this, branch, events, path, isArrayPath);
          }
        }
        return events;
      }
      function recursivelyGarbageCollect(root) {
        var keys = ownKeys(root);
        var i2 = keys.length;
        var obj, key2, flag;
        while (i2-- > 0) {
          key2 = keys[i2];
          obj = root[key2];
          if (obj) {
            flag = true;
            if (key2 !== "_listeners" && !recursivelyGarbageCollect(obj)) {
              delete root[key2];
            }
          }
        }
        return flag;
      }
      function Listener(emitter, event, listener) {
        this.emitter = emitter;
        this.event = event;
        this.listener = listener;
      }
      Listener.prototype.off = function() {
        this.emitter.off(this.event, this.listener);
        return this;
      };
      function setupListener(event, listener, options) {
        if (options === true) {
          promisify = true;
        } else if (options === false) {
          async = true;
        } else {
          if (!options || typeof options !== "object") {
            throw TypeError("options should be an object or true");
          }
          var async = options.async;
          var promisify = options.promisify;
          var nextTick = options.nextTick;
          var objectify = options.objectify;
        }
        if (async || nextTick || promisify) {
          var _listener = listener;
          var _origin = listener._origin || listener;
          if (nextTick && !nextTickSupported) {
            throw Error("process.nextTick is not supported");
          }
          if (promisify === undefined2) {
            promisify = listener.constructor.name === "AsyncFunction";
          }
          listener = function() {
            var args = arguments;
            var context = this;
            var event2 = this.event;
            return promisify ? nextTick ? Promise.resolve() : new Promise(function(resolve) {
              _setImmediate(resolve);
            }).then(function() {
              context.event = event2;
              return _listener.apply(context, args);
            }) : (nextTick ? define_process_default.nextTick : _setImmediate)(function() {
              context.event = event2;
              _listener.apply(context, args);
            });
          };
          listener._async = true;
          listener._origin = _origin;
        }
        return [listener, objectify ? new Listener(this, event, listener) : this];
      }
      function EventEmitter(conf) {
        this._events = {};
        this._newListener = false;
        this._removeListener = false;
        this.verboseMemoryLeak = false;
        configure.call(this, conf);
      }
      EventEmitter.EventEmitter2 = EventEmitter;
      EventEmitter.prototype.listenTo = function(target, events, options) {
        if (typeof target !== "object") {
          throw TypeError("target musts be an object");
        }
        var emitter = this;
        options = resolveOptions(options, {
          on: undefined2,
          off: undefined2,
          reducers: undefined2
        }, {
          on: functionReducer,
          off: functionReducer,
          reducers: objectFunctionReducer
        });
        function listen(events2) {
          if (typeof events2 !== "object") {
            throw TypeError("events must be an object");
          }
          var reducers = options.reducers;
          var index = findTargetIndex.call(emitter, target);
          var observer;
          if (index === -1) {
            observer = new TargetObserver(emitter, target, options);
          } else {
            observer = emitter._observers[index];
          }
          var keys = ownKeys(events2);
          var len = keys.length;
          var event;
          var isSingleReducer = typeof reducers === "function";
          for (var i2 = 0; i2 < len; i2++) {
            event = keys[i2];
            observer.subscribe(event, events2[event] || event, isSingleReducer ? reducers : reducers && reducers[event]);
          }
        }
        isArray(events) ? listen(toObject(events)) : typeof events === "string" ? listen(toObject(events.split(/\s+/))) : listen(events);
        return this;
      };
      EventEmitter.prototype.stopListeningTo = function(target, event) {
        var observers = this._observers;
        if (!observers) {
          return false;
        }
        var i2 = observers.length;
        var observer;
        var matched = false;
        if (target && typeof target !== "object") {
          throw TypeError("target should be an object");
        }
        while (i2-- > 0) {
          observer = observers[i2];
          if (!target || observer._target === target) {
            observer.unsubscribe(event);
            matched = true;
          }
        }
        return matched;
      };
      EventEmitter.prototype.delimiter = ".";
      EventEmitter.prototype.setMaxListeners = function(n) {
        if (n !== undefined2) {
          this._maxListeners = n;
          if (!this._conf)
            this._conf = {};
          this._conf.maxListeners = n;
        }
      };
      EventEmitter.prototype.getMaxListeners = function() {
        return this._maxListeners;
      };
      EventEmitter.prototype.event = "";
      EventEmitter.prototype.once = function(event, fn, options) {
        return this._once(event, fn, false, options);
      };
      EventEmitter.prototype.prependOnceListener = function(event, fn, options) {
        return this._once(event, fn, true, options);
      };
      EventEmitter.prototype._once = function(event, fn, prepend, options) {
        return this._many(event, 1, fn, prepend, options);
      };
      EventEmitter.prototype.many = function(event, ttl, fn, options) {
        return this._many(event, ttl, fn, false, options);
      };
      EventEmitter.prototype.prependMany = function(event, ttl, fn, options) {
        return this._many(event, ttl, fn, true, options);
      };
      EventEmitter.prototype._many = function(event, ttl, fn, prepend, options) {
        var self2 = this;
        if (typeof fn !== "function") {
          throw new Error("many only accepts instances of Function");
        }
        function listener() {
          if (--ttl === 0) {
            self2.off(event, listener);
          }
          return fn.apply(this, arguments);
        }
        listener._origin = fn;
        return this._on(event, listener, prepend, options);
      };
      EventEmitter.prototype.emit = function() {
        if (!this._events && !this._all) {
          return false;
        }
        this._events || init2.call(this);
        var type = arguments[0], ns, wildcard = this.wildcard;
        var args, l2, i2, j3, containsSymbol;
        if (type === "newListener" && !this._newListener) {
          if (!this._events.newListener) {
            return false;
          }
        }
        if (wildcard) {
          ns = type;
          if (type !== "newListener" && type !== "removeListener") {
            if (typeof type === "object") {
              l2 = type.length;
              if (symbolsSupported) {
                for (i2 = 0; i2 < l2; i2++) {
                  if (typeof type[i2] === "symbol") {
                    containsSymbol = true;
                    break;
                  }
                }
              }
              if (!containsSymbol) {
                type = type.join(this.delimiter);
              }
            }
          }
        }
        var al = arguments.length;
        var handler;
        if (this._all && this._all.length) {
          handler = this._all.slice();
          for (i2 = 0, l2 = handler.length; i2 < l2; i2++) {
            this.event = type;
            switch (al) {
              case 1:
                handler[i2].call(this, type);
                break;
              case 2:
                handler[i2].call(this, type, arguments[1]);
                break;
              case 3:
                handler[i2].call(this, type, arguments[1], arguments[2]);
                break;
              default:
                handler[i2].apply(this, arguments);
            }
          }
        }
        if (wildcard) {
          handler = [];
          searchListenerTree.call(this, handler, ns, this.listenerTree, 0, l2);
        } else {
          handler = this._events[type];
          if (typeof handler === "function") {
            this.event = type;
            switch (al) {
              case 1:
                handler.call(this);
                break;
              case 2:
                handler.call(this, arguments[1]);
                break;
              case 3:
                handler.call(this, arguments[1], arguments[2]);
                break;
              default:
                args = new Array(al - 1);
                for (j3 = 1; j3 < al; j3++)
                  args[j3 - 1] = arguments[j3];
                handler.apply(this, args);
            }
            return true;
          } else if (handler) {
            handler = handler.slice();
          }
        }
        if (handler && handler.length) {
          if (al > 3) {
            args = new Array(al - 1);
            for (j3 = 1; j3 < al; j3++)
              args[j3 - 1] = arguments[j3];
          }
          for (i2 = 0, l2 = handler.length; i2 < l2; i2++) {
            this.event = type;
            switch (al) {
              case 1:
                handler[i2].call(this);
                break;
              case 2:
                handler[i2].call(this, arguments[1]);
                break;
              case 3:
                handler[i2].call(this, arguments[1], arguments[2]);
                break;
              default:
                handler[i2].apply(this, args);
            }
          }
          return true;
        } else if (!this.ignoreErrors && !this._all && type === "error") {
          if (arguments[1] instanceof Error) {
            throw arguments[1];
          } else {
            throw new Error("Uncaught, unspecified 'error' event.");
          }
        }
        return !!this._all;
      };
      EventEmitter.prototype.emitAsync = function() {
        if (!this._events && !this._all) {
          return false;
        }
        this._events || init2.call(this);
        var type = arguments[0], wildcard = this.wildcard, ns, containsSymbol;
        var args, l2, i2, j3;
        if (type === "newListener" && !this._newListener) {
          if (!this._events.newListener) {
            return Promise.resolve([false]);
          }
        }
        if (wildcard) {
          ns = type;
          if (type !== "newListener" && type !== "removeListener") {
            if (typeof type === "object") {
              l2 = type.length;
              if (symbolsSupported) {
                for (i2 = 0; i2 < l2; i2++) {
                  if (typeof type[i2] === "symbol") {
                    containsSymbol = true;
                    break;
                  }
                }
              }
              if (!containsSymbol) {
                type = type.join(this.delimiter);
              }
            }
          }
        }
        var promises = [];
        var al = arguments.length;
        var handler;
        if (this._all) {
          for (i2 = 0, l2 = this._all.length; i2 < l2; i2++) {
            this.event = type;
            switch (al) {
              case 1:
                promises.push(this._all[i2].call(this, type));
                break;
              case 2:
                promises.push(this._all[i2].call(this, type, arguments[1]));
                break;
              case 3:
                promises.push(this._all[i2].call(this, type, arguments[1], arguments[2]));
                break;
              default:
                promises.push(this._all[i2].apply(this, arguments));
            }
          }
        }
        if (wildcard) {
          handler = [];
          searchListenerTree.call(this, handler, ns, this.listenerTree, 0);
        } else {
          handler = this._events[type];
        }
        if (typeof handler === "function") {
          this.event = type;
          switch (al) {
            case 1:
              promises.push(handler.call(this));
              break;
            case 2:
              promises.push(handler.call(this, arguments[1]));
              break;
            case 3:
              promises.push(handler.call(this, arguments[1], arguments[2]));
              break;
            default:
              args = new Array(al - 1);
              for (j3 = 1; j3 < al; j3++)
                args[j3 - 1] = arguments[j3];
              promises.push(handler.apply(this, args));
          }
        } else if (handler && handler.length) {
          handler = handler.slice();
          if (al > 3) {
            args = new Array(al - 1);
            for (j3 = 1; j3 < al; j3++)
              args[j3 - 1] = arguments[j3];
          }
          for (i2 = 0, l2 = handler.length; i2 < l2; i2++) {
            this.event = type;
            switch (al) {
              case 1:
                promises.push(handler[i2].call(this));
                break;
              case 2:
                promises.push(handler[i2].call(this, arguments[1]));
                break;
              case 3:
                promises.push(handler[i2].call(this, arguments[1], arguments[2]));
                break;
              default:
                promises.push(handler[i2].apply(this, args));
            }
          }
        } else if (!this.ignoreErrors && !this._all && type === "error") {
          if (arguments[1] instanceof Error) {
            return Promise.reject(arguments[1]);
          } else {
            return Promise.reject("Uncaught, unspecified 'error' event.");
          }
        }
        return Promise.all(promises);
      };
      EventEmitter.prototype.on = function(type, listener, options) {
        return this._on(type, listener, false, options);
      };
      EventEmitter.prototype.prependListener = function(type, listener, options) {
        return this._on(type, listener, true, options);
      };
      EventEmitter.prototype.onAny = function(fn) {
        return this._onAny(fn, false);
      };
      EventEmitter.prototype.prependAny = function(fn) {
        return this._onAny(fn, true);
      };
      EventEmitter.prototype.addListener = EventEmitter.prototype.on;
      EventEmitter.prototype._onAny = function(fn, prepend) {
        if (typeof fn !== "function") {
          throw new Error("onAny only accepts instances of Function");
        }
        if (!this._all) {
          this._all = [];
        }
        if (prepend) {
          this._all.unshift(fn);
        } else {
          this._all.push(fn);
        }
        return this;
      };
      EventEmitter.prototype._on = function(type, listener, prepend, options) {
        if (typeof type === "function") {
          this._onAny(type, listener);
          return this;
        }
        if (typeof listener !== "function") {
          throw new Error("on only accepts instances of Function");
        }
        this._events || init2.call(this);
        var returnValue = this, temp;
        if (options !== undefined2) {
          temp = setupListener.call(this, type, listener, options);
          listener = temp[0];
          returnValue = temp[1];
        }
        if (this._newListener) {
          this.emit("newListener", type, listener);
        }
        if (this.wildcard) {
          growListenerTree.call(this, type, listener, prepend);
          return returnValue;
        }
        if (!this._events[type]) {
          this._events[type] = listener;
        } else {
          if (typeof this._events[type] === "function") {
            this._events[type] = [this._events[type]];
          }
          if (prepend) {
            this._events[type].unshift(listener);
          } else {
            this._events[type].push(listener);
          }
          if (!this._events[type].warned && this._maxListeners > 0 && this._events[type].length > this._maxListeners) {
            this._events[type].warned = true;
            logPossibleMemoryLeak.call(this, this._events[type].length, type);
          }
        }
        return returnValue;
      };
      EventEmitter.prototype.off = function(type, listener) {
        if (typeof listener !== "function") {
          throw new Error("removeListener only takes instances of Function");
        }
        var handlers, leafs = [];
        if (this.wildcard) {
          var ns = typeof type === "string" ? type.split(this.delimiter) : type.slice();
          leafs = searchListenerTree.call(this, null, ns, this.listenerTree, 0);
          if (!leafs)
            return this;
        } else {
          if (!this._events[type])
            return this;
          handlers = this._events[type];
          leafs.push({ _listeners: handlers });
        }
        for (var iLeaf = 0; iLeaf < leafs.length; iLeaf++) {
          var leaf = leafs[iLeaf];
          handlers = leaf._listeners;
          if (isArray(handlers)) {
            var position = -1;
            for (var i2 = 0, length = handlers.length; i2 < length; i2++) {
              if (handlers[i2] === listener || handlers[i2].listener && handlers[i2].listener === listener || handlers[i2]._origin && handlers[i2]._origin === listener) {
                position = i2;
                break;
              }
            }
            if (position < 0) {
              continue;
            }
            if (this.wildcard) {
              leaf._listeners.splice(position, 1);
            } else {
              this._events[type].splice(position, 1);
            }
            if (handlers.length === 0) {
              if (this.wildcard) {
                delete leaf._listeners;
              } else {
                delete this._events[type];
              }
            }
            if (this._removeListener)
              this.emit("removeListener", type, listener);
            return this;
          } else if (handlers === listener || handlers.listener && handlers.listener === listener || handlers._origin && handlers._origin === listener) {
            if (this.wildcard) {
              delete leaf._listeners;
            } else {
              delete this._events[type];
            }
            if (this._removeListener)
              this.emit("removeListener", type, listener);
          }
        }
        this.listenerTree && recursivelyGarbageCollect(this.listenerTree);
        return this;
      };
      EventEmitter.prototype.offAny = function(fn) {
        var i2 = 0, l2 = 0, fns;
        if (fn && this._all && this._all.length > 0) {
          fns = this._all;
          for (i2 = 0, l2 = fns.length; i2 < l2; i2++) {
            if (fn === fns[i2]) {
              fns.splice(i2, 1);
              if (this._removeListener)
                this.emit("removeListenerAny", fn);
              return this;
            }
          }
        } else {
          fns = this._all;
          if (this._removeListener) {
            for (i2 = 0, l2 = fns.length; i2 < l2; i2++)
              this.emit("removeListenerAny", fns[i2]);
          }
          this._all = [];
        }
        return this;
      };
      EventEmitter.prototype.removeListener = EventEmitter.prototype.off;
      EventEmitter.prototype.removeAllListeners = function(type) {
        if (type === undefined2) {
          !this._events || init2.call(this);
          return this;
        }
        if (this.wildcard) {
          var leafs = searchListenerTree.call(this, null, type, this.listenerTree, 0), leaf, i2;
          if (!leafs)
            return this;
          for (i2 = 0; i2 < leafs.length; i2++) {
            leaf = leafs[i2];
            leaf._listeners = null;
          }
          this.listenerTree && recursivelyGarbageCollect(this.listenerTree);
        } else if (this._events) {
          this._events[type] = null;
        }
        return this;
      };
      EventEmitter.prototype.listeners = function(type) {
        var _events = this._events;
        var keys, listeners, allListeners;
        var i2;
        var listenerTree;
        if (type === undefined2) {
          if (this.wildcard) {
            throw Error("event name required for wildcard emitter");
          }
          if (!_events) {
            return [];
          }
          keys = ownKeys(_events);
          i2 = keys.length;
          allListeners = [];
          while (i2-- > 0) {
            listeners = _events[keys[i2]];
            if (typeof listeners === "function") {
              allListeners.push(listeners);
            } else {
              allListeners.push.apply(allListeners, listeners);
            }
          }
          return allListeners;
        } else {
          if (this.wildcard) {
            listenerTree = this.listenerTree;
            if (!listenerTree)
              return [];
            var handlers = [];
            var ns = typeof type === "string" ? type.split(this.delimiter) : type.slice();
            searchListenerTree.call(this, handlers, ns, listenerTree, 0);
            return handlers;
          }
          if (!_events) {
            return [];
          }
          listeners = _events[type];
          if (!listeners) {
            return [];
          }
          return typeof listeners === "function" ? [listeners] : listeners;
        }
      };
      EventEmitter.prototype.eventNames = function(nsAsArray) {
        var _events = this._events;
        return this.wildcard ? collectTreeEvents.call(this, this.listenerTree, [], null, nsAsArray) : _events ? ownKeys(_events) : [];
      };
      EventEmitter.prototype.listenerCount = function(type) {
        return this.listeners(type).length;
      };
      EventEmitter.prototype.hasListeners = function(type) {
        if (this.wildcard) {
          var handlers = [];
          var ns = typeof type === "string" ? type.split(this.delimiter) : type.slice();
          searchListenerTree.call(this, handlers, ns, this.listenerTree, 0);
          return handlers.length > 0;
        }
        var _events = this._events;
        var _all = this._all;
        return !!(_all && _all.length || _events && (type === undefined2 ? ownKeys(_events).length : _events[type]));
      };
      EventEmitter.prototype.listenersAny = function() {
        if (this._all) {
          return this._all;
        } else {
          return [];
        }
      };
      EventEmitter.prototype.waitFor = function(event, options) {
        var self2 = this;
        var type = typeof options;
        if (type === "number") {
          options = { timeout: options };
        } else if (type === "function") {
          options = { filter: options };
        }
        options = resolveOptions(options, {
          timeout: 0,
          filter: undefined2,
          handleError: false,
          Promise,
          overload: false
        }, {
          filter: functionReducer,
          Promise: constructorReducer
        });
        return makeCancelablePromise(options.Promise, function(resolve, reject, onCancel) {
          function listener() {
            var filter = options.filter;
            if (filter && !filter.apply(self2, arguments)) {
              return;
            }
            self2.off(event, listener);
            if (options.handleError) {
              var err = arguments[0];
              err ? reject(err) : resolve(toArray.apply(null, arguments).slice(1));
            } else {
              resolve(toArray.apply(null, arguments));
            }
          }
          onCancel(function() {
            self2.off(event, listener);
          });
          self2._on(event, listener, false);
        }, {
          timeout: options.timeout,
          overload: options.overload
        });
      };
      function once(emitter, name2, options) {
        options = resolveOptions(options, {
          Promise,
          timeout: 0,
          overload: false
        }, {
          Promise: constructorReducer
        });
        var _Promise = options.Promise;
        return makeCancelablePromise(_Promise, function(resolve, reject, onCancel) {
          var handler;
          if (typeof emitter.addEventListener === "function") {
            handler = function() {
              resolve(toArray.apply(null, arguments));
            };
            onCancel(function() {
              emitter.removeEventListener(name2, handler);
            });
            emitter.addEventListener(name2, handler, { once: true });
            return;
          }
          var eventListener = function() {
            errorListener && emitter.removeListener("error", errorListener);
            resolve(toArray.apply(null, arguments));
          };
          var errorListener;
          if (name2 !== "error") {
            errorListener = function(err) {
              emitter.removeListener(name2, eventListener);
              reject(err);
            };
            emitter.once("error", errorListener);
          }
          onCancel(function() {
            errorListener && emitter.removeListener("error", errorListener);
            emitter.removeListener(name2, eventListener);
          });
          emitter.once(name2, eventListener);
        }, {
          timeout: options.timeout,
          overload: options.overload
        });
      }
      var prototype = EventEmitter.prototype;
      Object.defineProperties(EventEmitter, {
        defaultMaxListeners: {
          get: function() {
            return prototype._maxListeners;
          },
          set: function(n) {
            if (typeof n !== "number" || n < 0 || Number.isNaN(n)) {
              throw TypeError("n must be a non-negative number");
            }
            prototype._maxListeners = n;
          },
          enumerable: true
        },
        once: {
          value: once,
          writable: true,
          configurable: true
        }
      });
      Object.defineProperties(prototype, {
        _maxListeners: {
          value: defaultMaxListeners,
          writable: true,
          configurable: true
        },
        _observers: { value: null, writable: true, configurable: true }
      });
      if (typeof define === "function" && define.amd) {
        define(function() {
          return EventEmitter;
        });
      } else if (typeof exports === "object") {
        module.exports = EventEmitter;
      } else {
        var _global = new Function("", "return this")();
        _global.EventEmitter2 = EventEmitter;
      }
    }();
  }
});

// node_modules/buffer-reverse/index.js
var require_buffer_reverse = __commonJS({
  "node_modules/buffer-reverse/index.js"(exports, module) {
    init_define_process();
    module.exports = function reverse(src) {
      var buffer = new Buffer(src.length);
      for (var i2 = 0, j3 = src.length - 1; i2 <= j3; ++i2, --j3) {
        buffer[i2] = src[j3];
        buffer[j3] = src[i2];
      }
      return buffer;
    };
  }
});

// node_modules/crypto-js/core.js
var require_core = __commonJS({
  "node_modules/crypto-js/core.js"(exports, module) {
    init_define_process();
    (function(root, factory) {
      if (typeof exports === "object") {
        module.exports = exports = factory();
      } else if (typeof define === "function" && define.amd) {
        define([], factory);
      } else {
        root.CryptoJS = factory();
      }
    })(exports, function() {
      var CryptoJS = CryptoJS || function(Math2, undefined2) {
        var create = Object.create || function() {
          function F3() {
          }
          ;
          return function(obj) {
            var subtype;
            F3.prototype = obj;
            subtype = new F3();
            F3.prototype = null;
            return subtype;
          };
        }();
        var C3 = {};
        var C_lib = C3.lib = {};
        var Base = C_lib.Base = function() {
          return {
            extend: function(overrides) {
              var subtype = create(this);
              if (overrides) {
                subtype.mixIn(overrides);
              }
              if (!subtype.hasOwnProperty("init") || this.init === subtype.init) {
                subtype.init = function() {
                  subtype.$super.init.apply(this, arguments);
                };
              }
              subtype.init.prototype = subtype;
              subtype.$super = this;
              return subtype;
            },
            create: function() {
              var instance = this.extend();
              instance.init.apply(instance, arguments);
              return instance;
            },
            init: function() {
            },
            mixIn: function(properties) {
              for (var propertyName in properties) {
                if (properties.hasOwnProperty(propertyName)) {
                  this[propertyName] = properties[propertyName];
                }
              }
              if (properties.hasOwnProperty("toString")) {
                this.toString = properties.toString;
              }
            },
            clone: function() {
              return this.init.prototype.extend(this);
            }
          };
        }();
        var WordArray = C_lib.WordArray = Base.extend({
          init: function(words2, sigBytes) {
            words2 = this.words = words2 || [];
            if (sigBytes != undefined2) {
              this.sigBytes = sigBytes;
            } else {
              this.sigBytes = words2.length * 4;
            }
          },
          toString: function(encoder) {
            return (encoder || Hex).stringify(this);
          },
          concat: function(wordArray) {
            var thisWords = this.words;
            var thatWords = wordArray.words;
            var thisSigBytes = this.sigBytes;
            var thatSigBytes = wordArray.sigBytes;
            this.clamp();
            if (thisSigBytes % 4) {
              for (var i2 = 0; i2 < thatSigBytes; i2++) {
                var thatByte = thatWords[i2 >>> 2] >>> 24 - i2 % 4 * 8 & 255;
                thisWords[thisSigBytes + i2 >>> 2] |= thatByte << 24 - (thisSigBytes + i2) % 4 * 8;
              }
            } else {
              for (var i2 = 0; i2 < thatSigBytes; i2 += 4) {
                thisWords[thisSigBytes + i2 >>> 2] = thatWords[i2 >>> 2];
              }
            }
            this.sigBytes += thatSigBytes;
            return this;
          },
          clamp: function() {
            var words2 = this.words;
            var sigBytes = this.sigBytes;
            words2[sigBytes >>> 2] &= 4294967295 << 32 - sigBytes % 4 * 8;
            words2.length = Math2.ceil(sigBytes / 4);
          },
          clone: function() {
            var clone = Base.clone.call(this);
            clone.words = this.words.slice(0);
            return clone;
          },
          random: function(nBytes) {
            var words2 = [];
            var r2 = function(m_w) {
              var m_w = m_w;
              var m_z = 987654321;
              var mask = 4294967295;
              return function() {
                m_z = 36969 * (m_z & 65535) + (m_z >> 16) & mask;
                m_w = 18e3 * (m_w & 65535) + (m_w >> 16) & mask;
                var result = (m_z << 16) + m_w & mask;
                result /= 4294967296;
                result += 0.5;
                return result * (Math2.random() > 0.5 ? 1 : -1);
              };
            };
            for (var i2 = 0, rcache; i2 < nBytes; i2 += 4) {
              var _r2 = r2((rcache || Math2.random()) * 4294967296);
              rcache = _r2() * 987654071;
              words2.push(_r2() * 4294967296 | 0);
            }
            return new WordArray.init(words2, nBytes);
          }
        });
        var C_enc = C3.enc = {};
        var Hex = C_enc.Hex = {
          stringify: function(wordArray) {
            var words2 = wordArray.words;
            var sigBytes = wordArray.sigBytes;
            var hexChars = [];
            for (var i2 = 0; i2 < sigBytes; i2++) {
              var bite = words2[i2 >>> 2] >>> 24 - i2 % 4 * 8 & 255;
              hexChars.push((bite >>> 4).toString(16));
              hexChars.push((bite & 15).toString(16));
            }
            return hexChars.join("");
          },
          parse: function(hexStr) {
            var hexStrLength = hexStr.length;
            var words2 = [];
            for (var i2 = 0; i2 < hexStrLength; i2 += 2) {
              words2[i2 >>> 3] |= parseInt(hexStr.substr(i2, 2), 16) << 24 - i2 % 8 * 4;
            }
            return new WordArray.init(words2, hexStrLength / 2);
          }
        };
        var Latin1 = C_enc.Latin1 = {
          stringify: function(wordArray) {
            var words2 = wordArray.words;
            var sigBytes = wordArray.sigBytes;
            var latin1Chars = [];
            for (var i2 = 0; i2 < sigBytes; i2++) {
              var bite = words2[i2 >>> 2] >>> 24 - i2 % 4 * 8 & 255;
              latin1Chars.push(String.fromCharCode(bite));
            }
            return latin1Chars.join("");
          },
          parse: function(latin1Str) {
            var latin1StrLength = latin1Str.length;
            var words2 = [];
            for (var i2 = 0; i2 < latin1StrLength; i2++) {
              words2[i2 >>> 2] |= (latin1Str.charCodeAt(i2) & 255) << 24 - i2 % 4 * 8;
            }
            return new WordArray.init(words2, latin1StrLength);
          }
        };
        var Utf8 = C_enc.Utf8 = {
          stringify: function(wordArray) {
            try {
              return decodeURIComponent(escape(Latin1.stringify(wordArray)));
            } catch (e) {
              throw new Error("Malformed UTF-8 data");
            }
          },
          parse: function(utf8Str) {
            return Latin1.parse(unescape(encodeURIComponent(utf8Str)));
          }
        };
        var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm = Base.extend({
          reset: function() {
            this._data = new WordArray.init();
            this._nDataBytes = 0;
          },
          _append: function(data) {
            if (typeof data == "string") {
              data = Utf8.parse(data);
            }
            this._data.concat(data);
            this._nDataBytes += data.sigBytes;
          },
          _process: function(doFlush) {
            var data = this._data;
            var dataWords = data.words;
            var dataSigBytes = data.sigBytes;
            var blockSize = this.blockSize;
            var blockSizeBytes = blockSize * 4;
            var nBlocksReady = dataSigBytes / blockSizeBytes;
            if (doFlush) {
              nBlocksReady = Math2.ceil(nBlocksReady);
            } else {
              nBlocksReady = Math2.max((nBlocksReady | 0) - this._minBufferSize, 0);
            }
            var nWordsReady = nBlocksReady * blockSize;
            var nBytesReady = Math2.min(nWordsReady * 4, dataSigBytes);
            if (nWordsReady) {
              for (var offset = 0; offset < nWordsReady; offset += blockSize) {
                this._doProcessBlock(dataWords, offset);
              }
              var processedWords = dataWords.splice(0, nWordsReady);
              data.sigBytes -= nBytesReady;
            }
            return new WordArray.init(processedWords, nBytesReady);
          },
          clone: function() {
            var clone = Base.clone.call(this);
            clone._data = this._data.clone();
            return clone;
          },
          _minBufferSize: 0
        });
        var Hasher = C_lib.Hasher = BufferedBlockAlgorithm.extend({
          cfg: Base.extend(),
          init: function(cfg) {
            this.cfg = this.cfg.extend(cfg);
            this.reset();
          },
          reset: function() {
            BufferedBlockAlgorithm.reset.call(this);
            this._doReset();
          },
          update: function(messageUpdate) {
            this._append(messageUpdate);
            this._process();
            return this;
          },
          finalize: function(messageUpdate) {
            if (messageUpdate) {
              this._append(messageUpdate);
            }
            var hash3 = this._doFinalize();
            return hash3;
          },
          blockSize: 512 / 32,
          _createHelper: function(hasher) {
            return function(message, cfg) {
              return new hasher.init(cfg).finalize(message);
            };
          },
          _createHmacHelper: function(hasher) {
            return function(message, key2) {
              return new C_algo.HMAC.init(hasher, key2).finalize(message);
            };
          }
        });
        var C_algo = C3.algo = {};
        return C3;
      }(Math);
      return CryptoJS;
    });
  }
});

// node_modules/crypto-js/sha256.js
var require_sha256 = __commonJS({
  "node_modules/crypto-js/sha256.js"(exports, module) {
    init_define_process();
    (function(root, factory) {
      if (typeof exports === "object") {
        module.exports = exports = factory(require_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS) {
      (function(Math2) {
        var C3 = CryptoJS;
        var C_lib = C3.lib;
        var WordArray = C_lib.WordArray;
        var Hasher = C_lib.Hasher;
        var C_algo = C3.algo;
        var H3 = [];
        var K3 = [];
        (function() {
          function isPrime(n2) {
            var sqrtN = Math2.sqrt(n2);
            for (var factor = 2; factor <= sqrtN; factor++) {
              if (!(n2 % factor)) {
                return false;
              }
            }
            return true;
          }
          function getFractionalBits(n2) {
            return (n2 - (n2 | 0)) * 4294967296 | 0;
          }
          var n = 2;
          var nPrime = 0;
          while (nPrime < 64) {
            if (isPrime(n)) {
              if (nPrime < 8) {
                H3[nPrime] = getFractionalBits(Math2.pow(n, 1 / 2));
              }
              K3[nPrime] = getFractionalBits(Math2.pow(n, 1 / 3));
              nPrime++;
            }
            n++;
          }
        })();
        var W3 = [];
        var SHA256 = C_algo.SHA256 = Hasher.extend({
          _doReset: function() {
            this._hash = new WordArray.init(H3.slice(0));
          },
          _doProcessBlock: function(M3, offset) {
            var H4 = this._hash.words;
            var a = H4[0];
            var b2 = H4[1];
            var c2 = H4[2];
            var d2 = H4[3];
            var e = H4[4];
            var f3 = H4[5];
            var g3 = H4[6];
            var h2 = H4[7];
            for (var i2 = 0; i2 < 64; i2++) {
              if (i2 < 16) {
                W3[i2] = M3[offset + i2] | 0;
              } else {
                var gamma0x = W3[i2 - 15];
                var gamma0 = (gamma0x << 25 | gamma0x >>> 7) ^ (gamma0x << 14 | gamma0x >>> 18) ^ gamma0x >>> 3;
                var gamma1x = W3[i2 - 2];
                var gamma1 = (gamma1x << 15 | gamma1x >>> 17) ^ (gamma1x << 13 | gamma1x >>> 19) ^ gamma1x >>> 10;
                W3[i2] = gamma0 + W3[i2 - 7] + gamma1 + W3[i2 - 16];
              }
              var ch = e & f3 ^ ~e & g3;
              var maj = a & b2 ^ a & c2 ^ b2 & c2;
              var sigma0 = (a << 30 | a >>> 2) ^ (a << 19 | a >>> 13) ^ (a << 10 | a >>> 22);
              var sigma1 = (e << 26 | e >>> 6) ^ (e << 21 | e >>> 11) ^ (e << 7 | e >>> 25);
              var t12 = h2 + sigma1 + ch + K3[i2] + W3[i2];
              var t2 = sigma0 + maj;
              h2 = g3;
              g3 = f3;
              f3 = e;
              e = d2 + t12 | 0;
              d2 = c2;
              c2 = b2;
              b2 = a;
              a = t12 + t2 | 0;
            }
            H4[0] = H4[0] + a | 0;
            H4[1] = H4[1] + b2 | 0;
            H4[2] = H4[2] + c2 | 0;
            H4[3] = H4[3] + d2 | 0;
            H4[4] = H4[4] + e | 0;
            H4[5] = H4[5] + f3 | 0;
            H4[6] = H4[6] + g3 | 0;
            H4[7] = H4[7] + h2 | 0;
          },
          _doFinalize: function() {
            var data = this._data;
            var dataWords = data.words;
            var nBitsTotal = this._nDataBytes * 8;
            var nBitsLeft = data.sigBytes * 8;
            dataWords[nBitsLeft >>> 5] |= 128 << 24 - nBitsLeft % 32;
            dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = Math2.floor(nBitsTotal / 4294967296);
            dataWords[(nBitsLeft + 64 >>> 9 << 4) + 15] = nBitsTotal;
            data.sigBytes = dataWords.length * 4;
            this._process();
            return this._hash;
          },
          clone: function() {
            var clone = Hasher.clone.call(this);
            clone._hash = this._hash.clone();
            return clone;
          }
        });
        C3.SHA256 = Hasher._createHelper(SHA256);
        C3.HmacSHA256 = Hasher._createHmacHelper(SHA256);
      })(Math);
      return CryptoJS.SHA256;
    });
  }
});

// node_modules/crypto-js/x64-core.js
var require_x64_core = __commonJS({
  "node_modules/crypto-js/x64-core.js"(exports, module) {
    init_define_process();
    (function(root, factory) {
      if (typeof exports === "object") {
        module.exports = exports = factory(require_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS) {
      (function(undefined2) {
        var C3 = CryptoJS;
        var C_lib = C3.lib;
        var Base = C_lib.Base;
        var X32WordArray = C_lib.WordArray;
        var C_x64 = C3.x64 = {};
        var X64Word = C_x64.Word = Base.extend({
          init: function(high, low) {
            this.high = high;
            this.low = low;
          }
        });
        var X64WordArray = C_x64.WordArray = Base.extend({
          init: function(words2, sigBytes) {
            words2 = this.words = words2 || [];
            if (sigBytes != undefined2) {
              this.sigBytes = sigBytes;
            } else {
              this.sigBytes = words2.length * 8;
            }
          },
          toX32: function() {
            var x64Words = this.words;
            var x64WordsLength = x64Words.length;
            var x32Words = [];
            for (var i2 = 0; i2 < x64WordsLength; i2++) {
              var x64Word = x64Words[i2];
              x32Words.push(x64Word.high);
              x32Words.push(x64Word.low);
            }
            return X32WordArray.create(x32Words, this.sigBytes);
          },
          clone: function() {
            var clone = Base.clone.call(this);
            var words2 = clone.words = this.words.slice(0);
            var wordsLength = words2.length;
            for (var i2 = 0; i2 < wordsLength; i2++) {
              words2[i2] = words2[i2].clone();
            }
            return clone;
          }
        });
      })();
      return CryptoJS;
    });
  }
});

// node_modules/crypto-js/lib-typedarrays.js
var require_lib_typedarrays = __commonJS({
  "node_modules/crypto-js/lib-typedarrays.js"(exports, module) {
    init_define_process();
    (function(root, factory) {
      if (typeof exports === "object") {
        module.exports = exports = factory(require_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS) {
      (function() {
        if (typeof ArrayBuffer != "function") {
          return;
        }
        var C3 = CryptoJS;
        var C_lib = C3.lib;
        var WordArray = C_lib.WordArray;
        var superInit = WordArray.init;
        var subInit = WordArray.init = function(typedArray) {
          if (typedArray instanceof ArrayBuffer) {
            typedArray = new Uint8Array(typedArray);
          }
          if (typedArray instanceof Int8Array || typeof Uint8ClampedArray !== "undefined" && typedArray instanceof Uint8ClampedArray || typedArray instanceof Int16Array || typedArray instanceof Uint16Array || typedArray instanceof Int32Array || typedArray instanceof Uint32Array || typedArray instanceof Float32Array || typedArray instanceof Float64Array) {
            typedArray = new Uint8Array(typedArray.buffer, typedArray.byteOffset, typedArray.byteLength);
          }
          if (typedArray instanceof Uint8Array) {
            var typedArrayByteLength = typedArray.byteLength;
            var words2 = [];
            for (var i2 = 0; i2 < typedArrayByteLength; i2++) {
              words2[i2 >>> 2] |= typedArray[i2] << 24 - i2 % 4 * 8;
            }
            superInit.call(this, words2, typedArrayByteLength);
          } else {
            superInit.apply(this, arguments);
          }
        };
        subInit.prototype = WordArray;
      })();
      return CryptoJS.lib.WordArray;
    });
  }
});

// node_modules/crypto-js/enc-utf16.js
var require_enc_utf16 = __commonJS({
  "node_modules/crypto-js/enc-utf16.js"(exports, module) {
    init_define_process();
    (function(root, factory) {
      if (typeof exports === "object") {
        module.exports = exports = factory(require_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS) {
      (function() {
        var C3 = CryptoJS;
        var C_lib = C3.lib;
        var WordArray = C_lib.WordArray;
        var C_enc = C3.enc;
        var Utf16BE = C_enc.Utf16 = C_enc.Utf16BE = {
          stringify: function(wordArray) {
            var words2 = wordArray.words;
            var sigBytes = wordArray.sigBytes;
            var utf16Chars = [];
            for (var i2 = 0; i2 < sigBytes; i2 += 2) {
              var codePoint = words2[i2 >>> 2] >>> 16 - i2 % 4 * 8 & 65535;
              utf16Chars.push(String.fromCharCode(codePoint));
            }
            return utf16Chars.join("");
          },
          parse: function(utf16Str) {
            var utf16StrLength = utf16Str.length;
            var words2 = [];
            for (var i2 = 0; i2 < utf16StrLength; i2++) {
              words2[i2 >>> 1] |= utf16Str.charCodeAt(i2) << 16 - i2 % 2 * 16;
            }
            return WordArray.create(words2, utf16StrLength * 2);
          }
        };
        C_enc.Utf16LE = {
          stringify: function(wordArray) {
            var words2 = wordArray.words;
            var sigBytes = wordArray.sigBytes;
            var utf16Chars = [];
            for (var i2 = 0; i2 < sigBytes; i2 += 2) {
              var codePoint = swapEndian(words2[i2 >>> 2] >>> 16 - i2 % 4 * 8 & 65535);
              utf16Chars.push(String.fromCharCode(codePoint));
            }
            return utf16Chars.join("");
          },
          parse: function(utf16Str) {
            var utf16StrLength = utf16Str.length;
            var words2 = [];
            for (var i2 = 0; i2 < utf16StrLength; i2++) {
              words2[i2 >>> 1] |= swapEndian(utf16Str.charCodeAt(i2) << 16 - i2 % 2 * 16);
            }
            return WordArray.create(words2, utf16StrLength * 2);
          }
        };
        function swapEndian(word) {
          return word << 8 & 4278255360 | word >>> 8 & 16711935;
        }
      })();
      return CryptoJS.enc.Utf16;
    });
  }
});

// node_modules/crypto-js/enc-base64.js
var require_enc_base64 = __commonJS({
  "node_modules/crypto-js/enc-base64.js"(exports, module) {
    init_define_process();
    (function(root, factory) {
      if (typeof exports === "object") {
        module.exports = exports = factory(require_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS) {
      (function() {
        var C3 = CryptoJS;
        var C_lib = C3.lib;
        var WordArray = C_lib.WordArray;
        var C_enc = C3.enc;
        var Base64 = C_enc.Base64 = {
          stringify: function(wordArray) {
            var words2 = wordArray.words;
            var sigBytes = wordArray.sigBytes;
            var map = this._map;
            wordArray.clamp();
            var base64Chars = [];
            for (var i2 = 0; i2 < sigBytes; i2 += 3) {
              var byte1 = words2[i2 >>> 2] >>> 24 - i2 % 4 * 8 & 255;
              var byte2 = words2[i2 + 1 >>> 2] >>> 24 - (i2 + 1) % 4 * 8 & 255;
              var byte3 = words2[i2 + 2 >>> 2] >>> 24 - (i2 + 2) % 4 * 8 & 255;
              var triplet = byte1 << 16 | byte2 << 8 | byte3;
              for (var j3 = 0; j3 < 4 && i2 + j3 * 0.75 < sigBytes; j3++) {
                base64Chars.push(map.charAt(triplet >>> 6 * (3 - j3) & 63));
              }
            }
            var paddingChar = map.charAt(64);
            if (paddingChar) {
              while (base64Chars.length % 4) {
                base64Chars.push(paddingChar);
              }
            }
            return base64Chars.join("");
          },
          parse: function(base64Str) {
            var base64StrLength = base64Str.length;
            var map = this._map;
            var reverseMap = this._reverseMap;
            if (!reverseMap) {
              reverseMap = this._reverseMap = [];
              for (var j3 = 0; j3 < map.length; j3++) {
                reverseMap[map.charCodeAt(j3)] = j3;
              }
            }
            var paddingChar = map.charAt(64);
            if (paddingChar) {
              var paddingIndex = base64Str.indexOf(paddingChar);
              if (paddingIndex !== -1) {
                base64StrLength = paddingIndex;
              }
            }
            return parseLoop(base64Str, base64StrLength, reverseMap);
          },
          _map: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="
        };
        function parseLoop(base64Str, base64StrLength, reverseMap) {
          var words2 = [];
          var nBytes = 0;
          for (var i2 = 0; i2 < base64StrLength; i2++) {
            if (i2 % 4) {
              var bits1 = reverseMap[base64Str.charCodeAt(i2 - 1)] << i2 % 4 * 2;
              var bits2 = reverseMap[base64Str.charCodeAt(i2)] >>> 6 - i2 % 4 * 2;
              words2[nBytes >>> 2] |= (bits1 | bits2) << 24 - nBytes % 4 * 8;
              nBytes++;
            }
          }
          return WordArray.create(words2, nBytes);
        }
      })();
      return CryptoJS.enc.Base64;
    });
  }
});

// node_modules/crypto-js/md5.js
var require_md5 = __commonJS({
  "node_modules/crypto-js/md5.js"(exports, module) {
    init_define_process();
    (function(root, factory) {
      if (typeof exports === "object") {
        module.exports = exports = factory(require_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS) {
      (function(Math2) {
        var C3 = CryptoJS;
        var C_lib = C3.lib;
        var WordArray = C_lib.WordArray;
        var Hasher = C_lib.Hasher;
        var C_algo = C3.algo;
        var T3 = [];
        (function() {
          for (var i2 = 0; i2 < 64; i2++) {
            T3[i2] = Math2.abs(Math2.sin(i2 + 1)) * 4294967296 | 0;
          }
        })();
        var MD5 = C_algo.MD5 = Hasher.extend({
          _doReset: function() {
            this._hash = new WordArray.init([
              1732584193,
              4023233417,
              2562383102,
              271733878
            ]);
          },
          _doProcessBlock: function(M3, offset) {
            for (var i2 = 0; i2 < 16; i2++) {
              var offset_i = offset + i2;
              var M_offset_i = M3[offset_i];
              M3[offset_i] = (M_offset_i << 8 | M_offset_i >>> 24) & 16711935 | (M_offset_i << 24 | M_offset_i >>> 8) & 4278255360;
            }
            var H3 = this._hash.words;
            var M_offset_0 = M3[offset + 0];
            var M_offset_1 = M3[offset + 1];
            var M_offset_2 = M3[offset + 2];
            var M_offset_3 = M3[offset + 3];
            var M_offset_4 = M3[offset + 4];
            var M_offset_5 = M3[offset + 5];
            var M_offset_6 = M3[offset + 6];
            var M_offset_7 = M3[offset + 7];
            var M_offset_8 = M3[offset + 8];
            var M_offset_9 = M3[offset + 9];
            var M_offset_10 = M3[offset + 10];
            var M_offset_11 = M3[offset + 11];
            var M_offset_12 = M3[offset + 12];
            var M_offset_13 = M3[offset + 13];
            var M_offset_14 = M3[offset + 14];
            var M_offset_15 = M3[offset + 15];
            var a = H3[0];
            var b2 = H3[1];
            var c2 = H3[2];
            var d2 = H3[3];
            a = FF(a, b2, c2, d2, M_offset_0, 7, T3[0]);
            d2 = FF(d2, a, b2, c2, M_offset_1, 12, T3[1]);
            c2 = FF(c2, d2, a, b2, M_offset_2, 17, T3[2]);
            b2 = FF(b2, c2, d2, a, M_offset_3, 22, T3[3]);
            a = FF(a, b2, c2, d2, M_offset_4, 7, T3[4]);
            d2 = FF(d2, a, b2, c2, M_offset_5, 12, T3[5]);
            c2 = FF(c2, d2, a, b2, M_offset_6, 17, T3[6]);
            b2 = FF(b2, c2, d2, a, M_offset_7, 22, T3[7]);
            a = FF(a, b2, c2, d2, M_offset_8, 7, T3[8]);
            d2 = FF(d2, a, b2, c2, M_offset_9, 12, T3[9]);
            c2 = FF(c2, d2, a, b2, M_offset_10, 17, T3[10]);
            b2 = FF(b2, c2, d2, a, M_offset_11, 22, T3[11]);
            a = FF(a, b2, c2, d2, M_offset_12, 7, T3[12]);
            d2 = FF(d2, a, b2, c2, M_offset_13, 12, T3[13]);
            c2 = FF(c2, d2, a, b2, M_offset_14, 17, T3[14]);
            b2 = FF(b2, c2, d2, a, M_offset_15, 22, T3[15]);
            a = GG(a, b2, c2, d2, M_offset_1, 5, T3[16]);
            d2 = GG(d2, a, b2, c2, M_offset_6, 9, T3[17]);
            c2 = GG(c2, d2, a, b2, M_offset_11, 14, T3[18]);
            b2 = GG(b2, c2, d2, a, M_offset_0, 20, T3[19]);
            a = GG(a, b2, c2, d2, M_offset_5, 5, T3[20]);
            d2 = GG(d2, a, b2, c2, M_offset_10, 9, T3[21]);
            c2 = GG(c2, d2, a, b2, M_offset_15, 14, T3[22]);
            b2 = GG(b2, c2, d2, a, M_offset_4, 20, T3[23]);
            a = GG(a, b2, c2, d2, M_offset_9, 5, T3[24]);
            d2 = GG(d2, a, b2, c2, M_offset_14, 9, T3[25]);
            c2 = GG(c2, d2, a, b2, M_offset_3, 14, T3[26]);
            b2 = GG(b2, c2, d2, a, M_offset_8, 20, T3[27]);
            a = GG(a, b2, c2, d2, M_offset_13, 5, T3[28]);
            d2 = GG(d2, a, b2, c2, M_offset_2, 9, T3[29]);
            c2 = GG(c2, d2, a, b2, M_offset_7, 14, T3[30]);
            b2 = GG(b2, c2, d2, a, M_offset_12, 20, T3[31]);
            a = HH(a, b2, c2, d2, M_offset_5, 4, T3[32]);
            d2 = HH(d2, a, b2, c2, M_offset_8, 11, T3[33]);
            c2 = HH(c2, d2, a, b2, M_offset_11, 16, T3[34]);
            b2 = HH(b2, c2, d2, a, M_offset_14, 23, T3[35]);
            a = HH(a, b2, c2, d2, M_offset_1, 4, T3[36]);
            d2 = HH(d2, a, b2, c2, M_offset_4, 11, T3[37]);
            c2 = HH(c2, d2, a, b2, M_offset_7, 16, T3[38]);
            b2 = HH(b2, c2, d2, a, M_offset_10, 23, T3[39]);
            a = HH(a, b2, c2, d2, M_offset_13, 4, T3[40]);
            d2 = HH(d2, a, b2, c2, M_offset_0, 11, T3[41]);
            c2 = HH(c2, d2, a, b2, M_offset_3, 16, T3[42]);
            b2 = HH(b2, c2, d2, a, M_offset_6, 23, T3[43]);
            a = HH(a, b2, c2, d2, M_offset_9, 4, T3[44]);
            d2 = HH(d2, a, b2, c2, M_offset_12, 11, T3[45]);
            c2 = HH(c2, d2, a, b2, M_offset_15, 16, T3[46]);
            b2 = HH(b2, c2, d2, a, M_offset_2, 23, T3[47]);
            a = II(a, b2, c2, d2, M_offset_0, 6, T3[48]);
            d2 = II(d2, a, b2, c2, M_offset_7, 10, T3[49]);
            c2 = II(c2, d2, a, b2, M_offset_14, 15, T3[50]);
            b2 = II(b2, c2, d2, a, M_offset_5, 21, T3[51]);
            a = II(a, b2, c2, d2, M_offset_12, 6, T3[52]);
            d2 = II(d2, a, b2, c2, M_offset_3, 10, T3[53]);
            c2 = II(c2, d2, a, b2, M_offset_10, 15, T3[54]);
            b2 = II(b2, c2, d2, a, M_offset_1, 21, T3[55]);
            a = II(a, b2, c2, d2, M_offset_8, 6, T3[56]);
            d2 = II(d2, a, b2, c2, M_offset_15, 10, T3[57]);
            c2 = II(c2, d2, a, b2, M_offset_6, 15, T3[58]);
            b2 = II(b2, c2, d2, a, M_offset_13, 21, T3[59]);
            a = II(a, b2, c2, d2, M_offset_4, 6, T3[60]);
            d2 = II(d2, a, b2, c2, M_offset_11, 10, T3[61]);
            c2 = II(c2, d2, a, b2, M_offset_2, 15, T3[62]);
            b2 = II(b2, c2, d2, a, M_offset_9, 21, T3[63]);
            H3[0] = H3[0] + a | 0;
            H3[1] = H3[1] + b2 | 0;
            H3[2] = H3[2] + c2 | 0;
            H3[3] = H3[3] + d2 | 0;
          },
          _doFinalize: function() {
            var data = this._data;
            var dataWords = data.words;
            var nBitsTotal = this._nDataBytes * 8;
            var nBitsLeft = data.sigBytes * 8;
            dataWords[nBitsLeft >>> 5] |= 128 << 24 - nBitsLeft % 32;
            var nBitsTotalH = Math2.floor(nBitsTotal / 4294967296);
            var nBitsTotalL = nBitsTotal;
            dataWords[(nBitsLeft + 64 >>> 9 << 4) + 15] = (nBitsTotalH << 8 | nBitsTotalH >>> 24) & 16711935 | (nBitsTotalH << 24 | nBitsTotalH >>> 8) & 4278255360;
            dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = (nBitsTotalL << 8 | nBitsTotalL >>> 24) & 16711935 | (nBitsTotalL << 24 | nBitsTotalL >>> 8) & 4278255360;
            data.sigBytes = (dataWords.length + 1) * 4;
            this._process();
            var hash3 = this._hash;
            var H3 = hash3.words;
            for (var i2 = 0; i2 < 4; i2++) {
              var H_i = H3[i2];
              H3[i2] = (H_i << 8 | H_i >>> 24) & 16711935 | (H_i << 24 | H_i >>> 8) & 4278255360;
            }
            return hash3;
          },
          clone: function() {
            var clone = Hasher.clone.call(this);
            clone._hash = this._hash.clone();
            return clone;
          }
        });
        function FF(a, b2, c2, d2, x4, s2, t) {
          var n = a + (b2 & c2 | ~b2 & d2) + x4 + t;
          return (n << s2 | n >>> 32 - s2) + b2;
        }
        function GG(a, b2, c2, d2, x4, s2, t) {
          var n = a + (b2 & d2 | c2 & ~d2) + x4 + t;
          return (n << s2 | n >>> 32 - s2) + b2;
        }
        function HH(a, b2, c2, d2, x4, s2, t) {
          var n = a + (b2 ^ c2 ^ d2) + x4 + t;
          return (n << s2 | n >>> 32 - s2) + b2;
        }
        function II(a, b2, c2, d2, x4, s2, t) {
          var n = a + (c2 ^ (b2 | ~d2)) + x4 + t;
          return (n << s2 | n >>> 32 - s2) + b2;
        }
        C3.MD5 = Hasher._createHelper(MD5);
        C3.HmacMD5 = Hasher._createHmacHelper(MD5);
      })(Math);
      return CryptoJS.MD5;
    });
  }
});

// node_modules/crypto-js/sha1.js
var require_sha1 = __commonJS({
  "node_modules/crypto-js/sha1.js"(exports, module) {
    init_define_process();
    (function(root, factory) {
      if (typeof exports === "object") {
        module.exports = exports = factory(require_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS) {
      (function() {
        var C3 = CryptoJS;
        var C_lib = C3.lib;
        var WordArray = C_lib.WordArray;
        var Hasher = C_lib.Hasher;
        var C_algo = C3.algo;
        var W3 = [];
        var SHA1 = C_algo.SHA1 = Hasher.extend({
          _doReset: function() {
            this._hash = new WordArray.init([
              1732584193,
              4023233417,
              2562383102,
              271733878,
              3285377520
            ]);
          },
          _doProcessBlock: function(M3, offset) {
            var H3 = this._hash.words;
            var a = H3[0];
            var b2 = H3[1];
            var c2 = H3[2];
            var d2 = H3[3];
            var e = H3[4];
            for (var i2 = 0; i2 < 80; i2++) {
              if (i2 < 16) {
                W3[i2] = M3[offset + i2] | 0;
              } else {
                var n = W3[i2 - 3] ^ W3[i2 - 8] ^ W3[i2 - 14] ^ W3[i2 - 16];
                W3[i2] = n << 1 | n >>> 31;
              }
              var t = (a << 5 | a >>> 27) + e + W3[i2];
              if (i2 < 20) {
                t += (b2 & c2 | ~b2 & d2) + 1518500249;
              } else if (i2 < 40) {
                t += (b2 ^ c2 ^ d2) + 1859775393;
              } else if (i2 < 60) {
                t += (b2 & c2 | b2 & d2 | c2 & d2) - 1894007588;
              } else {
                t += (b2 ^ c2 ^ d2) - 899497514;
              }
              e = d2;
              d2 = c2;
              c2 = b2 << 30 | b2 >>> 2;
              b2 = a;
              a = t;
            }
            H3[0] = H3[0] + a | 0;
            H3[1] = H3[1] + b2 | 0;
            H3[2] = H3[2] + c2 | 0;
            H3[3] = H3[3] + d2 | 0;
            H3[4] = H3[4] + e | 0;
          },
          _doFinalize: function() {
            var data = this._data;
            var dataWords = data.words;
            var nBitsTotal = this._nDataBytes * 8;
            var nBitsLeft = data.sigBytes * 8;
            dataWords[nBitsLeft >>> 5] |= 128 << 24 - nBitsLeft % 32;
            dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = Math.floor(nBitsTotal / 4294967296);
            dataWords[(nBitsLeft + 64 >>> 9 << 4) + 15] = nBitsTotal;
            data.sigBytes = dataWords.length * 4;
            this._process();
            return this._hash;
          },
          clone: function() {
            var clone = Hasher.clone.call(this);
            clone._hash = this._hash.clone();
            return clone;
          }
        });
        C3.SHA1 = Hasher._createHelper(SHA1);
        C3.HmacSHA1 = Hasher._createHmacHelper(SHA1);
      })();
      return CryptoJS.SHA1;
    });
  }
});

// node_modules/crypto-js/sha224.js
var require_sha224 = __commonJS({
  "node_modules/crypto-js/sha224.js"(exports, module) {
    init_define_process();
    (function(root, factory, undef) {
      if (typeof exports === "object") {
        module.exports = exports = factory(require_core(), require_sha256());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./sha256"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS) {
      (function() {
        var C3 = CryptoJS;
        var C_lib = C3.lib;
        var WordArray = C_lib.WordArray;
        var C_algo = C3.algo;
        var SHA256 = C_algo.SHA256;
        var SHA224 = C_algo.SHA224 = SHA256.extend({
          _doReset: function() {
            this._hash = new WordArray.init([
              3238371032,
              914150663,
              812702999,
              4144912697,
              4290775857,
              1750603025,
              1694076839,
              3204075428
            ]);
          },
          _doFinalize: function() {
            var hash3 = SHA256._doFinalize.call(this);
            hash3.sigBytes -= 4;
            return hash3;
          }
        });
        C3.SHA224 = SHA256._createHelper(SHA224);
        C3.HmacSHA224 = SHA256._createHmacHelper(SHA224);
      })();
      return CryptoJS.SHA224;
    });
  }
});

// node_modules/crypto-js/sha512.js
var require_sha512 = __commonJS({
  "node_modules/crypto-js/sha512.js"(exports, module) {
    init_define_process();
    (function(root, factory, undef) {
      if (typeof exports === "object") {
        module.exports = exports = factory(require_core(), require_x64_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./x64-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS) {
      (function() {
        var C3 = CryptoJS;
        var C_lib = C3.lib;
        var Hasher = C_lib.Hasher;
        var C_x64 = C3.x64;
        var X64Word = C_x64.Word;
        var X64WordArray = C_x64.WordArray;
        var C_algo = C3.algo;
        function X64Word_create() {
          return X64Word.create.apply(X64Word, arguments);
        }
        var K3 = [
          X64Word_create(1116352408, 3609767458),
          X64Word_create(1899447441, 602891725),
          X64Word_create(3049323471, 3964484399),
          X64Word_create(3921009573, 2173295548),
          X64Word_create(961987163, 4081628472),
          X64Word_create(1508970993, 3053834265),
          X64Word_create(2453635748, 2937671579),
          X64Word_create(2870763221, 3664609560),
          X64Word_create(3624381080, 2734883394),
          X64Word_create(310598401, 1164996542),
          X64Word_create(607225278, 1323610764),
          X64Word_create(1426881987, 3590304994),
          X64Word_create(1925078388, 4068182383),
          X64Word_create(2162078206, 991336113),
          X64Word_create(2614888103, 633803317),
          X64Word_create(3248222580, 3479774868),
          X64Word_create(3835390401, 2666613458),
          X64Word_create(4022224774, 944711139),
          X64Word_create(264347078, 2341262773),
          X64Word_create(604807628, 2007800933),
          X64Word_create(770255983, 1495990901),
          X64Word_create(1249150122, 1856431235),
          X64Word_create(1555081692, 3175218132),
          X64Word_create(1996064986, 2198950837),
          X64Word_create(2554220882, 3999719339),
          X64Word_create(2821834349, 766784016),
          X64Word_create(2952996808, 2566594879),
          X64Word_create(3210313671, 3203337956),
          X64Word_create(3336571891, 1034457026),
          X64Word_create(3584528711, 2466948901),
          X64Word_create(113926993, 3758326383),
          X64Word_create(338241895, 168717936),
          X64Word_create(666307205, 1188179964),
          X64Word_create(773529912, 1546045734),
          X64Word_create(1294757372, 1522805485),
          X64Word_create(1396182291, 2643833823),
          X64Word_create(1695183700, 2343527390),
          X64Word_create(1986661051, 1014477480),
          X64Word_create(2177026350, 1206759142),
          X64Word_create(2456956037, 344077627),
          X64Word_create(2730485921, 1290863460),
          X64Word_create(2820302411, 3158454273),
          X64Word_create(3259730800, 3505952657),
          X64Word_create(3345764771, 106217008),
          X64Word_create(3516065817, 3606008344),
          X64Word_create(3600352804, 1432725776),
          X64Word_create(4094571909, 1467031594),
          X64Word_create(275423344, 851169720),
          X64Word_create(430227734, 3100823752),
          X64Word_create(506948616, 1363258195),
          X64Word_create(659060556, 3750685593),
          X64Word_create(883997877, 3785050280),
          X64Word_create(958139571, 3318307427),
          X64Word_create(1322822218, 3812723403),
          X64Word_create(1537002063, 2003034995),
          X64Word_create(1747873779, 3602036899),
          X64Word_create(1955562222, 1575990012),
          X64Word_create(2024104815, 1125592928),
          X64Word_create(2227730452, 2716904306),
          X64Word_create(2361852424, 442776044),
          X64Word_create(2428436474, 593698344),
          X64Word_create(2756734187, 3733110249),
          X64Word_create(3204031479, 2999351573),
          X64Word_create(3329325298, 3815920427),
          X64Word_create(3391569614, 3928383900),
          X64Word_create(3515267271, 566280711),
          X64Word_create(3940187606, 3454069534),
          X64Word_create(4118630271, 4000239992),
          X64Word_create(116418474, 1914138554),
          X64Word_create(174292421, 2731055270),
          X64Word_create(289380356, 3203993006),
          X64Word_create(460393269, 320620315),
          X64Word_create(685471733, 587496836),
          X64Word_create(852142971, 1086792851),
          X64Word_create(1017036298, 365543100),
          X64Word_create(1126000580, 2618297676),
          X64Word_create(1288033470, 3409855158),
          X64Word_create(1501505948, 4234509866),
          X64Word_create(1607167915, 987167468),
          X64Word_create(1816402316, 1246189591)
        ];
        var W3 = [];
        (function() {
          for (var i2 = 0; i2 < 80; i2++) {
            W3[i2] = X64Word_create();
          }
        })();
        var SHA512 = C_algo.SHA512 = Hasher.extend({
          _doReset: function() {
            this._hash = new X64WordArray.init([
              new X64Word.init(1779033703, 4089235720),
              new X64Word.init(3144134277, 2227873595),
              new X64Word.init(1013904242, 4271175723),
              new X64Word.init(2773480762, 1595750129),
              new X64Word.init(1359893119, 2917565137),
              new X64Word.init(2600822924, 725511199),
              new X64Word.init(528734635, 4215389547),
              new X64Word.init(1541459225, 327033209)
            ]);
          },
          _doProcessBlock: function(M3, offset) {
            var H3 = this._hash.words;
            var H02 = H3[0];
            var H12 = H3[1];
            var H22 = H3[2];
            var H32 = H3[3];
            var H4 = H3[4];
            var H5 = H3[5];
            var H62 = H3[6];
            var H7 = H3[7];
            var H0h = H02.high;
            var H0l = H02.low;
            var H1h = H12.high;
            var H1l = H12.low;
            var H2h = H22.high;
            var H2l = H22.low;
            var H3h = H32.high;
            var H3l = H32.low;
            var H4h = H4.high;
            var H4l = H4.low;
            var H5h = H5.high;
            var H5l = H5.low;
            var H6h = H62.high;
            var H6l = H62.low;
            var H7h = H7.high;
            var H7l = H7.low;
            var ah = H0h;
            var al = H0l;
            var bh = H1h;
            var bl = H1l;
            var ch = H2h;
            var cl = H2l;
            var dh = H3h;
            var dl = H3l;
            var eh = H4h;
            var el = H4l;
            var fh = H5h;
            var fl = H5l;
            var gh = H6h;
            var gl = H6l;
            var hh = H7h;
            var hl = H7l;
            for (var i2 = 0; i2 < 80; i2++) {
              var Wi2 = W3[i2];
              if (i2 < 16) {
                var Wih = Wi2.high = M3[offset + i2 * 2] | 0;
                var Wil = Wi2.low = M3[offset + i2 * 2 + 1] | 0;
              } else {
                var gamma0x = W3[i2 - 15];
                var gamma0xh = gamma0x.high;
                var gamma0xl = gamma0x.low;
                var gamma0h = (gamma0xh >>> 1 | gamma0xl << 31) ^ (gamma0xh >>> 8 | gamma0xl << 24) ^ gamma0xh >>> 7;
                var gamma0l = (gamma0xl >>> 1 | gamma0xh << 31) ^ (gamma0xl >>> 8 | gamma0xh << 24) ^ (gamma0xl >>> 7 | gamma0xh << 25);
                var gamma1x = W3[i2 - 2];
                var gamma1xh = gamma1x.high;
                var gamma1xl = gamma1x.low;
                var gamma1h = (gamma1xh >>> 19 | gamma1xl << 13) ^ (gamma1xh << 3 | gamma1xl >>> 29) ^ gamma1xh >>> 6;
                var gamma1l = (gamma1xl >>> 19 | gamma1xh << 13) ^ (gamma1xl << 3 | gamma1xh >>> 29) ^ (gamma1xl >>> 6 | gamma1xh << 26);
                var Wi7 = W3[i2 - 7];
                var Wi7h = Wi7.high;
                var Wi7l = Wi7.low;
                var Wi16 = W3[i2 - 16];
                var Wi16h = Wi16.high;
                var Wi16l = Wi16.low;
                var Wil = gamma0l + Wi7l;
                var Wih = gamma0h + Wi7h + (Wil >>> 0 < gamma0l >>> 0 ? 1 : 0);
                var Wil = Wil + gamma1l;
                var Wih = Wih + gamma1h + (Wil >>> 0 < gamma1l >>> 0 ? 1 : 0);
                var Wil = Wil + Wi16l;
                var Wih = Wih + Wi16h + (Wil >>> 0 < Wi16l >>> 0 ? 1 : 0);
                Wi2.high = Wih;
                Wi2.low = Wil;
              }
              var chh = eh & fh ^ ~eh & gh;
              var chl = el & fl ^ ~el & gl;
              var majh = ah & bh ^ ah & ch ^ bh & ch;
              var majl = al & bl ^ al & cl ^ bl & cl;
              var sigma0h = (ah >>> 28 | al << 4) ^ (ah << 30 | al >>> 2) ^ (ah << 25 | al >>> 7);
              var sigma0l = (al >>> 28 | ah << 4) ^ (al << 30 | ah >>> 2) ^ (al << 25 | ah >>> 7);
              var sigma1h = (eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9);
              var sigma1l = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9);
              var Ki = K3[i2];
              var Kih = Ki.high;
              var Kil = Ki.low;
              var t1l = hl + sigma1l;
              var t1h = hh + sigma1h + (t1l >>> 0 < hl >>> 0 ? 1 : 0);
              var t1l = t1l + chl;
              var t1h = t1h + chh + (t1l >>> 0 < chl >>> 0 ? 1 : 0);
              var t1l = t1l + Kil;
              var t1h = t1h + Kih + (t1l >>> 0 < Kil >>> 0 ? 1 : 0);
              var t1l = t1l + Wil;
              var t1h = t1h + Wih + (t1l >>> 0 < Wil >>> 0 ? 1 : 0);
              var t2l = sigma0l + majl;
              var t2h = sigma0h + majh + (t2l >>> 0 < sigma0l >>> 0 ? 1 : 0);
              hh = gh;
              hl = gl;
              gh = fh;
              gl = fl;
              fh = eh;
              fl = el;
              el = dl + t1l | 0;
              eh = dh + t1h + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
              dh = ch;
              dl = cl;
              ch = bh;
              cl = bl;
              bh = ah;
              bl = al;
              al = t1l + t2l | 0;
              ah = t1h + t2h + (al >>> 0 < t1l >>> 0 ? 1 : 0) | 0;
            }
            H0l = H02.low = H0l + al;
            H02.high = H0h + ah + (H0l >>> 0 < al >>> 0 ? 1 : 0);
            H1l = H12.low = H1l + bl;
            H12.high = H1h + bh + (H1l >>> 0 < bl >>> 0 ? 1 : 0);
            H2l = H22.low = H2l + cl;
            H22.high = H2h + ch + (H2l >>> 0 < cl >>> 0 ? 1 : 0);
            H3l = H32.low = H3l + dl;
            H32.high = H3h + dh + (H3l >>> 0 < dl >>> 0 ? 1 : 0);
            H4l = H4.low = H4l + el;
            H4.high = H4h + eh + (H4l >>> 0 < el >>> 0 ? 1 : 0);
            H5l = H5.low = H5l + fl;
            H5.high = H5h + fh + (H5l >>> 0 < fl >>> 0 ? 1 : 0);
            H6l = H62.low = H6l + gl;
            H62.high = H6h + gh + (H6l >>> 0 < gl >>> 0 ? 1 : 0);
            H7l = H7.low = H7l + hl;
            H7.high = H7h + hh + (H7l >>> 0 < hl >>> 0 ? 1 : 0);
          },
          _doFinalize: function() {
            var data = this._data;
            var dataWords = data.words;
            var nBitsTotal = this._nDataBytes * 8;
            var nBitsLeft = data.sigBytes * 8;
            dataWords[nBitsLeft >>> 5] |= 128 << 24 - nBitsLeft % 32;
            dataWords[(nBitsLeft + 128 >>> 10 << 5) + 30] = Math.floor(nBitsTotal / 4294967296);
            dataWords[(nBitsLeft + 128 >>> 10 << 5) + 31] = nBitsTotal;
            data.sigBytes = dataWords.length * 4;
            this._process();
            var hash3 = this._hash.toX32();
            return hash3;
          },
          clone: function() {
            var clone = Hasher.clone.call(this);
            clone._hash = this._hash.clone();
            return clone;
          },
          blockSize: 1024 / 32
        });
        C3.SHA512 = Hasher._createHelper(SHA512);
        C3.HmacSHA512 = Hasher._createHmacHelper(SHA512);
      })();
      return CryptoJS.SHA512;
    });
  }
});

// node_modules/crypto-js/sha384.js
var require_sha384 = __commonJS({
  "node_modules/crypto-js/sha384.js"(exports, module) {
    init_define_process();
    (function(root, factory, undef) {
      if (typeof exports === "object") {
        module.exports = exports = factory(require_core(), require_x64_core(), require_sha512());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./x64-core", "./sha512"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS) {
      (function() {
        var C3 = CryptoJS;
        var C_x64 = C3.x64;
        var X64Word = C_x64.Word;
        var X64WordArray = C_x64.WordArray;
        var C_algo = C3.algo;
        var SHA512 = C_algo.SHA512;
        var SHA384 = C_algo.SHA384 = SHA512.extend({
          _doReset: function() {
            this._hash = new X64WordArray.init([
              new X64Word.init(3418070365, 3238371032),
              new X64Word.init(1654270250, 914150663),
              new X64Word.init(2438529370, 812702999),
              new X64Word.init(355462360, 4144912697),
              new X64Word.init(1731405415, 4290775857),
              new X64Word.init(2394180231, 1750603025),
              new X64Word.init(3675008525, 1694076839),
              new X64Word.init(1203062813, 3204075428)
            ]);
          },
          _doFinalize: function() {
            var hash3 = SHA512._doFinalize.call(this);
            hash3.sigBytes -= 16;
            return hash3;
          }
        });
        C3.SHA384 = SHA512._createHelper(SHA384);
        C3.HmacSHA384 = SHA512._createHmacHelper(SHA384);
      })();
      return CryptoJS.SHA384;
    });
  }
});

// node_modules/crypto-js/sha3.js
var require_sha32 = __commonJS({
  "node_modules/crypto-js/sha3.js"(exports, module) {
    init_define_process();
    (function(root, factory, undef) {
      if (typeof exports === "object") {
        module.exports = exports = factory(require_core(), require_x64_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./x64-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS) {
      (function(Math2) {
        var C3 = CryptoJS;
        var C_lib = C3.lib;
        var WordArray = C_lib.WordArray;
        var Hasher = C_lib.Hasher;
        var C_x64 = C3.x64;
        var X64Word = C_x64.Word;
        var C_algo = C3.algo;
        var RHO_OFFSETS = [];
        var PI_INDEXES = [];
        var ROUND_CONSTANTS = [];
        (function() {
          var x4 = 1, y2 = 0;
          for (var t = 0; t < 24; t++) {
            RHO_OFFSETS[x4 + 5 * y2] = (t + 1) * (t + 2) / 2 % 64;
            var newX = y2 % 5;
            var newY = (2 * x4 + 3 * y2) % 5;
            x4 = newX;
            y2 = newY;
          }
          for (var x4 = 0; x4 < 5; x4++) {
            for (var y2 = 0; y2 < 5; y2++) {
              PI_INDEXES[x4 + 5 * y2] = y2 + (2 * x4 + 3 * y2) % 5 * 5;
            }
          }
          var LFSR = 1;
          for (var i2 = 0; i2 < 24; i2++) {
            var roundConstantMsw = 0;
            var roundConstantLsw = 0;
            for (var j3 = 0; j3 < 7; j3++) {
              if (LFSR & 1) {
                var bitPosition = (1 << j3) - 1;
                if (bitPosition < 32) {
                  roundConstantLsw ^= 1 << bitPosition;
                } else {
                  roundConstantMsw ^= 1 << bitPosition - 32;
                }
              }
              if (LFSR & 128) {
                LFSR = LFSR << 1 ^ 113;
              } else {
                LFSR <<= 1;
              }
            }
            ROUND_CONSTANTS[i2] = X64Word.create(roundConstantMsw, roundConstantLsw);
          }
        })();
        var T3 = [];
        (function() {
          for (var i2 = 0; i2 < 25; i2++) {
            T3[i2] = X64Word.create();
          }
        })();
        var SHA3 = C_algo.SHA3 = Hasher.extend({
          cfg: Hasher.cfg.extend({
            outputLength: 512
          }),
          _doReset: function() {
            var state = this._state = [];
            for (var i2 = 0; i2 < 25; i2++) {
              state[i2] = new X64Word.init();
            }
            this.blockSize = (1600 - 2 * this.cfg.outputLength) / 32;
          },
          _doProcessBlock: function(M3, offset) {
            var state = this._state;
            var nBlockSizeLanes = this.blockSize / 2;
            for (var i2 = 0; i2 < nBlockSizeLanes; i2++) {
              var M2i = M3[offset + 2 * i2];
              var M2i1 = M3[offset + 2 * i2 + 1];
              M2i = (M2i << 8 | M2i >>> 24) & 16711935 | (M2i << 24 | M2i >>> 8) & 4278255360;
              M2i1 = (M2i1 << 8 | M2i1 >>> 24) & 16711935 | (M2i1 << 24 | M2i1 >>> 8) & 4278255360;
              var lane = state[i2];
              lane.high ^= M2i1;
              lane.low ^= M2i;
            }
            for (var round = 0; round < 24; round++) {
              for (var x4 = 0; x4 < 5; x4++) {
                var tMsw = 0, tLsw = 0;
                for (var y2 = 0; y2 < 5; y2++) {
                  var lane = state[x4 + 5 * y2];
                  tMsw ^= lane.high;
                  tLsw ^= lane.low;
                }
                var Tx = T3[x4];
                Tx.high = tMsw;
                Tx.low = tLsw;
              }
              for (var x4 = 0; x4 < 5; x4++) {
                var Tx4 = T3[(x4 + 4) % 5];
                var Tx1 = T3[(x4 + 1) % 5];
                var Tx1Msw = Tx1.high;
                var Tx1Lsw = Tx1.low;
                var tMsw = Tx4.high ^ (Tx1Msw << 1 | Tx1Lsw >>> 31);
                var tLsw = Tx4.low ^ (Tx1Lsw << 1 | Tx1Msw >>> 31);
                for (var y2 = 0; y2 < 5; y2++) {
                  var lane = state[x4 + 5 * y2];
                  lane.high ^= tMsw;
                  lane.low ^= tLsw;
                }
              }
              for (var laneIndex = 1; laneIndex < 25; laneIndex++) {
                var lane = state[laneIndex];
                var laneMsw = lane.high;
                var laneLsw = lane.low;
                var rhoOffset = RHO_OFFSETS[laneIndex];
                if (rhoOffset < 32) {
                  var tMsw = laneMsw << rhoOffset | laneLsw >>> 32 - rhoOffset;
                  var tLsw = laneLsw << rhoOffset | laneMsw >>> 32 - rhoOffset;
                } else {
                  var tMsw = laneLsw << rhoOffset - 32 | laneMsw >>> 64 - rhoOffset;
                  var tLsw = laneMsw << rhoOffset - 32 | laneLsw >>> 64 - rhoOffset;
                }
                var TPiLane = T3[PI_INDEXES[laneIndex]];
                TPiLane.high = tMsw;
                TPiLane.low = tLsw;
              }
              var T02 = T3[0];
              var state0 = state[0];
              T02.high = state0.high;
              T02.low = state0.low;
              for (var x4 = 0; x4 < 5; x4++) {
                for (var y2 = 0; y2 < 5; y2++) {
                  var laneIndex = x4 + 5 * y2;
                  var lane = state[laneIndex];
                  var TLane = T3[laneIndex];
                  var Tx1Lane = T3[(x4 + 1) % 5 + 5 * y2];
                  var Tx2Lane = T3[(x4 + 2) % 5 + 5 * y2];
                  lane.high = TLane.high ^ ~Tx1Lane.high & Tx2Lane.high;
                  lane.low = TLane.low ^ ~Tx1Lane.low & Tx2Lane.low;
                }
              }
              var lane = state[0];
              var roundConstant = ROUND_CONSTANTS[round];
              lane.high ^= roundConstant.high;
              lane.low ^= roundConstant.low;
              ;
            }
          },
          _doFinalize: function() {
            var data = this._data;
            var dataWords = data.words;
            var nBitsTotal = this._nDataBytes * 8;
            var nBitsLeft = data.sigBytes * 8;
            var blockSizeBits = this.blockSize * 32;
            dataWords[nBitsLeft >>> 5] |= 1 << 24 - nBitsLeft % 32;
            dataWords[(Math2.ceil((nBitsLeft + 1) / blockSizeBits) * blockSizeBits >>> 5) - 1] |= 128;
            data.sigBytes = dataWords.length * 4;
            this._process();
            var state = this._state;
            var outputLengthBytes = this.cfg.outputLength / 8;
            var outputLengthLanes = outputLengthBytes / 8;
            var hashWords = [];
            for (var i2 = 0; i2 < outputLengthLanes; i2++) {
              var lane = state[i2];
              var laneMsw = lane.high;
              var laneLsw = lane.low;
              laneMsw = (laneMsw << 8 | laneMsw >>> 24) & 16711935 | (laneMsw << 24 | laneMsw >>> 8) & 4278255360;
              laneLsw = (laneLsw << 8 | laneLsw >>> 24) & 16711935 | (laneLsw << 24 | laneLsw >>> 8) & 4278255360;
              hashWords.push(laneLsw);
              hashWords.push(laneMsw);
            }
            return new WordArray.init(hashWords, outputLengthBytes);
          },
          clone: function() {
            var clone = Hasher.clone.call(this);
            var state = clone._state = this._state.slice(0);
            for (var i2 = 0; i2 < 25; i2++) {
              state[i2] = state[i2].clone();
            }
            return clone;
          }
        });
        C3.SHA3 = Hasher._createHelper(SHA3);
        C3.HmacSHA3 = Hasher._createHmacHelper(SHA3);
      })(Math);
      return CryptoJS.SHA3;
    });
  }
});

// node_modules/crypto-js/ripemd160.js
var require_ripemd160 = __commonJS({
  "node_modules/crypto-js/ripemd160.js"(exports, module) {
    init_define_process();
    (function(root, factory) {
      if (typeof exports === "object") {
        module.exports = exports = factory(require_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS) {
      (function(Math2) {
        var C3 = CryptoJS;
        var C_lib = C3.lib;
        var WordArray = C_lib.WordArray;
        var Hasher = C_lib.Hasher;
        var C_algo = C3.algo;
        var _zl = WordArray.create([
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9,
          10,
          11,
          12,
          13,
          14,
          15,
          7,
          4,
          13,
          1,
          10,
          6,
          15,
          3,
          12,
          0,
          9,
          5,
          2,
          14,
          11,
          8,
          3,
          10,
          14,
          4,
          9,
          15,
          8,
          1,
          2,
          7,
          0,
          6,
          13,
          11,
          5,
          12,
          1,
          9,
          11,
          10,
          0,
          8,
          12,
          4,
          13,
          3,
          7,
          15,
          14,
          5,
          6,
          2,
          4,
          0,
          5,
          9,
          7,
          12,
          2,
          10,
          14,
          1,
          3,
          8,
          11,
          6,
          15,
          13
        ]);
        var _zr = WordArray.create([
          5,
          14,
          7,
          0,
          9,
          2,
          11,
          4,
          13,
          6,
          15,
          8,
          1,
          10,
          3,
          12,
          6,
          11,
          3,
          7,
          0,
          13,
          5,
          10,
          14,
          15,
          8,
          12,
          4,
          9,
          1,
          2,
          15,
          5,
          1,
          3,
          7,
          14,
          6,
          9,
          11,
          8,
          12,
          2,
          10,
          0,
          4,
          13,
          8,
          6,
          4,
          1,
          3,
          11,
          15,
          0,
          5,
          12,
          2,
          13,
          9,
          7,
          10,
          14,
          12,
          15,
          10,
          4,
          1,
          5,
          8,
          7,
          6,
          2,
          13,
          14,
          0,
          3,
          9,
          11
        ]);
        var _sl = WordArray.create([
          11,
          14,
          15,
          12,
          5,
          8,
          7,
          9,
          11,
          13,
          14,
          15,
          6,
          7,
          9,
          8,
          7,
          6,
          8,
          13,
          11,
          9,
          7,
          15,
          7,
          12,
          15,
          9,
          11,
          7,
          13,
          12,
          11,
          13,
          6,
          7,
          14,
          9,
          13,
          15,
          14,
          8,
          13,
          6,
          5,
          12,
          7,
          5,
          11,
          12,
          14,
          15,
          14,
          15,
          9,
          8,
          9,
          14,
          5,
          6,
          8,
          6,
          5,
          12,
          9,
          15,
          5,
          11,
          6,
          8,
          13,
          12,
          5,
          12,
          13,
          14,
          11,
          8,
          5,
          6
        ]);
        var _sr = WordArray.create([
          8,
          9,
          9,
          11,
          13,
          15,
          15,
          5,
          7,
          7,
          8,
          11,
          14,
          14,
          12,
          6,
          9,
          13,
          15,
          7,
          12,
          8,
          9,
          11,
          7,
          7,
          12,
          7,
          6,
          15,
          13,
          11,
          9,
          7,
          15,
          11,
          8,
          6,
          6,
          14,
          12,
          13,
          5,
          14,
          13,
          13,
          7,
          5,
          15,
          5,
          8,
          11,
          14,
          14,
          6,
          14,
          6,
          9,
          12,
          9,
          12,
          5,
          15,
          8,
          8,
          5,
          12,
          9,
          12,
          5,
          14,
          6,
          8,
          13,
          6,
          5,
          15,
          13,
          11,
          11
        ]);
        var _hl = WordArray.create([0, 1518500249, 1859775393, 2400959708, 2840853838]);
        var _hr = WordArray.create([1352829926, 1548603684, 1836072691, 2053994217, 0]);
        var RIPEMD160 = C_algo.RIPEMD160 = Hasher.extend({
          _doReset: function() {
            this._hash = WordArray.create([1732584193, 4023233417, 2562383102, 271733878, 3285377520]);
          },
          _doProcessBlock: function(M3, offset) {
            for (var i2 = 0; i2 < 16; i2++) {
              var offset_i = offset + i2;
              var M_offset_i = M3[offset_i];
              M3[offset_i] = (M_offset_i << 8 | M_offset_i >>> 24) & 16711935 | (M_offset_i << 24 | M_offset_i >>> 8) & 4278255360;
            }
            var H3 = this._hash.words;
            var hl = _hl.words;
            var hr2 = _hr.words;
            var zl = _zl.words;
            var zr2 = _zr.words;
            var sl = _sl.words;
            var sr2 = _sr.words;
            var al, bl, cl, dl, el;
            var ar, br2, cr2, dr2, er2;
            ar = al = H3[0];
            br2 = bl = H3[1];
            cr2 = cl = H3[2];
            dr2 = dl = H3[3];
            er2 = el = H3[4];
            var t;
            for (var i2 = 0; i2 < 80; i2 += 1) {
              t = al + M3[offset + zl[i2]] | 0;
              if (i2 < 16) {
                t += f12(bl, cl, dl) + hl[0];
              } else if (i2 < 32) {
                t += f22(bl, cl, dl) + hl[1];
              } else if (i2 < 48) {
                t += f3(bl, cl, dl) + hl[2];
              } else if (i2 < 64) {
                t += f4(bl, cl, dl) + hl[3];
              } else {
                t += f5(bl, cl, dl) + hl[4];
              }
              t = t | 0;
              t = rotl(t, sl[i2]);
              t = t + el | 0;
              al = el;
              el = dl;
              dl = rotl(cl, 10);
              cl = bl;
              bl = t;
              t = ar + M3[offset + zr2[i2]] | 0;
              if (i2 < 16) {
                t += f5(br2, cr2, dr2) + hr2[0];
              } else if (i2 < 32) {
                t += f4(br2, cr2, dr2) + hr2[1];
              } else if (i2 < 48) {
                t += f3(br2, cr2, dr2) + hr2[2];
              } else if (i2 < 64) {
                t += f22(br2, cr2, dr2) + hr2[3];
              } else {
                t += f12(br2, cr2, dr2) + hr2[4];
              }
              t = t | 0;
              t = rotl(t, sr2[i2]);
              t = t + er2 | 0;
              ar = er2;
              er2 = dr2;
              dr2 = rotl(cr2, 10);
              cr2 = br2;
              br2 = t;
            }
            t = H3[1] + cl + dr2 | 0;
            H3[1] = H3[2] + dl + er2 | 0;
            H3[2] = H3[3] + el + ar | 0;
            H3[3] = H3[4] + al + br2 | 0;
            H3[4] = H3[0] + bl + cr2 | 0;
            H3[0] = t;
          },
          _doFinalize: function() {
            var data = this._data;
            var dataWords = data.words;
            var nBitsTotal = this._nDataBytes * 8;
            var nBitsLeft = data.sigBytes * 8;
            dataWords[nBitsLeft >>> 5] |= 128 << 24 - nBitsLeft % 32;
            dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = (nBitsTotal << 8 | nBitsTotal >>> 24) & 16711935 | (nBitsTotal << 24 | nBitsTotal >>> 8) & 4278255360;
            data.sigBytes = (dataWords.length + 1) * 4;
            this._process();
            var hash3 = this._hash;
            var H3 = hash3.words;
            for (var i2 = 0; i2 < 5; i2++) {
              var H_i = H3[i2];
              H3[i2] = (H_i << 8 | H_i >>> 24) & 16711935 | (H_i << 24 | H_i >>> 8) & 4278255360;
            }
            return hash3;
          },
          clone: function() {
            var clone = Hasher.clone.call(this);
            clone._hash = this._hash.clone();
            return clone;
          }
        });
        function f12(x4, y2, z3) {
          return x4 ^ y2 ^ z3;
        }
        function f22(x4, y2, z3) {
          return x4 & y2 | ~x4 & z3;
        }
        function f3(x4, y2, z3) {
          return (x4 | ~y2) ^ z3;
        }
        function f4(x4, y2, z3) {
          return x4 & z3 | y2 & ~z3;
        }
        function f5(x4, y2, z3) {
          return x4 ^ (y2 | ~z3);
        }
        function rotl(x4, n) {
          return x4 << n | x4 >>> 32 - n;
        }
        C3.RIPEMD160 = Hasher._createHelper(RIPEMD160);
        C3.HmacRIPEMD160 = Hasher._createHmacHelper(RIPEMD160);
      })(Math);
      return CryptoJS.RIPEMD160;
    });
  }
});

// node_modules/crypto-js/hmac.js
var require_hmac2 = __commonJS({
  "node_modules/crypto-js/hmac.js"(exports, module) {
    init_define_process();
    (function(root, factory) {
      if (typeof exports === "object") {
        module.exports = exports = factory(require_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS) {
      (function() {
        var C3 = CryptoJS;
        var C_lib = C3.lib;
        var Base = C_lib.Base;
        var C_enc = C3.enc;
        var Utf8 = C_enc.Utf8;
        var C_algo = C3.algo;
        var HMAC = C_algo.HMAC = Base.extend({
          init: function(hasher, key2) {
            hasher = this._hasher = new hasher.init();
            if (typeof key2 == "string") {
              key2 = Utf8.parse(key2);
            }
            var hasherBlockSize = hasher.blockSize;
            var hasherBlockSizeBytes = hasherBlockSize * 4;
            if (key2.sigBytes > hasherBlockSizeBytes) {
              key2 = hasher.finalize(key2);
            }
            key2.clamp();
            var oKey = this._oKey = key2.clone();
            var iKey = this._iKey = key2.clone();
            var oKeyWords = oKey.words;
            var iKeyWords = iKey.words;
            for (var i2 = 0; i2 < hasherBlockSize; i2++) {
              oKeyWords[i2] ^= 1549556828;
              iKeyWords[i2] ^= 909522486;
            }
            oKey.sigBytes = iKey.sigBytes = hasherBlockSizeBytes;
            this.reset();
          },
          reset: function() {
            var hasher = this._hasher;
            hasher.reset();
            hasher.update(this._iKey);
          },
          update: function(messageUpdate) {
            this._hasher.update(messageUpdate);
            return this;
          },
          finalize: function(messageUpdate) {
            var hasher = this._hasher;
            var innerHash = hasher.finalize(messageUpdate);
            hasher.reset();
            var hmac2 = hasher.finalize(this._oKey.clone().concat(innerHash));
            return hmac2;
          }
        });
      })();
    });
  }
});

// node_modules/crypto-js/pbkdf2.js
var require_pbkdf2 = __commonJS({
  "node_modules/crypto-js/pbkdf2.js"(exports, module) {
    init_define_process();
    (function(root, factory, undef) {
      if (typeof exports === "object") {
        module.exports = exports = factory(require_core(), require_sha1(), require_hmac2());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./sha1", "./hmac"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS) {
      (function() {
        var C3 = CryptoJS;
        var C_lib = C3.lib;
        var Base = C_lib.Base;
        var WordArray = C_lib.WordArray;
        var C_algo = C3.algo;
        var SHA1 = C_algo.SHA1;
        var HMAC = C_algo.HMAC;
        var PBKDF2 = C_algo.PBKDF2 = Base.extend({
          cfg: Base.extend({
            keySize: 128 / 32,
            hasher: SHA1,
            iterations: 1
          }),
          init: function(cfg) {
            this.cfg = this.cfg.extend(cfg);
          },
          compute: function(password, salt) {
            var cfg = this.cfg;
            var hmac2 = HMAC.create(cfg.hasher, password);
            var derivedKey = WordArray.create();
            var blockIndex = WordArray.create([1]);
            var derivedKeyWords = derivedKey.words;
            var blockIndexWords = blockIndex.words;
            var keySize = cfg.keySize;
            var iterations = cfg.iterations;
            while (derivedKeyWords.length < keySize) {
              var block = hmac2.update(salt).finalize(blockIndex);
              hmac2.reset();
              var blockWords = block.words;
              var blockWordsLength = blockWords.length;
              var intermediate = block;
              for (var i2 = 1; i2 < iterations; i2++) {
                intermediate = hmac2.finalize(intermediate);
                hmac2.reset();
                var intermediateWords = intermediate.words;
                for (var j3 = 0; j3 < blockWordsLength; j3++) {
                  blockWords[j3] ^= intermediateWords[j3];
                }
              }
              derivedKey.concat(block);
              blockIndexWords[0]++;
            }
            derivedKey.sigBytes = keySize * 4;
            return derivedKey;
          }
        });
        C3.PBKDF2 = function(password, salt, cfg) {
          return PBKDF2.create(cfg).compute(password, salt);
        };
      })();
      return CryptoJS.PBKDF2;
    });
  }
});

// node_modules/crypto-js/evpkdf.js
var require_evpkdf = __commonJS({
  "node_modules/crypto-js/evpkdf.js"(exports, module) {
    init_define_process();
    (function(root, factory, undef) {
      if (typeof exports === "object") {
        module.exports = exports = factory(require_core(), require_sha1(), require_hmac2());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./sha1", "./hmac"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS) {
      (function() {
        var C3 = CryptoJS;
        var C_lib = C3.lib;
        var Base = C_lib.Base;
        var WordArray = C_lib.WordArray;
        var C_algo = C3.algo;
        var MD5 = C_algo.MD5;
        var EvpKDF = C_algo.EvpKDF = Base.extend({
          cfg: Base.extend({
            keySize: 128 / 32,
            hasher: MD5,
            iterations: 1
          }),
          init: function(cfg) {
            this.cfg = this.cfg.extend(cfg);
          },
          compute: function(password, salt) {
            var cfg = this.cfg;
            var hasher = cfg.hasher.create();
            var derivedKey = WordArray.create();
            var derivedKeyWords = derivedKey.words;
            var keySize = cfg.keySize;
            var iterations = cfg.iterations;
            while (derivedKeyWords.length < keySize) {
              if (block) {
                hasher.update(block);
              }
              var block = hasher.update(password).finalize(salt);
              hasher.reset();
              for (var i2 = 1; i2 < iterations; i2++) {
                block = hasher.finalize(block);
                hasher.reset();
              }
              derivedKey.concat(block);
            }
            derivedKey.sigBytes = keySize * 4;
            return derivedKey;
          }
        });
        C3.EvpKDF = function(password, salt, cfg) {
          return EvpKDF.create(cfg).compute(password, salt);
        };
      })();
      return CryptoJS.EvpKDF;
    });
  }
});

// node_modules/crypto-js/cipher-core.js
var require_cipher_core = __commonJS({
  "node_modules/crypto-js/cipher-core.js"(exports, module) {
    init_define_process();
    (function(root, factory, undef) {
      if (typeof exports === "object") {
        module.exports = exports = factory(require_core(), require_evpkdf());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./evpkdf"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS) {
      CryptoJS.lib.Cipher || function(undefined2) {
        var C3 = CryptoJS;
        var C_lib = C3.lib;
        var Base = C_lib.Base;
        var WordArray = C_lib.WordArray;
        var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm;
        var C_enc = C3.enc;
        var Utf8 = C_enc.Utf8;
        var Base64 = C_enc.Base64;
        var C_algo = C3.algo;
        var EvpKDF = C_algo.EvpKDF;
        var Cipher = C_lib.Cipher = BufferedBlockAlgorithm.extend({
          cfg: Base.extend(),
          createEncryptor: function(key2, cfg) {
            return this.create(this._ENC_XFORM_MODE, key2, cfg);
          },
          createDecryptor: function(key2, cfg) {
            return this.create(this._DEC_XFORM_MODE, key2, cfg);
          },
          init: function(xformMode, key2, cfg) {
            this.cfg = this.cfg.extend(cfg);
            this._xformMode = xformMode;
            this._key = key2;
            this.reset();
          },
          reset: function() {
            BufferedBlockAlgorithm.reset.call(this);
            this._doReset();
          },
          process: function(dataUpdate) {
            this._append(dataUpdate);
            return this._process();
          },
          finalize: function(dataUpdate) {
            if (dataUpdate) {
              this._append(dataUpdate);
            }
            var finalProcessedData = this._doFinalize();
            return finalProcessedData;
          },
          keySize: 128 / 32,
          ivSize: 128 / 32,
          _ENC_XFORM_MODE: 1,
          _DEC_XFORM_MODE: 2,
          _createHelper: function() {
            function selectCipherStrategy(key2) {
              if (typeof key2 == "string") {
                return PasswordBasedCipher;
              } else {
                return SerializableCipher;
              }
            }
            return function(cipher) {
              return {
                encrypt: function(message, key2, cfg) {
                  return selectCipherStrategy(key2).encrypt(cipher, message, key2, cfg);
                },
                decrypt: function(ciphertext, key2, cfg) {
                  return selectCipherStrategy(key2).decrypt(cipher, ciphertext, key2, cfg);
                }
              };
            };
          }()
        });
        var StreamCipher = C_lib.StreamCipher = Cipher.extend({
          _doFinalize: function() {
            var finalProcessedBlocks = this._process(true);
            return finalProcessedBlocks;
          },
          blockSize: 1
        });
        var C_mode = C3.mode = {};
        var BlockCipherMode = C_lib.BlockCipherMode = Base.extend({
          createEncryptor: function(cipher, iv) {
            return this.Encryptor.create(cipher, iv);
          },
          createDecryptor: function(cipher, iv) {
            return this.Decryptor.create(cipher, iv);
          },
          init: function(cipher, iv) {
            this._cipher = cipher;
            this._iv = iv;
          }
        });
        var CBC = C_mode.CBC = function() {
          var CBC2 = BlockCipherMode.extend();
          CBC2.Encryptor = CBC2.extend({
            processBlock: function(words2, offset) {
              var cipher = this._cipher;
              var blockSize = cipher.blockSize;
              xorBlock.call(this, words2, offset, blockSize);
              cipher.encryptBlock(words2, offset);
              this._prevBlock = words2.slice(offset, offset + blockSize);
            }
          });
          CBC2.Decryptor = CBC2.extend({
            processBlock: function(words2, offset) {
              var cipher = this._cipher;
              var blockSize = cipher.blockSize;
              var thisBlock = words2.slice(offset, offset + blockSize);
              cipher.decryptBlock(words2, offset);
              xorBlock.call(this, words2, offset, blockSize);
              this._prevBlock = thisBlock;
            }
          });
          function xorBlock(words2, offset, blockSize) {
            var iv = this._iv;
            if (iv) {
              var block = iv;
              this._iv = undefined2;
            } else {
              var block = this._prevBlock;
            }
            for (var i2 = 0; i2 < blockSize; i2++) {
              words2[offset + i2] ^= block[i2];
            }
          }
          return CBC2;
        }();
        var C_pad = C3.pad = {};
        var Pkcs7 = C_pad.Pkcs7 = {
          pad: function(data, blockSize) {
            var blockSizeBytes = blockSize * 4;
            var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes;
            var paddingWord = nPaddingBytes << 24 | nPaddingBytes << 16 | nPaddingBytes << 8 | nPaddingBytes;
            var paddingWords = [];
            for (var i2 = 0; i2 < nPaddingBytes; i2 += 4) {
              paddingWords.push(paddingWord);
            }
            var padding2 = WordArray.create(paddingWords, nPaddingBytes);
            data.concat(padding2);
          },
          unpad: function(data) {
            var nPaddingBytes = data.words[data.sigBytes - 1 >>> 2] & 255;
            data.sigBytes -= nPaddingBytes;
          }
        };
        var BlockCipher = C_lib.BlockCipher = Cipher.extend({
          cfg: Cipher.cfg.extend({
            mode: CBC,
            padding: Pkcs7
          }),
          reset: function() {
            Cipher.reset.call(this);
            var cfg = this.cfg;
            var iv = cfg.iv;
            var mode = cfg.mode;
            if (this._xformMode == this._ENC_XFORM_MODE) {
              var modeCreator = mode.createEncryptor;
            } else {
              var modeCreator = mode.createDecryptor;
              this._minBufferSize = 1;
            }
            if (this._mode && this._mode.__creator == modeCreator) {
              this._mode.init(this, iv && iv.words);
            } else {
              this._mode = modeCreator.call(mode, this, iv && iv.words);
              this._mode.__creator = modeCreator;
            }
          },
          _doProcessBlock: function(words2, offset) {
            this._mode.processBlock(words2, offset);
          },
          _doFinalize: function() {
            var padding2 = this.cfg.padding;
            if (this._xformMode == this._ENC_XFORM_MODE) {
              padding2.pad(this._data, this.blockSize);
              var finalProcessedBlocks = this._process(true);
            } else {
              var finalProcessedBlocks = this._process(true);
              padding2.unpad(finalProcessedBlocks);
            }
            return finalProcessedBlocks;
          },
          blockSize: 128 / 32
        });
        var CipherParams = C_lib.CipherParams = Base.extend({
          init: function(cipherParams) {
            this.mixIn(cipherParams);
          },
          toString: function(formatter) {
            return (formatter || this.formatter).stringify(this);
          }
        });
        var C_format = C3.format = {};
        var OpenSSLFormatter = C_format.OpenSSL = {
          stringify: function(cipherParams) {
            var ciphertext = cipherParams.ciphertext;
            var salt = cipherParams.salt;
            if (salt) {
              var wordArray = WordArray.create([1398893684, 1701076831]).concat(salt).concat(ciphertext);
            } else {
              var wordArray = ciphertext;
            }
            return wordArray.toString(Base64);
          },
          parse: function(openSSLStr) {
            var ciphertext = Base64.parse(openSSLStr);
            var ciphertextWords = ciphertext.words;
            if (ciphertextWords[0] == 1398893684 && ciphertextWords[1] == 1701076831) {
              var salt = WordArray.create(ciphertextWords.slice(2, 4));
              ciphertextWords.splice(0, 4);
              ciphertext.sigBytes -= 16;
            }
            return CipherParams.create({ ciphertext, salt });
          }
        };
        var SerializableCipher = C_lib.SerializableCipher = Base.extend({
          cfg: Base.extend({
            format: OpenSSLFormatter
          }),
          encrypt: function(cipher, message, key2, cfg) {
            cfg = this.cfg.extend(cfg);
            var encryptor = cipher.createEncryptor(key2, cfg);
            var ciphertext = encryptor.finalize(message);
            var cipherCfg = encryptor.cfg;
            return CipherParams.create({
              ciphertext,
              key: key2,
              iv: cipherCfg.iv,
              algorithm: cipher,
              mode: cipherCfg.mode,
              padding: cipherCfg.padding,
              blockSize: cipher.blockSize,
              formatter: cfg.format
            });
          },
          decrypt: function(cipher, ciphertext, key2, cfg) {
            cfg = this.cfg.extend(cfg);
            ciphertext = this._parse(ciphertext, cfg.format);
            var plaintext = cipher.createDecryptor(key2, cfg).finalize(ciphertext.ciphertext);
            return plaintext;
          },
          _parse: function(ciphertext, format) {
            if (typeof ciphertext == "string") {
              return format.parse(ciphertext, this);
            } else {
              return ciphertext;
            }
          }
        });
        var C_kdf = C3.kdf = {};
        var OpenSSLKdf = C_kdf.OpenSSL = {
          execute: function(password, keySize, ivSize, salt) {
            if (!salt) {
              salt = WordArray.random(64 / 8);
            }
            var key2 = EvpKDF.create({ keySize: keySize + ivSize }).compute(password, salt);
            var iv = WordArray.create(key2.words.slice(keySize), ivSize * 4);
            key2.sigBytes = keySize * 4;
            return CipherParams.create({ key: key2, iv, salt });
          }
        };
        var PasswordBasedCipher = C_lib.PasswordBasedCipher = SerializableCipher.extend({
          cfg: SerializableCipher.cfg.extend({
            kdf: OpenSSLKdf
          }),
          encrypt: function(cipher, message, password, cfg) {
            cfg = this.cfg.extend(cfg);
            var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize);
            cfg.iv = derivedParams.iv;
            var ciphertext = SerializableCipher.encrypt.call(this, cipher, message, derivedParams.key, cfg);
            ciphertext.mixIn(derivedParams);
            return ciphertext;
          },
          decrypt: function(cipher, ciphertext, password, cfg) {
            cfg = this.cfg.extend(cfg);
            ciphertext = this._parse(ciphertext, cfg.format);
            var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize, ciphertext.salt);
            cfg.iv = derivedParams.iv;
            var plaintext = SerializableCipher.decrypt.call(this, cipher, ciphertext, derivedParams.key, cfg);
            return plaintext;
          }
        });
      }();
    });
  }
});

// node_modules/crypto-js/mode-cfb.js
var require_mode_cfb = __commonJS({
  "node_modules/crypto-js/mode-cfb.js"(exports, module) {
    init_define_process();
    (function(root, factory, undef) {
      if (typeof exports === "object") {
        module.exports = exports = factory(require_core(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS) {
      CryptoJS.mode.CFB = function() {
        var CFB = CryptoJS.lib.BlockCipherMode.extend();
        CFB.Encryptor = CFB.extend({
          processBlock: function(words2, offset) {
            var cipher = this._cipher;
            var blockSize = cipher.blockSize;
            generateKeystreamAndEncrypt.call(this, words2, offset, blockSize, cipher);
            this._prevBlock = words2.slice(offset, offset + blockSize);
          }
        });
        CFB.Decryptor = CFB.extend({
          processBlock: function(words2, offset) {
            var cipher = this._cipher;
            var blockSize = cipher.blockSize;
            var thisBlock = words2.slice(offset, offset + blockSize);
            generateKeystreamAndEncrypt.call(this, words2, offset, blockSize, cipher);
            this._prevBlock = thisBlock;
          }
        });
        function generateKeystreamAndEncrypt(words2, offset, blockSize, cipher) {
          var iv = this._iv;
          if (iv) {
            var keystream = iv.slice(0);
            this._iv = void 0;
          } else {
            var keystream = this._prevBlock;
          }
          cipher.encryptBlock(keystream, 0);
          for (var i2 = 0; i2 < blockSize; i2++) {
            words2[offset + i2] ^= keystream[i2];
          }
        }
        return CFB;
      }();
      return CryptoJS.mode.CFB;
    });
  }
});

// node_modules/crypto-js/mode-ctr.js
var require_mode_ctr = __commonJS({
  "node_modules/crypto-js/mode-ctr.js"(exports, module) {
    init_define_process();
    (function(root, factory, undef) {
      if (typeof exports === "object") {
        module.exports = exports = factory(require_core(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS) {
      CryptoJS.mode.CTR = function() {
        var CTR = CryptoJS.lib.BlockCipherMode.extend();
        var Encryptor = CTR.Encryptor = CTR.extend({
          processBlock: function(words2, offset) {
            var cipher = this._cipher;
            var blockSize = cipher.blockSize;
            var iv = this._iv;
            var counter = this._counter;
            if (iv) {
              counter = this._counter = iv.slice(0);
              this._iv = void 0;
            }
            var keystream = counter.slice(0);
            cipher.encryptBlock(keystream, 0);
            counter[blockSize - 1] = counter[blockSize - 1] + 1 | 0;
            for (var i2 = 0; i2 < blockSize; i2++) {
              words2[offset + i2] ^= keystream[i2];
            }
          }
        });
        CTR.Decryptor = Encryptor;
        return CTR;
      }();
      return CryptoJS.mode.CTR;
    });
  }
});

// node_modules/crypto-js/mode-ctr-gladman.js
var require_mode_ctr_gladman = __commonJS({
  "node_modules/crypto-js/mode-ctr-gladman.js"(exports, module) {
    init_define_process();
    (function(root, factory, undef) {
      if (typeof exports === "object") {
        module.exports = exports = factory(require_core(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS) {
      CryptoJS.mode.CTRGladman = function() {
        var CTRGladman = CryptoJS.lib.BlockCipherMode.extend();
        function incWord(word) {
          if ((word >> 24 & 255) === 255) {
            var b12 = word >> 16 & 255;
            var b2 = word >> 8 & 255;
            var b3 = word & 255;
            if (b12 === 255) {
              b12 = 0;
              if (b2 === 255) {
                b2 = 0;
                if (b3 === 255) {
                  b3 = 0;
                } else {
                  ++b3;
                }
              } else {
                ++b2;
              }
            } else {
              ++b12;
            }
            word = 0;
            word += b12 << 16;
            word += b2 << 8;
            word += b3;
          } else {
            word += 1 << 24;
          }
          return word;
        }
        function incCounter(counter) {
          if ((counter[0] = incWord(counter[0])) === 0) {
            counter[1] = incWord(counter[1]);
          }
          return counter;
        }
        var Encryptor = CTRGladman.Encryptor = CTRGladman.extend({
          processBlock: function(words2, offset) {
            var cipher = this._cipher;
            var blockSize = cipher.blockSize;
            var iv = this._iv;
            var counter = this._counter;
            if (iv) {
              counter = this._counter = iv.slice(0);
              this._iv = void 0;
            }
            incCounter(counter);
            var keystream = counter.slice(0);
            cipher.encryptBlock(keystream, 0);
            for (var i2 = 0; i2 < blockSize; i2++) {
              words2[offset + i2] ^= keystream[i2];
            }
          }
        });
        CTRGladman.Decryptor = Encryptor;
        return CTRGladman;
      }();
      return CryptoJS.mode.CTRGladman;
    });
  }
});

// node_modules/crypto-js/mode-ofb.js
var require_mode_ofb = __commonJS({
  "node_modules/crypto-js/mode-ofb.js"(exports, module) {
    init_define_process();
    (function(root, factory, undef) {
      if (typeof exports === "object") {
        module.exports = exports = factory(require_core(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS) {
      CryptoJS.mode.OFB = function() {
        var OFB = CryptoJS.lib.BlockCipherMode.extend();
        var Encryptor = OFB.Encryptor = OFB.extend({
          processBlock: function(words2, offset) {
            var cipher = this._cipher;
            var blockSize = cipher.blockSize;
            var iv = this._iv;
            var keystream = this._keystream;
            if (iv) {
              keystream = this._keystream = iv.slice(0);
              this._iv = void 0;
            }
            cipher.encryptBlock(keystream, 0);
            for (var i2 = 0; i2 < blockSize; i2++) {
              words2[offset + i2] ^= keystream[i2];
            }
          }
        });
        OFB.Decryptor = Encryptor;
        return OFB;
      }();
      return CryptoJS.mode.OFB;
    });
  }
});

// node_modules/crypto-js/mode-ecb.js
var require_mode_ecb = __commonJS({
  "node_modules/crypto-js/mode-ecb.js"(exports, module) {
    init_define_process();
    (function(root, factory, undef) {
      if (typeof exports === "object") {
        module.exports = exports = factory(require_core(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS) {
      CryptoJS.mode.ECB = function() {
        var ECB = CryptoJS.lib.BlockCipherMode.extend();
        ECB.Encryptor = ECB.extend({
          processBlock: function(words2, offset) {
            this._cipher.encryptBlock(words2, offset);
          }
        });
        ECB.Decryptor = ECB.extend({
          processBlock: function(words2, offset) {
            this._cipher.decryptBlock(words2, offset);
          }
        });
        return ECB;
      }();
      return CryptoJS.mode.ECB;
    });
  }
});

// node_modules/crypto-js/pad-ansix923.js
var require_pad_ansix923 = __commonJS({
  "node_modules/crypto-js/pad-ansix923.js"(exports, module) {
    init_define_process();
    (function(root, factory, undef) {
      if (typeof exports === "object") {
        module.exports = exports = factory(require_core(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS) {
      CryptoJS.pad.AnsiX923 = {
        pad: function(data, blockSize) {
          var dataSigBytes = data.sigBytes;
          var blockSizeBytes = blockSize * 4;
          var nPaddingBytes = blockSizeBytes - dataSigBytes % blockSizeBytes;
          var lastBytePos = dataSigBytes + nPaddingBytes - 1;
          data.clamp();
          data.words[lastBytePos >>> 2] |= nPaddingBytes << 24 - lastBytePos % 4 * 8;
          data.sigBytes += nPaddingBytes;
        },
        unpad: function(data) {
          var nPaddingBytes = data.words[data.sigBytes - 1 >>> 2] & 255;
          data.sigBytes -= nPaddingBytes;
        }
      };
      return CryptoJS.pad.Ansix923;
    });
  }
});

// node_modules/crypto-js/pad-iso10126.js
var require_pad_iso10126 = __commonJS({
  "node_modules/crypto-js/pad-iso10126.js"(exports, module) {
    init_define_process();
    (function(root, factory, undef) {
      if (typeof exports === "object") {
        module.exports = exports = factory(require_core(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS) {
      CryptoJS.pad.Iso10126 = {
        pad: function(data, blockSize) {
          var blockSizeBytes = blockSize * 4;
          var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes;
          data.concat(CryptoJS.lib.WordArray.random(nPaddingBytes - 1)).concat(CryptoJS.lib.WordArray.create([nPaddingBytes << 24], 1));
        },
        unpad: function(data) {
          var nPaddingBytes = data.words[data.sigBytes - 1 >>> 2] & 255;
          data.sigBytes -= nPaddingBytes;
        }
      };
      return CryptoJS.pad.Iso10126;
    });
  }
});

// node_modules/crypto-js/pad-iso97971.js
var require_pad_iso97971 = __commonJS({
  "node_modules/crypto-js/pad-iso97971.js"(exports, module) {
    init_define_process();
    (function(root, factory, undef) {
      if (typeof exports === "object") {
        module.exports = exports = factory(require_core(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS) {
      CryptoJS.pad.Iso97971 = {
        pad: function(data, blockSize) {
          data.concat(CryptoJS.lib.WordArray.create([2147483648], 1));
          CryptoJS.pad.ZeroPadding.pad(data, blockSize);
        },
        unpad: function(data) {
          CryptoJS.pad.ZeroPadding.unpad(data);
          data.sigBytes--;
        }
      };
      return CryptoJS.pad.Iso97971;
    });
  }
});

// node_modules/crypto-js/pad-zeropadding.js
var require_pad_zeropadding = __commonJS({
  "node_modules/crypto-js/pad-zeropadding.js"(exports, module) {
    init_define_process();
    (function(root, factory, undef) {
      if (typeof exports === "object") {
        module.exports = exports = factory(require_core(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS) {
      CryptoJS.pad.ZeroPadding = {
        pad: function(data, blockSize) {
          var blockSizeBytes = blockSize * 4;
          data.clamp();
          data.sigBytes += blockSizeBytes - (data.sigBytes % blockSizeBytes || blockSizeBytes);
        },
        unpad: function(data) {
          var dataWords = data.words;
          var i2 = data.sigBytes - 1;
          while (!(dataWords[i2 >>> 2] >>> 24 - i2 % 4 * 8 & 255)) {
            i2--;
          }
          data.sigBytes = i2 + 1;
        }
      };
      return CryptoJS.pad.ZeroPadding;
    });
  }
});

// node_modules/crypto-js/pad-nopadding.js
var require_pad_nopadding = __commonJS({
  "node_modules/crypto-js/pad-nopadding.js"(exports, module) {
    init_define_process();
    (function(root, factory, undef) {
      if (typeof exports === "object") {
        module.exports = exports = factory(require_core(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS) {
      CryptoJS.pad.NoPadding = {
        pad: function() {
        },
        unpad: function() {
        }
      };
      return CryptoJS.pad.NoPadding;
    });
  }
});

// node_modules/crypto-js/format-hex.js
var require_format_hex = __commonJS({
  "node_modules/crypto-js/format-hex.js"(exports, module) {
    init_define_process();
    (function(root, factory, undef) {
      if (typeof exports === "object") {
        module.exports = exports = factory(require_core(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS) {
      (function(undefined2) {
        var C3 = CryptoJS;
        var C_lib = C3.lib;
        var CipherParams = C_lib.CipherParams;
        var C_enc = C3.enc;
        var Hex = C_enc.Hex;
        var C_format = C3.format;
        var HexFormatter = C_format.Hex = {
          stringify: function(cipherParams) {
            return cipherParams.ciphertext.toString(Hex);
          },
          parse: function(input) {
            var ciphertext = Hex.parse(input);
            return CipherParams.create({ ciphertext });
          }
        };
      })();
      return CryptoJS.format.Hex;
    });
  }
});

// node_modules/crypto-js/aes.js
var require_aes = __commonJS({
  "node_modules/crypto-js/aes.js"(exports, module) {
    init_define_process();
    (function(root, factory, undef) {
      if (typeof exports === "object") {
        module.exports = exports = factory(require_core(), require_enc_base64(), require_md5(), require_evpkdf(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS) {
      (function() {
        var C3 = CryptoJS;
        var C_lib = C3.lib;
        var BlockCipher = C_lib.BlockCipher;
        var C_algo = C3.algo;
        var SBOX = [];
        var INV_SBOX = [];
        var SUB_MIX_0 = [];
        var SUB_MIX_1 = [];
        var SUB_MIX_2 = [];
        var SUB_MIX_3 = [];
        var INV_SUB_MIX_0 = [];
        var INV_SUB_MIX_1 = [];
        var INV_SUB_MIX_2 = [];
        var INV_SUB_MIX_3 = [];
        (function() {
          var d2 = [];
          for (var i2 = 0; i2 < 256; i2++) {
            if (i2 < 128) {
              d2[i2] = i2 << 1;
            } else {
              d2[i2] = i2 << 1 ^ 283;
            }
          }
          var x4 = 0;
          var xi = 0;
          for (var i2 = 0; i2 < 256; i2++) {
            var sx = xi ^ xi << 1 ^ xi << 2 ^ xi << 3 ^ xi << 4;
            sx = sx >>> 8 ^ sx & 255 ^ 99;
            SBOX[x4] = sx;
            INV_SBOX[sx] = x4;
            var x22 = d2[x4];
            var x42 = d2[x22];
            var x8 = d2[x42];
            var t = d2[sx] * 257 ^ sx * 16843008;
            SUB_MIX_0[x4] = t << 24 | t >>> 8;
            SUB_MIX_1[x4] = t << 16 | t >>> 16;
            SUB_MIX_2[x4] = t << 8 | t >>> 24;
            SUB_MIX_3[x4] = t;
            var t = x8 * 16843009 ^ x42 * 65537 ^ x22 * 257 ^ x4 * 16843008;
            INV_SUB_MIX_0[sx] = t << 24 | t >>> 8;
            INV_SUB_MIX_1[sx] = t << 16 | t >>> 16;
            INV_SUB_MIX_2[sx] = t << 8 | t >>> 24;
            INV_SUB_MIX_3[sx] = t;
            if (!x4) {
              x4 = xi = 1;
            } else {
              x4 = x22 ^ d2[d2[d2[x8 ^ x22]]];
              xi ^= d2[d2[xi]];
            }
          }
        })();
        var RCON = [0, 1, 2, 4, 8, 16, 32, 64, 128, 27, 54];
        var AES = C_algo.AES = BlockCipher.extend({
          _doReset: function() {
            if (this._nRounds && this._keyPriorReset === this._key) {
              return;
            }
            var key2 = this._keyPriorReset = this._key;
            var keyWords = key2.words;
            var keySize = key2.sigBytes / 4;
            var nRounds = this._nRounds = keySize + 6;
            var ksRows = (nRounds + 1) * 4;
            var keySchedule = this._keySchedule = [];
            for (var ksRow = 0; ksRow < ksRows; ksRow++) {
              if (ksRow < keySize) {
                keySchedule[ksRow] = keyWords[ksRow];
              } else {
                var t = keySchedule[ksRow - 1];
                if (!(ksRow % keySize)) {
                  t = t << 8 | t >>> 24;
                  t = SBOX[t >>> 24] << 24 | SBOX[t >>> 16 & 255] << 16 | SBOX[t >>> 8 & 255] << 8 | SBOX[t & 255];
                  t ^= RCON[ksRow / keySize | 0] << 24;
                } else if (keySize > 6 && ksRow % keySize == 4) {
                  t = SBOX[t >>> 24] << 24 | SBOX[t >>> 16 & 255] << 16 | SBOX[t >>> 8 & 255] << 8 | SBOX[t & 255];
                }
                keySchedule[ksRow] = keySchedule[ksRow - keySize] ^ t;
              }
            }
            var invKeySchedule = this._invKeySchedule = [];
            for (var invKsRow = 0; invKsRow < ksRows; invKsRow++) {
              var ksRow = ksRows - invKsRow;
              if (invKsRow % 4) {
                var t = keySchedule[ksRow];
              } else {
                var t = keySchedule[ksRow - 4];
              }
              if (invKsRow < 4 || ksRow <= 4) {
                invKeySchedule[invKsRow] = t;
              } else {
                invKeySchedule[invKsRow] = INV_SUB_MIX_0[SBOX[t >>> 24]] ^ INV_SUB_MIX_1[SBOX[t >>> 16 & 255]] ^ INV_SUB_MIX_2[SBOX[t >>> 8 & 255]] ^ INV_SUB_MIX_3[SBOX[t & 255]];
              }
            }
          },
          encryptBlock: function(M3, offset) {
            this._doCryptBlock(M3, offset, this._keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX);
          },
          decryptBlock: function(M3, offset) {
            var t = M3[offset + 1];
            M3[offset + 1] = M3[offset + 3];
            M3[offset + 3] = t;
            this._doCryptBlock(M3, offset, this._invKeySchedule, INV_SUB_MIX_0, INV_SUB_MIX_1, INV_SUB_MIX_2, INV_SUB_MIX_3, INV_SBOX);
            var t = M3[offset + 1];
            M3[offset + 1] = M3[offset + 3];
            M3[offset + 3] = t;
          },
          _doCryptBlock: function(M3, offset, keySchedule, SUB_MIX_02, SUB_MIX_12, SUB_MIX_22, SUB_MIX_32, SBOX2) {
            var nRounds = this._nRounds;
            var s02 = M3[offset] ^ keySchedule[0];
            var s12 = M3[offset + 1] ^ keySchedule[1];
            var s2 = M3[offset + 2] ^ keySchedule[2];
            var s3 = M3[offset + 3] ^ keySchedule[3];
            var ksRow = 4;
            for (var round = 1; round < nRounds; round++) {
              var t02 = SUB_MIX_02[s02 >>> 24] ^ SUB_MIX_12[s12 >>> 16 & 255] ^ SUB_MIX_22[s2 >>> 8 & 255] ^ SUB_MIX_32[s3 & 255] ^ keySchedule[ksRow++];
              var t12 = SUB_MIX_02[s12 >>> 24] ^ SUB_MIX_12[s2 >>> 16 & 255] ^ SUB_MIX_22[s3 >>> 8 & 255] ^ SUB_MIX_32[s02 & 255] ^ keySchedule[ksRow++];
              var t2 = SUB_MIX_02[s2 >>> 24] ^ SUB_MIX_12[s3 >>> 16 & 255] ^ SUB_MIX_22[s02 >>> 8 & 255] ^ SUB_MIX_32[s12 & 255] ^ keySchedule[ksRow++];
              var t3 = SUB_MIX_02[s3 >>> 24] ^ SUB_MIX_12[s02 >>> 16 & 255] ^ SUB_MIX_22[s12 >>> 8 & 255] ^ SUB_MIX_32[s2 & 255] ^ keySchedule[ksRow++];
              s02 = t02;
              s12 = t12;
              s2 = t2;
              s3 = t3;
            }
            var t02 = (SBOX2[s02 >>> 24] << 24 | SBOX2[s12 >>> 16 & 255] << 16 | SBOX2[s2 >>> 8 & 255] << 8 | SBOX2[s3 & 255]) ^ keySchedule[ksRow++];
            var t12 = (SBOX2[s12 >>> 24] << 24 | SBOX2[s2 >>> 16 & 255] << 16 | SBOX2[s3 >>> 8 & 255] << 8 | SBOX2[s02 & 255]) ^ keySchedule[ksRow++];
            var t2 = (SBOX2[s2 >>> 24] << 24 | SBOX2[s3 >>> 16 & 255] << 16 | SBOX2[s02 >>> 8 & 255] << 8 | SBOX2[s12 & 255]) ^ keySchedule[ksRow++];
            var t3 = (SBOX2[s3 >>> 24] << 24 | SBOX2[s02 >>> 16 & 255] << 16 | SBOX2[s12 >>> 8 & 255] << 8 | SBOX2[s2 & 255]) ^ keySchedule[ksRow++];
            M3[offset] = t02;
            M3[offset + 1] = t12;
            M3[offset + 2] = t2;
            M3[offset + 3] = t3;
          },
          keySize: 256 / 32
        });
        C3.AES = BlockCipher._createHelper(AES);
      })();
      return CryptoJS.AES;
    });
  }
});

// node_modules/crypto-js/tripledes.js
var require_tripledes = __commonJS({
  "node_modules/crypto-js/tripledes.js"(exports, module) {
    init_define_process();
    (function(root, factory, undef) {
      if (typeof exports === "object") {
        module.exports = exports = factory(require_core(), require_enc_base64(), require_md5(), require_evpkdf(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS) {
      (function() {
        var C3 = CryptoJS;
        var C_lib = C3.lib;
        var WordArray = C_lib.WordArray;
        var BlockCipher = C_lib.BlockCipher;
        var C_algo = C3.algo;
        var PC1 = [
          57,
          49,
          41,
          33,
          25,
          17,
          9,
          1,
          58,
          50,
          42,
          34,
          26,
          18,
          10,
          2,
          59,
          51,
          43,
          35,
          27,
          19,
          11,
          3,
          60,
          52,
          44,
          36,
          63,
          55,
          47,
          39,
          31,
          23,
          15,
          7,
          62,
          54,
          46,
          38,
          30,
          22,
          14,
          6,
          61,
          53,
          45,
          37,
          29,
          21,
          13,
          5,
          28,
          20,
          12,
          4
        ];
        var PC2 = [
          14,
          17,
          11,
          24,
          1,
          5,
          3,
          28,
          15,
          6,
          21,
          10,
          23,
          19,
          12,
          4,
          26,
          8,
          16,
          7,
          27,
          20,
          13,
          2,
          41,
          52,
          31,
          37,
          47,
          55,
          30,
          40,
          51,
          45,
          33,
          48,
          44,
          49,
          39,
          56,
          34,
          53,
          46,
          42,
          50,
          36,
          29,
          32
        ];
        var BIT_SHIFTS = [1, 2, 4, 6, 8, 10, 12, 14, 15, 17, 19, 21, 23, 25, 27, 28];
        var SBOX_P = [
          {
            0: 8421888,
            268435456: 32768,
            536870912: 8421378,
            805306368: 2,
            1073741824: 512,
            1342177280: 8421890,
            1610612736: 8389122,
            1879048192: 8388608,
            2147483648: 514,
            2415919104: 8389120,
            2684354560: 33280,
            2952790016: 8421376,
            3221225472: 32770,
            3489660928: 8388610,
            3758096384: 0,
            4026531840: 33282,
            134217728: 0,
            402653184: 8421890,
            671088640: 33282,
            939524096: 32768,
            1207959552: 8421888,
            1476395008: 512,
            1744830464: 8421378,
            2013265920: 2,
            2281701376: 8389120,
            2550136832: 33280,
            2818572288: 8421376,
            3087007744: 8389122,
            3355443200: 8388610,
            3623878656: 32770,
            3892314112: 514,
            4160749568: 8388608,
            1: 32768,
            268435457: 2,
            536870913: 8421888,
            805306369: 8388608,
            1073741825: 8421378,
            1342177281: 33280,
            1610612737: 512,
            1879048193: 8389122,
            2147483649: 8421890,
            2415919105: 8421376,
            2684354561: 8388610,
            2952790017: 33282,
            3221225473: 514,
            3489660929: 8389120,
            3758096385: 32770,
            4026531841: 0,
            134217729: 8421890,
            402653185: 8421376,
            671088641: 8388608,
            939524097: 512,
            1207959553: 32768,
            1476395009: 8388610,
            1744830465: 2,
            2013265921: 33282,
            2281701377: 32770,
            2550136833: 8389122,
            2818572289: 514,
            3087007745: 8421888,
            3355443201: 8389120,
            3623878657: 0,
            3892314113: 33280,
            4160749569: 8421378
          },
          {
            0: 1074282512,
            16777216: 16384,
            33554432: 524288,
            50331648: 1074266128,
            67108864: 1073741840,
            83886080: 1074282496,
            100663296: 1073758208,
            117440512: 16,
            134217728: 540672,
            150994944: 1073758224,
            167772160: 1073741824,
            184549376: 540688,
            201326592: 524304,
            218103808: 0,
            234881024: 16400,
            251658240: 1074266112,
            8388608: 1073758208,
            25165824: 540688,
            41943040: 16,
            58720256: 1073758224,
            75497472: 1074282512,
            92274688: 1073741824,
            109051904: 524288,
            125829120: 1074266128,
            142606336: 524304,
            159383552: 0,
            176160768: 16384,
            192937984: 1074266112,
            209715200: 1073741840,
            226492416: 540672,
            243269632: 1074282496,
            260046848: 16400,
            268435456: 0,
            285212672: 1074266128,
            301989888: 1073758224,
            318767104: 1074282496,
            335544320: 1074266112,
            352321536: 16,
            369098752: 540688,
            385875968: 16384,
            402653184: 16400,
            419430400: 524288,
            436207616: 524304,
            452984832: 1073741840,
            469762048: 540672,
            486539264: 1073758208,
            503316480: 1073741824,
            520093696: 1074282512,
            276824064: 540688,
            293601280: 524288,
            310378496: 1074266112,
            327155712: 16384,
            343932928: 1073758208,
            360710144: 1074282512,
            377487360: 16,
            394264576: 1073741824,
            411041792: 1074282496,
            427819008: 1073741840,
            444596224: 1073758224,
            461373440: 524304,
            478150656: 0,
            494927872: 16400,
            511705088: 1074266128,
            528482304: 540672
          },
          {
            0: 260,
            1048576: 0,
            2097152: 67109120,
            3145728: 65796,
            4194304: 65540,
            5242880: 67108868,
            6291456: 67174660,
            7340032: 67174400,
            8388608: 67108864,
            9437184: 67174656,
            10485760: 65792,
            11534336: 67174404,
            12582912: 67109124,
            13631488: 65536,
            14680064: 4,
            15728640: 256,
            524288: 67174656,
            1572864: 67174404,
            2621440: 0,
            3670016: 67109120,
            4718592: 67108868,
            5767168: 65536,
            6815744: 65540,
            7864320: 260,
            8912896: 4,
            9961472: 256,
            11010048: 67174400,
            12058624: 65796,
            13107200: 65792,
            14155776: 67109124,
            15204352: 67174660,
            16252928: 67108864,
            16777216: 67174656,
            17825792: 65540,
            18874368: 65536,
            19922944: 67109120,
            20971520: 256,
            22020096: 67174660,
            23068672: 67108868,
            24117248: 0,
            25165824: 67109124,
            26214400: 67108864,
            27262976: 4,
            28311552: 65792,
            29360128: 67174400,
            30408704: 260,
            31457280: 65796,
            32505856: 67174404,
            17301504: 67108864,
            18350080: 260,
            19398656: 67174656,
            20447232: 0,
            21495808: 65540,
            22544384: 67109120,
            23592960: 256,
            24641536: 67174404,
            25690112: 65536,
            26738688: 67174660,
            27787264: 65796,
            28835840: 67108868,
            29884416: 67109124,
            30932992: 67174400,
            31981568: 4,
            33030144: 65792
          },
          {
            0: 2151682048,
            65536: 2147487808,
            131072: 4198464,
            196608: 2151677952,
            262144: 0,
            327680: 4198400,
            393216: 2147483712,
            458752: 4194368,
            524288: 2147483648,
            589824: 4194304,
            655360: 64,
            720896: 2147487744,
            786432: 2151678016,
            851968: 4160,
            917504: 4096,
            983040: 2151682112,
            32768: 2147487808,
            98304: 64,
            163840: 2151678016,
            229376: 2147487744,
            294912: 4198400,
            360448: 2151682112,
            425984: 0,
            491520: 2151677952,
            557056: 4096,
            622592: 2151682048,
            688128: 4194304,
            753664: 4160,
            819200: 2147483648,
            884736: 4194368,
            950272: 4198464,
            1015808: 2147483712,
            1048576: 4194368,
            1114112: 4198400,
            1179648: 2147483712,
            1245184: 0,
            1310720: 4160,
            1376256: 2151678016,
            1441792: 2151682048,
            1507328: 2147487808,
            1572864: 2151682112,
            1638400: 2147483648,
            1703936: 2151677952,
            1769472: 4198464,
            1835008: 2147487744,
            1900544: 4194304,
            1966080: 64,
            2031616: 4096,
            1081344: 2151677952,
            1146880: 2151682112,
            1212416: 0,
            1277952: 4198400,
            1343488: 4194368,
            1409024: 2147483648,
            1474560: 2147487808,
            1540096: 64,
            1605632: 2147483712,
            1671168: 4096,
            1736704: 2147487744,
            1802240: 2151678016,
            1867776: 4160,
            1933312: 2151682048,
            1998848: 4194304,
            2064384: 4198464
          },
          {
            0: 128,
            4096: 17039360,
            8192: 262144,
            12288: 536870912,
            16384: 537133184,
            20480: 16777344,
            24576: 553648256,
            28672: 262272,
            32768: 16777216,
            36864: 537133056,
            40960: 536871040,
            45056: 553910400,
            49152: 553910272,
            53248: 0,
            57344: 17039488,
            61440: 553648128,
            2048: 17039488,
            6144: 553648256,
            10240: 128,
            14336: 17039360,
            18432: 262144,
            22528: 537133184,
            26624: 553910272,
            30720: 536870912,
            34816: 537133056,
            38912: 0,
            43008: 553910400,
            47104: 16777344,
            51200: 536871040,
            55296: 553648128,
            59392: 16777216,
            63488: 262272,
            65536: 262144,
            69632: 128,
            73728: 536870912,
            77824: 553648256,
            81920: 16777344,
            86016: 553910272,
            90112: 537133184,
            94208: 16777216,
            98304: 553910400,
            102400: 553648128,
            106496: 17039360,
            110592: 537133056,
            114688: 262272,
            118784: 536871040,
            122880: 0,
            126976: 17039488,
            67584: 553648256,
            71680: 16777216,
            75776: 17039360,
            79872: 537133184,
            83968: 536870912,
            88064: 17039488,
            92160: 128,
            96256: 553910272,
            100352: 262272,
            104448: 553910400,
            108544: 0,
            112640: 553648128,
            116736: 16777344,
            120832: 262144,
            124928: 537133056,
            129024: 536871040
          },
          {
            0: 268435464,
            256: 8192,
            512: 270532608,
            768: 270540808,
            1024: 268443648,
            1280: 2097152,
            1536: 2097160,
            1792: 268435456,
            2048: 0,
            2304: 268443656,
            2560: 2105344,
            2816: 8,
            3072: 270532616,
            3328: 2105352,
            3584: 8200,
            3840: 270540800,
            128: 270532608,
            384: 270540808,
            640: 8,
            896: 2097152,
            1152: 2105352,
            1408: 268435464,
            1664: 268443648,
            1920: 8200,
            2176: 2097160,
            2432: 8192,
            2688: 268443656,
            2944: 270532616,
            3200: 0,
            3456: 270540800,
            3712: 2105344,
            3968: 268435456,
            4096: 268443648,
            4352: 270532616,
            4608: 270540808,
            4864: 8200,
            5120: 2097152,
            5376: 268435456,
            5632: 268435464,
            5888: 2105344,
            6144: 2105352,
            6400: 0,
            6656: 8,
            6912: 270532608,
            7168: 8192,
            7424: 268443656,
            7680: 270540800,
            7936: 2097160,
            4224: 8,
            4480: 2105344,
            4736: 2097152,
            4992: 268435464,
            5248: 268443648,
            5504: 8200,
            5760: 270540808,
            6016: 270532608,
            6272: 270540800,
            6528: 270532616,
            6784: 8192,
            7040: 2105352,
            7296: 2097160,
            7552: 0,
            7808: 268435456,
            8064: 268443656
          },
          {
            0: 1048576,
            16: 33555457,
            32: 1024,
            48: 1049601,
            64: 34604033,
            80: 0,
            96: 1,
            112: 34603009,
            128: 33555456,
            144: 1048577,
            160: 33554433,
            176: 34604032,
            192: 34603008,
            208: 1025,
            224: 1049600,
            240: 33554432,
            8: 34603009,
            24: 0,
            40: 33555457,
            56: 34604032,
            72: 1048576,
            88: 33554433,
            104: 33554432,
            120: 1025,
            136: 1049601,
            152: 33555456,
            168: 34603008,
            184: 1048577,
            200: 1024,
            216: 34604033,
            232: 1,
            248: 1049600,
            256: 33554432,
            272: 1048576,
            288: 33555457,
            304: 34603009,
            320: 1048577,
            336: 33555456,
            352: 34604032,
            368: 1049601,
            384: 1025,
            400: 34604033,
            416: 1049600,
            432: 1,
            448: 0,
            464: 34603008,
            480: 33554433,
            496: 1024,
            264: 1049600,
            280: 33555457,
            296: 34603009,
            312: 1,
            328: 33554432,
            344: 1048576,
            360: 1025,
            376: 34604032,
            392: 33554433,
            408: 34603008,
            424: 0,
            440: 34604033,
            456: 1049601,
            472: 1024,
            488: 33555456,
            504: 1048577
          },
          {
            0: 134219808,
            1: 131072,
            2: 134217728,
            3: 32,
            4: 131104,
            5: 134350880,
            6: 134350848,
            7: 2048,
            8: 134348800,
            9: 134219776,
            10: 133120,
            11: 134348832,
            12: 2080,
            13: 0,
            14: 134217760,
            15: 133152,
            2147483648: 2048,
            2147483649: 134350880,
            2147483650: 134219808,
            2147483651: 134217728,
            2147483652: 134348800,
            2147483653: 133120,
            2147483654: 133152,
            2147483655: 32,
            2147483656: 134217760,
            2147483657: 2080,
            2147483658: 131104,
            2147483659: 134350848,
            2147483660: 0,
            2147483661: 134348832,
            2147483662: 134219776,
            2147483663: 131072,
            16: 133152,
            17: 134350848,
            18: 32,
            19: 2048,
            20: 134219776,
            21: 134217760,
            22: 134348832,
            23: 131072,
            24: 0,
            25: 131104,
            26: 134348800,
            27: 134219808,
            28: 134350880,
            29: 133120,
            30: 2080,
            31: 134217728,
            2147483664: 131072,
            2147483665: 2048,
            2147483666: 134348832,
            2147483667: 133152,
            2147483668: 32,
            2147483669: 134348800,
            2147483670: 134217728,
            2147483671: 134219808,
            2147483672: 134350880,
            2147483673: 134217760,
            2147483674: 134219776,
            2147483675: 0,
            2147483676: 133120,
            2147483677: 2080,
            2147483678: 131104,
            2147483679: 134350848
          }
        ];
        var SBOX_MASK = [
          4160749569,
          528482304,
          33030144,
          2064384,
          129024,
          8064,
          504,
          2147483679
        ];
        var DES = C_algo.DES = BlockCipher.extend({
          _doReset: function() {
            var key2 = this._key;
            var keyWords = key2.words;
            var keyBits = [];
            for (var i2 = 0; i2 < 56; i2++) {
              var keyBitPos = PC1[i2] - 1;
              keyBits[i2] = keyWords[keyBitPos >>> 5] >>> 31 - keyBitPos % 32 & 1;
            }
            var subKeys = this._subKeys = [];
            for (var nSubKey = 0; nSubKey < 16; nSubKey++) {
              var subKey = subKeys[nSubKey] = [];
              var bitShift = BIT_SHIFTS[nSubKey];
              for (var i2 = 0; i2 < 24; i2++) {
                subKey[i2 / 6 | 0] |= keyBits[(PC2[i2] - 1 + bitShift) % 28] << 31 - i2 % 6;
                subKey[4 + (i2 / 6 | 0)] |= keyBits[28 + (PC2[i2 + 24] - 1 + bitShift) % 28] << 31 - i2 % 6;
              }
              subKey[0] = subKey[0] << 1 | subKey[0] >>> 31;
              for (var i2 = 1; i2 < 7; i2++) {
                subKey[i2] = subKey[i2] >>> (i2 - 1) * 4 + 3;
              }
              subKey[7] = subKey[7] << 5 | subKey[7] >>> 27;
            }
            var invSubKeys = this._invSubKeys = [];
            for (var i2 = 0; i2 < 16; i2++) {
              invSubKeys[i2] = subKeys[15 - i2];
            }
          },
          encryptBlock: function(M3, offset) {
            this._doCryptBlock(M3, offset, this._subKeys);
          },
          decryptBlock: function(M3, offset) {
            this._doCryptBlock(M3, offset, this._invSubKeys);
          },
          _doCryptBlock: function(M3, offset, subKeys) {
            this._lBlock = M3[offset];
            this._rBlock = M3[offset + 1];
            exchangeLR.call(this, 4, 252645135);
            exchangeLR.call(this, 16, 65535);
            exchangeRL.call(this, 2, 858993459);
            exchangeRL.call(this, 8, 16711935);
            exchangeLR.call(this, 1, 1431655765);
            for (var round = 0; round < 16; round++) {
              var subKey = subKeys[round];
              var lBlock = this._lBlock;
              var rBlock = this._rBlock;
              var f3 = 0;
              for (var i2 = 0; i2 < 8; i2++) {
                f3 |= SBOX_P[i2][((rBlock ^ subKey[i2]) & SBOX_MASK[i2]) >>> 0];
              }
              this._lBlock = rBlock;
              this._rBlock = lBlock ^ f3;
            }
            var t = this._lBlock;
            this._lBlock = this._rBlock;
            this._rBlock = t;
            exchangeLR.call(this, 1, 1431655765);
            exchangeRL.call(this, 8, 16711935);
            exchangeRL.call(this, 2, 858993459);
            exchangeLR.call(this, 16, 65535);
            exchangeLR.call(this, 4, 252645135);
            M3[offset] = this._lBlock;
            M3[offset + 1] = this._rBlock;
          },
          keySize: 64 / 32,
          ivSize: 64 / 32,
          blockSize: 64 / 32
        });
        function exchangeLR(offset, mask) {
          var t = (this._lBlock >>> offset ^ this._rBlock) & mask;
          this._rBlock ^= t;
          this._lBlock ^= t << offset;
        }
        function exchangeRL(offset, mask) {
          var t = (this._rBlock >>> offset ^ this._lBlock) & mask;
          this._lBlock ^= t;
          this._rBlock ^= t << offset;
        }
        C3.DES = BlockCipher._createHelper(DES);
        var TripleDES = C_algo.TripleDES = BlockCipher.extend({
          _doReset: function() {
            var key2 = this._key;
            var keyWords = key2.words;
            this._des1 = DES.createEncryptor(WordArray.create(keyWords.slice(0, 2)));
            this._des2 = DES.createEncryptor(WordArray.create(keyWords.slice(2, 4)));
            this._des3 = DES.createEncryptor(WordArray.create(keyWords.slice(4, 6)));
          },
          encryptBlock: function(M3, offset) {
            this._des1.encryptBlock(M3, offset);
            this._des2.decryptBlock(M3, offset);
            this._des3.encryptBlock(M3, offset);
          },
          decryptBlock: function(M3, offset) {
            this._des3.decryptBlock(M3, offset);
            this._des2.encryptBlock(M3, offset);
            this._des1.decryptBlock(M3, offset);
          },
          keySize: 192 / 32,
          ivSize: 64 / 32,
          blockSize: 64 / 32
        });
        C3.TripleDES = BlockCipher._createHelper(TripleDES);
      })();
      return CryptoJS.TripleDES;
    });
  }
});

// node_modules/crypto-js/rc4.js
var require_rc4 = __commonJS({
  "node_modules/crypto-js/rc4.js"(exports, module) {
    init_define_process();
    (function(root, factory, undef) {
      if (typeof exports === "object") {
        module.exports = exports = factory(require_core(), require_enc_base64(), require_md5(), require_evpkdf(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS) {
      (function() {
        var C3 = CryptoJS;
        var C_lib = C3.lib;
        var StreamCipher = C_lib.StreamCipher;
        var C_algo = C3.algo;
        var RC4 = C_algo.RC4 = StreamCipher.extend({
          _doReset: function() {
            var key2 = this._key;
            var keyWords = key2.words;
            var keySigBytes = key2.sigBytes;
            var S2 = this._S = [];
            for (var i2 = 0; i2 < 256; i2++) {
              S2[i2] = i2;
            }
            for (var i2 = 0, j3 = 0; i2 < 256; i2++) {
              var keyByteIndex = i2 % keySigBytes;
              var keyByte = keyWords[keyByteIndex >>> 2] >>> 24 - keyByteIndex % 4 * 8 & 255;
              j3 = (j3 + S2[i2] + keyByte) % 256;
              var t = S2[i2];
              S2[i2] = S2[j3];
              S2[j3] = t;
            }
            this._i = this._j = 0;
          },
          _doProcessBlock: function(M3, offset) {
            M3[offset] ^= generateKeystreamWord.call(this);
          },
          keySize: 256 / 32,
          ivSize: 0
        });
        function generateKeystreamWord() {
          var S2 = this._S;
          var i2 = this._i;
          var j3 = this._j;
          var keystreamWord = 0;
          for (var n = 0; n < 4; n++) {
            i2 = (i2 + 1) % 256;
            j3 = (j3 + S2[i2]) % 256;
            var t = S2[i2];
            S2[i2] = S2[j3];
            S2[j3] = t;
            keystreamWord |= S2[(S2[i2] + S2[j3]) % 256] << 24 - n * 8;
          }
          this._i = i2;
          this._j = j3;
          return keystreamWord;
        }
        C3.RC4 = StreamCipher._createHelper(RC4);
        var RC4Drop = C_algo.RC4Drop = RC4.extend({
          cfg: RC4.cfg.extend({
            drop: 192
          }),
          _doReset: function() {
            RC4._doReset.call(this);
            for (var i2 = this.cfg.drop; i2 > 0; i2--) {
              generateKeystreamWord.call(this);
            }
          }
        });
        C3.RC4Drop = StreamCipher._createHelper(RC4Drop);
      })();
      return CryptoJS.RC4;
    });
  }
});

// node_modules/crypto-js/rabbit.js
var require_rabbit = __commonJS({
  "node_modules/crypto-js/rabbit.js"(exports, module) {
    init_define_process();
    (function(root, factory, undef) {
      if (typeof exports === "object") {
        module.exports = exports = factory(require_core(), require_enc_base64(), require_md5(), require_evpkdf(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS) {
      (function() {
        var C3 = CryptoJS;
        var C_lib = C3.lib;
        var StreamCipher = C_lib.StreamCipher;
        var C_algo = C3.algo;
        var S2 = [];
        var C_ = [];
        var G2 = [];
        var Rabbit = C_algo.Rabbit = StreamCipher.extend({
          _doReset: function() {
            var K3 = this._key.words;
            var iv = this.cfg.iv;
            for (var i2 = 0; i2 < 4; i2++) {
              K3[i2] = (K3[i2] << 8 | K3[i2] >>> 24) & 16711935 | (K3[i2] << 24 | K3[i2] >>> 8) & 4278255360;
            }
            var X2 = this._X = [
              K3[0],
              K3[3] << 16 | K3[2] >>> 16,
              K3[1],
              K3[0] << 16 | K3[3] >>> 16,
              K3[2],
              K3[1] << 16 | K3[0] >>> 16,
              K3[3],
              K3[2] << 16 | K3[1] >>> 16
            ];
            var C4 = this._C = [
              K3[2] << 16 | K3[2] >>> 16,
              K3[0] & 4294901760 | K3[1] & 65535,
              K3[3] << 16 | K3[3] >>> 16,
              K3[1] & 4294901760 | K3[2] & 65535,
              K3[0] << 16 | K3[0] >>> 16,
              K3[2] & 4294901760 | K3[3] & 65535,
              K3[1] << 16 | K3[1] >>> 16,
              K3[3] & 4294901760 | K3[0] & 65535
            ];
            this._b = 0;
            for (var i2 = 0; i2 < 4; i2++) {
              nextState.call(this);
            }
            for (var i2 = 0; i2 < 8; i2++) {
              C4[i2] ^= X2[i2 + 4 & 7];
            }
            if (iv) {
              var IV = iv.words;
              var IV_0 = IV[0];
              var IV_1 = IV[1];
              var i02 = (IV_0 << 8 | IV_0 >>> 24) & 16711935 | (IV_0 << 24 | IV_0 >>> 8) & 4278255360;
              var i22 = (IV_1 << 8 | IV_1 >>> 24) & 16711935 | (IV_1 << 24 | IV_1 >>> 8) & 4278255360;
              var i12 = i02 >>> 16 | i22 & 4294901760;
              var i3 = i22 << 16 | i02 & 65535;
              C4[0] ^= i02;
              C4[1] ^= i12;
              C4[2] ^= i22;
              C4[3] ^= i3;
              C4[4] ^= i02;
              C4[5] ^= i12;
              C4[6] ^= i22;
              C4[7] ^= i3;
              for (var i2 = 0; i2 < 4; i2++) {
                nextState.call(this);
              }
            }
          },
          _doProcessBlock: function(M3, offset) {
            var X2 = this._X;
            nextState.call(this);
            S2[0] = X2[0] ^ X2[5] >>> 16 ^ X2[3] << 16;
            S2[1] = X2[2] ^ X2[7] >>> 16 ^ X2[5] << 16;
            S2[2] = X2[4] ^ X2[1] >>> 16 ^ X2[7] << 16;
            S2[3] = X2[6] ^ X2[3] >>> 16 ^ X2[1] << 16;
            for (var i2 = 0; i2 < 4; i2++) {
              S2[i2] = (S2[i2] << 8 | S2[i2] >>> 24) & 16711935 | (S2[i2] << 24 | S2[i2] >>> 8) & 4278255360;
              M3[offset + i2] ^= S2[i2];
            }
          },
          blockSize: 128 / 32,
          ivSize: 64 / 32
        });
        function nextState() {
          var X2 = this._X;
          var C4 = this._C;
          for (var i2 = 0; i2 < 8; i2++) {
            C_[i2] = C4[i2];
          }
          C4[0] = C4[0] + 1295307597 + this._b | 0;
          C4[1] = C4[1] + 3545052371 + (C4[0] >>> 0 < C_[0] >>> 0 ? 1 : 0) | 0;
          C4[2] = C4[2] + 886263092 + (C4[1] >>> 0 < C_[1] >>> 0 ? 1 : 0) | 0;
          C4[3] = C4[3] + 1295307597 + (C4[2] >>> 0 < C_[2] >>> 0 ? 1 : 0) | 0;
          C4[4] = C4[4] + 3545052371 + (C4[3] >>> 0 < C_[3] >>> 0 ? 1 : 0) | 0;
          C4[5] = C4[5] + 886263092 + (C4[4] >>> 0 < C_[4] >>> 0 ? 1 : 0) | 0;
          C4[6] = C4[6] + 1295307597 + (C4[5] >>> 0 < C_[5] >>> 0 ? 1 : 0) | 0;
          C4[7] = C4[7] + 3545052371 + (C4[6] >>> 0 < C_[6] >>> 0 ? 1 : 0) | 0;
          this._b = C4[7] >>> 0 < C_[7] >>> 0 ? 1 : 0;
          for (var i2 = 0; i2 < 8; i2++) {
            var gx = X2[i2] + C4[i2];
            var ga2 = gx & 65535;
            var gb = gx >>> 16;
            var gh = ((ga2 * ga2 >>> 17) + ga2 * gb >>> 15) + gb * gb;
            var gl = ((gx & 4294901760) * gx | 0) + ((gx & 65535) * gx | 0);
            G2[i2] = gh ^ gl;
          }
          X2[0] = G2[0] + (G2[7] << 16 | G2[7] >>> 16) + (G2[6] << 16 | G2[6] >>> 16) | 0;
          X2[1] = G2[1] + (G2[0] << 8 | G2[0] >>> 24) + G2[7] | 0;
          X2[2] = G2[2] + (G2[1] << 16 | G2[1] >>> 16) + (G2[0] << 16 | G2[0] >>> 16) | 0;
          X2[3] = G2[3] + (G2[2] << 8 | G2[2] >>> 24) + G2[1] | 0;
          X2[4] = G2[4] + (G2[3] << 16 | G2[3] >>> 16) + (G2[2] << 16 | G2[2] >>> 16) | 0;
          X2[5] = G2[5] + (G2[4] << 8 | G2[4] >>> 24) + G2[3] | 0;
          X2[6] = G2[6] + (G2[5] << 16 | G2[5] >>> 16) + (G2[4] << 16 | G2[4] >>> 16) | 0;
          X2[7] = G2[7] + (G2[6] << 8 | G2[6] >>> 24) + G2[5] | 0;
        }
        C3.Rabbit = StreamCipher._createHelper(Rabbit);
      })();
      return CryptoJS.Rabbit;
    });
  }
});

// node_modules/crypto-js/rabbit-legacy.js
var require_rabbit_legacy = __commonJS({
  "node_modules/crypto-js/rabbit-legacy.js"(exports, module) {
    init_define_process();
    (function(root, factory, undef) {
      if (typeof exports === "object") {
        module.exports = exports = factory(require_core(), require_enc_base64(), require_md5(), require_evpkdf(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS) {
      (function() {
        var C3 = CryptoJS;
        var C_lib = C3.lib;
        var StreamCipher = C_lib.StreamCipher;
        var C_algo = C3.algo;
        var S2 = [];
        var C_ = [];
        var G2 = [];
        var RabbitLegacy = C_algo.RabbitLegacy = StreamCipher.extend({
          _doReset: function() {
            var K3 = this._key.words;
            var iv = this.cfg.iv;
            var X2 = this._X = [
              K3[0],
              K3[3] << 16 | K3[2] >>> 16,
              K3[1],
              K3[0] << 16 | K3[3] >>> 16,
              K3[2],
              K3[1] << 16 | K3[0] >>> 16,
              K3[3],
              K3[2] << 16 | K3[1] >>> 16
            ];
            var C4 = this._C = [
              K3[2] << 16 | K3[2] >>> 16,
              K3[0] & 4294901760 | K3[1] & 65535,
              K3[3] << 16 | K3[3] >>> 16,
              K3[1] & 4294901760 | K3[2] & 65535,
              K3[0] << 16 | K3[0] >>> 16,
              K3[2] & 4294901760 | K3[3] & 65535,
              K3[1] << 16 | K3[1] >>> 16,
              K3[3] & 4294901760 | K3[0] & 65535
            ];
            this._b = 0;
            for (var i2 = 0; i2 < 4; i2++) {
              nextState.call(this);
            }
            for (var i2 = 0; i2 < 8; i2++) {
              C4[i2] ^= X2[i2 + 4 & 7];
            }
            if (iv) {
              var IV = iv.words;
              var IV_0 = IV[0];
              var IV_1 = IV[1];
              var i02 = (IV_0 << 8 | IV_0 >>> 24) & 16711935 | (IV_0 << 24 | IV_0 >>> 8) & 4278255360;
              var i22 = (IV_1 << 8 | IV_1 >>> 24) & 16711935 | (IV_1 << 24 | IV_1 >>> 8) & 4278255360;
              var i12 = i02 >>> 16 | i22 & 4294901760;
              var i3 = i22 << 16 | i02 & 65535;
              C4[0] ^= i02;
              C4[1] ^= i12;
              C4[2] ^= i22;
              C4[3] ^= i3;
              C4[4] ^= i02;
              C4[5] ^= i12;
              C4[6] ^= i22;
              C4[7] ^= i3;
              for (var i2 = 0; i2 < 4; i2++) {
                nextState.call(this);
              }
            }
          },
          _doProcessBlock: function(M3, offset) {
            var X2 = this._X;
            nextState.call(this);
            S2[0] = X2[0] ^ X2[5] >>> 16 ^ X2[3] << 16;
            S2[1] = X2[2] ^ X2[7] >>> 16 ^ X2[5] << 16;
            S2[2] = X2[4] ^ X2[1] >>> 16 ^ X2[7] << 16;
            S2[3] = X2[6] ^ X2[3] >>> 16 ^ X2[1] << 16;
            for (var i2 = 0; i2 < 4; i2++) {
              S2[i2] = (S2[i2] << 8 | S2[i2] >>> 24) & 16711935 | (S2[i2] << 24 | S2[i2] >>> 8) & 4278255360;
              M3[offset + i2] ^= S2[i2];
            }
          },
          blockSize: 128 / 32,
          ivSize: 64 / 32
        });
        function nextState() {
          var X2 = this._X;
          var C4 = this._C;
          for (var i2 = 0; i2 < 8; i2++) {
            C_[i2] = C4[i2];
          }
          C4[0] = C4[0] + 1295307597 + this._b | 0;
          C4[1] = C4[1] + 3545052371 + (C4[0] >>> 0 < C_[0] >>> 0 ? 1 : 0) | 0;
          C4[2] = C4[2] + 886263092 + (C4[1] >>> 0 < C_[1] >>> 0 ? 1 : 0) | 0;
          C4[3] = C4[3] + 1295307597 + (C4[2] >>> 0 < C_[2] >>> 0 ? 1 : 0) | 0;
          C4[4] = C4[4] + 3545052371 + (C4[3] >>> 0 < C_[3] >>> 0 ? 1 : 0) | 0;
          C4[5] = C4[5] + 886263092 + (C4[4] >>> 0 < C_[4] >>> 0 ? 1 : 0) | 0;
          C4[6] = C4[6] + 1295307597 + (C4[5] >>> 0 < C_[5] >>> 0 ? 1 : 0) | 0;
          C4[7] = C4[7] + 3545052371 + (C4[6] >>> 0 < C_[6] >>> 0 ? 1 : 0) | 0;
          this._b = C4[7] >>> 0 < C_[7] >>> 0 ? 1 : 0;
          for (var i2 = 0; i2 < 8; i2++) {
            var gx = X2[i2] + C4[i2];
            var ga2 = gx & 65535;
            var gb = gx >>> 16;
            var gh = ((ga2 * ga2 >>> 17) + ga2 * gb >>> 15) + gb * gb;
            var gl = ((gx & 4294901760) * gx | 0) + ((gx & 65535) * gx | 0);
            G2[i2] = gh ^ gl;
          }
          X2[0] = G2[0] + (G2[7] << 16 | G2[7] >>> 16) + (G2[6] << 16 | G2[6] >>> 16) | 0;
          X2[1] = G2[1] + (G2[0] << 8 | G2[0] >>> 24) + G2[7] | 0;
          X2[2] = G2[2] + (G2[1] << 16 | G2[1] >>> 16) + (G2[0] << 16 | G2[0] >>> 16) | 0;
          X2[3] = G2[3] + (G2[2] << 8 | G2[2] >>> 24) + G2[1] | 0;
          X2[4] = G2[4] + (G2[3] << 16 | G2[3] >>> 16) + (G2[2] << 16 | G2[2] >>> 16) | 0;
          X2[5] = G2[5] + (G2[4] << 8 | G2[4] >>> 24) + G2[3] | 0;
          X2[6] = G2[6] + (G2[5] << 16 | G2[5] >>> 16) + (G2[4] << 16 | G2[4] >>> 16) | 0;
          X2[7] = G2[7] + (G2[6] << 8 | G2[6] >>> 24) + G2[5] | 0;
        }
        C3.RabbitLegacy = StreamCipher._createHelper(RabbitLegacy);
      })();
      return CryptoJS.RabbitLegacy;
    });
  }
});

// node_modules/crypto-js/index.js
var require_crypto_js = __commonJS({
  "node_modules/crypto-js/index.js"(exports, module) {
    init_define_process();
    (function(root, factory, undef) {
      if (typeof exports === "object") {
        module.exports = exports = factory(require_core(), require_x64_core(), require_lib_typedarrays(), require_enc_utf16(), require_enc_base64(), require_md5(), require_sha1(), require_sha256(), require_sha224(), require_sha512(), require_sha384(), require_sha32(), require_ripemd160(), require_hmac2(), require_pbkdf2(), require_evpkdf(), require_cipher_core(), require_mode_cfb(), require_mode_ctr(), require_mode_ctr_gladman(), require_mode_ofb(), require_mode_ecb(), require_pad_ansix923(), require_pad_iso10126(), require_pad_iso97971(), require_pad_zeropadding(), require_pad_nopadding(), require_format_hex(), require_aes(), require_tripledes(), require_rc4(), require_rabbit(), require_rabbit_legacy());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./x64-core", "./lib-typedarrays", "./enc-utf16", "./enc-base64", "./md5", "./sha1", "./sha256", "./sha224", "./sha512", "./sha384", "./sha3", "./ripemd160", "./hmac", "./pbkdf2", "./evpkdf", "./cipher-core", "./mode-cfb", "./mode-ctr", "./mode-ctr-gladman", "./mode-ofb", "./mode-ecb", "./pad-ansix923", "./pad-iso10126", "./pad-iso97971", "./pad-zeropadding", "./pad-nopadding", "./format-hex", "./aes", "./tripledes", "./rc4", "./rabbit", "./rabbit-legacy"], factory);
      } else {
        root.CryptoJS = factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS) {
      return CryptoJS;
    });
  }
});

// node_modules/merkletreejs/dist/Base.js
var require_Base = __commonJS({
  "node_modules/merkletreejs/dist/Base.js"(exports) {
    init_define_process();
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod2) {
      return mod2 && mod2.__esModule ? mod2 : { "default": mod2 };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Base = void 0;
    var crypto_js_1 = __importDefault(require_crypto_js());
    var Base = class {
      print() {
        Base.print(this);
      }
      _bufferIndexOf(array, element) {
        for (let i2 = 0; i2 < array.length; i2++) {
          if (element.equals(array[i2])) {
            return i2;
          }
        }
        return -1;
      }
      static bufferify(value2) {
        if (!Buffer.isBuffer(value2)) {
          if (typeof value2 === "object" && value2.words) {
            return Buffer.from(value2.toString(crypto_js_1.default.enc.Hex), "hex");
          } else if (Base.isHexString(value2)) {
            return Buffer.from(value2.replace(/^0x/, ""), "hex");
          } else if (typeof value2 === "string") {
            return Buffer.from(value2);
          } else if (typeof value2 === "number") {
            let s2 = value2.toString();
            if (s2.length % 2) {
              s2 = `0${s2}`;
            }
            return Buffer.from(s2, "hex");
          } else if (ArrayBuffer.isView(value2)) {
            return Buffer.from(value2.buffer, value2.byteOffset, value2.byteLength);
          }
        }
        return value2;
      }
      static isHexString(v7) {
        return typeof v7 === "string" && /^(0x)?[0-9A-Fa-f]*$/.test(v7);
      }
      static print(tree) {
        console.log(tree.toString());
      }
      bufferToHex(value2, withPrefix = true) {
        return Base.bufferToHex(value2, withPrefix);
      }
      static bufferToHex(value2, withPrefix = true) {
        return `${withPrefix ? "0x" : ""}${(value2 || Buffer.alloc(0)).toString("hex")}`;
      }
      bufferify(value2) {
        return Base.bufferify(value2);
      }
      bufferifyFn(f3) {
        return (value2) => {
          const v7 = f3(value2);
          if (Buffer.isBuffer(v7)) {
            return v7;
          }
          if (this._isHexString(v7)) {
            return Buffer.from(v7.replace("0x", ""), "hex");
          }
          if (typeof v7 === "string") {
            return Buffer.from(v7);
          }
          if (ArrayBuffer.isView(v7)) {
            return Buffer.from(v7.buffer, v7.byteOffset, v7.byteLength);
          }
          return Buffer.from(f3(crypto_js_1.default.enc.Hex.parse(value2.toString("hex"))).toString(crypto_js_1.default.enc.Hex), "hex");
        };
      }
      _isHexString(value2) {
        return Base.isHexString(value2);
      }
      _log2(n) {
        return n === 1 ? 0 : 1 + this._log2(n / 2 | 0);
      }
      _zip(a, b2) {
        return a.map((e, i2) => [e, b2[i2]]);
      }
    };
    exports.Base = Base;
    exports.default = Base;
  }
});

// node_modules/treeify/treeify.js
var require_treeify = __commonJS({
  "node_modules/treeify/treeify.js"(exports, module) {
    init_define_process();
    (function(root, factory) {
      if (typeof exports === "object") {
        module.exports = factory();
      } else if (typeof define === "function" && define.amd) {
        define(factory);
      } else {
        root.treeify = factory();
      }
    })(exports, function() {
      function makePrefix(key2, last) {
        var str = last ? "\u2514" : "\u251C";
        if (key2) {
          str += "\u2500 ";
        } else {
          str += "\u2500\u2500\u2510";
        }
        return str;
      }
      function filterKeys(obj, hideFunctions) {
        var keys = [];
        for (var branch in obj) {
          if (!obj.hasOwnProperty(branch)) {
            continue;
          }
          if (hideFunctions && typeof obj[branch] === "function") {
            continue;
          }
          keys.push(branch);
        }
        return keys;
      }
      function growBranch(key2, root, last, lastStates, showValues, hideFunctions, callback) {
        var line = "", index = 0, lastKey, circular, lastStatesCopy = lastStates.slice(0);
        if (lastStatesCopy.push([root, last]) && lastStates.length > 0) {
          lastStates.forEach(function(lastState, idx) {
            if (idx > 0) {
              line += (lastState[1] ? " " : "\u2502") + "  ";
            }
            if (!circular && lastState[0] === root) {
              circular = true;
            }
          });
          line += makePrefix(key2, last) + key2;
          showValues && (typeof root !== "object" || root instanceof Date) && (line += ": " + root);
          circular && (line += " (circular ref.)");
          callback(line);
        }
        if (!circular && typeof root === "object") {
          var keys = filterKeys(root, hideFunctions);
          keys.forEach(function(branch) {
            lastKey = ++index === keys.length;
            growBranch(branch, root[branch], lastKey, lastStatesCopy, showValues, hideFunctions, callback);
          });
        }
      }
      ;
      var Treeify = {};
      Treeify.asLines = function(obj, showValues, hideFunctions, lineCallback) {
        var hideFunctionsArg = typeof hideFunctions !== "function" ? hideFunctions : false;
        growBranch(".", obj, false, [], showValues, hideFunctionsArg, lineCallback || hideFunctions);
      };
      Treeify.asTree = function(obj, showValues, hideFunctions) {
        var tree = "";
        growBranch(".", obj, false, [], showValues, hideFunctions, function(line) {
          tree += line + "\n";
        });
        return tree;
      };
      return Treeify;
    });
  }
});

// node_modules/merkletreejs/dist/MerkleTree.js
var require_MerkleTree = __commonJS({
  "node_modules/merkletreejs/dist/MerkleTree.js"(exports) {
    init_define_process();
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod2) {
      return mod2 && mod2.__esModule ? mod2 : { "default": mod2 };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MerkleTree = void 0;
    var buffer_reverse_1 = __importDefault(require_buffer_reverse());
    var sha256_1 = __importDefault(require_sha256());
    var Base_1 = __importDefault(require_Base());
    var treeify_1 = __importDefault(require_treeify());
    var MerkleTree = class extends Base_1.default {
      constructor(leaves, hashFn = sha256_1.default, options = {}) {
        super();
        this.duplicateOdd = false;
        this.hashLeaves = false;
        this.isBitcoinTree = false;
        this.leaves = [];
        this.layers = [];
        this.sortLeaves = false;
        this.sortPairs = false;
        this.sort = false;
        this.fillDefaultHash = null;
        this.isBitcoinTree = !!options.isBitcoinTree;
        this.hashLeaves = !!options.hashLeaves;
        this.sortLeaves = !!options.sortLeaves;
        this.sortPairs = !!options.sortPairs;
        if (options.fillDefaultHash) {
          if (typeof options.fillDefaultHash === "function") {
            this.fillDefaultHash = options.fillDefaultHash;
          } else if (Buffer.isBuffer(options.fillDefaultHash) || typeof options.fillDefaultHash === "string") {
            this.fillDefaultHash = (idx, hashFn2) => options.fillDefaultHash;
          } else {
            throw new Error('method "fillDefaultHash" must be a function, Buffer, or string');
          }
        }
        this.sort = !!options.sort;
        if (this.sort) {
          this.sortLeaves = true;
          this.sortPairs = true;
        }
        this.duplicateOdd = !!options.duplicateOdd;
        this.hashFn = this.bufferifyFn(hashFn);
        this.processLeaves(leaves);
      }
      processLeaves(leaves) {
        if (this.hashLeaves) {
          leaves = leaves.map(this.hashFn);
        }
        this.leaves = leaves.map(this.bufferify);
        if (this.sortLeaves) {
          this.leaves = this.leaves.sort(Buffer.compare);
        }
        if (this.fillDefaultHash) {
          for (let i2 = 0; i2 < Math.pow(2, Math.ceil(Math.log2(this.leaves.length))); i2++) {
            if (i2 >= this.leaves.length) {
              this.leaves.push(this.bufferify(this.fillDefaultHash(i2, this.hashFn)));
            }
          }
        }
        this.layers = [this.leaves];
        this._createHashes(this.leaves);
      }
      _createHashes(nodes) {
        while (nodes.length > 1) {
          const layerIndex = this.layers.length;
          this.layers.push([]);
          for (let i2 = 0; i2 < nodes.length; i2 += 2) {
            if (i2 + 1 === nodes.length) {
              if (nodes.length % 2 === 1) {
                let data2 = nodes[nodes.length - 1];
                let hash4 = data2;
                if (this.isBitcoinTree) {
                  data2 = Buffer.concat([buffer_reverse_1.default(data2), buffer_reverse_1.default(data2)]);
                  hash4 = this.hashFn(data2);
                  hash4 = buffer_reverse_1.default(this.hashFn(hash4));
                  this.layers[layerIndex].push(hash4);
                  continue;
                } else {
                  if (this.duplicateOdd) {
                  } else {
                    this.layers[layerIndex].push(nodes[i2]);
                    continue;
                  }
                }
              }
            }
            const left = nodes[i2];
            const right = i2 + 1 === nodes.length ? left : nodes[i2 + 1];
            let data = null;
            let combined = null;
            if (this.isBitcoinTree) {
              combined = [buffer_reverse_1.default(left), buffer_reverse_1.default(right)];
            } else {
              combined = [left, right];
            }
            if (this.sortPairs) {
              combined.sort(Buffer.compare);
            }
            data = Buffer.concat(combined);
            let hash3 = this.hashFn(data);
            if (this.isBitcoinTree) {
              hash3 = buffer_reverse_1.default(this.hashFn(hash3));
            }
            this.layers[layerIndex].push(hash3);
          }
          nodes = this.layers[layerIndex];
        }
      }
      addLeaf(leaf, shouldHash = false) {
        if (shouldHash) {
          leaf = this.hashFn(leaf);
        }
        this.processLeaves(this.leaves.concat(leaf));
      }
      addLeaves(leaves, shouldHash = false) {
        if (shouldHash) {
          leaves = leaves.map(this.hashFn);
        }
        this.processLeaves(this.leaves.concat(leaves));
      }
      getLeaves(values) {
        if (Array.isArray(values)) {
          if (this.hashLeaves) {
            values = values.map(this.hashFn);
            if (this.sortLeaves) {
              values = values.sort(Buffer.compare);
            }
          }
          return this.leaves.filter((leaf) => this._bufferIndexOf(values, leaf) !== -1);
        }
        return this.leaves;
      }
      getLeaf(index) {
        if (index < 0 || index > this.leaves.length - 1) {
          return Buffer.from([]);
        }
        return this.leaves[index];
      }
      getLeafIndex(target) {
        target = this.bufferify(target);
        const leaves = this.getLeaves();
        for (let i2 = 0; i2 < leaves.length; i2++) {
          const leaf = leaves[i2];
          if (leaf.equals(target)) {
            return i2;
          }
        }
        return -1;
      }
      getLeafCount() {
        return this.leaves.length;
      }
      getHexLeaves() {
        return this.leaves.map((leaf) => this.bufferToHex(leaf));
      }
      static marshalLeaves(leaves) {
        return JSON.stringify(leaves.map((leaf) => MerkleTree.bufferToHex(leaf)), null, 2);
      }
      static unmarshalLeaves(jsonStr) {
        let parsed = null;
        if (typeof jsonStr === "string") {
          parsed = JSON.parse(jsonStr);
        } else if (jsonStr instanceof Object) {
          parsed = jsonStr;
        } else {
          throw new Error("Expected type of string or object");
        }
        if (!parsed) {
          return [];
        }
        if (!Array.isArray(parsed)) {
          throw new Error("Expected JSON string to be array");
        }
        return parsed.map(MerkleTree.bufferify);
      }
      getLayers() {
        return this.layers;
      }
      getHexLayers() {
        return this.layers.reduce((acc, item) => {
          if (Array.isArray(item)) {
            acc.push(item.map((layer) => this.bufferToHex(layer)));
          } else {
            acc.push(item);
          }
          return acc;
        }, []);
      }
      getLayersFlat() {
        const layers = this.layers.reduce((acc, item) => {
          if (Array.isArray(item)) {
            acc.unshift(...item);
          } else {
            acc.unshift(item);
          }
          return acc;
        }, []);
        layers.unshift(Buffer.from([0]));
        return layers;
      }
      getHexLayersFlat() {
        return this.getLayersFlat().map((layer) => this.bufferToHex(layer));
      }
      getLayerCount() {
        return this.getLayers().length;
      }
      getRoot() {
        if (this.layers.length === 0) {
          return Buffer.from([]);
        }
        return this.layers[this.layers.length - 1][0] || Buffer.from([]);
      }
      getHexRoot() {
        return this.bufferToHex(this.getRoot());
      }
      getProof(leaf, index) {
        if (typeof leaf === "undefined") {
          throw new Error("leaf is required");
        }
        leaf = this.bufferify(leaf);
        const proof = [];
        if (!Number.isInteger(index)) {
          index = -1;
          for (let i2 = 0; i2 < this.leaves.length; i2++) {
            if (Buffer.compare(leaf, this.leaves[i2]) === 0) {
              index = i2;
            }
          }
        }
        if (index <= -1) {
          return [];
        }
        for (let i2 = 0; i2 < this.layers.length; i2++) {
          const layer = this.layers[i2];
          const isRightNode = index % 2;
          const pairIndex = isRightNode ? index - 1 : this.isBitcoinTree && index === layer.length - 1 && i2 < this.layers.length - 1 ? index : index + 1;
          if (pairIndex < layer.length) {
            proof.push({
              position: isRightNode ? "left" : "right",
              data: layer[pairIndex]
            });
          }
          index = index / 2 | 0;
        }
        return proof;
      }
      getHexProof(leaf, index) {
        return this.getProof(leaf, index).map((item) => this.bufferToHex(item.data));
      }
      getPositionalHexProof(leaf, index) {
        return this.getProof(leaf, index).map((item) => {
          return [
            item.position === "left" ? 0 : 1,
            this.bufferToHex(item.data)
          ];
        });
      }
      static marshalProof(proof) {
        const json = proof.map((item) => {
          if (typeof item === "string") {
            return item;
          }
          if (Buffer.isBuffer(item)) {
            return MerkleTree.bufferToHex(item);
          }
          return {
            position: item.position,
            data: MerkleTree.bufferToHex(item.data)
          };
        });
        return JSON.stringify(json, null, 2);
      }
      static unmarshalProof(jsonStr) {
        let parsed = null;
        if (typeof jsonStr === "string") {
          parsed = JSON.parse(jsonStr);
        } else if (jsonStr instanceof Object) {
          parsed = jsonStr;
        } else {
          throw new Error("Expected type of string or object");
        }
        if (!parsed) {
          return [];
        }
        if (!Array.isArray(parsed)) {
          throw new Error("Expected JSON string to be array");
        }
        return parsed.map((item) => {
          if (typeof item === "string") {
            return MerkleTree.bufferify(item);
          } else if (item instanceof Object) {
            return {
              position: item.position,
              data: MerkleTree.bufferify(item.data)
            };
          } else {
            throw new Error("Expected item to be of type string or object");
          }
        });
      }
      getProofIndices(treeIndices, depth) {
        const leafCount = Math.pow(2, depth);
        let maximalIndices = new Set();
        for (const index of treeIndices) {
          let x4 = leafCount + index;
          while (x4 > 1) {
            maximalIndices.add(x4 ^ 1);
            x4 = x4 / 2 | 0;
          }
        }
        const a = treeIndices.map((index) => leafCount + index);
        const b2 = Array.from(maximalIndices).sort((a2, b3) => a2 - b3).reverse();
        maximalIndices = a.concat(b2);
        const redundantIndices = new Set();
        const proof = [];
        for (let index of maximalIndices) {
          if (!redundantIndices.has(index)) {
            proof.push(index);
            while (index > 1) {
              redundantIndices.add(index);
              if (!redundantIndices.has(index ^ 1))
                break;
              index = index / 2 | 0;
            }
          }
        }
        return proof.filter((index) => {
          return !treeIndices.includes(index - leafCount);
        });
      }
      getProofIndicesForUnevenTree(sortedLeafIndices, leavesCount) {
        const depth = Math.ceil(Math.log2(leavesCount));
        const unevenLayers = [];
        for (let index = 0; index < depth; index++) {
          const unevenLayer = leavesCount % 2 !== 0;
          if (unevenLayer) {
            unevenLayers.push({ index, leavesCount });
          }
          leavesCount = Math.ceil(leavesCount / 2);
        }
        const proofIndices = [];
        let layerNodes = sortedLeafIndices;
        for (let layerIndex = 0; layerIndex < depth; layerIndex++) {
          const siblingIndices = layerNodes.map((index) => {
            if (index % 2 === 0) {
              return index + 1;
            }
            return index - 1;
          });
          let proofNodeIndices = siblingIndices.filter((index) => !layerNodes.includes(index));
          const unevenLayer = unevenLayers.find(({ index }) => index === layerIndex);
          if (unevenLayer && layerNodes.includes(unevenLayer.leavesCount - 1)) {
            proofNodeIndices = proofNodeIndices.slice(0, -1);
          }
          proofIndices.push(proofNodeIndices);
          layerNodes = [...new Set(layerNodes.map((index) => {
            if (index % 2 === 0) {
              return index / 2;
            }
            if (index % 2 === 0) {
              return (index + 1) / 2;
            }
            return (index - 1) / 2;
          }))];
        }
        return proofIndices;
      }
      getMultiProof(tree, indices) {
        if (!indices) {
          indices = tree;
          tree = this.getLayersFlat();
        }
        const isUneven = this.isUnevenTree();
        if (isUneven) {
          if (indices.every(Number.isInteger)) {
            return this.getMultiProofForUnevenTree(indices);
          }
        }
        if (!indices.every(Number.isInteger)) {
          let els = indices;
          if (this.sortPairs) {
            els = els.sort(Buffer.compare);
          }
          let ids = els.map((el) => this._bufferIndexOf(this.leaves, el)).sort((a, b2) => a === b2 ? 0 : a > b2 ? 1 : -1);
          if (!ids.every((idx) => idx !== -1)) {
            throw new Error("Element does not exist in Merkle tree");
          }
          const hashes = [];
          const proof = [];
          let nextIds = [];
          for (let i2 = 0; i2 < this.layers.length; i2++) {
            const layer = this.layers[i2];
            for (let j3 = 0; j3 < ids.length; j3++) {
              const idx = ids[j3];
              const pairElement = this._getPairNode(layer, idx);
              hashes.push(layer[idx]);
              if (pairElement) {
                proof.push(pairElement);
              }
              nextIds.push(idx / 2 | 0);
            }
            ids = nextIds.filter((value2, i3, self2) => self2.indexOf(value2) === i3);
            nextIds = [];
          }
          return proof.filter((value2) => !hashes.includes(value2));
        }
        return this.getProofIndices(indices, this._log2(tree.length / 2 | 0)).map((index) => tree[index]);
      }
      getMultiProofForUnevenTree(tree, indices) {
        if (!indices) {
          indices = tree;
          tree = this.getLayers();
        }
        let proofHashes = [];
        let currentLayerIndices = indices;
        for (const treeLayer of tree) {
          const siblings = [];
          for (const index of currentLayerIndices) {
            if (index % 2 === 0) {
              const idx2 = index + 1;
              if (!currentLayerIndices.includes(idx2)) {
                if (treeLayer[idx2]) {
                  siblings.push(treeLayer[idx2]);
                  continue;
                }
              }
            }
            const idx = index - 1;
            if (!currentLayerIndices.includes(idx)) {
              if (treeLayer[idx]) {
                siblings.push(treeLayer[idx]);
                continue;
              }
            }
          }
          proofHashes = proofHashes.concat(siblings);
          const uniqueIndices = new Set();
          for (const index of currentLayerIndices) {
            if (index % 2 === 0) {
              uniqueIndices.add(index / 2);
              continue;
            }
            if (index % 2 === 0) {
              uniqueIndices.add((index + 1) / 2);
              continue;
            }
            uniqueIndices.add((index - 1) / 2);
          }
          currentLayerIndices = Array.from(uniqueIndices);
        }
        return proofHashes;
      }
      getHexMultiProof(tree, indices) {
        return this.getMultiProof(tree, indices).map((x4) => this.bufferToHex(x4));
      }
      getProofFlags(leaves, proofs) {
        if (!Array.isArray(leaves) || leaves.length <= 0) {
          throw new Error("Invalid Inputs!");
        }
        let ids;
        if (leaves.every(Number.isInteger)) {
          ids = leaves.sort((a, b2) => a === b2 ? 0 : a > b2 ? 1 : -1);
        } else {
          ids = leaves.map((el) => this._bufferIndexOf(this.leaves, el)).sort((a, b2) => a === b2 ? 0 : a > b2 ? 1 : -1);
        }
        if (!ids.every((idx) => idx !== -1)) {
          throw new Error("Element does not exist in Merkle tree");
        }
        const _proofs = proofs.map((item) => this.bufferify(item));
        const tested = [];
        const flags = [];
        for (let index = 0; index < this.layers.length; index++) {
          const layer = this.layers[index];
          ids = ids.reduce((ids2, idx) => {
            const skipped = tested.includes(layer[idx]);
            if (!skipped) {
              const pairElement = this._getPairNode(layer, idx);
              const proofUsed = _proofs.includes(layer[idx]) || _proofs.includes(pairElement);
              pairElement && flags.push(!proofUsed);
              tested.push(layer[idx]);
              tested.push(pairElement);
            }
            ids2.push(idx / 2 | 0);
            return ids2;
          }, []);
        }
        return flags;
      }
      verify(proof, targetNode, root) {
        let hash3 = this.bufferify(targetNode);
        root = this.bufferify(root);
        if (!Array.isArray(proof) || !targetNode || !root) {
          return false;
        }
        for (let i2 = 0; i2 < proof.length; i2++) {
          const node = proof[i2];
          let data = null;
          let isLeftNode = null;
          if (typeof node === "string") {
            data = this.bufferify(node);
            isLeftNode = true;
          } else if (Array.isArray(node)) {
            isLeftNode = node[0] === 0;
            data = this.bufferify(node[1]);
          } else if (Buffer.isBuffer(node)) {
            data = node;
            isLeftNode = true;
          } else if (node instanceof Object) {
            data = this.bufferify(node.data);
            isLeftNode = node.position === "left";
          } else {
            throw new Error("Expected node to be of type string or object");
          }
          const buffers = [];
          if (this.isBitcoinTree) {
            buffers.push(buffer_reverse_1.default(hash3));
            buffers[isLeftNode ? "unshift" : "push"](buffer_reverse_1.default(data));
            hash3 = this.hashFn(Buffer.concat(buffers));
            hash3 = buffer_reverse_1.default(this.hashFn(hash3));
          } else {
            if (this.sortPairs) {
              if (Buffer.compare(hash3, data) === -1) {
                buffers.push(hash3, data);
                hash3 = this.hashFn(Buffer.concat(buffers));
              } else {
                buffers.push(data, hash3);
                hash3 = this.hashFn(Buffer.concat(buffers));
              }
            } else {
              buffers.push(hash3);
              buffers[isLeftNode ? "unshift" : "push"](data);
              hash3 = this.hashFn(Buffer.concat(buffers));
            }
          }
        }
        return Buffer.compare(hash3, root) === 0;
      }
      verifyMultiProof(root, proofIndices, proofLeaves, leavesCount, proof) {
        const isUneven = this.isUnevenTree();
        if (isUneven) {
          return this.verifyMultiProofForUnevenTree(root, proofIndices, proofLeaves, leavesCount, proof);
        }
        const depth = Math.ceil(Math.log2(leavesCount));
        root = this.bufferify(root);
        proofLeaves = proofLeaves.map((leaf) => this.bufferify(leaf));
        proof = proof.map((leaf) => this.bufferify(leaf));
        const tree = {};
        for (const [index, leaf] of this._zip(proofIndices, proofLeaves)) {
          tree[Math.pow(2, depth) + index] = leaf;
        }
        for (const [index, proofitem] of this._zip(this.getProofIndices(proofIndices, depth), proof)) {
          tree[index] = proofitem;
        }
        let indexqueue = Object.keys(tree).map((value2) => +value2).sort((a, b2) => a - b2);
        indexqueue = indexqueue.slice(0, indexqueue.length - 1);
        let i2 = 0;
        while (i2 < indexqueue.length) {
          const index = indexqueue[i2];
          if (index >= 2 && {}.hasOwnProperty.call(tree, index ^ 1)) {
            let pair = [tree[index - index % 2], tree[index - index % 2 + 1]];
            if (this.sortPairs) {
              pair = pair.sort(Buffer.compare);
            }
            const hash3 = pair[1] ? this.hashFn(Buffer.concat(pair)) : pair[0];
            tree[index / 2 | 0] = hash3;
            indexqueue.push(index / 2 | 0);
          }
          i2 += 1;
        }
        return !proofIndices.length || {}.hasOwnProperty.call(tree, 1) && tree[1].equals(root);
      }
      verifyMultiProofWithFlags(root, leaves, proofs, proofFlag) {
        root = this.bufferify(root);
        leaves = leaves.map(this.bufferify);
        proofs = proofs.map(this.bufferify);
        const leavesLen = leaves.length;
        const totalHashes = proofFlag.length;
        const hashes = [];
        let leafPos = 0;
        let hashPos = 0;
        let proofPos = 0;
        for (let i2 = 0; i2 < totalHashes; i2++) {
          const bufA = proofFlag[i2] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proofs[proofPos++];
          const bufB = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];
          const buffers = [bufA, bufB].sort(Buffer.compare);
          hashes[i2] = this.hashFn(Buffer.concat(buffers));
        }
        return Buffer.compare(hashes[totalHashes - 1], root) === 0;
      }
      verifyMultiProofForUnevenTree(root, indices, leaves, leavesCount, proof) {
        root = this.bufferify(root);
        leaves = leaves.map((leaf) => this.bufferify(leaf));
        proof = proof.map((leaf) => this.bufferify(leaf));
        const computedRoot = this.calculateRootForUnevenTree(indices, leaves, leavesCount, proof);
        return root.equals(computedRoot);
      }
      getDepth() {
        return this.getLayers().length - 1;
      }
      getLayersAsObject() {
        const layers = this.getLayers().map((layer) => layer.map((value2) => this.bufferToHex(value2, false)));
        const objs = [];
        for (let i2 = 0; i2 < layers.length; i2++) {
          const arr = [];
          for (let j3 = 0; j3 < layers[i2].length; j3++) {
            const obj = { [layers[i2][j3]]: null };
            if (objs.length) {
              obj[layers[i2][j3]] = {};
              const a = objs.shift();
              const akey = Object.keys(a)[0];
              obj[layers[i2][j3]][akey] = a[akey];
              if (objs.length) {
                const b2 = objs.shift();
                const bkey = Object.keys(b2)[0];
                obj[layers[i2][j3]][bkey] = b2[bkey];
              }
            }
            arr.push(obj);
          }
          objs.push(...arr);
        }
        return objs[0];
      }
      static verify(proof, targetNode, root, hashFn = sha256_1.default, options = {}) {
        const tree = new MerkleTree([], hashFn, options);
        return tree.verify(proof, targetNode, root);
      }
      static getMultiProof(tree, indices) {
        const t = new MerkleTree([]);
        return t.getMultiProof(tree, indices);
      }
      resetTree() {
        this.leaves = [];
        this.layers = [];
      }
      _getPairNode(layer, idx) {
        const pairIdx = idx % 2 === 0 ? idx + 1 : idx - 1;
        if (pairIdx < layer.length) {
          return layer[pairIdx];
        } else {
          return null;
        }
      }
      _toTreeString() {
        const obj = this.getLayersAsObject();
        return treeify_1.default.asTree(obj, true);
      }
      toString() {
        return this._toTreeString();
      }
      isUnevenTree(treeLayers) {
        const depth = (treeLayers === null || treeLayers === void 0 ? void 0 : treeLayers.length) || this.getDepth();
        return !this.isPowOf2(depth);
      }
      isPowOf2(v7) {
        return v7 && !(v7 & v7 - 1);
      }
      calculateRootForUnevenTree(leafIndices, leafHashes, totalLeavesCount, proofHashes) {
        const leafTuples = this._zip(leafIndices, leafHashes).sort(([indexA], [indexB]) => indexA - indexB);
        const leafTupleIndices = leafTuples.map(([index]) => index);
        const proofIndices = this.getProofIndicesForUnevenTree(leafTupleIndices, totalLeavesCount);
        let nextSliceStart = 0;
        const proofTuplesByLayers = [];
        for (let i2 = 0; i2 < proofIndices.length; i2++) {
          const indices = proofIndices[i2];
          const sliceStart = nextSliceStart;
          nextSliceStart += indices.length;
          proofTuplesByLayers[i2] = this._zip(indices, proofHashes.slice(sliceStart, nextSliceStart));
        }
        const tree = [leafTuples];
        for (let layerIndex = 0; layerIndex < proofTuplesByLayers.length; layerIndex++) {
          const currentLayer = proofTuplesByLayers[layerIndex].concat(tree[layerIndex]).sort(([indexA], [indexB]) => indexA - indexB).map(([, hash3]) => hash3);
          const s2 = tree[layerIndex].map(([layerIndex2]) => layerIndex2);
          const parentIndices = [...new Set(s2.map((index) => {
            if (index % 2 === 0) {
              return index / 2;
            }
            if (index % 2 === 0) {
              return (index + 1) / 2;
            }
            return (index - 1) / 2;
          }))];
          const parentLayer = [];
          for (let i2 = 0; i2 < parentIndices.length; i2++) {
            const parentNodeTreeIndex = parentIndices[i2];
            const bufA = currentLayer[i2 * 2];
            const bufB = currentLayer[i2 * 2 + 1];
            const hash3 = bufB ? this.hashFn(Buffer.concat([bufA, bufB])) : bufA;
            parentLayer.push([parentNodeTreeIndex, hash3]);
          }
          tree.push(parentLayer);
        }
        return tree[tree.length - 1][0][1];
      }
    };
    exports.MerkleTree = MerkleTree;
    if (typeof window !== "undefined") {
      ;
      window.MerkleTree = MerkleTree;
    }
    exports.default = MerkleTree;
  }
});

// node_modules/merkletreejs/dist/MerkleMountainRange.js
var require_MerkleMountainRange = __commonJS({
  "node_modules/merkletreejs/dist/MerkleMountainRange.js"(exports) {
    init_define_process();
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod2) {
      return mod2 && mod2.__esModule ? mod2 : { "default": mod2 };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MerkleMountainRange = void 0;
    var Base_1 = __importDefault(require_Base());
    var sha256_1 = __importDefault(require_sha256());
    var MerkleMountainRange = class extends Base_1.default {
      constructor(hashFn = sha256_1.default, leaves = [], hashLeafFn, peakBaggingFn, hashBranchFn) {
        super();
        this.root = Buffer.alloc(0);
        this.size = 0;
        this.width = 0;
        this.hashes = {};
        this.data = {};
        leaves = leaves.map(this.bufferify);
        this.hashFn = this.bufferifyFn(hashFn);
        this.hashLeafFn = hashLeafFn;
        this.peakBaggingFn = peakBaggingFn;
        this.hashBranchFn = hashBranchFn;
        for (const leaf of leaves) {
          this.append(leaf);
        }
      }
      append(data) {
        data = this.bufferify(data);
        const dataHash = this.hashFn(data);
        const dataHashHex = this.bufferToHex(dataHash);
        if (!this.data[dataHashHex] || this.bufferToHex(this.hashFn(this.data[dataHashHex])) !== dataHashHex) {
          this.data[dataHashHex] = data;
        }
        const leaf = this.hashLeaf(this.size + 1, dataHash);
        this.hashes[this.size + 1] = leaf;
        this.width += 1;
        const peakIndexes = this.getPeakIndexes(this.width);
        this.size = this.getSize(this.width);
        const peaks = [];
        for (let i2 = 0; i2 < peakIndexes.length; i2++) {
          peaks[i2] = this._getOrCreateNode(peakIndexes[i2]);
        }
        this.root = this.peakBagging(this.width, peaks);
      }
      hashLeaf(index, dataHash) {
        dataHash = this.bufferify(dataHash);
        if (this.hashLeafFn) {
          return this.bufferify(this.hashLeafFn(index, dataHash));
        }
        return this.hashFn(Buffer.concat([this.bufferify(index), dataHash]));
      }
      hashBranch(index, left, right) {
        if (this.hashBranchFn) {
          return this.bufferify(this.hashBranchFn(index, left, right));
        }
        return this.hashFn(Buffer.concat([this.bufferify(index), this.bufferify(left), this.bufferify(right)]));
      }
      getPeaks() {
        const peakIndexes = this.getPeakIndexes(this.width);
        const peaks = [];
        for (let i2 = 0; i2 < peakIndexes.length; i2++) {
          peaks[i2] = this.hashes[peakIndexes[i2]];
        }
        return peaks;
      }
      getLeafIndex(width) {
        if (width % 2 === 1) {
          return this.getSize(width);
        }
        return this.getSize(width - 1) + 1;
      }
      getPeakIndexes(width) {
        const numPeaks = this.numOfPeaks(width);
        const peakIndexes = [];
        let count = 0;
        let size = 0;
        for (let i2 = 255; i2 > 0; i2--) {
          if ((width & 1 << i2 - 1) !== 0) {
            size = size + (1 << i2) - 1;
            peakIndexes[count++] = size;
            if (peakIndexes.length >= numPeaks) {
              break;
            }
          }
        }
        if (count !== peakIndexes.length) {
          throw new Error("invalid bit calculation");
        }
        return peakIndexes;
      }
      numOfPeaks(width) {
        let bits = width;
        let num = 0;
        while (bits > 0) {
          if (bits % 2 === 1) {
            num++;
          }
          bits = bits >> 1;
        }
        return num;
      }
      peakBagging(width, peaks) {
        const size = this.getSize(width);
        if (this.numOfPeaks(width) !== peaks.length) {
          throw new Error("received invalid number of peaks");
        }
        if (width === 0 && !peaks.length) {
          return Buffer.alloc(0);
        }
        if (this.peakBaggingFn) {
          return this.bufferify(this.peakBaggingFn(size, peaks));
        }
        return this.hashFn(Buffer.concat([this.bufferify(size), ...peaks.map(this.bufferify)]));
      }
      getSize(width) {
        return (width << 1) - this.numOfPeaks(width);
      }
      getRoot() {
        return this.root;
      }
      getHexRoot() {
        return this.bufferToHex(this.getRoot());
      }
      getNode(index) {
        return this.hashes[index];
      }
      mountainHeight(size) {
        let height = 1;
        while (1 << height <= size + height) {
          height++;
        }
        return height - 1;
      }
      heightAt(index) {
        let reducedIndex = index;
        let peakIndex = 0;
        let height = 0;
        while (reducedIndex > peakIndex) {
          reducedIndex -= (1 << height) - 1;
          height = this.mountainHeight(reducedIndex);
          peakIndex = (1 << height) - 1;
        }
        return height - (peakIndex - reducedIndex);
      }
      isLeaf(index) {
        return this.heightAt(index) === 1;
      }
      getChildren(index) {
        const left = index - (1 << this.heightAt(index) - 1);
        const right = index - 1;
        if (left === right) {
          throw new Error("not a parent");
        }
        return [left, right];
      }
      getMerkleProof(index) {
        if (index > this.size) {
          throw new Error("out of range");
        }
        if (!this.isLeaf(index)) {
          throw new Error("not a leaf");
        }
        const root = this.root;
        const width = this.width;
        const peaks = this.getPeakIndexes(this.width);
        const peakBagging = [];
        let cursor = 0;
        for (let i2 = 0; i2 < peaks.length; i2++) {
          peakBagging[i2] = this.hashes[peaks[i2]];
          if (peaks[i2] >= index && cursor === 0) {
            cursor = peaks[i2];
          }
        }
        let left = 0;
        let right = 0;
        let height = this.heightAt(cursor);
        const siblings = [];
        while (cursor !== index) {
          height--;
          [left, right] = this.getChildren(cursor);
          cursor = index <= left ? left : right;
          siblings[height - 1] = this.hashes[index <= left ? right : left];
        }
        return {
          root,
          width,
          peakBagging,
          siblings
        };
      }
      verify(root, width, index, value2, peaks, siblings) {
        value2 = this.bufferify(value2);
        const size = this.getSize(width);
        if (size < index) {
          throw new Error("index is out of range");
        }
        if (!root.equals(this.peakBagging(width, peaks))) {
          throw new Error("invalid root hash from the peaks");
        }
        let cursor = 0;
        let targetPeak;
        const peakIndexes = this.getPeakIndexes(width);
        for (let i2 = 0; i2 < peakIndexes.length; i2++) {
          if (peakIndexes[i2] >= index) {
            targetPeak = peaks[i2];
            cursor = peakIndexes[i2];
            break;
          }
        }
        if (!targetPeak) {
          throw new Error("target not found");
        }
        let height = siblings.length + 1;
        const path = new Array(height);
        let left = 0;
        let right = 0;
        while (height > 0) {
          path[--height] = cursor;
          if (cursor === index) {
            break;
          } else {
            [left, right] = this.getChildren(cursor);
            cursor = index > left ? right : left;
            continue;
          }
        }
        let node;
        while (height < path.length) {
          cursor = path[height];
          if (height === 0) {
            node = this.hashLeaf(cursor, this.hashFn(value2));
          } else if (cursor - 1 === path[height - 1]) {
            node = this.hashBranch(cursor, siblings[height - 1], node);
          } else {
            node = this.hashBranch(cursor, node, siblings[height - 1]);
          }
          height++;
        }
        if (!node.equals(targetPeak)) {
          throw new Error("hashed peak is invalid");
        }
        return true;
      }
      peaksToPeakMap(width, peaks) {
        const peakMap = {};
        let bitIndex = 0;
        let peakRef = 0;
        let count = peaks.length;
        for (let height = 1; height <= 32; height++) {
          bitIndex = 32 - height;
          peakRef = 1 << height - 1;
          if ((width & peakRef) !== 0) {
            peakMap[bitIndex] = peaks[--count];
          } else {
            peakMap[bitIndex] = 0;
          }
        }
        if (count !== 0) {
          throw new Error("invalid number of peaks");
        }
        return peakMap;
      }
      peakMapToPeaks(width, peakMap) {
        const arrLength = this.numOfPeaks(width);
        const peaks = new Array(arrLength);
        let count = 0;
        for (let i2 = 0; i2 < 32; i2++) {
          if (peakMap[i2] !== 0) {
            peaks[count++] = peakMap[i2];
          }
        }
        if (count !== arrLength) {
          throw new Error("invalid number of peaks");
        }
        return peaks;
      }
      peakUpdate(width, prevPeakMap, itemHash) {
        const nextPeakMap = {};
        const newWidth = width + 1;
        let cursorIndex = this.getLeafIndex(newWidth);
        let cursorNode = this.hashLeaf(cursorIndex, itemHash);
        let bitIndex = 0;
        let peakRef = 0;
        let prevPeakExist = false;
        let nextPeakExist = false;
        let obtained = false;
        for (let height = 1; height <= 32; height++) {
          bitIndex = 32 - height;
          if (obtained) {
            nextPeakMap[bitIndex] = prevPeakMap[bitIndex];
          } else {
            peakRef = 1 << height - 1;
            prevPeakExist = (width & peakRef) !== 0;
            nextPeakExist = (newWidth & peakRef) !== 0;
            cursorIndex++;
            if (prevPeakExist) {
              cursorNode = this.hashBranch(cursorIndex, prevPeakMap[bitIndex], cursorNode);
            }
            if (nextPeakExist) {
              if (prevPeakExist) {
                nextPeakMap[bitIndex] = prevPeakMap[bitIndex];
              } else {
                nextPeakMap[bitIndex] = cursorNode;
              }
              obtained = true;
            } else {
              nextPeakMap[bitIndex] = 0;
            }
          }
        }
        return nextPeakMap;
      }
      rollUp(root, width, peaks, itemHashes) {
        if (!root.equals(this.peakBagging(width, peaks))) {
          throw new Error("invalid root hash from the peaks");
        }
        let tmpWidth = width;
        let tmpPeakMap = this.peaksToPeakMap(width, peaks);
        for (let i2 = 0; i2 < itemHashes.length; i2++) {
          tmpPeakMap = this.peakUpdate(tmpWidth, tmpPeakMap, itemHashes[i2]);
          tmpWidth++;
        }
        return this.peakBagging(tmpWidth, this.peakMapToPeaks(tmpWidth, tmpPeakMap));
      }
      _getOrCreateNode(index) {
        if (index > this.size) {
          throw new Error("out of range");
        }
        if (!this.hashes[index]) {
          const [leftIndex, rightIndex] = this.getChildren(index);
          const leftHash = this._getOrCreateNode(leftIndex);
          const rightHash = this._getOrCreateNode(rightIndex);
          this.hashes[index] = this.hashBranch(index, leftHash, rightHash);
        }
        return this.hashes[index];
      }
    };
    exports.MerkleMountainRange = MerkleMountainRange;
    exports.default = MerkleMountainRange;
  }
});

// node_modules/merkletreejs/dist/index.js
var require_dist = __commonJS({
  "node_modules/merkletreejs/dist/index.js"(exports) {
    init_define_process();
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod2) {
      return mod2 && mod2.__esModule ? mod2 : { "default": mod2 };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MerkleTree = void 0;
    var MerkleTree_1 = __importDefault(require_MerkleTree());
    exports.MerkleTree = MerkleTree_1.default;
    var MerkleMountainRange_1 = require_MerkleMountainRange();
    Object.defineProperty(exports, "MerkleMountainRange", { enumerable: true, get: function() {
      return MerkleMountainRange_1.MerkleMountainRange;
    } });
    exports.default = MerkleTree_1.default;
  }
});

// node_modules/keccak256/node_modules/bn.js/lib/bn.js
var require_bn2 = __commonJS({
  "node_modules/keccak256/node_modules/bn.js/lib/bn.js"(exports, module) {
    init_define_process();
    (function(module2, exports2) {
      "use strict";
      function assert2(val, msg) {
        if (!val)
          throw new Error(msg || "Assertion failed");
      }
      function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {
        };
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
      }
      function BN3(number, base2, endian) {
        if (BN3.isBN(number)) {
          return number;
        }
        this.negative = 0;
        this.words = null;
        this.length = 0;
        this.red = null;
        if (number !== null) {
          if (base2 === "le" || base2 === "be") {
            endian = base2;
            base2 = 10;
          }
          this._init(number || 0, base2 || 10, endian || "be");
        }
      }
      if (typeof module2 === "object") {
        module2.exports = BN3;
      } else {
        exports2.BN = BN3;
      }
      BN3.BN = BN3;
      BN3.wordSize = 26;
      var Buffer2;
      try {
        if (typeof window !== "undefined" && typeof window.Buffer !== "undefined") {
          Buffer2 = window.Buffer;
        } else {
          Buffer2 = (init_buffer(), buffer_exports).Buffer;
        }
      } catch (e) {
      }
      BN3.isBN = function isBN(num) {
        if (num instanceof BN3) {
          return true;
        }
        return num !== null && typeof num === "object" && num.constructor.wordSize === BN3.wordSize && Array.isArray(num.words);
      };
      BN3.max = function max(left, right) {
        if (left.cmp(right) > 0)
          return left;
        return right;
      };
      BN3.min = function min(left, right) {
        if (left.cmp(right) < 0)
          return left;
        return right;
      };
      BN3.prototype._init = function init2(number, base2, endian) {
        if (typeof number === "number") {
          return this._initNumber(number, base2, endian);
        }
        if (typeof number === "object") {
          return this._initArray(number, base2, endian);
        }
        if (base2 === "hex") {
          base2 = 16;
        }
        assert2(base2 === (base2 | 0) && base2 >= 2 && base2 <= 36);
        number = number.toString().replace(/\s+/g, "");
        var start = 0;
        if (number[0] === "-") {
          start++;
          this.negative = 1;
        }
        if (start < number.length) {
          if (base2 === 16) {
            this._parseHex(number, start, endian);
          } else {
            this._parseBase(number, base2, start);
            if (endian === "le") {
              this._initArray(this.toArray(), base2, endian);
            }
          }
        }
      };
      BN3.prototype._initNumber = function _initNumber(number, base2, endian) {
        if (number < 0) {
          this.negative = 1;
          number = -number;
        }
        if (number < 67108864) {
          this.words = [number & 67108863];
          this.length = 1;
        } else if (number < 4503599627370496) {
          this.words = [
            number & 67108863,
            number / 67108864 & 67108863
          ];
          this.length = 2;
        } else {
          assert2(number < 9007199254740992);
          this.words = [
            number & 67108863,
            number / 67108864 & 67108863,
            1
          ];
          this.length = 3;
        }
        if (endian !== "le")
          return;
        this._initArray(this.toArray(), base2, endian);
      };
      BN3.prototype._initArray = function _initArray(number, base2, endian) {
        assert2(typeof number.length === "number");
        if (number.length <= 0) {
          this.words = [0];
          this.length = 1;
          return this;
        }
        this.length = Math.ceil(number.length / 3);
        this.words = new Array(this.length);
        for (var i2 = 0; i2 < this.length; i2++) {
          this.words[i2] = 0;
        }
        var j3, w3;
        var off = 0;
        if (endian === "be") {
          for (i2 = number.length - 1, j3 = 0; i2 >= 0; i2 -= 3) {
            w3 = number[i2] | number[i2 - 1] << 8 | number[i2 - 2] << 16;
            this.words[j3] |= w3 << off & 67108863;
            this.words[j3 + 1] = w3 >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j3++;
            }
          }
        } else if (endian === "le") {
          for (i2 = 0, j3 = 0; i2 < number.length; i2 += 3) {
            w3 = number[i2] | number[i2 + 1] << 8 | number[i2 + 2] << 16;
            this.words[j3] |= w3 << off & 67108863;
            this.words[j3 + 1] = w3 >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j3++;
            }
          }
        }
        return this._strip();
      };
      function parseHex4Bits(string, index) {
        var c2 = string.charCodeAt(index);
        if (c2 >= 48 && c2 <= 57) {
          return c2 - 48;
        } else if (c2 >= 65 && c2 <= 70) {
          return c2 - 55;
        } else if (c2 >= 97 && c2 <= 102) {
          return c2 - 87;
        } else {
          assert2(false, "Invalid character in " + string);
        }
      }
      function parseHexByte(string, lowerBound, index) {
        var r2 = parseHex4Bits(string, index);
        if (index - 1 >= lowerBound) {
          r2 |= parseHex4Bits(string, index - 1) << 4;
        }
        return r2;
      }
      BN3.prototype._parseHex = function _parseHex(number, start, endian) {
        this.length = Math.ceil((number.length - start) / 6);
        this.words = new Array(this.length);
        for (var i2 = 0; i2 < this.length; i2++) {
          this.words[i2] = 0;
        }
        var off = 0;
        var j3 = 0;
        var w3;
        if (endian === "be") {
          for (i2 = number.length - 1; i2 >= start; i2 -= 2) {
            w3 = parseHexByte(number, start, i2) << off;
            this.words[j3] |= w3 & 67108863;
            if (off >= 18) {
              off -= 18;
              j3 += 1;
              this.words[j3] |= w3 >>> 26;
            } else {
              off += 8;
            }
          }
        } else {
          var parseLength = number.length - start;
          for (i2 = parseLength % 2 === 0 ? start + 1 : start; i2 < number.length; i2 += 2) {
            w3 = parseHexByte(number, start, i2) << off;
            this.words[j3] |= w3 & 67108863;
            if (off >= 18) {
              off -= 18;
              j3 += 1;
              this.words[j3] |= w3 >>> 26;
            } else {
              off += 8;
            }
          }
        }
        this._strip();
      };
      function parseBase(str, start, end, mul3) {
        var r2 = 0;
        var b2 = 0;
        var len = Math.min(str.length, end);
        for (var i2 = start; i2 < len; i2++) {
          var c2 = str.charCodeAt(i2) - 48;
          r2 *= mul3;
          if (c2 >= 49) {
            b2 = c2 - 49 + 10;
          } else if (c2 >= 17) {
            b2 = c2 - 17 + 10;
          } else {
            b2 = c2;
          }
          assert2(c2 >= 0 && b2 < mul3, "Invalid character");
          r2 += b2;
        }
        return r2;
      }
      BN3.prototype._parseBase = function _parseBase(number, base2, start) {
        this.words = [0];
        this.length = 1;
        for (var limbLen = 0, limbPow = 1; limbPow <= 67108863; limbPow *= base2) {
          limbLen++;
        }
        limbLen--;
        limbPow = limbPow / base2 | 0;
        var total = number.length - start;
        var mod2 = total % limbLen;
        var end = Math.min(total, total - mod2) + start;
        var word = 0;
        for (var i2 = start; i2 < end; i2 += limbLen) {
          word = parseBase(number, i2, i2 + limbLen, base2);
          this.imuln(limbPow);
          if (this.words[0] + word < 67108864) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
        if (mod2 !== 0) {
          var pow = 1;
          word = parseBase(number, i2, number.length, base2);
          for (i2 = 0; i2 < mod2; i2++) {
            pow *= base2;
          }
          this.imuln(pow);
          if (this.words[0] + word < 67108864) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
        this._strip();
      };
      BN3.prototype.copy = function copy(dest) {
        dest.words = new Array(this.length);
        for (var i2 = 0; i2 < this.length; i2++) {
          dest.words[i2] = this.words[i2];
        }
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
      };
      function move(dest, src) {
        dest.words = src.words;
        dest.length = src.length;
        dest.negative = src.negative;
        dest.red = src.red;
      }
      BN3.prototype._move = function _move(dest) {
        move(dest, this);
      };
      BN3.prototype.clone = function clone() {
        var r2 = new BN3(null);
        this.copy(r2);
        return r2;
      };
      BN3.prototype._expand = function _expand(size) {
        while (this.length < size) {
          this.words[this.length++] = 0;
        }
        return this;
      };
      BN3.prototype._strip = function strip() {
        while (this.length > 1 && this.words[this.length - 1] === 0) {
          this.length--;
        }
        return this._normSign();
      };
      BN3.prototype._normSign = function _normSign() {
        if (this.length === 1 && this.words[0] === 0) {
          this.negative = 0;
        }
        return this;
      };
      if (typeof Symbol !== "undefined" && typeof Symbol.for === "function") {
        try {
          BN3.prototype[Symbol.for("nodejs.util.inspect.custom")] = inspect4;
        } catch (e) {
          BN3.prototype.inspect = inspect4;
        }
      } else {
        BN3.prototype.inspect = inspect4;
      }
      function inspect4() {
        return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
      }
      var zeros2 = [
        "",
        "0",
        "00",
        "000",
        "0000",
        "00000",
        "000000",
        "0000000",
        "00000000",
        "000000000",
        "0000000000",
        "00000000000",
        "000000000000",
        "0000000000000",
        "00000000000000",
        "000000000000000",
        "0000000000000000",
        "00000000000000000",
        "000000000000000000",
        "0000000000000000000",
        "00000000000000000000",
        "000000000000000000000",
        "0000000000000000000000",
        "00000000000000000000000",
        "000000000000000000000000",
        "0000000000000000000000000"
      ];
      var groupSizes = [
        0,
        0,
        25,
        16,
        12,
        11,
        10,
        9,
        8,
        8,
        7,
        7,
        7,
        7,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5
      ];
      var groupBases = [
        0,
        0,
        33554432,
        43046721,
        16777216,
        48828125,
        60466176,
        40353607,
        16777216,
        43046721,
        1e7,
        19487171,
        35831808,
        62748517,
        7529536,
        11390625,
        16777216,
        24137569,
        34012224,
        47045881,
        64e6,
        4084101,
        5153632,
        6436343,
        7962624,
        9765625,
        11881376,
        14348907,
        17210368,
        20511149,
        243e5,
        28629151,
        33554432,
        39135393,
        45435424,
        52521875,
        60466176
      ];
      BN3.prototype.toString = function toString(base2, padding2) {
        base2 = base2 || 10;
        padding2 = padding2 | 0 || 1;
        var out;
        if (base2 === 16 || base2 === "hex") {
          out = "";
          var off = 0;
          var carry = 0;
          for (var i2 = 0; i2 < this.length; i2++) {
            var w3 = this.words[i2];
            var word = ((w3 << off | carry) & 16777215).toString(16);
            carry = w3 >>> 24 - off & 16777215;
            if (carry !== 0 || i2 !== this.length - 1) {
              out = zeros2[6 - word.length] + word + out;
            } else {
              out = word + out;
            }
            off += 2;
            if (off >= 26) {
              off -= 26;
              i2--;
            }
          }
          if (carry !== 0) {
            out = carry.toString(16) + out;
          }
          while (out.length % padding2 !== 0) {
            out = "0" + out;
          }
          if (this.negative !== 0) {
            out = "-" + out;
          }
          return out;
        }
        if (base2 === (base2 | 0) && base2 >= 2 && base2 <= 36) {
          var groupSize = groupSizes[base2];
          var groupBase = groupBases[base2];
          out = "";
          var c2 = this.clone();
          c2.negative = 0;
          while (!c2.isZero()) {
            var r2 = c2.modrn(groupBase).toString(base2);
            c2 = c2.idivn(groupBase);
            if (!c2.isZero()) {
              out = zeros2[groupSize - r2.length] + r2 + out;
            } else {
              out = r2 + out;
            }
          }
          if (this.isZero()) {
            out = "0" + out;
          }
          while (out.length % padding2 !== 0) {
            out = "0" + out;
          }
          if (this.negative !== 0) {
            out = "-" + out;
          }
          return out;
        }
        assert2(false, "Base should be between 2 and 36");
      };
      BN3.prototype.toNumber = function toNumber() {
        var ret = this.words[0];
        if (this.length === 2) {
          ret += this.words[1] * 67108864;
        } else if (this.length === 3 && this.words[2] === 1) {
          ret += 4503599627370496 + this.words[1] * 67108864;
        } else if (this.length > 2) {
          assert2(false, "Number can only safely store up to 53 bits");
        }
        return this.negative !== 0 ? -ret : ret;
      };
      BN3.prototype.toJSON = function toJSON2() {
        return this.toString(16, 2);
      };
      if (Buffer2) {
        BN3.prototype.toBuffer = function toBuffer(endian, length) {
          return this.toArrayLike(Buffer2, endian, length);
        };
      }
      BN3.prototype.toArray = function toArray(endian, length) {
        return this.toArrayLike(Array, endian, length);
      };
      var allocate = function allocate2(ArrayType, size) {
        if (ArrayType.allocUnsafe) {
          return ArrayType.allocUnsafe(size);
        }
        return new ArrayType(size);
      };
      BN3.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
        this._strip();
        var byteLength = this.byteLength();
        var reqLength = length || Math.max(1, byteLength);
        assert2(byteLength <= reqLength, "byte array longer than desired length");
        assert2(reqLength > 0, "Requested array length <= 0");
        var res = allocate(ArrayType, reqLength);
        var postfix = endian === "le" ? "LE" : "BE";
        this["_toArrayLike" + postfix](res, byteLength);
        return res;
      };
      BN3.prototype._toArrayLikeLE = function _toArrayLikeLE(res, byteLength) {
        var position = 0;
        var carry = 0;
        for (var i2 = 0, shift = 0; i2 < this.length; i2++) {
          var word = this.words[i2] << shift | carry;
          res[position++] = word & 255;
          if (position < res.length) {
            res[position++] = word >> 8 & 255;
          }
          if (position < res.length) {
            res[position++] = word >> 16 & 255;
          }
          if (shift === 6) {
            if (position < res.length) {
              res[position++] = word >> 24 & 255;
            }
            carry = 0;
            shift = 0;
          } else {
            carry = word >>> 24;
            shift += 2;
          }
        }
        if (position < res.length) {
          res[position++] = carry;
          while (position < res.length) {
            res[position++] = 0;
          }
        }
      };
      BN3.prototype._toArrayLikeBE = function _toArrayLikeBE(res, byteLength) {
        var position = res.length - 1;
        var carry = 0;
        for (var i2 = 0, shift = 0; i2 < this.length; i2++) {
          var word = this.words[i2] << shift | carry;
          res[position--] = word & 255;
          if (position >= 0) {
            res[position--] = word >> 8 & 255;
          }
          if (position >= 0) {
            res[position--] = word >> 16 & 255;
          }
          if (shift === 6) {
            if (position >= 0) {
              res[position--] = word >> 24 & 255;
            }
            carry = 0;
            shift = 0;
          } else {
            carry = word >>> 24;
            shift += 2;
          }
        }
        if (position >= 0) {
          res[position--] = carry;
          while (position >= 0) {
            res[position--] = 0;
          }
        }
      };
      if (Math.clz32) {
        BN3.prototype._countBits = function _countBits(w3) {
          return 32 - Math.clz32(w3);
        };
      } else {
        BN3.prototype._countBits = function _countBits(w3) {
          var t = w3;
          var r2 = 0;
          if (t >= 4096) {
            r2 += 13;
            t >>>= 13;
          }
          if (t >= 64) {
            r2 += 7;
            t >>>= 7;
          }
          if (t >= 8) {
            r2 += 4;
            t >>>= 4;
          }
          if (t >= 2) {
            r2 += 2;
            t >>>= 2;
          }
          return r2 + t;
        };
      }
      BN3.prototype._zeroBits = function _zeroBits(w3) {
        if (w3 === 0)
          return 26;
        var t = w3;
        var r2 = 0;
        if ((t & 8191) === 0) {
          r2 += 13;
          t >>>= 13;
        }
        if ((t & 127) === 0) {
          r2 += 7;
          t >>>= 7;
        }
        if ((t & 15) === 0) {
          r2 += 4;
          t >>>= 4;
        }
        if ((t & 3) === 0) {
          r2 += 2;
          t >>>= 2;
        }
        if ((t & 1) === 0) {
          r2++;
        }
        return r2;
      };
      BN3.prototype.bitLength = function bitLength() {
        var w3 = this.words[this.length - 1];
        var hi = this._countBits(w3);
        return (this.length - 1) * 26 + hi;
      };
      function toBitArray(num) {
        var w3 = new Array(num.bitLength());
        for (var bit = 0; bit < w3.length; bit++) {
          var off = bit / 26 | 0;
          var wbit = bit % 26;
          w3[bit] = num.words[off] >>> wbit & 1;
        }
        return w3;
      }
      BN3.prototype.zeroBits = function zeroBits() {
        if (this.isZero())
          return 0;
        var r2 = 0;
        for (var i2 = 0; i2 < this.length; i2++) {
          var b2 = this._zeroBits(this.words[i2]);
          r2 += b2;
          if (b2 !== 26)
            break;
        }
        return r2;
      };
      BN3.prototype.byteLength = function byteLength() {
        return Math.ceil(this.bitLength() / 8);
      };
      BN3.prototype.toTwos = function toTwos(width) {
        if (this.negative !== 0) {
          return this.abs().inotn(width).iaddn(1);
        }
        return this.clone();
      };
      BN3.prototype.fromTwos = function fromTwos(width) {
        if (this.testn(width - 1)) {
          return this.notn(width).iaddn(1).ineg();
        }
        return this.clone();
      };
      BN3.prototype.isNeg = function isNeg() {
        return this.negative !== 0;
      };
      BN3.prototype.neg = function neg3() {
        return this.clone().ineg();
      };
      BN3.prototype.ineg = function ineg() {
        if (!this.isZero()) {
          this.negative ^= 1;
        }
        return this;
      };
      BN3.prototype.iuor = function iuor(num) {
        while (this.length < num.length) {
          this.words[this.length++] = 0;
        }
        for (var i2 = 0; i2 < num.length; i2++) {
          this.words[i2] = this.words[i2] | num.words[i2];
        }
        return this._strip();
      };
      BN3.prototype.ior = function ior(num) {
        assert2((this.negative | num.negative) === 0);
        return this.iuor(num);
      };
      BN3.prototype.or = function or2(num) {
        if (this.length > num.length)
          return this.clone().ior(num);
        return num.clone().ior(this);
      };
      BN3.prototype.uor = function uor(num) {
        if (this.length > num.length)
          return this.clone().iuor(num);
        return num.clone().iuor(this);
      };
      BN3.prototype.iuand = function iuand(num) {
        var b2;
        if (this.length > num.length) {
          b2 = num;
        } else {
          b2 = this;
        }
        for (var i2 = 0; i2 < b2.length; i2++) {
          this.words[i2] = this.words[i2] & num.words[i2];
        }
        this.length = b2.length;
        return this._strip();
      };
      BN3.prototype.iand = function iand(num) {
        assert2((this.negative | num.negative) === 0);
        return this.iuand(num);
      };
      BN3.prototype.and = function and(num) {
        if (this.length > num.length)
          return this.clone().iand(num);
        return num.clone().iand(this);
      };
      BN3.prototype.uand = function uand(num) {
        if (this.length > num.length)
          return this.clone().iuand(num);
        return num.clone().iuand(this);
      };
      BN3.prototype.iuxor = function iuxor(num) {
        var a;
        var b2;
        if (this.length > num.length) {
          a = this;
          b2 = num;
        } else {
          a = num;
          b2 = this;
        }
        for (var i2 = 0; i2 < b2.length; i2++) {
          this.words[i2] = a.words[i2] ^ b2.words[i2];
        }
        if (this !== a) {
          for (; i2 < a.length; i2++) {
            this.words[i2] = a.words[i2];
          }
        }
        this.length = a.length;
        return this._strip();
      };
      BN3.prototype.ixor = function ixor(num) {
        assert2((this.negative | num.negative) === 0);
        return this.iuxor(num);
      };
      BN3.prototype.xor = function xor(num) {
        if (this.length > num.length)
          return this.clone().ixor(num);
        return num.clone().ixor(this);
      };
      BN3.prototype.uxor = function uxor(num) {
        if (this.length > num.length)
          return this.clone().iuxor(num);
        return num.clone().iuxor(this);
      };
      BN3.prototype.inotn = function inotn(width) {
        assert2(typeof width === "number" && width >= 0);
        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26;
        this._expand(bytesNeeded);
        if (bitsLeft > 0) {
          bytesNeeded--;
        }
        for (var i2 = 0; i2 < bytesNeeded; i2++) {
          this.words[i2] = ~this.words[i2] & 67108863;
        }
        if (bitsLeft > 0) {
          this.words[i2] = ~this.words[i2] & 67108863 >> 26 - bitsLeft;
        }
        return this._strip();
      };
      BN3.prototype.notn = function notn(width) {
        return this.clone().inotn(width);
      };
      BN3.prototype.setn = function setn(bit, val) {
        assert2(typeof bit === "number" && bit >= 0);
        var off = bit / 26 | 0;
        var wbit = bit % 26;
        this._expand(off + 1);
        if (val) {
          this.words[off] = this.words[off] | 1 << wbit;
        } else {
          this.words[off] = this.words[off] & ~(1 << wbit);
        }
        return this._strip();
      };
      BN3.prototype.iadd = function iadd(num) {
        var r2;
        if (this.negative !== 0 && num.negative === 0) {
          this.negative = 0;
          r2 = this.isub(num);
          this.negative ^= 1;
          return this._normSign();
        } else if (this.negative === 0 && num.negative !== 0) {
          num.negative = 0;
          r2 = this.isub(num);
          num.negative = 1;
          return r2._normSign();
        }
        var a, b2;
        if (this.length > num.length) {
          a = this;
          b2 = num;
        } else {
          a = num;
          b2 = this;
        }
        var carry = 0;
        for (var i2 = 0; i2 < b2.length; i2++) {
          r2 = (a.words[i2] | 0) + (b2.words[i2] | 0) + carry;
          this.words[i2] = r2 & 67108863;
          carry = r2 >>> 26;
        }
        for (; carry !== 0 && i2 < a.length; i2++) {
          r2 = (a.words[i2] | 0) + carry;
          this.words[i2] = r2 & 67108863;
          carry = r2 >>> 26;
        }
        this.length = a.length;
        if (carry !== 0) {
          this.words[this.length] = carry;
          this.length++;
        } else if (a !== this) {
          for (; i2 < a.length; i2++) {
            this.words[i2] = a.words[i2];
          }
        }
        return this;
      };
      BN3.prototype.add = function add3(num) {
        var res;
        if (num.negative !== 0 && this.negative === 0) {
          num.negative = 0;
          res = this.sub(num);
          num.negative ^= 1;
          return res;
        } else if (num.negative === 0 && this.negative !== 0) {
          this.negative = 0;
          res = num.sub(this);
          this.negative = 1;
          return res;
        }
        if (this.length > num.length)
          return this.clone().iadd(num);
        return num.clone().iadd(this);
      };
      BN3.prototype.isub = function isub(num) {
        if (num.negative !== 0) {
          num.negative = 0;
          var r2 = this.iadd(num);
          num.negative = 1;
          return r2._normSign();
        } else if (this.negative !== 0) {
          this.negative = 0;
          this.iadd(num);
          this.negative = 1;
          return this._normSign();
        }
        var cmp = this.cmp(num);
        if (cmp === 0) {
          this.negative = 0;
          this.length = 1;
          this.words[0] = 0;
          return this;
        }
        var a, b2;
        if (cmp > 0) {
          a = this;
          b2 = num;
        } else {
          a = num;
          b2 = this;
        }
        var carry = 0;
        for (var i2 = 0; i2 < b2.length; i2++) {
          r2 = (a.words[i2] | 0) - (b2.words[i2] | 0) + carry;
          carry = r2 >> 26;
          this.words[i2] = r2 & 67108863;
        }
        for (; carry !== 0 && i2 < a.length; i2++) {
          r2 = (a.words[i2] | 0) + carry;
          carry = r2 >> 26;
          this.words[i2] = r2 & 67108863;
        }
        if (carry === 0 && i2 < a.length && a !== this) {
          for (; i2 < a.length; i2++) {
            this.words[i2] = a.words[i2];
          }
        }
        this.length = Math.max(this.length, i2);
        if (a !== this) {
          this.negative = 1;
        }
        return this._strip();
      };
      BN3.prototype.sub = function sub(num) {
        return this.clone().isub(num);
      };
      function smallMulTo(self2, num, out) {
        out.negative = num.negative ^ self2.negative;
        var len = self2.length + num.length | 0;
        out.length = len;
        len = len - 1 | 0;
        var a = self2.words[0] | 0;
        var b2 = num.words[0] | 0;
        var r2 = a * b2;
        var lo2 = r2 & 67108863;
        var carry = r2 / 67108864 | 0;
        out.words[0] = lo2;
        for (var k4 = 1; k4 < len; k4++) {
          var ncarry = carry >>> 26;
          var rword = carry & 67108863;
          var maxJ = Math.min(k4, num.length - 1);
          for (var j3 = Math.max(0, k4 - self2.length + 1); j3 <= maxJ; j3++) {
            var i2 = k4 - j3 | 0;
            a = self2.words[i2] | 0;
            b2 = num.words[j3] | 0;
            r2 = a * b2 + rword;
            ncarry += r2 / 67108864 | 0;
            rword = r2 & 67108863;
          }
          out.words[k4] = rword | 0;
          carry = ncarry | 0;
        }
        if (carry !== 0) {
          out.words[k4] = carry | 0;
        } else {
          out.length--;
        }
        return out._strip();
      }
      var comb10MulTo = function comb10MulTo2(self2, num, out) {
        var a = self2.words;
        var b2 = num.words;
        var o2 = out.words;
        var c2 = 0;
        var lo2;
        var mid;
        var hi;
        var a02 = a[0] | 0;
        var al0 = a02 & 8191;
        var ah0 = a02 >>> 13;
        var a12 = a[1] | 0;
        var al1 = a12 & 8191;
        var ah1 = a12 >>> 13;
        var a2 = a[2] | 0;
        var al2 = a2 & 8191;
        var ah2 = a2 >>> 13;
        var a3 = a[3] | 0;
        var al3 = a3 & 8191;
        var ah3 = a3 >>> 13;
        var a4 = a[4] | 0;
        var al4 = a4 & 8191;
        var ah4 = a4 >>> 13;
        var a5 = a[5] | 0;
        var al5 = a5 & 8191;
        var ah5 = a5 >>> 13;
        var a62 = a[6] | 0;
        var al6 = a62 & 8191;
        var ah6 = a62 >>> 13;
        var a7 = a[7] | 0;
        var al7 = a7 & 8191;
        var ah7 = a7 >>> 13;
        var a8 = a[8] | 0;
        var al8 = a8 & 8191;
        var ah8 = a8 >>> 13;
        var a9 = a[9] | 0;
        var al9 = a9 & 8191;
        var ah9 = a9 >>> 13;
        var b0 = b2[0] | 0;
        var bl0 = b0 & 8191;
        var bh0 = b0 >>> 13;
        var b12 = b2[1] | 0;
        var bl1 = b12 & 8191;
        var bh1 = b12 >>> 13;
        var b22 = b2[2] | 0;
        var bl2 = b22 & 8191;
        var bh2 = b22 >>> 13;
        var b3 = b2[3] | 0;
        var bl3 = b3 & 8191;
        var bh3 = b3 >>> 13;
        var b4 = b2[4] | 0;
        var bl4 = b4 & 8191;
        var bh4 = b4 >>> 13;
        var b5 = b2[5] | 0;
        var bl5 = b5 & 8191;
        var bh5 = b5 >>> 13;
        var b62 = b2[6] | 0;
        var bl6 = b62 & 8191;
        var bh6 = b62 >>> 13;
        var b7 = b2[7] | 0;
        var bl7 = b7 & 8191;
        var bh7 = b7 >>> 13;
        var b8 = b2[8] | 0;
        var bl8 = b8 & 8191;
        var bh8 = b8 >>> 13;
        var b9 = b2[9] | 0;
        var bl9 = b9 & 8191;
        var bh9 = b9 >>> 13;
        out.negative = self2.negative ^ num.negative;
        out.length = 19;
        lo2 = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = mid + Math.imul(ah0, bl0) | 0;
        hi = Math.imul(ah0, bh0);
        var w02 = (c2 + lo2 | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi + (mid >>> 13) | 0) + (w02 >>> 26) | 0;
        w02 &= 67108863;
        lo2 = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = mid + Math.imul(ah1, bl0) | 0;
        hi = Math.imul(ah1, bh0);
        lo2 = lo2 + Math.imul(al0, bl1) | 0;
        mid = mid + Math.imul(al0, bh1) | 0;
        mid = mid + Math.imul(ah0, bl1) | 0;
        hi = hi + Math.imul(ah0, bh1) | 0;
        var w12 = (c2 + lo2 | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
        w12 &= 67108863;
        lo2 = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = mid + Math.imul(ah2, bl0) | 0;
        hi = Math.imul(ah2, bh0);
        lo2 = lo2 + Math.imul(al1, bl1) | 0;
        mid = mid + Math.imul(al1, bh1) | 0;
        mid = mid + Math.imul(ah1, bl1) | 0;
        hi = hi + Math.imul(ah1, bh1) | 0;
        lo2 = lo2 + Math.imul(al0, bl2) | 0;
        mid = mid + Math.imul(al0, bh2) | 0;
        mid = mid + Math.imul(ah0, bl2) | 0;
        hi = hi + Math.imul(ah0, bh2) | 0;
        var w22 = (c2 + lo2 | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi + (mid >>> 13) | 0) + (w22 >>> 26) | 0;
        w22 &= 67108863;
        lo2 = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = mid + Math.imul(ah3, bl0) | 0;
        hi = Math.imul(ah3, bh0);
        lo2 = lo2 + Math.imul(al2, bl1) | 0;
        mid = mid + Math.imul(al2, bh1) | 0;
        mid = mid + Math.imul(ah2, bl1) | 0;
        hi = hi + Math.imul(ah2, bh1) | 0;
        lo2 = lo2 + Math.imul(al1, bl2) | 0;
        mid = mid + Math.imul(al1, bh2) | 0;
        mid = mid + Math.imul(ah1, bl2) | 0;
        hi = hi + Math.imul(ah1, bh2) | 0;
        lo2 = lo2 + Math.imul(al0, bl3) | 0;
        mid = mid + Math.imul(al0, bh3) | 0;
        mid = mid + Math.imul(ah0, bl3) | 0;
        hi = hi + Math.imul(ah0, bh3) | 0;
        var w3 = (c2 + lo2 | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
        w3 &= 67108863;
        lo2 = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = mid + Math.imul(ah4, bl0) | 0;
        hi = Math.imul(ah4, bh0);
        lo2 = lo2 + Math.imul(al3, bl1) | 0;
        mid = mid + Math.imul(al3, bh1) | 0;
        mid = mid + Math.imul(ah3, bl1) | 0;
        hi = hi + Math.imul(ah3, bh1) | 0;
        lo2 = lo2 + Math.imul(al2, bl2) | 0;
        mid = mid + Math.imul(al2, bh2) | 0;
        mid = mid + Math.imul(ah2, bl2) | 0;
        hi = hi + Math.imul(ah2, bh2) | 0;
        lo2 = lo2 + Math.imul(al1, bl3) | 0;
        mid = mid + Math.imul(al1, bh3) | 0;
        mid = mid + Math.imul(ah1, bl3) | 0;
        hi = hi + Math.imul(ah1, bh3) | 0;
        lo2 = lo2 + Math.imul(al0, bl4) | 0;
        mid = mid + Math.imul(al0, bh4) | 0;
        mid = mid + Math.imul(ah0, bl4) | 0;
        hi = hi + Math.imul(ah0, bh4) | 0;
        var w4 = (c2 + lo2 | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
        w4 &= 67108863;
        lo2 = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = mid + Math.imul(ah5, bl0) | 0;
        hi = Math.imul(ah5, bh0);
        lo2 = lo2 + Math.imul(al4, bl1) | 0;
        mid = mid + Math.imul(al4, bh1) | 0;
        mid = mid + Math.imul(ah4, bl1) | 0;
        hi = hi + Math.imul(ah4, bh1) | 0;
        lo2 = lo2 + Math.imul(al3, bl2) | 0;
        mid = mid + Math.imul(al3, bh2) | 0;
        mid = mid + Math.imul(ah3, bl2) | 0;
        hi = hi + Math.imul(ah3, bh2) | 0;
        lo2 = lo2 + Math.imul(al2, bl3) | 0;
        mid = mid + Math.imul(al2, bh3) | 0;
        mid = mid + Math.imul(ah2, bl3) | 0;
        hi = hi + Math.imul(ah2, bh3) | 0;
        lo2 = lo2 + Math.imul(al1, bl4) | 0;
        mid = mid + Math.imul(al1, bh4) | 0;
        mid = mid + Math.imul(ah1, bl4) | 0;
        hi = hi + Math.imul(ah1, bh4) | 0;
        lo2 = lo2 + Math.imul(al0, bl5) | 0;
        mid = mid + Math.imul(al0, bh5) | 0;
        mid = mid + Math.imul(ah0, bl5) | 0;
        hi = hi + Math.imul(ah0, bh5) | 0;
        var w5 = (c2 + lo2 | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
        w5 &= 67108863;
        lo2 = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = mid + Math.imul(ah6, bl0) | 0;
        hi = Math.imul(ah6, bh0);
        lo2 = lo2 + Math.imul(al5, bl1) | 0;
        mid = mid + Math.imul(al5, bh1) | 0;
        mid = mid + Math.imul(ah5, bl1) | 0;
        hi = hi + Math.imul(ah5, bh1) | 0;
        lo2 = lo2 + Math.imul(al4, bl2) | 0;
        mid = mid + Math.imul(al4, bh2) | 0;
        mid = mid + Math.imul(ah4, bl2) | 0;
        hi = hi + Math.imul(ah4, bh2) | 0;
        lo2 = lo2 + Math.imul(al3, bl3) | 0;
        mid = mid + Math.imul(al3, bh3) | 0;
        mid = mid + Math.imul(ah3, bl3) | 0;
        hi = hi + Math.imul(ah3, bh3) | 0;
        lo2 = lo2 + Math.imul(al2, bl4) | 0;
        mid = mid + Math.imul(al2, bh4) | 0;
        mid = mid + Math.imul(ah2, bl4) | 0;
        hi = hi + Math.imul(ah2, bh4) | 0;
        lo2 = lo2 + Math.imul(al1, bl5) | 0;
        mid = mid + Math.imul(al1, bh5) | 0;
        mid = mid + Math.imul(ah1, bl5) | 0;
        hi = hi + Math.imul(ah1, bh5) | 0;
        lo2 = lo2 + Math.imul(al0, bl6) | 0;
        mid = mid + Math.imul(al0, bh6) | 0;
        mid = mid + Math.imul(ah0, bl6) | 0;
        hi = hi + Math.imul(ah0, bh6) | 0;
        var w62 = (c2 + lo2 | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi + (mid >>> 13) | 0) + (w62 >>> 26) | 0;
        w62 &= 67108863;
        lo2 = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = mid + Math.imul(ah7, bl0) | 0;
        hi = Math.imul(ah7, bh0);
        lo2 = lo2 + Math.imul(al6, bl1) | 0;
        mid = mid + Math.imul(al6, bh1) | 0;
        mid = mid + Math.imul(ah6, bl1) | 0;
        hi = hi + Math.imul(ah6, bh1) | 0;
        lo2 = lo2 + Math.imul(al5, bl2) | 0;
        mid = mid + Math.imul(al5, bh2) | 0;
        mid = mid + Math.imul(ah5, bl2) | 0;
        hi = hi + Math.imul(ah5, bh2) | 0;
        lo2 = lo2 + Math.imul(al4, bl3) | 0;
        mid = mid + Math.imul(al4, bh3) | 0;
        mid = mid + Math.imul(ah4, bl3) | 0;
        hi = hi + Math.imul(ah4, bh3) | 0;
        lo2 = lo2 + Math.imul(al3, bl4) | 0;
        mid = mid + Math.imul(al3, bh4) | 0;
        mid = mid + Math.imul(ah3, bl4) | 0;
        hi = hi + Math.imul(ah3, bh4) | 0;
        lo2 = lo2 + Math.imul(al2, bl5) | 0;
        mid = mid + Math.imul(al2, bh5) | 0;
        mid = mid + Math.imul(ah2, bl5) | 0;
        hi = hi + Math.imul(ah2, bh5) | 0;
        lo2 = lo2 + Math.imul(al1, bl6) | 0;
        mid = mid + Math.imul(al1, bh6) | 0;
        mid = mid + Math.imul(ah1, bl6) | 0;
        hi = hi + Math.imul(ah1, bh6) | 0;
        lo2 = lo2 + Math.imul(al0, bl7) | 0;
        mid = mid + Math.imul(al0, bh7) | 0;
        mid = mid + Math.imul(ah0, bl7) | 0;
        hi = hi + Math.imul(ah0, bh7) | 0;
        var w7 = (c2 + lo2 | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
        w7 &= 67108863;
        lo2 = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = mid + Math.imul(ah8, bl0) | 0;
        hi = Math.imul(ah8, bh0);
        lo2 = lo2 + Math.imul(al7, bl1) | 0;
        mid = mid + Math.imul(al7, bh1) | 0;
        mid = mid + Math.imul(ah7, bl1) | 0;
        hi = hi + Math.imul(ah7, bh1) | 0;
        lo2 = lo2 + Math.imul(al6, bl2) | 0;
        mid = mid + Math.imul(al6, bh2) | 0;
        mid = mid + Math.imul(ah6, bl2) | 0;
        hi = hi + Math.imul(ah6, bh2) | 0;
        lo2 = lo2 + Math.imul(al5, bl3) | 0;
        mid = mid + Math.imul(al5, bh3) | 0;
        mid = mid + Math.imul(ah5, bl3) | 0;
        hi = hi + Math.imul(ah5, bh3) | 0;
        lo2 = lo2 + Math.imul(al4, bl4) | 0;
        mid = mid + Math.imul(al4, bh4) | 0;
        mid = mid + Math.imul(ah4, bl4) | 0;
        hi = hi + Math.imul(ah4, bh4) | 0;
        lo2 = lo2 + Math.imul(al3, bl5) | 0;
        mid = mid + Math.imul(al3, bh5) | 0;
        mid = mid + Math.imul(ah3, bl5) | 0;
        hi = hi + Math.imul(ah3, bh5) | 0;
        lo2 = lo2 + Math.imul(al2, bl6) | 0;
        mid = mid + Math.imul(al2, bh6) | 0;
        mid = mid + Math.imul(ah2, bl6) | 0;
        hi = hi + Math.imul(ah2, bh6) | 0;
        lo2 = lo2 + Math.imul(al1, bl7) | 0;
        mid = mid + Math.imul(al1, bh7) | 0;
        mid = mid + Math.imul(ah1, bl7) | 0;
        hi = hi + Math.imul(ah1, bh7) | 0;
        lo2 = lo2 + Math.imul(al0, bl8) | 0;
        mid = mid + Math.imul(al0, bh8) | 0;
        mid = mid + Math.imul(ah0, bl8) | 0;
        hi = hi + Math.imul(ah0, bh8) | 0;
        var w8 = (c2 + lo2 | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
        w8 &= 67108863;
        lo2 = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = mid + Math.imul(ah9, bl0) | 0;
        hi = Math.imul(ah9, bh0);
        lo2 = lo2 + Math.imul(al8, bl1) | 0;
        mid = mid + Math.imul(al8, bh1) | 0;
        mid = mid + Math.imul(ah8, bl1) | 0;
        hi = hi + Math.imul(ah8, bh1) | 0;
        lo2 = lo2 + Math.imul(al7, bl2) | 0;
        mid = mid + Math.imul(al7, bh2) | 0;
        mid = mid + Math.imul(ah7, bl2) | 0;
        hi = hi + Math.imul(ah7, bh2) | 0;
        lo2 = lo2 + Math.imul(al6, bl3) | 0;
        mid = mid + Math.imul(al6, bh3) | 0;
        mid = mid + Math.imul(ah6, bl3) | 0;
        hi = hi + Math.imul(ah6, bh3) | 0;
        lo2 = lo2 + Math.imul(al5, bl4) | 0;
        mid = mid + Math.imul(al5, bh4) | 0;
        mid = mid + Math.imul(ah5, bl4) | 0;
        hi = hi + Math.imul(ah5, bh4) | 0;
        lo2 = lo2 + Math.imul(al4, bl5) | 0;
        mid = mid + Math.imul(al4, bh5) | 0;
        mid = mid + Math.imul(ah4, bl5) | 0;
        hi = hi + Math.imul(ah4, bh5) | 0;
        lo2 = lo2 + Math.imul(al3, bl6) | 0;
        mid = mid + Math.imul(al3, bh6) | 0;
        mid = mid + Math.imul(ah3, bl6) | 0;
        hi = hi + Math.imul(ah3, bh6) | 0;
        lo2 = lo2 + Math.imul(al2, bl7) | 0;
        mid = mid + Math.imul(al2, bh7) | 0;
        mid = mid + Math.imul(ah2, bl7) | 0;
        hi = hi + Math.imul(ah2, bh7) | 0;
        lo2 = lo2 + Math.imul(al1, bl8) | 0;
        mid = mid + Math.imul(al1, bh8) | 0;
        mid = mid + Math.imul(ah1, bl8) | 0;
        hi = hi + Math.imul(ah1, bh8) | 0;
        lo2 = lo2 + Math.imul(al0, bl9) | 0;
        mid = mid + Math.imul(al0, bh9) | 0;
        mid = mid + Math.imul(ah0, bl9) | 0;
        hi = hi + Math.imul(ah0, bh9) | 0;
        var w9 = (c2 + lo2 | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
        w9 &= 67108863;
        lo2 = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = mid + Math.imul(ah9, bl1) | 0;
        hi = Math.imul(ah9, bh1);
        lo2 = lo2 + Math.imul(al8, bl2) | 0;
        mid = mid + Math.imul(al8, bh2) | 0;
        mid = mid + Math.imul(ah8, bl2) | 0;
        hi = hi + Math.imul(ah8, bh2) | 0;
        lo2 = lo2 + Math.imul(al7, bl3) | 0;
        mid = mid + Math.imul(al7, bh3) | 0;
        mid = mid + Math.imul(ah7, bl3) | 0;
        hi = hi + Math.imul(ah7, bh3) | 0;
        lo2 = lo2 + Math.imul(al6, bl4) | 0;
        mid = mid + Math.imul(al6, bh4) | 0;
        mid = mid + Math.imul(ah6, bl4) | 0;
        hi = hi + Math.imul(ah6, bh4) | 0;
        lo2 = lo2 + Math.imul(al5, bl5) | 0;
        mid = mid + Math.imul(al5, bh5) | 0;
        mid = mid + Math.imul(ah5, bl5) | 0;
        hi = hi + Math.imul(ah5, bh5) | 0;
        lo2 = lo2 + Math.imul(al4, bl6) | 0;
        mid = mid + Math.imul(al4, bh6) | 0;
        mid = mid + Math.imul(ah4, bl6) | 0;
        hi = hi + Math.imul(ah4, bh6) | 0;
        lo2 = lo2 + Math.imul(al3, bl7) | 0;
        mid = mid + Math.imul(al3, bh7) | 0;
        mid = mid + Math.imul(ah3, bl7) | 0;
        hi = hi + Math.imul(ah3, bh7) | 0;
        lo2 = lo2 + Math.imul(al2, bl8) | 0;
        mid = mid + Math.imul(al2, bh8) | 0;
        mid = mid + Math.imul(ah2, bl8) | 0;
        hi = hi + Math.imul(ah2, bh8) | 0;
        lo2 = lo2 + Math.imul(al1, bl9) | 0;
        mid = mid + Math.imul(al1, bh9) | 0;
        mid = mid + Math.imul(ah1, bl9) | 0;
        hi = hi + Math.imul(ah1, bh9) | 0;
        var w10 = (c2 + lo2 | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
        w10 &= 67108863;
        lo2 = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = mid + Math.imul(ah9, bl2) | 0;
        hi = Math.imul(ah9, bh2);
        lo2 = lo2 + Math.imul(al8, bl3) | 0;
        mid = mid + Math.imul(al8, bh3) | 0;
        mid = mid + Math.imul(ah8, bl3) | 0;
        hi = hi + Math.imul(ah8, bh3) | 0;
        lo2 = lo2 + Math.imul(al7, bl4) | 0;
        mid = mid + Math.imul(al7, bh4) | 0;
        mid = mid + Math.imul(ah7, bl4) | 0;
        hi = hi + Math.imul(ah7, bh4) | 0;
        lo2 = lo2 + Math.imul(al6, bl5) | 0;
        mid = mid + Math.imul(al6, bh5) | 0;
        mid = mid + Math.imul(ah6, bl5) | 0;
        hi = hi + Math.imul(ah6, bh5) | 0;
        lo2 = lo2 + Math.imul(al5, bl6) | 0;
        mid = mid + Math.imul(al5, bh6) | 0;
        mid = mid + Math.imul(ah5, bl6) | 0;
        hi = hi + Math.imul(ah5, bh6) | 0;
        lo2 = lo2 + Math.imul(al4, bl7) | 0;
        mid = mid + Math.imul(al4, bh7) | 0;
        mid = mid + Math.imul(ah4, bl7) | 0;
        hi = hi + Math.imul(ah4, bh7) | 0;
        lo2 = lo2 + Math.imul(al3, bl8) | 0;
        mid = mid + Math.imul(al3, bh8) | 0;
        mid = mid + Math.imul(ah3, bl8) | 0;
        hi = hi + Math.imul(ah3, bh8) | 0;
        lo2 = lo2 + Math.imul(al2, bl9) | 0;
        mid = mid + Math.imul(al2, bh9) | 0;
        mid = mid + Math.imul(ah2, bl9) | 0;
        hi = hi + Math.imul(ah2, bh9) | 0;
        var w11 = (c2 + lo2 | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
        w11 &= 67108863;
        lo2 = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = mid + Math.imul(ah9, bl3) | 0;
        hi = Math.imul(ah9, bh3);
        lo2 = lo2 + Math.imul(al8, bl4) | 0;
        mid = mid + Math.imul(al8, bh4) | 0;
        mid = mid + Math.imul(ah8, bl4) | 0;
        hi = hi + Math.imul(ah8, bh4) | 0;
        lo2 = lo2 + Math.imul(al7, bl5) | 0;
        mid = mid + Math.imul(al7, bh5) | 0;
        mid = mid + Math.imul(ah7, bl5) | 0;
        hi = hi + Math.imul(ah7, bh5) | 0;
        lo2 = lo2 + Math.imul(al6, bl6) | 0;
        mid = mid + Math.imul(al6, bh6) | 0;
        mid = mid + Math.imul(ah6, bl6) | 0;
        hi = hi + Math.imul(ah6, bh6) | 0;
        lo2 = lo2 + Math.imul(al5, bl7) | 0;
        mid = mid + Math.imul(al5, bh7) | 0;
        mid = mid + Math.imul(ah5, bl7) | 0;
        hi = hi + Math.imul(ah5, bh7) | 0;
        lo2 = lo2 + Math.imul(al4, bl8) | 0;
        mid = mid + Math.imul(al4, bh8) | 0;
        mid = mid + Math.imul(ah4, bl8) | 0;
        hi = hi + Math.imul(ah4, bh8) | 0;
        lo2 = lo2 + Math.imul(al3, bl9) | 0;
        mid = mid + Math.imul(al3, bh9) | 0;
        mid = mid + Math.imul(ah3, bl9) | 0;
        hi = hi + Math.imul(ah3, bh9) | 0;
        var w122 = (c2 + lo2 | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi + (mid >>> 13) | 0) + (w122 >>> 26) | 0;
        w122 &= 67108863;
        lo2 = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = mid + Math.imul(ah9, bl4) | 0;
        hi = Math.imul(ah9, bh4);
        lo2 = lo2 + Math.imul(al8, bl5) | 0;
        mid = mid + Math.imul(al8, bh5) | 0;
        mid = mid + Math.imul(ah8, bl5) | 0;
        hi = hi + Math.imul(ah8, bh5) | 0;
        lo2 = lo2 + Math.imul(al7, bl6) | 0;
        mid = mid + Math.imul(al7, bh6) | 0;
        mid = mid + Math.imul(ah7, bl6) | 0;
        hi = hi + Math.imul(ah7, bh6) | 0;
        lo2 = lo2 + Math.imul(al6, bl7) | 0;
        mid = mid + Math.imul(al6, bh7) | 0;
        mid = mid + Math.imul(ah6, bl7) | 0;
        hi = hi + Math.imul(ah6, bh7) | 0;
        lo2 = lo2 + Math.imul(al5, bl8) | 0;
        mid = mid + Math.imul(al5, bh8) | 0;
        mid = mid + Math.imul(ah5, bl8) | 0;
        hi = hi + Math.imul(ah5, bh8) | 0;
        lo2 = lo2 + Math.imul(al4, bl9) | 0;
        mid = mid + Math.imul(al4, bh9) | 0;
        mid = mid + Math.imul(ah4, bl9) | 0;
        hi = hi + Math.imul(ah4, bh9) | 0;
        var w13 = (c2 + lo2 | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
        w13 &= 67108863;
        lo2 = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = mid + Math.imul(ah9, bl5) | 0;
        hi = Math.imul(ah9, bh5);
        lo2 = lo2 + Math.imul(al8, bl6) | 0;
        mid = mid + Math.imul(al8, bh6) | 0;
        mid = mid + Math.imul(ah8, bl6) | 0;
        hi = hi + Math.imul(ah8, bh6) | 0;
        lo2 = lo2 + Math.imul(al7, bl7) | 0;
        mid = mid + Math.imul(al7, bh7) | 0;
        mid = mid + Math.imul(ah7, bl7) | 0;
        hi = hi + Math.imul(ah7, bh7) | 0;
        lo2 = lo2 + Math.imul(al6, bl8) | 0;
        mid = mid + Math.imul(al6, bh8) | 0;
        mid = mid + Math.imul(ah6, bl8) | 0;
        hi = hi + Math.imul(ah6, bh8) | 0;
        lo2 = lo2 + Math.imul(al5, bl9) | 0;
        mid = mid + Math.imul(al5, bh9) | 0;
        mid = mid + Math.imul(ah5, bl9) | 0;
        hi = hi + Math.imul(ah5, bh9) | 0;
        var w14 = (c2 + lo2 | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
        w14 &= 67108863;
        lo2 = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = mid + Math.imul(ah9, bl6) | 0;
        hi = Math.imul(ah9, bh6);
        lo2 = lo2 + Math.imul(al8, bl7) | 0;
        mid = mid + Math.imul(al8, bh7) | 0;
        mid = mid + Math.imul(ah8, bl7) | 0;
        hi = hi + Math.imul(ah8, bh7) | 0;
        lo2 = lo2 + Math.imul(al7, bl8) | 0;
        mid = mid + Math.imul(al7, bh8) | 0;
        mid = mid + Math.imul(ah7, bl8) | 0;
        hi = hi + Math.imul(ah7, bh8) | 0;
        lo2 = lo2 + Math.imul(al6, bl9) | 0;
        mid = mid + Math.imul(al6, bh9) | 0;
        mid = mid + Math.imul(ah6, bl9) | 0;
        hi = hi + Math.imul(ah6, bh9) | 0;
        var w15 = (c2 + lo2 | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
        w15 &= 67108863;
        lo2 = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = mid + Math.imul(ah9, bl7) | 0;
        hi = Math.imul(ah9, bh7);
        lo2 = lo2 + Math.imul(al8, bl8) | 0;
        mid = mid + Math.imul(al8, bh8) | 0;
        mid = mid + Math.imul(ah8, bl8) | 0;
        hi = hi + Math.imul(ah8, bh8) | 0;
        lo2 = lo2 + Math.imul(al7, bl9) | 0;
        mid = mid + Math.imul(al7, bh9) | 0;
        mid = mid + Math.imul(ah7, bl9) | 0;
        hi = hi + Math.imul(ah7, bh9) | 0;
        var w16 = (c2 + lo2 | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
        w16 &= 67108863;
        lo2 = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = mid + Math.imul(ah9, bl8) | 0;
        hi = Math.imul(ah9, bh8);
        lo2 = lo2 + Math.imul(al8, bl9) | 0;
        mid = mid + Math.imul(al8, bh9) | 0;
        mid = mid + Math.imul(ah8, bl9) | 0;
        hi = hi + Math.imul(ah8, bh9) | 0;
        var w17 = (c2 + lo2 | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
        w17 &= 67108863;
        lo2 = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = mid + Math.imul(ah9, bl9) | 0;
        hi = Math.imul(ah9, bh9);
        var w18 = (c2 + lo2 | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
        w18 &= 67108863;
        o2[0] = w02;
        o2[1] = w12;
        o2[2] = w22;
        o2[3] = w3;
        o2[4] = w4;
        o2[5] = w5;
        o2[6] = w62;
        o2[7] = w7;
        o2[8] = w8;
        o2[9] = w9;
        o2[10] = w10;
        o2[11] = w11;
        o2[12] = w122;
        o2[13] = w13;
        o2[14] = w14;
        o2[15] = w15;
        o2[16] = w16;
        o2[17] = w17;
        o2[18] = w18;
        if (c2 !== 0) {
          o2[19] = c2;
          out.length++;
        }
        return out;
      };
      if (!Math.imul) {
        comb10MulTo = smallMulTo;
      }
      function bigMulTo(self2, num, out) {
        out.negative = num.negative ^ self2.negative;
        out.length = self2.length + num.length;
        var carry = 0;
        var hncarry = 0;
        for (var k4 = 0; k4 < out.length - 1; k4++) {
          var ncarry = hncarry;
          hncarry = 0;
          var rword = carry & 67108863;
          var maxJ = Math.min(k4, num.length - 1);
          for (var j3 = Math.max(0, k4 - self2.length + 1); j3 <= maxJ; j3++) {
            var i2 = k4 - j3;
            var a = self2.words[i2] | 0;
            var b2 = num.words[j3] | 0;
            var r2 = a * b2;
            var lo2 = r2 & 67108863;
            ncarry = ncarry + (r2 / 67108864 | 0) | 0;
            lo2 = lo2 + rword | 0;
            rword = lo2 & 67108863;
            ncarry = ncarry + (lo2 >>> 26) | 0;
            hncarry += ncarry >>> 26;
            ncarry &= 67108863;
          }
          out.words[k4] = rword;
          carry = ncarry;
          ncarry = hncarry;
        }
        if (carry !== 0) {
          out.words[k4] = carry;
        } else {
          out.length--;
        }
        return out._strip();
      }
      function jumboMulTo(self2, num, out) {
        return bigMulTo(self2, num, out);
      }
      BN3.prototype.mulTo = function mulTo(num, out) {
        var res;
        var len = this.length + num.length;
        if (this.length === 10 && num.length === 10) {
          res = comb10MulTo(this, num, out);
        } else if (len < 63) {
          res = smallMulTo(this, num, out);
        } else if (len < 1024) {
          res = bigMulTo(this, num, out);
        } else {
          res = jumboMulTo(this, num, out);
        }
        return res;
      };
      function FFTM(x4, y2) {
        this.x = x4;
        this.y = y2;
      }
      FFTM.prototype.makeRBT = function makeRBT(N3) {
        var t = new Array(N3);
        var l2 = BN3.prototype._countBits(N3) - 1;
        for (var i2 = 0; i2 < N3; i2++) {
          t[i2] = this.revBin(i2, l2, N3);
        }
        return t;
      };
      FFTM.prototype.revBin = function revBin(x4, l2, N3) {
        if (x4 === 0 || x4 === N3 - 1)
          return x4;
        var rb = 0;
        for (var i2 = 0; i2 < l2; i2++) {
          rb |= (x4 & 1) << l2 - i2 - 1;
          x4 >>= 1;
        }
        return rb;
      };
      FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N3) {
        for (var i2 = 0; i2 < N3; i2++) {
          rtws[i2] = rws[rbt[i2]];
          itws[i2] = iws[rbt[i2]];
        }
      };
      FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N3, rbt) {
        this.permute(rbt, rws, iws, rtws, itws, N3);
        for (var s2 = 1; s2 < N3; s2 <<= 1) {
          var l2 = s2 << 1;
          var rtwdf = Math.cos(2 * Math.PI / l2);
          var itwdf = Math.sin(2 * Math.PI / l2);
          for (var p3 = 0; p3 < N3; p3 += l2) {
            var rtwdf_ = rtwdf;
            var itwdf_ = itwdf;
            for (var j3 = 0; j3 < s2; j3++) {
              var re2 = rtws[p3 + j3];
              var ie2 = itws[p3 + j3];
              var ro = rtws[p3 + j3 + s2];
              var io2 = itws[p3 + j3 + s2];
              var rx = rtwdf_ * ro - itwdf_ * io2;
              io2 = rtwdf_ * io2 + itwdf_ * ro;
              ro = rx;
              rtws[p3 + j3] = re2 + ro;
              itws[p3 + j3] = ie2 + io2;
              rtws[p3 + j3 + s2] = re2 - ro;
              itws[p3 + j3 + s2] = ie2 - io2;
              if (j3 !== l2) {
                rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                rtwdf_ = rx;
              }
            }
          }
        }
      };
      FFTM.prototype.guessLen13b = function guessLen13b(n, m3) {
        var N3 = Math.max(m3, n) | 1;
        var odd = N3 & 1;
        var i2 = 0;
        for (N3 = N3 / 2 | 0; N3; N3 = N3 >>> 1) {
          i2++;
        }
        return 1 << i2 + 1 + odd;
      };
      FFTM.prototype.conjugate = function conjugate(rws, iws, N3) {
        if (N3 <= 1)
          return;
        for (var i2 = 0; i2 < N3 / 2; i2++) {
          var t = rws[i2];
          rws[i2] = rws[N3 - i2 - 1];
          rws[N3 - i2 - 1] = t;
          t = iws[i2];
          iws[i2] = -iws[N3 - i2 - 1];
          iws[N3 - i2 - 1] = -t;
        }
      };
      FFTM.prototype.normalize13b = function normalize13b(ws2, N3) {
        var carry = 0;
        for (var i2 = 0; i2 < N3 / 2; i2++) {
          var w3 = Math.round(ws2[2 * i2 + 1] / N3) * 8192 + Math.round(ws2[2 * i2] / N3) + carry;
          ws2[i2] = w3 & 67108863;
          if (w3 < 67108864) {
            carry = 0;
          } else {
            carry = w3 / 67108864 | 0;
          }
        }
        return ws2;
      };
      FFTM.prototype.convert13b = function convert13b(ws2, len, rws, N3) {
        var carry = 0;
        for (var i2 = 0; i2 < len; i2++) {
          carry = carry + (ws2[i2] | 0);
          rws[2 * i2] = carry & 8191;
          carry = carry >>> 13;
          rws[2 * i2 + 1] = carry & 8191;
          carry = carry >>> 13;
        }
        for (i2 = 2 * len; i2 < N3; ++i2) {
          rws[i2] = 0;
        }
        assert2(carry === 0);
        assert2((carry & ~8191) === 0);
      };
      FFTM.prototype.stub = function stub(N3) {
        var ph = new Array(N3);
        for (var i2 = 0; i2 < N3; i2++) {
          ph[i2] = 0;
        }
        return ph;
      };
      FFTM.prototype.mulp = function mulp(x4, y2, out) {
        var N3 = 2 * this.guessLen13b(x4.length, y2.length);
        var rbt = this.makeRBT(N3);
        var _2 = this.stub(N3);
        var rws = new Array(N3);
        var rwst = new Array(N3);
        var iwst = new Array(N3);
        var nrws = new Array(N3);
        var nrwst = new Array(N3);
        var niwst = new Array(N3);
        var rmws = out.words;
        rmws.length = N3;
        this.convert13b(x4.words, x4.length, rws, N3);
        this.convert13b(y2.words, y2.length, nrws, N3);
        this.transform(rws, _2, rwst, iwst, N3, rbt);
        this.transform(nrws, _2, nrwst, niwst, N3, rbt);
        for (var i2 = 0; i2 < N3; i2++) {
          var rx = rwst[i2] * nrwst[i2] - iwst[i2] * niwst[i2];
          iwst[i2] = rwst[i2] * niwst[i2] + iwst[i2] * nrwst[i2];
          rwst[i2] = rx;
        }
        this.conjugate(rwst, iwst, N3);
        this.transform(rwst, iwst, rmws, _2, N3, rbt);
        this.conjugate(rmws, _2, N3);
        this.normalize13b(rmws, N3);
        out.negative = x4.negative ^ y2.negative;
        out.length = x4.length + y2.length;
        return out._strip();
      };
      BN3.prototype.mul = function mul3(num) {
        var out = new BN3(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
      };
      BN3.prototype.mulf = function mulf(num) {
        var out = new BN3(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
      };
      BN3.prototype.imul = function imul(num) {
        return this.clone().mulTo(num, this);
      };
      BN3.prototype.imuln = function imuln(num) {
        var isNegNum = num < 0;
        if (isNegNum)
          num = -num;
        assert2(typeof num === "number");
        assert2(num < 67108864);
        var carry = 0;
        for (var i2 = 0; i2 < this.length; i2++) {
          var w3 = (this.words[i2] | 0) * num;
          var lo2 = (w3 & 67108863) + (carry & 67108863);
          carry >>= 26;
          carry += w3 / 67108864 | 0;
          carry += lo2 >>> 26;
          this.words[i2] = lo2 & 67108863;
        }
        if (carry !== 0) {
          this.words[i2] = carry;
          this.length++;
        }
        return isNegNum ? this.ineg() : this;
      };
      BN3.prototype.muln = function muln(num) {
        return this.clone().imuln(num);
      };
      BN3.prototype.sqr = function sqr() {
        return this.mul(this);
      };
      BN3.prototype.isqr = function isqr() {
        return this.imul(this.clone());
      };
      BN3.prototype.pow = function pow(num) {
        var w3 = toBitArray(num);
        if (w3.length === 0)
          return new BN3(1);
        var res = this;
        for (var i2 = 0; i2 < w3.length; i2++, res = res.sqr()) {
          if (w3[i2] !== 0)
            break;
        }
        if (++i2 < w3.length) {
          for (var q3 = res.sqr(); i2 < w3.length; i2++, q3 = q3.sqr()) {
            if (w3[i2] === 0)
              continue;
            res = res.mul(q3);
          }
        }
        return res;
      };
      BN3.prototype.iushln = function iushln(bits) {
        assert2(typeof bits === "number" && bits >= 0);
        var r2 = bits % 26;
        var s2 = (bits - r2) / 26;
        var carryMask = 67108863 >>> 26 - r2 << 26 - r2;
        var i2;
        if (r2 !== 0) {
          var carry = 0;
          for (i2 = 0; i2 < this.length; i2++) {
            var newCarry = this.words[i2] & carryMask;
            var c2 = (this.words[i2] | 0) - newCarry << r2;
            this.words[i2] = c2 | carry;
            carry = newCarry >>> 26 - r2;
          }
          if (carry) {
            this.words[i2] = carry;
            this.length++;
          }
        }
        if (s2 !== 0) {
          for (i2 = this.length - 1; i2 >= 0; i2--) {
            this.words[i2 + s2] = this.words[i2];
          }
          for (i2 = 0; i2 < s2; i2++) {
            this.words[i2] = 0;
          }
          this.length += s2;
        }
        return this._strip();
      };
      BN3.prototype.ishln = function ishln(bits) {
        assert2(this.negative === 0);
        return this.iushln(bits);
      };
      BN3.prototype.iushrn = function iushrn(bits, hint, extended) {
        assert2(typeof bits === "number" && bits >= 0);
        var h2;
        if (hint) {
          h2 = (hint - hint % 26) / 26;
        } else {
          h2 = 0;
        }
        var r2 = bits % 26;
        var s2 = Math.min((bits - r2) / 26, this.length);
        var mask = 67108863 ^ 67108863 >>> r2 << r2;
        var maskedWords = extended;
        h2 -= s2;
        h2 = Math.max(0, h2);
        if (maskedWords) {
          for (var i2 = 0; i2 < s2; i2++) {
            maskedWords.words[i2] = this.words[i2];
          }
          maskedWords.length = s2;
        }
        if (s2 === 0) {
        } else if (this.length > s2) {
          this.length -= s2;
          for (i2 = 0; i2 < this.length; i2++) {
            this.words[i2] = this.words[i2 + s2];
          }
        } else {
          this.words[0] = 0;
          this.length = 1;
        }
        var carry = 0;
        for (i2 = this.length - 1; i2 >= 0 && (carry !== 0 || i2 >= h2); i2--) {
          var word = this.words[i2] | 0;
          this.words[i2] = carry << 26 - r2 | word >>> r2;
          carry = word & mask;
        }
        if (maskedWords && carry !== 0) {
          maskedWords.words[maskedWords.length++] = carry;
        }
        if (this.length === 0) {
          this.words[0] = 0;
          this.length = 1;
        }
        return this._strip();
      };
      BN3.prototype.ishrn = function ishrn(bits, hint, extended) {
        assert2(this.negative === 0);
        return this.iushrn(bits, hint, extended);
      };
      BN3.prototype.shln = function shln(bits) {
        return this.clone().ishln(bits);
      };
      BN3.prototype.ushln = function ushln(bits) {
        return this.clone().iushln(bits);
      };
      BN3.prototype.shrn = function shrn(bits) {
        return this.clone().ishrn(bits);
      };
      BN3.prototype.ushrn = function ushrn(bits) {
        return this.clone().iushrn(bits);
      };
      BN3.prototype.testn = function testn(bit) {
        assert2(typeof bit === "number" && bit >= 0);
        var r2 = bit % 26;
        var s2 = (bit - r2) / 26;
        var q3 = 1 << r2;
        if (this.length <= s2)
          return false;
        var w3 = this.words[s2];
        return !!(w3 & q3);
      };
      BN3.prototype.imaskn = function imaskn(bits) {
        assert2(typeof bits === "number" && bits >= 0);
        var r2 = bits % 26;
        var s2 = (bits - r2) / 26;
        assert2(this.negative === 0, "imaskn works only with positive numbers");
        if (this.length <= s2) {
          return this;
        }
        if (r2 !== 0) {
          s2++;
        }
        this.length = Math.min(s2, this.length);
        if (r2 !== 0) {
          var mask = 67108863 ^ 67108863 >>> r2 << r2;
          this.words[this.length - 1] &= mask;
        }
        return this._strip();
      };
      BN3.prototype.maskn = function maskn(bits) {
        return this.clone().imaskn(bits);
      };
      BN3.prototype.iaddn = function iaddn(num) {
        assert2(typeof num === "number");
        assert2(num < 67108864);
        if (num < 0)
          return this.isubn(-num);
        if (this.negative !== 0) {
          if (this.length === 1 && (this.words[0] | 0) <= num) {
            this.words[0] = num - (this.words[0] | 0);
            this.negative = 0;
            return this;
          }
          this.negative = 0;
          this.isubn(num);
          this.negative = 1;
          return this;
        }
        return this._iaddn(num);
      };
      BN3.prototype._iaddn = function _iaddn(num) {
        this.words[0] += num;
        for (var i2 = 0; i2 < this.length && this.words[i2] >= 67108864; i2++) {
          this.words[i2] -= 67108864;
          if (i2 === this.length - 1) {
            this.words[i2 + 1] = 1;
          } else {
            this.words[i2 + 1]++;
          }
        }
        this.length = Math.max(this.length, i2 + 1);
        return this;
      };
      BN3.prototype.isubn = function isubn(num) {
        assert2(typeof num === "number");
        assert2(num < 67108864);
        if (num < 0)
          return this.iaddn(-num);
        if (this.negative !== 0) {
          this.negative = 0;
          this.iaddn(num);
          this.negative = 1;
          return this;
        }
        this.words[0] -= num;
        if (this.length === 1 && this.words[0] < 0) {
          this.words[0] = -this.words[0];
          this.negative = 1;
        } else {
          for (var i2 = 0; i2 < this.length && this.words[i2] < 0; i2++) {
            this.words[i2] += 67108864;
            this.words[i2 + 1] -= 1;
          }
        }
        return this._strip();
      };
      BN3.prototype.addn = function addn(num) {
        return this.clone().iaddn(num);
      };
      BN3.prototype.subn = function subn(num) {
        return this.clone().isubn(num);
      };
      BN3.prototype.iabs = function iabs() {
        this.negative = 0;
        return this;
      };
      BN3.prototype.abs = function abs() {
        return this.clone().iabs();
      };
      BN3.prototype._ishlnsubmul = function _ishlnsubmul(num, mul3, shift) {
        var len = num.length + shift;
        var i2;
        this._expand(len);
        var w3;
        var carry = 0;
        for (i2 = 0; i2 < num.length; i2++) {
          w3 = (this.words[i2 + shift] | 0) + carry;
          var right = (num.words[i2] | 0) * mul3;
          w3 -= right & 67108863;
          carry = (w3 >> 26) - (right / 67108864 | 0);
          this.words[i2 + shift] = w3 & 67108863;
        }
        for (; i2 < this.length - shift; i2++) {
          w3 = (this.words[i2 + shift] | 0) + carry;
          carry = w3 >> 26;
          this.words[i2 + shift] = w3 & 67108863;
        }
        if (carry === 0)
          return this._strip();
        assert2(carry === -1);
        carry = 0;
        for (i2 = 0; i2 < this.length; i2++) {
          w3 = -(this.words[i2] | 0) + carry;
          carry = w3 >> 26;
          this.words[i2] = w3 & 67108863;
        }
        this.negative = 1;
        return this._strip();
      };
      BN3.prototype._wordDiv = function _wordDiv(num, mode) {
        var shift = this.length - num.length;
        var a = this.clone();
        var b2 = num;
        var bhi = b2.words[b2.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
          b2 = b2.ushln(shift);
          a.iushln(shift);
          bhi = b2.words[b2.length - 1] | 0;
        }
        var m3 = a.length - b2.length;
        var q3;
        if (mode !== "mod") {
          q3 = new BN3(null);
          q3.length = m3 + 1;
          q3.words = new Array(q3.length);
          for (var i2 = 0; i2 < q3.length; i2++) {
            q3.words[i2] = 0;
          }
        }
        var diff = a.clone()._ishlnsubmul(b2, 1, m3);
        if (diff.negative === 0) {
          a = diff;
          if (q3) {
            q3.words[m3] = 1;
          }
        }
        for (var j3 = m3 - 1; j3 >= 0; j3--) {
          var qj = (a.words[b2.length + j3] | 0) * 67108864 + (a.words[b2.length + j3 - 1] | 0);
          qj = Math.min(qj / bhi | 0, 67108863);
          a._ishlnsubmul(b2, qj, j3);
          while (a.negative !== 0) {
            qj--;
            a.negative = 0;
            a._ishlnsubmul(b2, 1, j3);
            if (!a.isZero()) {
              a.negative ^= 1;
            }
          }
          if (q3) {
            q3.words[j3] = qj;
          }
        }
        if (q3) {
          q3._strip();
        }
        a._strip();
        if (mode !== "div" && shift !== 0) {
          a.iushrn(shift);
        }
        return {
          div: q3 || null,
          mod: a
        };
      };
      BN3.prototype.divmod = function divmod(num, mode, positive) {
        assert2(!num.isZero());
        if (this.isZero()) {
          return {
            div: new BN3(0),
            mod: new BN3(0)
          };
        }
        var div, mod2, res;
        if (this.negative !== 0 && num.negative === 0) {
          res = this.neg().divmod(num, mode);
          if (mode !== "mod") {
            div = res.div.neg();
          }
          if (mode !== "div") {
            mod2 = res.mod.neg();
            if (positive && mod2.negative !== 0) {
              mod2.iadd(num);
            }
          }
          return {
            div,
            mod: mod2
          };
        }
        if (this.negative === 0 && num.negative !== 0) {
          res = this.divmod(num.neg(), mode);
          if (mode !== "mod") {
            div = res.div.neg();
          }
          return {
            div,
            mod: res.mod
          };
        }
        if ((this.negative & num.negative) !== 0) {
          res = this.neg().divmod(num.neg(), mode);
          if (mode !== "div") {
            mod2 = res.mod.neg();
            if (positive && mod2.negative !== 0) {
              mod2.isub(num);
            }
          }
          return {
            div: res.div,
            mod: mod2
          };
        }
        if (num.length > this.length || this.cmp(num) < 0) {
          return {
            div: new BN3(0),
            mod: this
          };
        }
        if (num.length === 1) {
          if (mode === "div") {
            return {
              div: this.divn(num.words[0]),
              mod: null
            };
          }
          if (mode === "mod") {
            return {
              div: null,
              mod: new BN3(this.modrn(num.words[0]))
            };
          }
          return {
            div: this.divn(num.words[0]),
            mod: new BN3(this.modrn(num.words[0]))
          };
        }
        return this._wordDiv(num, mode);
      };
      BN3.prototype.div = function div(num) {
        return this.divmod(num, "div", false).div;
      };
      BN3.prototype.mod = function mod2(num) {
        return this.divmod(num, "mod", false).mod;
      };
      BN3.prototype.umod = function umod(num) {
        return this.divmod(num, "mod", true).mod;
      };
      BN3.prototype.divRound = function divRound(num) {
        var dm = this.divmod(num);
        if (dm.mod.isZero())
          return dm.div;
        var mod2 = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
        var half = num.ushrn(1);
        var r2 = num.andln(1);
        var cmp = mod2.cmp(half);
        if (cmp < 0 || r2 === 1 && cmp === 0)
          return dm.div;
        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
      };
      BN3.prototype.modrn = function modrn(num) {
        var isNegNum = num < 0;
        if (isNegNum)
          num = -num;
        assert2(num <= 67108863);
        var p3 = (1 << 26) % num;
        var acc = 0;
        for (var i2 = this.length - 1; i2 >= 0; i2--) {
          acc = (p3 * acc + (this.words[i2] | 0)) % num;
        }
        return isNegNum ? -acc : acc;
      };
      BN3.prototype.modn = function modn(num) {
        return this.modrn(num);
      };
      BN3.prototype.idivn = function idivn(num) {
        var isNegNum = num < 0;
        if (isNegNum)
          num = -num;
        assert2(num <= 67108863);
        var carry = 0;
        for (var i2 = this.length - 1; i2 >= 0; i2--) {
          var w3 = (this.words[i2] | 0) + carry * 67108864;
          this.words[i2] = w3 / num | 0;
          carry = w3 % num;
        }
        this._strip();
        return isNegNum ? this.ineg() : this;
      };
      BN3.prototype.divn = function divn(num) {
        return this.clone().idivn(num);
      };
      BN3.prototype.egcd = function egcd(p3) {
        assert2(p3.negative === 0);
        assert2(!p3.isZero());
        var x4 = this;
        var y2 = p3.clone();
        if (x4.negative !== 0) {
          x4 = x4.umod(p3);
        } else {
          x4 = x4.clone();
        }
        var A3 = new BN3(1);
        var B3 = new BN3(0);
        var C3 = new BN3(0);
        var D3 = new BN3(1);
        var g3 = 0;
        while (x4.isEven() && y2.isEven()) {
          x4.iushrn(1);
          y2.iushrn(1);
          ++g3;
        }
        var yp = y2.clone();
        var xp = x4.clone();
        while (!x4.isZero()) {
          for (var i2 = 0, im = 1; (x4.words[0] & im) === 0 && i2 < 26; ++i2, im <<= 1)
            ;
          if (i2 > 0) {
            x4.iushrn(i2);
            while (i2-- > 0) {
              if (A3.isOdd() || B3.isOdd()) {
                A3.iadd(yp);
                B3.isub(xp);
              }
              A3.iushrn(1);
              B3.iushrn(1);
            }
          }
          for (var j3 = 0, jm = 1; (y2.words[0] & jm) === 0 && j3 < 26; ++j3, jm <<= 1)
            ;
          if (j3 > 0) {
            y2.iushrn(j3);
            while (j3-- > 0) {
              if (C3.isOdd() || D3.isOdd()) {
                C3.iadd(yp);
                D3.isub(xp);
              }
              C3.iushrn(1);
              D3.iushrn(1);
            }
          }
          if (x4.cmp(y2) >= 0) {
            x4.isub(y2);
            A3.isub(C3);
            B3.isub(D3);
          } else {
            y2.isub(x4);
            C3.isub(A3);
            D3.isub(B3);
          }
        }
        return {
          a: C3,
          b: D3,
          gcd: y2.iushln(g3)
        };
      };
      BN3.prototype._invmp = function _invmp(p3) {
        assert2(p3.negative === 0);
        assert2(!p3.isZero());
        var a = this;
        var b2 = p3.clone();
        if (a.negative !== 0) {
          a = a.umod(p3);
        } else {
          a = a.clone();
        }
        var x12 = new BN3(1);
        var x22 = new BN3(0);
        var delta = b2.clone();
        while (a.cmpn(1) > 0 && b2.cmpn(1) > 0) {
          for (var i2 = 0, im = 1; (a.words[0] & im) === 0 && i2 < 26; ++i2, im <<= 1)
            ;
          if (i2 > 0) {
            a.iushrn(i2);
            while (i2-- > 0) {
              if (x12.isOdd()) {
                x12.iadd(delta);
              }
              x12.iushrn(1);
            }
          }
          for (var j3 = 0, jm = 1; (b2.words[0] & jm) === 0 && j3 < 26; ++j3, jm <<= 1)
            ;
          if (j3 > 0) {
            b2.iushrn(j3);
            while (j3-- > 0) {
              if (x22.isOdd()) {
                x22.iadd(delta);
              }
              x22.iushrn(1);
            }
          }
          if (a.cmp(b2) >= 0) {
            a.isub(b2);
            x12.isub(x22);
          } else {
            b2.isub(a);
            x22.isub(x12);
          }
        }
        var res;
        if (a.cmpn(1) === 0) {
          res = x12;
        } else {
          res = x22;
        }
        if (res.cmpn(0) < 0) {
          res.iadd(p3);
        }
        return res;
      };
      BN3.prototype.gcd = function gcd(num) {
        if (this.isZero())
          return num.abs();
        if (num.isZero())
          return this.abs();
        var a = this.clone();
        var b2 = num.clone();
        a.negative = 0;
        b2.negative = 0;
        for (var shift = 0; a.isEven() && b2.isEven(); shift++) {
          a.iushrn(1);
          b2.iushrn(1);
        }
        do {
          while (a.isEven()) {
            a.iushrn(1);
          }
          while (b2.isEven()) {
            b2.iushrn(1);
          }
          var r2 = a.cmp(b2);
          if (r2 < 0) {
            var t = a;
            a = b2;
            b2 = t;
          } else if (r2 === 0 || b2.cmpn(1) === 0) {
            break;
          }
          a.isub(b2);
        } while (true);
        return b2.iushln(shift);
      };
      BN3.prototype.invm = function invm(num) {
        return this.egcd(num).a.umod(num);
      };
      BN3.prototype.isEven = function isEven() {
        return (this.words[0] & 1) === 0;
      };
      BN3.prototype.isOdd = function isOdd() {
        return (this.words[0] & 1) === 1;
      };
      BN3.prototype.andln = function andln(num) {
        return this.words[0] & num;
      };
      BN3.prototype.bincn = function bincn(bit) {
        assert2(typeof bit === "number");
        var r2 = bit % 26;
        var s2 = (bit - r2) / 26;
        var q3 = 1 << r2;
        if (this.length <= s2) {
          this._expand(s2 + 1);
          this.words[s2] |= q3;
          return this;
        }
        var carry = q3;
        for (var i2 = s2; carry !== 0 && i2 < this.length; i2++) {
          var w3 = this.words[i2] | 0;
          w3 += carry;
          carry = w3 >>> 26;
          w3 &= 67108863;
          this.words[i2] = w3;
        }
        if (carry !== 0) {
          this.words[i2] = carry;
          this.length++;
        }
        return this;
      };
      BN3.prototype.isZero = function isZero() {
        return this.length === 1 && this.words[0] === 0;
      };
      BN3.prototype.cmpn = function cmpn(num) {
        var negative = num < 0;
        if (this.negative !== 0 && !negative)
          return -1;
        if (this.negative === 0 && negative)
          return 1;
        this._strip();
        var res;
        if (this.length > 1) {
          res = 1;
        } else {
          if (negative) {
            num = -num;
          }
          assert2(num <= 67108863, "Number is too big");
          var w3 = this.words[0] | 0;
          res = w3 === num ? 0 : w3 < num ? -1 : 1;
        }
        if (this.negative !== 0)
          return -res | 0;
        return res;
      };
      BN3.prototype.cmp = function cmp(num) {
        if (this.negative !== 0 && num.negative === 0)
          return -1;
        if (this.negative === 0 && num.negative !== 0)
          return 1;
        var res = this.ucmp(num);
        if (this.negative !== 0)
          return -res | 0;
        return res;
      };
      BN3.prototype.ucmp = function ucmp(num) {
        if (this.length > num.length)
          return 1;
        if (this.length < num.length)
          return -1;
        var res = 0;
        for (var i2 = this.length - 1; i2 >= 0; i2--) {
          var a = this.words[i2] | 0;
          var b2 = num.words[i2] | 0;
          if (a === b2)
            continue;
          if (a < b2) {
            res = -1;
          } else if (a > b2) {
            res = 1;
          }
          break;
        }
        return res;
      };
      BN3.prototype.gtn = function gtn(num) {
        return this.cmpn(num) === 1;
      };
      BN3.prototype.gt = function gt2(num) {
        return this.cmp(num) === 1;
      };
      BN3.prototype.gten = function gten(num) {
        return this.cmpn(num) >= 0;
      };
      BN3.prototype.gte = function gte(num) {
        return this.cmp(num) >= 0;
      };
      BN3.prototype.ltn = function ltn(num) {
        return this.cmpn(num) === -1;
      };
      BN3.prototype.lt = function lt2(num) {
        return this.cmp(num) === -1;
      };
      BN3.prototype.lten = function lten(num) {
        return this.cmpn(num) <= 0;
      };
      BN3.prototype.lte = function lte(num) {
        return this.cmp(num) <= 0;
      };
      BN3.prototype.eqn = function eqn(num) {
        return this.cmpn(num) === 0;
      };
      BN3.prototype.eq = function eq4(num) {
        return this.cmp(num) === 0;
      };
      BN3.red = function red(num) {
        return new Red(num);
      };
      BN3.prototype.toRed = function toRed(ctx) {
        assert2(!this.red, "Already a number in reduction context");
        assert2(this.negative === 0, "red works only with positives");
        return ctx.convertTo(this)._forceRed(ctx);
      };
      BN3.prototype.fromRed = function fromRed() {
        assert2(this.red, "fromRed works only with numbers in reduction context");
        return this.red.convertFrom(this);
      };
      BN3.prototype._forceRed = function _forceRed(ctx) {
        this.red = ctx;
        return this;
      };
      BN3.prototype.forceRed = function forceRed(ctx) {
        assert2(!this.red, "Already a number in reduction context");
        return this._forceRed(ctx);
      };
      BN3.prototype.redAdd = function redAdd(num) {
        assert2(this.red, "redAdd works only with red numbers");
        return this.red.add(this, num);
      };
      BN3.prototype.redIAdd = function redIAdd(num) {
        assert2(this.red, "redIAdd works only with red numbers");
        return this.red.iadd(this, num);
      };
      BN3.prototype.redSub = function redSub(num) {
        assert2(this.red, "redSub works only with red numbers");
        return this.red.sub(this, num);
      };
      BN3.prototype.redISub = function redISub(num) {
        assert2(this.red, "redISub works only with red numbers");
        return this.red.isub(this, num);
      };
      BN3.prototype.redShl = function redShl(num) {
        assert2(this.red, "redShl works only with red numbers");
        return this.red.shl(this, num);
      };
      BN3.prototype.redMul = function redMul(num) {
        assert2(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.mul(this, num);
      };
      BN3.prototype.redIMul = function redIMul(num) {
        assert2(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.imul(this, num);
      };
      BN3.prototype.redSqr = function redSqr() {
        assert2(this.red, "redSqr works only with red numbers");
        this.red._verify1(this);
        return this.red.sqr(this);
      };
      BN3.prototype.redISqr = function redISqr() {
        assert2(this.red, "redISqr works only with red numbers");
        this.red._verify1(this);
        return this.red.isqr(this);
      };
      BN3.prototype.redSqrt = function redSqrt() {
        assert2(this.red, "redSqrt works only with red numbers");
        this.red._verify1(this);
        return this.red.sqrt(this);
      };
      BN3.prototype.redInvm = function redInvm() {
        assert2(this.red, "redInvm works only with red numbers");
        this.red._verify1(this);
        return this.red.invm(this);
      };
      BN3.prototype.redNeg = function redNeg() {
        assert2(this.red, "redNeg works only with red numbers");
        this.red._verify1(this);
        return this.red.neg(this);
      };
      BN3.prototype.redPow = function redPow(num) {
        assert2(this.red && !num.red, "redPow(normalNum)");
        this.red._verify1(this);
        return this.red.pow(this, num);
      };
      var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
      };
      function MPrime(name2, p3) {
        this.name = name2;
        this.p = new BN3(p3, 16);
        this.n = this.p.bitLength();
        this.k = new BN3(1).iushln(this.n).isub(this.p);
        this.tmp = this._tmp();
      }
      MPrime.prototype._tmp = function _tmp() {
        var tmp = new BN3(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
      };
      MPrime.prototype.ireduce = function ireduce(num) {
        var r2 = num;
        var rlen;
        do {
          this.split(r2, this.tmp);
          r2 = this.imulK(r2);
          r2 = r2.iadd(this.tmp);
          rlen = r2.bitLength();
        } while (rlen > this.n);
        var cmp = rlen < this.n ? -1 : r2.ucmp(this.p);
        if (cmp === 0) {
          r2.words[0] = 0;
          r2.length = 1;
        } else if (cmp > 0) {
          r2.isub(this.p);
        } else {
          if (r2.strip !== void 0) {
            r2.strip();
          } else {
            r2._strip();
          }
        }
        return r2;
      };
      MPrime.prototype.split = function split(input, out) {
        input.iushrn(this.n, 0, out);
      };
      MPrime.prototype.imulK = function imulK(num) {
        return num.imul(this.k);
      };
      function K256() {
        MPrime.call(this, "k256", "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f");
      }
      inherits(K256, MPrime);
      K256.prototype.split = function split(input, output) {
        var mask = 4194303;
        var outLen = Math.min(input.length, 9);
        for (var i2 = 0; i2 < outLen; i2++) {
          output.words[i2] = input.words[i2];
        }
        output.length = outLen;
        if (input.length <= 9) {
          input.words[0] = 0;
          input.length = 1;
          return;
        }
        var prev = input.words[9];
        output.words[output.length++] = prev & mask;
        for (i2 = 10; i2 < input.length; i2++) {
          var next = input.words[i2] | 0;
          input.words[i2 - 10] = (next & mask) << 4 | prev >>> 22;
          prev = next;
        }
        prev >>>= 22;
        input.words[i2 - 10] = prev;
        if (prev === 0 && input.length > 10) {
          input.length -= 10;
        } else {
          input.length -= 9;
        }
      };
      K256.prototype.imulK = function imulK(num) {
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2;
        var lo2 = 0;
        for (var i2 = 0; i2 < num.length; i2++) {
          var w3 = num.words[i2] | 0;
          lo2 += w3 * 977;
          num.words[i2] = lo2 & 67108863;
          lo2 = w3 * 64 + (lo2 / 67108864 | 0);
        }
        if (num.words[num.length - 1] === 0) {
          num.length--;
          if (num.words[num.length - 1] === 0) {
            num.length--;
          }
        }
        return num;
      };
      function P224() {
        MPrime.call(this, "p224", "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001");
      }
      inherits(P224, MPrime);
      function P192() {
        MPrime.call(this, "p192", "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff");
      }
      inherits(P192, MPrime);
      function P25519() {
        MPrime.call(this, "25519", "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed");
      }
      inherits(P25519, MPrime);
      P25519.prototype.imulK = function imulK(num) {
        var carry = 0;
        for (var i2 = 0; i2 < num.length; i2++) {
          var hi = (num.words[i2] | 0) * 19 + carry;
          var lo2 = hi & 67108863;
          hi >>>= 26;
          num.words[i2] = lo2;
          carry = hi;
        }
        if (carry !== 0) {
          num.words[num.length++] = carry;
        }
        return num;
      };
      BN3._prime = function prime(name2) {
        if (primes[name2])
          return primes[name2];
        var prime2;
        if (name2 === "k256") {
          prime2 = new K256();
        } else if (name2 === "p224") {
          prime2 = new P224();
        } else if (name2 === "p192") {
          prime2 = new P192();
        } else if (name2 === "p25519") {
          prime2 = new P25519();
        } else {
          throw new Error("Unknown prime " + name2);
        }
        primes[name2] = prime2;
        return prime2;
      };
      function Red(m3) {
        if (typeof m3 === "string") {
          var prime = BN3._prime(m3);
          this.m = prime.p;
          this.prime = prime;
        } else {
          assert2(m3.gtn(1), "modulus must be greater than 1");
          this.m = m3;
          this.prime = null;
        }
      }
      Red.prototype._verify1 = function _verify1(a) {
        assert2(a.negative === 0, "red works only with positives");
        assert2(a.red, "red works only with red numbers");
      };
      Red.prototype._verify2 = function _verify2(a, b2) {
        assert2((a.negative | b2.negative) === 0, "red works only with positives");
        assert2(a.red && a.red === b2.red, "red works only with red numbers");
      };
      Red.prototype.imod = function imod(a) {
        if (this.prime)
          return this.prime.ireduce(a)._forceRed(this);
        move(a, a.umod(this.m)._forceRed(this));
        return a;
      };
      Red.prototype.neg = function neg3(a) {
        if (a.isZero()) {
          return a.clone();
        }
        return this.m.sub(a)._forceRed(this);
      };
      Red.prototype.add = function add3(a, b2) {
        this._verify2(a, b2);
        var res = a.add(b2);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res._forceRed(this);
      };
      Red.prototype.iadd = function iadd(a, b2) {
        this._verify2(a, b2);
        var res = a.iadd(b2);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res;
      };
      Red.prototype.sub = function sub(a, b2) {
        this._verify2(a, b2);
        var res = a.sub(b2);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Red.prototype.isub = function isub(a, b2) {
        this._verify2(a, b2);
        var res = a.isub(b2);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res;
      };
      Red.prototype.shl = function shl(a, num) {
        this._verify1(a);
        return this.imod(a.ushln(num));
      };
      Red.prototype.imul = function imul(a, b2) {
        this._verify2(a, b2);
        return this.imod(a.imul(b2));
      };
      Red.prototype.mul = function mul3(a, b2) {
        this._verify2(a, b2);
        return this.imod(a.mul(b2));
      };
      Red.prototype.isqr = function isqr(a) {
        return this.imul(a, a.clone());
      };
      Red.prototype.sqr = function sqr(a) {
        return this.mul(a, a);
      };
      Red.prototype.sqrt = function sqrt(a) {
        if (a.isZero())
          return a.clone();
        var mod3 = this.m.andln(3);
        assert2(mod3 % 2 === 1);
        if (mod3 === 3) {
          var pow = this.m.add(new BN3(1)).iushrn(2);
          return this.pow(a, pow);
        }
        var q3 = this.m.subn(1);
        var s2 = 0;
        while (!q3.isZero() && q3.andln(1) === 0) {
          s2++;
          q3.iushrn(1);
        }
        assert2(!q3.isZero());
        var one = new BN3(1).toRed(this);
        var nOne = one.redNeg();
        var lpow = this.m.subn(1).iushrn(1);
        var z3 = this.m.bitLength();
        z3 = new BN3(2 * z3 * z3).toRed(this);
        while (this.pow(z3, lpow).cmp(nOne) !== 0) {
          z3.redIAdd(nOne);
        }
        var c2 = this.pow(z3, q3);
        var r2 = this.pow(a, q3.addn(1).iushrn(1));
        var t = this.pow(a, q3);
        var m3 = s2;
        while (t.cmp(one) !== 0) {
          var tmp = t;
          for (var i2 = 0; tmp.cmp(one) !== 0; i2++) {
            tmp = tmp.redSqr();
          }
          assert2(i2 < m3);
          var b2 = this.pow(c2, new BN3(1).iushln(m3 - i2 - 1));
          r2 = r2.redMul(b2);
          c2 = b2.redSqr();
          t = t.redMul(c2);
          m3 = i2;
        }
        return r2;
      };
      Red.prototype.invm = function invm(a) {
        var inv = a._invmp(this.m);
        if (inv.negative !== 0) {
          inv.negative = 0;
          return this.imod(inv).redNeg();
        } else {
          return this.imod(inv);
        }
      };
      Red.prototype.pow = function pow(a, num) {
        if (num.isZero())
          return new BN3(1).toRed(this);
        if (num.cmpn(1) === 0)
          return a.clone();
        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN3(1).toRed(this);
        wnd[1] = a;
        for (var i2 = 2; i2 < wnd.length; i2++) {
          wnd[i2] = this.mul(wnd[i2 - 1], a);
        }
        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;
        if (start === 0) {
          start = 26;
        }
        for (i2 = num.length - 1; i2 >= 0; i2--) {
          var word = num.words[i2];
          for (var j3 = start - 1; j3 >= 0; j3--) {
            var bit = word >> j3 & 1;
            if (res !== wnd[0]) {
              res = this.sqr(res);
            }
            if (bit === 0 && current === 0) {
              currentLen = 0;
              continue;
            }
            current <<= 1;
            current |= bit;
            currentLen++;
            if (currentLen !== windowSize && (i2 !== 0 || j3 !== 0))
              continue;
            res = this.mul(res, wnd[current]);
            currentLen = 0;
            current = 0;
          }
          start = 26;
        }
        return res;
      };
      Red.prototype.convertTo = function convertTo(num) {
        var r2 = num.umod(this.m);
        return r2 === num ? r2.clone() : r2;
      };
      Red.prototype.convertFrom = function convertFrom(num) {
        var res = num.clone();
        res.red = null;
        return res;
      };
      BN3.mont = function mont(num) {
        return new Mont(num);
      };
      function Mont(m3) {
        Red.call(this, m3);
        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) {
          this.shift += 26 - this.shift % 26;
        }
        this.r = new BN3(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);
        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
      }
      inherits(Mont, Red);
      Mont.prototype.convertTo = function convertTo(num) {
        return this.imod(num.ushln(this.shift));
      };
      Mont.prototype.convertFrom = function convertFrom(num) {
        var r2 = this.imod(num.mul(this.rinv));
        r2.red = null;
        return r2;
      };
      Mont.prototype.imul = function imul(a, b2) {
        if (a.isZero() || b2.isZero()) {
          a.words[0] = 0;
          a.length = 1;
          return a;
        }
        var t = a.imul(b2);
        var c2 = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u2 = t.isub(c2).iushrn(this.shift);
        var res = u2;
        if (u2.cmp(this.m) >= 0) {
          res = u2.isub(this.m);
        } else if (u2.cmpn(0) < 0) {
          res = u2.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Mont.prototype.mul = function mul3(a, b2) {
        if (a.isZero() || b2.isZero())
          return new BN3(0)._forceRed(this);
        var t = a.mul(b2);
        var c2 = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u2 = t.isub(c2).iushrn(this.shift);
        var res = u2;
        if (u2.cmp(this.m) >= 0) {
          res = u2.isub(this.m);
        } else if (u2.cmpn(0) < 0) {
          res = u2.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Mont.prototype.invm = function invm(a) {
        var res = this.imod(a._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
      };
    })(typeof module === "undefined" || module, exports);
  }
});

// node_modules/base64-js/index.js
var require_base64_js = __commonJS({
  "node_modules/base64-js/index.js"(exports) {
    init_define_process();
    "use strict";
    exports.byteLength = byteLength;
    exports.toByteArray = toByteArray;
    exports.fromByteArray = fromByteArray;
    var lookup = [];
    var revLookup = [];
    var Arr = typeof Uint8Array !== "undefined" ? Uint8Array : Array;
    var code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
    for (var i2 = 0, len = code.length; i2 < len; ++i2) {
      lookup[i2] = code[i2];
      revLookup[code.charCodeAt(i2)] = i2;
    }
    revLookup["-".charCodeAt(0)] = 62;
    revLookup["_".charCodeAt(0)] = 63;
    function getLens(b64) {
      var len2 = b64.length;
      if (len2 % 4 > 0) {
        throw new Error("Invalid string. Length must be a multiple of 4");
      }
      var validLen = b64.indexOf("=");
      if (validLen === -1)
        validLen = len2;
      var placeHoldersLen = validLen === len2 ? 0 : 4 - validLen % 4;
      return [validLen, placeHoldersLen];
    }
    function byteLength(b64) {
      var lens = getLens(b64);
      var validLen = lens[0];
      var placeHoldersLen = lens[1];
      return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
    }
    function _byteLength(b64, validLen, placeHoldersLen) {
      return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
    }
    function toByteArray(b64) {
      var tmp;
      var lens = getLens(b64);
      var validLen = lens[0];
      var placeHoldersLen = lens[1];
      var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));
      var curByte = 0;
      var len2 = placeHoldersLen > 0 ? validLen - 4 : validLen;
      var i3;
      for (i3 = 0; i3 < len2; i3 += 4) {
        tmp = revLookup[b64.charCodeAt(i3)] << 18 | revLookup[b64.charCodeAt(i3 + 1)] << 12 | revLookup[b64.charCodeAt(i3 + 2)] << 6 | revLookup[b64.charCodeAt(i3 + 3)];
        arr[curByte++] = tmp >> 16 & 255;
        arr[curByte++] = tmp >> 8 & 255;
        arr[curByte++] = tmp & 255;
      }
      if (placeHoldersLen === 2) {
        tmp = revLookup[b64.charCodeAt(i3)] << 2 | revLookup[b64.charCodeAt(i3 + 1)] >> 4;
        arr[curByte++] = tmp & 255;
      }
      if (placeHoldersLen === 1) {
        tmp = revLookup[b64.charCodeAt(i3)] << 10 | revLookup[b64.charCodeAt(i3 + 1)] << 4 | revLookup[b64.charCodeAt(i3 + 2)] >> 2;
        arr[curByte++] = tmp >> 8 & 255;
        arr[curByte++] = tmp & 255;
      }
      return arr;
    }
    function tripletToBase64(num) {
      return lookup[num >> 18 & 63] + lookup[num >> 12 & 63] + lookup[num >> 6 & 63] + lookup[num & 63];
    }
    function encodeChunk(uint8, start, end) {
      var tmp;
      var output = [];
      for (var i3 = start; i3 < end; i3 += 3) {
        tmp = (uint8[i3] << 16 & 16711680) + (uint8[i3 + 1] << 8 & 65280) + (uint8[i3 + 2] & 255);
        output.push(tripletToBase64(tmp));
      }
      return output.join("");
    }
    function fromByteArray(uint8) {
      var tmp;
      var len2 = uint8.length;
      var extraBytes = len2 % 3;
      var parts = [];
      var maxChunkLength = 16383;
      for (var i3 = 0, len22 = len2 - extraBytes; i3 < len22; i3 += maxChunkLength) {
        parts.push(encodeChunk(uint8, i3, i3 + maxChunkLength > len22 ? len22 : i3 + maxChunkLength));
      }
      if (extraBytes === 1) {
        tmp = uint8[len2 - 1];
        parts.push(lookup[tmp >> 2] + lookup[tmp << 4 & 63] + "==");
      } else if (extraBytes === 2) {
        tmp = (uint8[len2 - 2] << 8) + uint8[len2 - 1];
        parts.push(lookup[tmp >> 10] + lookup[tmp >> 4 & 63] + lookup[tmp << 2 & 63] + "=");
      }
      return parts.join("");
    }
  }
});

// node_modules/ieee754/index.js
var require_ieee754 = __commonJS({
  "node_modules/ieee754/index.js"(exports) {
    init_define_process();
    exports.read = function(buffer, offset, isLE, mLen, nBytes) {
      var e, m3;
      var eLen = nBytes * 8 - mLen - 1;
      var eMax = (1 << eLen) - 1;
      var eBias = eMax >> 1;
      var nBits = -7;
      var i2 = isLE ? nBytes - 1 : 0;
      var d2 = isLE ? -1 : 1;
      var s2 = buffer[offset + i2];
      i2 += d2;
      e = s2 & (1 << -nBits) - 1;
      s2 >>= -nBits;
      nBits += eLen;
      for (; nBits > 0; e = e * 256 + buffer[offset + i2], i2 += d2, nBits -= 8) {
      }
      m3 = e & (1 << -nBits) - 1;
      e >>= -nBits;
      nBits += mLen;
      for (; nBits > 0; m3 = m3 * 256 + buffer[offset + i2], i2 += d2, nBits -= 8) {
      }
      if (e === 0) {
        e = 1 - eBias;
      } else if (e === eMax) {
        return m3 ? NaN : (s2 ? -1 : 1) * Infinity;
      } else {
        m3 = m3 + Math.pow(2, mLen);
        e = e - eBias;
      }
      return (s2 ? -1 : 1) * m3 * Math.pow(2, e - mLen);
    };
    exports.write = function(buffer, value2, offset, isLE, mLen, nBytes) {
      var e, m3, c2;
      var eLen = nBytes * 8 - mLen - 1;
      var eMax = (1 << eLen) - 1;
      var eBias = eMax >> 1;
      var rt2 = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
      var i2 = isLE ? 0 : nBytes - 1;
      var d2 = isLE ? 1 : -1;
      var s2 = value2 < 0 || value2 === 0 && 1 / value2 < 0 ? 1 : 0;
      value2 = Math.abs(value2);
      if (isNaN(value2) || value2 === Infinity) {
        m3 = isNaN(value2) ? 1 : 0;
        e = eMax;
      } else {
        e = Math.floor(Math.log(value2) / Math.LN2);
        if (value2 * (c2 = Math.pow(2, -e)) < 1) {
          e--;
          c2 *= 2;
        }
        if (e + eBias >= 1) {
          value2 += rt2 / c2;
        } else {
          value2 += rt2 * Math.pow(2, 1 - eBias);
        }
        if (value2 * c2 >= 2) {
          e++;
          c2 /= 2;
        }
        if (e + eBias >= eMax) {
          m3 = 0;
          e = eMax;
        } else if (e + eBias >= 1) {
          m3 = (value2 * c2 - 1) * Math.pow(2, mLen);
          e = e + eBias;
        } else {
          m3 = value2 * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
          e = 0;
        }
      }
      for (; mLen >= 8; buffer[offset + i2] = m3 & 255, i2 += d2, m3 /= 256, mLen -= 8) {
      }
      e = e << mLen | m3;
      eLen += mLen;
      for (; eLen > 0; buffer[offset + i2] = e & 255, i2 += d2, e /= 256, eLen -= 8) {
      }
      buffer[offset + i2 - d2] |= s2 * 128;
    };
  }
});

// node_modules/keccak256/node_modules/buffer/index.js
var require_buffer = __commonJS({
  "node_modules/keccak256/node_modules/buffer/index.js"(exports) {
    init_define_process();
    "use strict";
    var base64 = require_base64_js();
    var ieee754 = require_ieee754();
    var customInspectSymbol = typeof Symbol === "function" && typeof Symbol["for"] === "function" ? Symbol["for"]("nodejs.util.inspect.custom") : null;
    exports.Buffer = Buffer2;
    exports.SlowBuffer = SlowBuffer;
    exports.INSPECT_MAX_BYTES = 50;
    var K_MAX_LENGTH = 2147483647;
    exports.kMaxLength = K_MAX_LENGTH;
    Buffer2.TYPED_ARRAY_SUPPORT = typedArraySupport();
    if (!Buffer2.TYPED_ARRAY_SUPPORT && typeof console !== "undefined" && typeof console.error === "function") {
      console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support.");
    }
    function typedArraySupport() {
      try {
        const arr = new Uint8Array(1);
        const proto = { foo: function() {
          return 42;
        } };
        Object.setPrototypeOf(proto, Uint8Array.prototype);
        Object.setPrototypeOf(arr, proto);
        return arr.foo() === 42;
      } catch (e) {
        return false;
      }
    }
    Object.defineProperty(Buffer2.prototype, "parent", {
      enumerable: true,
      get: function() {
        if (!Buffer2.isBuffer(this))
          return void 0;
        return this.buffer;
      }
    });
    Object.defineProperty(Buffer2.prototype, "offset", {
      enumerable: true,
      get: function() {
        if (!Buffer2.isBuffer(this))
          return void 0;
        return this.byteOffset;
      }
    });
    function createBuffer(length) {
      if (length > K_MAX_LENGTH) {
        throw new RangeError('The value "' + length + '" is invalid for option "size"');
      }
      const buf = new Uint8Array(length);
      Object.setPrototypeOf(buf, Buffer2.prototype);
      return buf;
    }
    function Buffer2(arg, encodingOrOffset, length) {
      if (typeof arg === "number") {
        if (typeof encodingOrOffset === "string") {
          throw new TypeError('The "string" argument must be of type string. Received type number');
        }
        return allocUnsafe(arg);
      }
      return from(arg, encodingOrOffset, length);
    }
    Buffer2.poolSize = 8192;
    function from(value2, encodingOrOffset, length) {
      if (typeof value2 === "string") {
        return fromString(value2, encodingOrOffset);
      }
      if (ArrayBuffer.isView(value2)) {
        return fromArrayView(value2);
      }
      if (value2 == null) {
        throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value2);
      }
      if (isInstance(value2, ArrayBuffer) || value2 && isInstance(value2.buffer, ArrayBuffer)) {
        return fromArrayBuffer(value2, encodingOrOffset, length);
      }
      if (typeof SharedArrayBuffer !== "undefined" && (isInstance(value2, SharedArrayBuffer) || value2 && isInstance(value2.buffer, SharedArrayBuffer))) {
        return fromArrayBuffer(value2, encodingOrOffset, length);
      }
      if (typeof value2 === "number") {
        throw new TypeError('The "value" argument must not be of type number. Received type number');
      }
      const valueOf = value2.valueOf && value2.valueOf();
      if (valueOf != null && valueOf !== value2) {
        return Buffer2.from(valueOf, encodingOrOffset, length);
      }
      const b2 = fromObject(value2);
      if (b2)
        return b2;
      if (typeof Symbol !== "undefined" && Symbol.toPrimitive != null && typeof value2[Symbol.toPrimitive] === "function") {
        return Buffer2.from(value2[Symbol.toPrimitive]("string"), encodingOrOffset, length);
      }
      throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value2);
    }
    Buffer2.from = function(value2, encodingOrOffset, length) {
      return from(value2, encodingOrOffset, length);
    };
    Object.setPrototypeOf(Buffer2.prototype, Uint8Array.prototype);
    Object.setPrototypeOf(Buffer2, Uint8Array);
    function assertSize(size) {
      if (typeof size !== "number") {
        throw new TypeError('"size" argument must be of type number');
      } else if (size < 0) {
        throw new RangeError('The value "' + size + '" is invalid for option "size"');
      }
    }
    function alloc(size, fill, encoding) {
      assertSize(size);
      if (size <= 0) {
        return createBuffer(size);
      }
      if (fill !== void 0) {
        return typeof encoding === "string" ? createBuffer(size).fill(fill, encoding) : createBuffer(size).fill(fill);
      }
      return createBuffer(size);
    }
    Buffer2.alloc = function(size, fill, encoding) {
      return alloc(size, fill, encoding);
    };
    function allocUnsafe(size) {
      assertSize(size);
      return createBuffer(size < 0 ? 0 : checked(size) | 0);
    }
    Buffer2.allocUnsafe = function(size) {
      return allocUnsafe(size);
    };
    Buffer2.allocUnsafeSlow = function(size) {
      return allocUnsafe(size);
    };
    function fromString(string, encoding) {
      if (typeof encoding !== "string" || encoding === "") {
        encoding = "utf8";
      }
      if (!Buffer2.isEncoding(encoding)) {
        throw new TypeError("Unknown encoding: " + encoding);
      }
      const length = byteLength(string, encoding) | 0;
      let buf = createBuffer(length);
      const actual = buf.write(string, encoding);
      if (actual !== length) {
        buf = buf.slice(0, actual);
      }
      return buf;
    }
    function fromArrayLike(array) {
      const length = array.length < 0 ? 0 : checked(array.length) | 0;
      const buf = createBuffer(length);
      for (let i2 = 0; i2 < length; i2 += 1) {
        buf[i2] = array[i2] & 255;
      }
      return buf;
    }
    function fromArrayView(arrayView) {
      if (isInstance(arrayView, Uint8Array)) {
        const copy = new Uint8Array(arrayView);
        return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength);
      }
      return fromArrayLike(arrayView);
    }
    function fromArrayBuffer(array, byteOffset, length) {
      if (byteOffset < 0 || array.byteLength < byteOffset) {
        throw new RangeError('"offset" is outside of buffer bounds');
      }
      if (array.byteLength < byteOffset + (length || 0)) {
        throw new RangeError('"length" is outside of buffer bounds');
      }
      let buf;
      if (byteOffset === void 0 && length === void 0) {
        buf = new Uint8Array(array);
      } else if (length === void 0) {
        buf = new Uint8Array(array, byteOffset);
      } else {
        buf = new Uint8Array(array, byteOffset, length);
      }
      Object.setPrototypeOf(buf, Buffer2.prototype);
      return buf;
    }
    function fromObject(obj) {
      if (Buffer2.isBuffer(obj)) {
        const len = checked(obj.length) | 0;
        const buf = createBuffer(len);
        if (buf.length === 0) {
          return buf;
        }
        obj.copy(buf, 0, 0, len);
        return buf;
      }
      if (obj.length !== void 0) {
        if (typeof obj.length !== "number" || numberIsNaN(obj.length)) {
          return createBuffer(0);
        }
        return fromArrayLike(obj);
      }
      if (obj.type === "Buffer" && Array.isArray(obj.data)) {
        return fromArrayLike(obj.data);
      }
    }
    function checked(length) {
      if (length >= K_MAX_LENGTH) {
        throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + K_MAX_LENGTH.toString(16) + " bytes");
      }
      return length | 0;
    }
    function SlowBuffer(length) {
      if (+length != length) {
        length = 0;
      }
      return Buffer2.alloc(+length);
    }
    Buffer2.isBuffer = function isBuffer(b2) {
      return b2 != null && b2._isBuffer === true && b2 !== Buffer2.prototype;
    };
    Buffer2.compare = function compare(a, b2) {
      if (isInstance(a, Uint8Array))
        a = Buffer2.from(a, a.offset, a.byteLength);
      if (isInstance(b2, Uint8Array))
        b2 = Buffer2.from(b2, b2.offset, b2.byteLength);
      if (!Buffer2.isBuffer(a) || !Buffer2.isBuffer(b2)) {
        throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');
      }
      if (a === b2)
        return 0;
      let x4 = a.length;
      let y2 = b2.length;
      for (let i2 = 0, len = Math.min(x4, y2); i2 < len; ++i2) {
        if (a[i2] !== b2[i2]) {
          x4 = a[i2];
          y2 = b2[i2];
          break;
        }
      }
      if (x4 < y2)
        return -1;
      if (y2 < x4)
        return 1;
      return 0;
    };
    Buffer2.isEncoding = function isEncoding(encoding) {
      switch (String(encoding).toLowerCase()) {
        case "hex":
        case "utf8":
        case "utf-8":
        case "ascii":
        case "latin1":
        case "binary":
        case "base64":
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
          return true;
        default:
          return false;
      }
    };
    Buffer2.concat = function concat2(list, length) {
      if (!Array.isArray(list)) {
        throw new TypeError('"list" argument must be an Array of Buffers');
      }
      if (list.length === 0) {
        return Buffer2.alloc(0);
      }
      let i2;
      if (length === void 0) {
        length = 0;
        for (i2 = 0; i2 < list.length; ++i2) {
          length += list[i2].length;
        }
      }
      const buffer = Buffer2.allocUnsafe(length);
      let pos = 0;
      for (i2 = 0; i2 < list.length; ++i2) {
        let buf = list[i2];
        if (isInstance(buf, Uint8Array)) {
          if (pos + buf.length > buffer.length) {
            if (!Buffer2.isBuffer(buf))
              buf = Buffer2.from(buf);
            buf.copy(buffer, pos);
          } else {
            Uint8Array.prototype.set.call(buffer, buf, pos);
          }
        } else if (!Buffer2.isBuffer(buf)) {
          throw new TypeError('"list" argument must be an Array of Buffers');
        } else {
          buf.copy(buffer, pos);
        }
        pos += buf.length;
      }
      return buffer;
    };
    function byteLength(string, encoding) {
      if (Buffer2.isBuffer(string)) {
        return string.length;
      }
      if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {
        return string.byteLength;
      }
      if (typeof string !== "string") {
        throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' + typeof string);
      }
      const len = string.length;
      const mustMatch = arguments.length > 2 && arguments[2] === true;
      if (!mustMatch && len === 0)
        return 0;
      let loweredCase = false;
      for (; ; ) {
        switch (encoding) {
          case "ascii":
          case "latin1":
          case "binary":
            return len;
          case "utf8":
          case "utf-8":
            return utf8ToBytes(string).length;
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
            return len * 2;
          case "hex":
            return len >>> 1;
          case "base64":
            return base64ToBytes(string).length;
          default:
            if (loweredCase) {
              return mustMatch ? -1 : utf8ToBytes(string).length;
            }
            encoding = ("" + encoding).toLowerCase();
            loweredCase = true;
        }
      }
    }
    Buffer2.byteLength = byteLength;
    function slowToString(encoding, start, end) {
      let loweredCase = false;
      if (start === void 0 || start < 0) {
        start = 0;
      }
      if (start > this.length) {
        return "";
      }
      if (end === void 0 || end > this.length) {
        end = this.length;
      }
      if (end <= 0) {
        return "";
      }
      end >>>= 0;
      start >>>= 0;
      if (end <= start) {
        return "";
      }
      if (!encoding)
        encoding = "utf8";
      while (true) {
        switch (encoding) {
          case "hex":
            return hexSlice(this, start, end);
          case "utf8":
          case "utf-8":
            return utf8Slice(this, start, end);
          case "ascii":
            return asciiSlice(this, start, end);
          case "latin1":
          case "binary":
            return latin1Slice(this, start, end);
          case "base64":
            return base64Slice(this, start, end);
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
            return utf16leSlice(this, start, end);
          default:
            if (loweredCase)
              throw new TypeError("Unknown encoding: " + encoding);
            encoding = (encoding + "").toLowerCase();
            loweredCase = true;
        }
      }
    }
    Buffer2.prototype._isBuffer = true;
    function swap(b2, n, m3) {
      const i2 = b2[n];
      b2[n] = b2[m3];
      b2[m3] = i2;
    }
    Buffer2.prototype.swap16 = function swap16() {
      const len = this.length;
      if (len % 2 !== 0) {
        throw new RangeError("Buffer size must be a multiple of 16-bits");
      }
      for (let i2 = 0; i2 < len; i2 += 2) {
        swap(this, i2, i2 + 1);
      }
      return this;
    };
    Buffer2.prototype.swap32 = function swap32() {
      const len = this.length;
      if (len % 4 !== 0) {
        throw new RangeError("Buffer size must be a multiple of 32-bits");
      }
      for (let i2 = 0; i2 < len; i2 += 4) {
        swap(this, i2, i2 + 3);
        swap(this, i2 + 1, i2 + 2);
      }
      return this;
    };
    Buffer2.prototype.swap64 = function swap64() {
      const len = this.length;
      if (len % 8 !== 0) {
        throw new RangeError("Buffer size must be a multiple of 64-bits");
      }
      for (let i2 = 0; i2 < len; i2 += 8) {
        swap(this, i2, i2 + 7);
        swap(this, i2 + 1, i2 + 6);
        swap(this, i2 + 2, i2 + 5);
        swap(this, i2 + 3, i2 + 4);
      }
      return this;
    };
    Buffer2.prototype.toString = function toString() {
      const length = this.length;
      if (length === 0)
        return "";
      if (arguments.length === 0)
        return utf8Slice(this, 0, length);
      return slowToString.apply(this, arguments);
    };
    Buffer2.prototype.toLocaleString = Buffer2.prototype.toString;
    Buffer2.prototype.equals = function equals(b2) {
      if (!Buffer2.isBuffer(b2))
        throw new TypeError("Argument must be a Buffer");
      if (this === b2)
        return true;
      return Buffer2.compare(this, b2) === 0;
    };
    Buffer2.prototype.inspect = function inspect4() {
      let str = "";
      const max = exports.INSPECT_MAX_BYTES;
      str = this.toString("hex", 0, max).replace(/(.{2})/g, "$1 ").trim();
      if (this.length > max)
        str += " ... ";
      return "<Buffer " + str + ">";
    };
    if (customInspectSymbol) {
      Buffer2.prototype[customInspectSymbol] = Buffer2.prototype.inspect;
    }
    Buffer2.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
      if (isInstance(target, Uint8Array)) {
        target = Buffer2.from(target, target.offset, target.byteLength);
      }
      if (!Buffer2.isBuffer(target)) {
        throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type ' + typeof target);
      }
      if (start === void 0) {
        start = 0;
      }
      if (end === void 0) {
        end = target ? target.length : 0;
      }
      if (thisStart === void 0) {
        thisStart = 0;
      }
      if (thisEnd === void 0) {
        thisEnd = this.length;
      }
      if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
        throw new RangeError("out of range index");
      }
      if (thisStart >= thisEnd && start >= end) {
        return 0;
      }
      if (thisStart >= thisEnd) {
        return -1;
      }
      if (start >= end) {
        return 1;
      }
      start >>>= 0;
      end >>>= 0;
      thisStart >>>= 0;
      thisEnd >>>= 0;
      if (this === target)
        return 0;
      let x4 = thisEnd - thisStart;
      let y2 = end - start;
      const len = Math.min(x4, y2);
      const thisCopy = this.slice(thisStart, thisEnd);
      const targetCopy = target.slice(start, end);
      for (let i2 = 0; i2 < len; ++i2) {
        if (thisCopy[i2] !== targetCopy[i2]) {
          x4 = thisCopy[i2];
          y2 = targetCopy[i2];
          break;
        }
      }
      if (x4 < y2)
        return -1;
      if (y2 < x4)
        return 1;
      return 0;
    };
    function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
      if (buffer.length === 0)
        return -1;
      if (typeof byteOffset === "string") {
        encoding = byteOffset;
        byteOffset = 0;
      } else if (byteOffset > 2147483647) {
        byteOffset = 2147483647;
      } else if (byteOffset < -2147483648) {
        byteOffset = -2147483648;
      }
      byteOffset = +byteOffset;
      if (numberIsNaN(byteOffset)) {
        byteOffset = dir ? 0 : buffer.length - 1;
      }
      if (byteOffset < 0)
        byteOffset = buffer.length + byteOffset;
      if (byteOffset >= buffer.length) {
        if (dir)
          return -1;
        else
          byteOffset = buffer.length - 1;
      } else if (byteOffset < 0) {
        if (dir)
          byteOffset = 0;
        else
          return -1;
      }
      if (typeof val === "string") {
        val = Buffer2.from(val, encoding);
      }
      if (Buffer2.isBuffer(val)) {
        if (val.length === 0) {
          return -1;
        }
        return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
      } else if (typeof val === "number") {
        val = val & 255;
        if (typeof Uint8Array.prototype.indexOf === "function") {
          if (dir) {
            return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
          } else {
            return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
          }
        }
        return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);
      }
      throw new TypeError("val must be string, number or Buffer");
    }
    function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
      let indexSize = 1;
      let arrLength = arr.length;
      let valLength = val.length;
      if (encoding !== void 0) {
        encoding = String(encoding).toLowerCase();
        if (encoding === "ucs2" || encoding === "ucs-2" || encoding === "utf16le" || encoding === "utf-16le") {
          if (arr.length < 2 || val.length < 2) {
            return -1;
          }
          indexSize = 2;
          arrLength /= 2;
          valLength /= 2;
          byteOffset /= 2;
        }
      }
      function read(buf, i3) {
        if (indexSize === 1) {
          return buf[i3];
        } else {
          return buf.readUInt16BE(i3 * indexSize);
        }
      }
      let i2;
      if (dir) {
        let foundIndex = -1;
        for (i2 = byteOffset; i2 < arrLength; i2++) {
          if (read(arr, i2) === read(val, foundIndex === -1 ? 0 : i2 - foundIndex)) {
            if (foundIndex === -1)
              foundIndex = i2;
            if (i2 - foundIndex + 1 === valLength)
              return foundIndex * indexSize;
          } else {
            if (foundIndex !== -1)
              i2 -= i2 - foundIndex;
            foundIndex = -1;
          }
        }
      } else {
        if (byteOffset + valLength > arrLength)
          byteOffset = arrLength - valLength;
        for (i2 = byteOffset; i2 >= 0; i2--) {
          let found = true;
          for (let j3 = 0; j3 < valLength; j3++) {
            if (read(arr, i2 + j3) !== read(val, j3)) {
              found = false;
              break;
            }
          }
          if (found)
            return i2;
        }
      }
      return -1;
    }
    Buffer2.prototype.includes = function includes(val, byteOffset, encoding) {
      return this.indexOf(val, byteOffset, encoding) !== -1;
    };
    Buffer2.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
      return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
    };
    Buffer2.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
      return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
    };
    function hexWrite(buf, string, offset, length) {
      offset = Number(offset) || 0;
      const remaining = buf.length - offset;
      if (!length) {
        length = remaining;
      } else {
        length = Number(length);
        if (length > remaining) {
          length = remaining;
        }
      }
      const strLen = string.length;
      if (length > strLen / 2) {
        length = strLen / 2;
      }
      let i2;
      for (i2 = 0; i2 < length; ++i2) {
        const parsed = parseInt(string.substr(i2 * 2, 2), 16);
        if (numberIsNaN(parsed))
          return i2;
        buf[offset + i2] = parsed;
      }
      return i2;
    }
    function utf8Write(buf, string, offset, length) {
      return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
    }
    function asciiWrite(buf, string, offset, length) {
      return blitBuffer(asciiToBytes(string), buf, offset, length);
    }
    function base64Write(buf, string, offset, length) {
      return blitBuffer(base64ToBytes(string), buf, offset, length);
    }
    function ucs2Write(buf, string, offset, length) {
      return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
    }
    Buffer2.prototype.write = function write(string, offset, length, encoding) {
      if (offset === void 0) {
        encoding = "utf8";
        length = this.length;
        offset = 0;
      } else if (length === void 0 && typeof offset === "string") {
        encoding = offset;
        length = this.length;
        offset = 0;
      } else if (isFinite(offset)) {
        offset = offset >>> 0;
        if (isFinite(length)) {
          length = length >>> 0;
          if (encoding === void 0)
            encoding = "utf8";
        } else {
          encoding = length;
          length = void 0;
        }
      } else {
        throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");
      }
      const remaining = this.length - offset;
      if (length === void 0 || length > remaining)
        length = remaining;
      if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {
        throw new RangeError("Attempt to write outside buffer bounds");
      }
      if (!encoding)
        encoding = "utf8";
      let loweredCase = false;
      for (; ; ) {
        switch (encoding) {
          case "hex":
            return hexWrite(this, string, offset, length);
          case "utf8":
          case "utf-8":
            return utf8Write(this, string, offset, length);
          case "ascii":
          case "latin1":
          case "binary":
            return asciiWrite(this, string, offset, length);
          case "base64":
            return base64Write(this, string, offset, length);
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
            return ucs2Write(this, string, offset, length);
          default:
            if (loweredCase)
              throw new TypeError("Unknown encoding: " + encoding);
            encoding = ("" + encoding).toLowerCase();
            loweredCase = true;
        }
      }
    };
    Buffer2.prototype.toJSON = function toJSON2() {
      return {
        type: "Buffer",
        data: Array.prototype.slice.call(this._arr || this, 0)
      };
    };
    function base64Slice(buf, start, end) {
      if (start === 0 && end === buf.length) {
        return base64.fromByteArray(buf);
      } else {
        return base64.fromByteArray(buf.slice(start, end));
      }
    }
    function utf8Slice(buf, start, end) {
      end = Math.min(buf.length, end);
      const res = [];
      let i2 = start;
      while (i2 < end) {
        const firstByte = buf[i2];
        let codePoint = null;
        let bytesPerSequence = firstByte > 239 ? 4 : firstByte > 223 ? 3 : firstByte > 191 ? 2 : 1;
        if (i2 + bytesPerSequence <= end) {
          let secondByte, thirdByte, fourthByte, tempCodePoint;
          switch (bytesPerSequence) {
            case 1:
              if (firstByte < 128) {
                codePoint = firstByte;
              }
              break;
            case 2:
              secondByte = buf[i2 + 1];
              if ((secondByte & 192) === 128) {
                tempCodePoint = (firstByte & 31) << 6 | secondByte & 63;
                if (tempCodePoint > 127) {
                  codePoint = tempCodePoint;
                }
              }
              break;
            case 3:
              secondByte = buf[i2 + 1];
              thirdByte = buf[i2 + 2];
              if ((secondByte & 192) === 128 && (thirdByte & 192) === 128) {
                tempCodePoint = (firstByte & 15) << 12 | (secondByte & 63) << 6 | thirdByte & 63;
                if (tempCodePoint > 2047 && (tempCodePoint < 55296 || tempCodePoint > 57343)) {
                  codePoint = tempCodePoint;
                }
              }
              break;
            case 4:
              secondByte = buf[i2 + 1];
              thirdByte = buf[i2 + 2];
              fourthByte = buf[i2 + 3];
              if ((secondByte & 192) === 128 && (thirdByte & 192) === 128 && (fourthByte & 192) === 128) {
                tempCodePoint = (firstByte & 15) << 18 | (secondByte & 63) << 12 | (thirdByte & 63) << 6 | fourthByte & 63;
                if (tempCodePoint > 65535 && tempCodePoint < 1114112) {
                  codePoint = tempCodePoint;
                }
              }
          }
        }
        if (codePoint === null) {
          codePoint = 65533;
          bytesPerSequence = 1;
        } else if (codePoint > 65535) {
          codePoint -= 65536;
          res.push(codePoint >>> 10 & 1023 | 55296);
          codePoint = 56320 | codePoint & 1023;
        }
        res.push(codePoint);
        i2 += bytesPerSequence;
      }
      return decodeCodePointsArray(res);
    }
    var MAX_ARGUMENTS_LENGTH = 4096;
    function decodeCodePointsArray(codePoints) {
      const len = codePoints.length;
      if (len <= MAX_ARGUMENTS_LENGTH) {
        return String.fromCharCode.apply(String, codePoints);
      }
      let res = "";
      let i2 = 0;
      while (i2 < len) {
        res += String.fromCharCode.apply(String, codePoints.slice(i2, i2 += MAX_ARGUMENTS_LENGTH));
      }
      return res;
    }
    function asciiSlice(buf, start, end) {
      let ret = "";
      end = Math.min(buf.length, end);
      for (let i2 = start; i2 < end; ++i2) {
        ret += String.fromCharCode(buf[i2] & 127);
      }
      return ret;
    }
    function latin1Slice(buf, start, end) {
      let ret = "";
      end = Math.min(buf.length, end);
      for (let i2 = start; i2 < end; ++i2) {
        ret += String.fromCharCode(buf[i2]);
      }
      return ret;
    }
    function hexSlice(buf, start, end) {
      const len = buf.length;
      if (!start || start < 0)
        start = 0;
      if (!end || end < 0 || end > len)
        end = len;
      let out = "";
      for (let i2 = start; i2 < end; ++i2) {
        out += hexSliceLookupTable[buf[i2]];
      }
      return out;
    }
    function utf16leSlice(buf, start, end) {
      const bytes = buf.slice(start, end);
      let res = "";
      for (let i2 = 0; i2 < bytes.length - 1; i2 += 2) {
        res += String.fromCharCode(bytes[i2] + bytes[i2 + 1] * 256);
      }
      return res;
    }
    Buffer2.prototype.slice = function slice(start, end) {
      const len = this.length;
      start = ~~start;
      end = end === void 0 ? len : ~~end;
      if (start < 0) {
        start += len;
        if (start < 0)
          start = 0;
      } else if (start > len) {
        start = len;
      }
      if (end < 0) {
        end += len;
        if (end < 0)
          end = 0;
      } else if (end > len) {
        end = len;
      }
      if (end < start)
        end = start;
      const newBuf = this.subarray(start, end);
      Object.setPrototypeOf(newBuf, Buffer2.prototype);
      return newBuf;
    };
    function checkOffset(offset, ext, length) {
      if (offset % 1 !== 0 || offset < 0)
        throw new RangeError("offset is not uint");
      if (offset + ext > length)
        throw new RangeError("Trying to access beyond buffer length");
    }
    Buffer2.prototype.readUintLE = Buffer2.prototype.readUIntLE = function readUIntLE(offset, byteLength2, noAssert) {
      offset = offset >>> 0;
      byteLength2 = byteLength2 >>> 0;
      if (!noAssert)
        checkOffset(offset, byteLength2, this.length);
      let val = this[offset];
      let mul3 = 1;
      let i2 = 0;
      while (++i2 < byteLength2 && (mul3 *= 256)) {
        val += this[offset + i2] * mul3;
      }
      return val;
    };
    Buffer2.prototype.readUintBE = Buffer2.prototype.readUIntBE = function readUIntBE(offset, byteLength2, noAssert) {
      offset = offset >>> 0;
      byteLength2 = byteLength2 >>> 0;
      if (!noAssert) {
        checkOffset(offset, byteLength2, this.length);
      }
      let val = this[offset + --byteLength2];
      let mul3 = 1;
      while (byteLength2 > 0 && (mul3 *= 256)) {
        val += this[offset + --byteLength2] * mul3;
      }
      return val;
    };
    Buffer2.prototype.readUint8 = Buffer2.prototype.readUInt8 = function readUInt8(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert)
        checkOffset(offset, 1, this.length);
      return this[offset];
    };
    Buffer2.prototype.readUint16LE = Buffer2.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert)
        checkOffset(offset, 2, this.length);
      return this[offset] | this[offset + 1] << 8;
    };
    Buffer2.prototype.readUint16BE = Buffer2.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert)
        checkOffset(offset, 2, this.length);
      return this[offset] << 8 | this[offset + 1];
    };
    Buffer2.prototype.readUint32LE = Buffer2.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert)
        checkOffset(offset, 4, this.length);
      return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 16777216;
    };
    Buffer2.prototype.readUint32BE = Buffer2.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert)
        checkOffset(offset, 4, this.length);
      return this[offset] * 16777216 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
    };
    Buffer2.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE(offset) {
      offset = offset >>> 0;
      validateNumber(offset, "offset");
      const first = this[offset];
      const last = this[offset + 7];
      if (first === void 0 || last === void 0) {
        boundsError(offset, this.length - 8);
      }
      const lo2 = first + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 24;
      const hi = this[++offset] + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + last * 2 ** 24;
      return BigInt(lo2) + (BigInt(hi) << BigInt(32));
    });
    Buffer2.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE(offset) {
      offset = offset >>> 0;
      validateNumber(offset, "offset");
      const first = this[offset];
      const last = this[offset + 7];
      if (first === void 0 || last === void 0) {
        boundsError(offset, this.length - 8);
      }
      const hi = first * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + this[++offset];
      const lo2 = this[++offset] * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + last;
      return (BigInt(hi) << BigInt(32)) + BigInt(lo2);
    });
    Buffer2.prototype.readIntLE = function readIntLE(offset, byteLength2, noAssert) {
      offset = offset >>> 0;
      byteLength2 = byteLength2 >>> 0;
      if (!noAssert)
        checkOffset(offset, byteLength2, this.length);
      let val = this[offset];
      let mul3 = 1;
      let i2 = 0;
      while (++i2 < byteLength2 && (mul3 *= 256)) {
        val += this[offset + i2] * mul3;
      }
      mul3 *= 128;
      if (val >= mul3)
        val -= Math.pow(2, 8 * byteLength2);
      return val;
    };
    Buffer2.prototype.readIntBE = function readIntBE(offset, byteLength2, noAssert) {
      offset = offset >>> 0;
      byteLength2 = byteLength2 >>> 0;
      if (!noAssert)
        checkOffset(offset, byteLength2, this.length);
      let i2 = byteLength2;
      let mul3 = 1;
      let val = this[offset + --i2];
      while (i2 > 0 && (mul3 *= 256)) {
        val += this[offset + --i2] * mul3;
      }
      mul3 *= 128;
      if (val >= mul3)
        val -= Math.pow(2, 8 * byteLength2);
      return val;
    };
    Buffer2.prototype.readInt8 = function readInt8(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert)
        checkOffset(offset, 1, this.length);
      if (!(this[offset] & 128))
        return this[offset];
      return (255 - this[offset] + 1) * -1;
    };
    Buffer2.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert)
        checkOffset(offset, 2, this.length);
      const val = this[offset] | this[offset + 1] << 8;
      return val & 32768 ? val | 4294901760 : val;
    };
    Buffer2.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert)
        checkOffset(offset, 2, this.length);
      const val = this[offset + 1] | this[offset] << 8;
      return val & 32768 ? val | 4294901760 : val;
    };
    Buffer2.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert)
        checkOffset(offset, 4, this.length);
      return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
    };
    Buffer2.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert)
        checkOffset(offset, 4, this.length);
      return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
    };
    Buffer2.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE(offset) {
      offset = offset >>> 0;
      validateNumber(offset, "offset");
      const first = this[offset];
      const last = this[offset + 7];
      if (first === void 0 || last === void 0) {
        boundsError(offset, this.length - 8);
      }
      const val = this[offset + 4] + this[offset + 5] * 2 ** 8 + this[offset + 6] * 2 ** 16 + (last << 24);
      return (BigInt(val) << BigInt(32)) + BigInt(first + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 24);
    });
    Buffer2.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE(offset) {
      offset = offset >>> 0;
      validateNumber(offset, "offset");
      const first = this[offset];
      const last = this[offset + 7];
      if (first === void 0 || last === void 0) {
        boundsError(offset, this.length - 8);
      }
      const val = (first << 24) + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + this[++offset];
      return (BigInt(val) << BigInt(32)) + BigInt(this[++offset] * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + last);
    });
    Buffer2.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert)
        checkOffset(offset, 4, this.length);
      return ieee754.read(this, offset, true, 23, 4);
    };
    Buffer2.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert)
        checkOffset(offset, 4, this.length);
      return ieee754.read(this, offset, false, 23, 4);
    };
    Buffer2.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert)
        checkOffset(offset, 8, this.length);
      return ieee754.read(this, offset, true, 52, 8);
    };
    Buffer2.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert)
        checkOffset(offset, 8, this.length);
      return ieee754.read(this, offset, false, 52, 8);
    };
    function checkInt(buf, value2, offset, ext, max, min) {
      if (!Buffer2.isBuffer(buf))
        throw new TypeError('"buffer" argument must be a Buffer instance');
      if (value2 > max || value2 < min)
        throw new RangeError('"value" argument is out of bounds');
      if (offset + ext > buf.length)
        throw new RangeError("Index out of range");
    }
    Buffer2.prototype.writeUintLE = Buffer2.prototype.writeUIntLE = function writeUIntLE(value2, offset, byteLength2, noAssert) {
      value2 = +value2;
      offset = offset >>> 0;
      byteLength2 = byteLength2 >>> 0;
      if (!noAssert) {
        const maxBytes = Math.pow(2, 8 * byteLength2) - 1;
        checkInt(this, value2, offset, byteLength2, maxBytes, 0);
      }
      let mul3 = 1;
      let i2 = 0;
      this[offset] = value2 & 255;
      while (++i2 < byteLength2 && (mul3 *= 256)) {
        this[offset + i2] = value2 / mul3 & 255;
      }
      return offset + byteLength2;
    };
    Buffer2.prototype.writeUintBE = Buffer2.prototype.writeUIntBE = function writeUIntBE(value2, offset, byteLength2, noAssert) {
      value2 = +value2;
      offset = offset >>> 0;
      byteLength2 = byteLength2 >>> 0;
      if (!noAssert) {
        const maxBytes = Math.pow(2, 8 * byteLength2) - 1;
        checkInt(this, value2, offset, byteLength2, maxBytes, 0);
      }
      let i2 = byteLength2 - 1;
      let mul3 = 1;
      this[offset + i2] = value2 & 255;
      while (--i2 >= 0 && (mul3 *= 256)) {
        this[offset + i2] = value2 / mul3 & 255;
      }
      return offset + byteLength2;
    };
    Buffer2.prototype.writeUint8 = Buffer2.prototype.writeUInt8 = function writeUInt8(value2, offset, noAssert) {
      value2 = +value2;
      offset = offset >>> 0;
      if (!noAssert)
        checkInt(this, value2, offset, 1, 255, 0);
      this[offset] = value2 & 255;
      return offset + 1;
    };
    Buffer2.prototype.writeUint16LE = Buffer2.prototype.writeUInt16LE = function writeUInt16LE(value2, offset, noAssert) {
      value2 = +value2;
      offset = offset >>> 0;
      if (!noAssert)
        checkInt(this, value2, offset, 2, 65535, 0);
      this[offset] = value2 & 255;
      this[offset + 1] = value2 >>> 8;
      return offset + 2;
    };
    Buffer2.prototype.writeUint16BE = Buffer2.prototype.writeUInt16BE = function writeUInt16BE(value2, offset, noAssert) {
      value2 = +value2;
      offset = offset >>> 0;
      if (!noAssert)
        checkInt(this, value2, offset, 2, 65535, 0);
      this[offset] = value2 >>> 8;
      this[offset + 1] = value2 & 255;
      return offset + 2;
    };
    Buffer2.prototype.writeUint32LE = Buffer2.prototype.writeUInt32LE = function writeUInt32LE(value2, offset, noAssert) {
      value2 = +value2;
      offset = offset >>> 0;
      if (!noAssert)
        checkInt(this, value2, offset, 4, 4294967295, 0);
      this[offset + 3] = value2 >>> 24;
      this[offset + 2] = value2 >>> 16;
      this[offset + 1] = value2 >>> 8;
      this[offset] = value2 & 255;
      return offset + 4;
    };
    Buffer2.prototype.writeUint32BE = Buffer2.prototype.writeUInt32BE = function writeUInt32BE(value2, offset, noAssert) {
      value2 = +value2;
      offset = offset >>> 0;
      if (!noAssert)
        checkInt(this, value2, offset, 4, 4294967295, 0);
      this[offset] = value2 >>> 24;
      this[offset + 1] = value2 >>> 16;
      this[offset + 2] = value2 >>> 8;
      this[offset + 3] = value2 & 255;
      return offset + 4;
    };
    function wrtBigUInt64LE(buf, value2, offset, min, max) {
      checkIntBI(value2, min, max, buf, offset, 7);
      let lo2 = Number(value2 & BigInt(4294967295));
      buf[offset++] = lo2;
      lo2 = lo2 >> 8;
      buf[offset++] = lo2;
      lo2 = lo2 >> 8;
      buf[offset++] = lo2;
      lo2 = lo2 >> 8;
      buf[offset++] = lo2;
      let hi = Number(value2 >> BigInt(32) & BigInt(4294967295));
      buf[offset++] = hi;
      hi = hi >> 8;
      buf[offset++] = hi;
      hi = hi >> 8;
      buf[offset++] = hi;
      hi = hi >> 8;
      buf[offset++] = hi;
      return offset;
    }
    function wrtBigUInt64BE(buf, value2, offset, min, max) {
      checkIntBI(value2, min, max, buf, offset, 7);
      let lo2 = Number(value2 & BigInt(4294967295));
      buf[offset + 7] = lo2;
      lo2 = lo2 >> 8;
      buf[offset + 6] = lo2;
      lo2 = lo2 >> 8;
      buf[offset + 5] = lo2;
      lo2 = lo2 >> 8;
      buf[offset + 4] = lo2;
      let hi = Number(value2 >> BigInt(32) & BigInt(4294967295));
      buf[offset + 3] = hi;
      hi = hi >> 8;
      buf[offset + 2] = hi;
      hi = hi >> 8;
      buf[offset + 1] = hi;
      hi = hi >> 8;
      buf[offset] = hi;
      return offset + 8;
    }
    Buffer2.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE(value2, offset = 0) {
      return wrtBigUInt64LE(this, value2, offset, BigInt(0), BigInt("0xffffffffffffffff"));
    });
    Buffer2.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE(value2, offset = 0) {
      return wrtBigUInt64BE(this, value2, offset, BigInt(0), BigInt("0xffffffffffffffff"));
    });
    Buffer2.prototype.writeIntLE = function writeIntLE(value2, offset, byteLength2, noAssert) {
      value2 = +value2;
      offset = offset >>> 0;
      if (!noAssert) {
        const limit = Math.pow(2, 8 * byteLength2 - 1);
        checkInt(this, value2, offset, byteLength2, limit - 1, -limit);
      }
      let i2 = 0;
      let mul3 = 1;
      let sub = 0;
      this[offset] = value2 & 255;
      while (++i2 < byteLength2 && (mul3 *= 256)) {
        if (value2 < 0 && sub === 0 && this[offset + i2 - 1] !== 0) {
          sub = 1;
        }
        this[offset + i2] = (value2 / mul3 >> 0) - sub & 255;
      }
      return offset + byteLength2;
    };
    Buffer2.prototype.writeIntBE = function writeIntBE(value2, offset, byteLength2, noAssert) {
      value2 = +value2;
      offset = offset >>> 0;
      if (!noAssert) {
        const limit = Math.pow(2, 8 * byteLength2 - 1);
        checkInt(this, value2, offset, byteLength2, limit - 1, -limit);
      }
      let i2 = byteLength2 - 1;
      let mul3 = 1;
      let sub = 0;
      this[offset + i2] = value2 & 255;
      while (--i2 >= 0 && (mul3 *= 256)) {
        if (value2 < 0 && sub === 0 && this[offset + i2 + 1] !== 0) {
          sub = 1;
        }
        this[offset + i2] = (value2 / mul3 >> 0) - sub & 255;
      }
      return offset + byteLength2;
    };
    Buffer2.prototype.writeInt8 = function writeInt8(value2, offset, noAssert) {
      value2 = +value2;
      offset = offset >>> 0;
      if (!noAssert)
        checkInt(this, value2, offset, 1, 127, -128);
      if (value2 < 0)
        value2 = 255 + value2 + 1;
      this[offset] = value2 & 255;
      return offset + 1;
    };
    Buffer2.prototype.writeInt16LE = function writeInt16LE(value2, offset, noAssert) {
      value2 = +value2;
      offset = offset >>> 0;
      if (!noAssert)
        checkInt(this, value2, offset, 2, 32767, -32768);
      this[offset] = value2 & 255;
      this[offset + 1] = value2 >>> 8;
      return offset + 2;
    };
    Buffer2.prototype.writeInt16BE = function writeInt16BE(value2, offset, noAssert) {
      value2 = +value2;
      offset = offset >>> 0;
      if (!noAssert)
        checkInt(this, value2, offset, 2, 32767, -32768);
      this[offset] = value2 >>> 8;
      this[offset + 1] = value2 & 255;
      return offset + 2;
    };
    Buffer2.prototype.writeInt32LE = function writeInt32LE(value2, offset, noAssert) {
      value2 = +value2;
      offset = offset >>> 0;
      if (!noAssert)
        checkInt(this, value2, offset, 4, 2147483647, -2147483648);
      this[offset] = value2 & 255;
      this[offset + 1] = value2 >>> 8;
      this[offset + 2] = value2 >>> 16;
      this[offset + 3] = value2 >>> 24;
      return offset + 4;
    };
    Buffer2.prototype.writeInt32BE = function writeInt32BE(value2, offset, noAssert) {
      value2 = +value2;
      offset = offset >>> 0;
      if (!noAssert)
        checkInt(this, value2, offset, 4, 2147483647, -2147483648);
      if (value2 < 0)
        value2 = 4294967295 + value2 + 1;
      this[offset] = value2 >>> 24;
      this[offset + 1] = value2 >>> 16;
      this[offset + 2] = value2 >>> 8;
      this[offset + 3] = value2 & 255;
      return offset + 4;
    };
    Buffer2.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE(value2, offset = 0) {
      return wrtBigUInt64LE(this, value2, offset, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
    });
    Buffer2.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE(value2, offset = 0) {
      return wrtBigUInt64BE(this, value2, offset, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
    });
    function checkIEEE754(buf, value2, offset, ext, max, min) {
      if (offset + ext > buf.length)
        throw new RangeError("Index out of range");
      if (offset < 0)
        throw new RangeError("Index out of range");
    }
    function writeFloat(buf, value2, offset, littleEndian, noAssert) {
      value2 = +value2;
      offset = offset >>> 0;
      if (!noAssert) {
        checkIEEE754(buf, value2, offset, 4, 34028234663852886e22, -34028234663852886e22);
      }
      ieee754.write(buf, value2, offset, littleEndian, 23, 4);
      return offset + 4;
    }
    Buffer2.prototype.writeFloatLE = function writeFloatLE(value2, offset, noAssert) {
      return writeFloat(this, value2, offset, true, noAssert);
    };
    Buffer2.prototype.writeFloatBE = function writeFloatBE(value2, offset, noAssert) {
      return writeFloat(this, value2, offset, false, noAssert);
    };
    function writeDouble(buf, value2, offset, littleEndian, noAssert) {
      value2 = +value2;
      offset = offset >>> 0;
      if (!noAssert) {
        checkIEEE754(buf, value2, offset, 8, 17976931348623157e292, -17976931348623157e292);
      }
      ieee754.write(buf, value2, offset, littleEndian, 52, 8);
      return offset + 8;
    }
    Buffer2.prototype.writeDoubleLE = function writeDoubleLE(value2, offset, noAssert) {
      return writeDouble(this, value2, offset, true, noAssert);
    };
    Buffer2.prototype.writeDoubleBE = function writeDoubleBE(value2, offset, noAssert) {
      return writeDouble(this, value2, offset, false, noAssert);
    };
    Buffer2.prototype.copy = function copy(target, targetStart, start, end) {
      if (!Buffer2.isBuffer(target))
        throw new TypeError("argument should be a Buffer");
      if (!start)
        start = 0;
      if (!end && end !== 0)
        end = this.length;
      if (targetStart >= target.length)
        targetStart = target.length;
      if (!targetStart)
        targetStart = 0;
      if (end > 0 && end < start)
        end = start;
      if (end === start)
        return 0;
      if (target.length === 0 || this.length === 0)
        return 0;
      if (targetStart < 0) {
        throw new RangeError("targetStart out of bounds");
      }
      if (start < 0 || start >= this.length)
        throw new RangeError("Index out of range");
      if (end < 0)
        throw new RangeError("sourceEnd out of bounds");
      if (end > this.length)
        end = this.length;
      if (target.length - targetStart < end - start) {
        end = target.length - targetStart + start;
      }
      const len = end - start;
      if (this === target && typeof Uint8Array.prototype.copyWithin === "function") {
        this.copyWithin(targetStart, start, end);
      } else {
        Uint8Array.prototype.set.call(target, this.subarray(start, end), targetStart);
      }
      return len;
    };
    Buffer2.prototype.fill = function fill(val, start, end, encoding) {
      if (typeof val === "string") {
        if (typeof start === "string") {
          encoding = start;
          start = 0;
          end = this.length;
        } else if (typeof end === "string") {
          encoding = end;
          end = this.length;
        }
        if (encoding !== void 0 && typeof encoding !== "string") {
          throw new TypeError("encoding must be a string");
        }
        if (typeof encoding === "string" && !Buffer2.isEncoding(encoding)) {
          throw new TypeError("Unknown encoding: " + encoding);
        }
        if (val.length === 1) {
          const code = val.charCodeAt(0);
          if (encoding === "utf8" && code < 128 || encoding === "latin1") {
            val = code;
          }
        }
      } else if (typeof val === "number") {
        val = val & 255;
      } else if (typeof val === "boolean") {
        val = Number(val);
      }
      if (start < 0 || this.length < start || this.length < end) {
        throw new RangeError("Out of range index");
      }
      if (end <= start) {
        return this;
      }
      start = start >>> 0;
      end = end === void 0 ? this.length : end >>> 0;
      if (!val)
        val = 0;
      let i2;
      if (typeof val === "number") {
        for (i2 = start; i2 < end; ++i2) {
          this[i2] = val;
        }
      } else {
        const bytes = Buffer2.isBuffer(val) ? val : Buffer2.from(val, encoding);
        const len = bytes.length;
        if (len === 0) {
          throw new TypeError('The value "' + val + '" is invalid for argument "value"');
        }
        for (i2 = 0; i2 < end - start; ++i2) {
          this[i2 + start] = bytes[i2 % len];
        }
      }
      return this;
    };
    var errors = {};
    function E3(sym, getMessage, Base) {
      errors[sym] = class NodeError extends Base {
        constructor() {
          super();
          Object.defineProperty(this, "message", {
            value: getMessage.apply(this, arguments),
            writable: true,
            configurable: true
          });
          this.name = `${this.name} [${sym}]`;
          this.stack;
          delete this.name;
        }
        get code() {
          return sym;
        }
        set code(value2) {
          Object.defineProperty(this, "code", {
            configurable: true,
            enumerable: true,
            value: value2,
            writable: true
          });
        }
        toString() {
          return `${this.name} [${sym}]: ${this.message}`;
        }
      };
    }
    E3("ERR_BUFFER_OUT_OF_BOUNDS", function(name2) {
      if (name2) {
        return `${name2} is outside of buffer bounds`;
      }
      return "Attempt to access memory outside buffer bounds";
    }, RangeError);
    E3("ERR_INVALID_ARG_TYPE", function(name2, actual) {
      return `The "${name2}" argument must be of type number. Received type ${typeof actual}`;
    }, TypeError);
    E3("ERR_OUT_OF_RANGE", function(str, range, input) {
      let msg = `The value of "${str}" is out of range.`;
      let received = input;
      if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {
        received = addNumericalSeparator(String(input));
      } else if (typeof input === "bigint") {
        received = String(input);
        if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) {
          received = addNumericalSeparator(received);
        }
        received += "n";
      }
      msg += ` It must be ${range}. Received ${received}`;
      return msg;
    }, RangeError);
    function addNumericalSeparator(val) {
      let res = "";
      let i2 = val.length;
      const start = val[0] === "-" ? 1 : 0;
      for (; i2 >= start + 4; i2 -= 3) {
        res = `_${val.slice(i2 - 3, i2)}${res}`;
      }
      return `${val.slice(0, i2)}${res}`;
    }
    function checkBounds(buf, offset, byteLength2) {
      validateNumber(offset, "offset");
      if (buf[offset] === void 0 || buf[offset + byteLength2] === void 0) {
        boundsError(offset, buf.length - (byteLength2 + 1));
      }
    }
    function checkIntBI(value2, min, max, buf, offset, byteLength2) {
      if (value2 > max || value2 < min) {
        const n = typeof min === "bigint" ? "n" : "";
        let range;
        if (byteLength2 > 3) {
          if (min === 0 || min === BigInt(0)) {
            range = `>= 0${n} and < 2${n} ** ${(byteLength2 + 1) * 8}${n}`;
          } else {
            range = `>= -(2${n} ** ${(byteLength2 + 1) * 8 - 1}${n}) and < 2 ** ${(byteLength2 + 1) * 8 - 1}${n}`;
          }
        } else {
          range = `>= ${min}${n} and <= ${max}${n}`;
        }
        throw new errors.ERR_OUT_OF_RANGE("value", range, value2);
      }
      checkBounds(buf, offset, byteLength2);
    }
    function validateNumber(value2, name2) {
      if (typeof value2 !== "number") {
        throw new errors.ERR_INVALID_ARG_TYPE(name2, "number", value2);
      }
    }
    function boundsError(value2, length, type) {
      if (Math.floor(value2) !== value2) {
        validateNumber(value2, type);
        throw new errors.ERR_OUT_OF_RANGE(type || "offset", "an integer", value2);
      }
      if (length < 0) {
        throw new errors.ERR_BUFFER_OUT_OF_BOUNDS();
      }
      throw new errors.ERR_OUT_OF_RANGE(type || "offset", `>= ${type ? 1 : 0} and <= ${length}`, value2);
    }
    var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;
    function base64clean(str) {
      str = str.split("=")[0];
      str = str.trim().replace(INVALID_BASE64_RE, "");
      if (str.length < 2)
        return "";
      while (str.length % 4 !== 0) {
        str = str + "=";
      }
      return str;
    }
    function utf8ToBytes(string, units) {
      units = units || Infinity;
      let codePoint;
      const length = string.length;
      let leadSurrogate = null;
      const bytes = [];
      for (let i2 = 0; i2 < length; ++i2) {
        codePoint = string.charCodeAt(i2);
        if (codePoint > 55295 && codePoint < 57344) {
          if (!leadSurrogate) {
            if (codePoint > 56319) {
              if ((units -= 3) > -1)
                bytes.push(239, 191, 189);
              continue;
            } else if (i2 + 1 === length) {
              if ((units -= 3) > -1)
                bytes.push(239, 191, 189);
              continue;
            }
            leadSurrogate = codePoint;
            continue;
          }
          if (codePoint < 56320) {
            if ((units -= 3) > -1)
              bytes.push(239, 191, 189);
            leadSurrogate = codePoint;
            continue;
          }
          codePoint = (leadSurrogate - 55296 << 10 | codePoint - 56320) + 65536;
        } else if (leadSurrogate) {
          if ((units -= 3) > -1)
            bytes.push(239, 191, 189);
        }
        leadSurrogate = null;
        if (codePoint < 128) {
          if ((units -= 1) < 0)
            break;
          bytes.push(codePoint);
        } else if (codePoint < 2048) {
          if ((units -= 2) < 0)
            break;
          bytes.push(codePoint >> 6 | 192, codePoint & 63 | 128);
        } else if (codePoint < 65536) {
          if ((units -= 3) < 0)
            break;
          bytes.push(codePoint >> 12 | 224, codePoint >> 6 & 63 | 128, codePoint & 63 | 128);
        } else if (codePoint < 1114112) {
          if ((units -= 4) < 0)
            break;
          bytes.push(codePoint >> 18 | 240, codePoint >> 12 & 63 | 128, codePoint >> 6 & 63 | 128, codePoint & 63 | 128);
        } else {
          throw new Error("Invalid code point");
        }
      }
      return bytes;
    }
    function asciiToBytes(str) {
      const byteArray = [];
      for (let i2 = 0; i2 < str.length; ++i2) {
        byteArray.push(str.charCodeAt(i2) & 255);
      }
      return byteArray;
    }
    function utf16leToBytes(str, units) {
      let c2, hi, lo2;
      const byteArray = [];
      for (let i2 = 0; i2 < str.length; ++i2) {
        if ((units -= 2) < 0)
          break;
        c2 = str.charCodeAt(i2);
        hi = c2 >> 8;
        lo2 = c2 % 256;
        byteArray.push(lo2);
        byteArray.push(hi);
      }
      return byteArray;
    }
    function base64ToBytes(str) {
      return base64.toByteArray(base64clean(str));
    }
    function blitBuffer(src, dst, offset, length) {
      let i2;
      for (i2 = 0; i2 < length; ++i2) {
        if (i2 + offset >= dst.length || i2 >= src.length)
          break;
        dst[i2 + offset] = src[i2];
      }
      return i2;
    }
    function isInstance(obj, type) {
      return obj instanceof type || obj != null && obj.constructor != null && obj.constructor.name != null && obj.constructor.name === type.name;
    }
    function numberIsNaN(obj) {
      return obj !== obj;
    }
    var hexSliceLookupTable = function() {
      const alphabet = "0123456789abcdef";
      const table = new Array(256);
      for (let i2 = 0; i2 < 16; ++i2) {
        const i16 = i2 * 16;
        for (let j3 = 0; j3 < 16; ++j3) {
          table[i16 + j3] = alphabet[i2] + alphabet[j3];
        }
      }
      return table;
    }();
    function defineBigIntMethod(fn) {
      return typeof BigInt === "undefined" ? BufferBigIntNotDefined : fn;
    }
    function BufferBigIntNotDefined() {
      throw new Error("BigInt not supported");
    }
  }
});

// node_modules/events/events.js
var require_events = __commonJS({
  "node_modules/events/events.js"(exports, module) {
    init_define_process();
    "use strict";
    var R3 = typeof Reflect === "object" ? Reflect : null;
    var ReflectApply = R3 && typeof R3.apply === "function" ? R3.apply : function ReflectApply2(target, receiver, args) {
      return Function.prototype.apply.call(target, receiver, args);
    };
    var ReflectOwnKeys;
    if (R3 && typeof R3.ownKeys === "function") {
      ReflectOwnKeys = R3.ownKeys;
    } else if (Object.getOwnPropertySymbols) {
      ReflectOwnKeys = function ReflectOwnKeys2(target) {
        return Object.getOwnPropertyNames(target).concat(Object.getOwnPropertySymbols(target));
      };
    } else {
      ReflectOwnKeys = function ReflectOwnKeys2(target) {
        return Object.getOwnPropertyNames(target);
      };
    }
    function ProcessEmitWarning(warning) {
      if (console && console.warn)
        console.warn(warning);
    }
    var NumberIsNaN = Number.isNaN || function NumberIsNaN2(value2) {
      return value2 !== value2;
    };
    function EventEmitter() {
      EventEmitter.init.call(this);
    }
    module.exports = EventEmitter;
    module.exports.once = once;
    EventEmitter.EventEmitter = EventEmitter;
    EventEmitter.prototype._events = void 0;
    EventEmitter.prototype._eventsCount = 0;
    EventEmitter.prototype._maxListeners = void 0;
    var defaultMaxListeners = 10;
    function checkListener(listener) {
      if (typeof listener !== "function") {
        throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
      }
    }
    Object.defineProperty(EventEmitter, "defaultMaxListeners", {
      enumerable: true,
      get: function() {
        return defaultMaxListeners;
      },
      set: function(arg) {
        if (typeof arg !== "number" || arg < 0 || NumberIsNaN(arg)) {
          throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + ".");
        }
        defaultMaxListeners = arg;
      }
    });
    EventEmitter.init = function() {
      if (this._events === void 0 || this._events === Object.getPrototypeOf(this)._events) {
        this._events = Object.create(null);
        this._eventsCount = 0;
      }
      this._maxListeners = this._maxListeners || void 0;
    };
    EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
      if (typeof n !== "number" || n < 0 || NumberIsNaN(n)) {
        throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + ".");
      }
      this._maxListeners = n;
      return this;
    };
    function _getMaxListeners(that) {
      if (that._maxListeners === void 0)
        return EventEmitter.defaultMaxListeners;
      return that._maxListeners;
    }
    EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
      return _getMaxListeners(this);
    };
    EventEmitter.prototype.emit = function emit(type) {
      var args = [];
      for (var i2 = 1; i2 < arguments.length; i2++)
        args.push(arguments[i2]);
      var doError = type === "error";
      var events = this._events;
      if (events !== void 0)
        doError = doError && events.error === void 0;
      else if (!doError)
        return false;
      if (doError) {
        var er2;
        if (args.length > 0)
          er2 = args[0];
        if (er2 instanceof Error) {
          throw er2;
        }
        var err = new Error("Unhandled error." + (er2 ? " (" + er2.message + ")" : ""));
        err.context = er2;
        throw err;
      }
      var handler = events[type];
      if (handler === void 0)
        return false;
      if (typeof handler === "function") {
        ReflectApply(handler, this, args);
      } else {
        var len = handler.length;
        var listeners = arrayClone(handler, len);
        for (var i2 = 0; i2 < len; ++i2)
          ReflectApply(listeners[i2], this, args);
      }
      return true;
    };
    function _addListener(target, type, listener, prepend) {
      var m3;
      var events;
      var existing;
      checkListener(listener);
      events = target._events;
      if (events === void 0) {
        events = target._events = Object.create(null);
        target._eventsCount = 0;
      } else {
        if (events.newListener !== void 0) {
          target.emit("newListener", type, listener.listener ? listener.listener : listener);
          events = target._events;
        }
        existing = events[type];
      }
      if (existing === void 0) {
        existing = events[type] = listener;
        ++target._eventsCount;
      } else {
        if (typeof existing === "function") {
          existing = events[type] = prepend ? [listener, existing] : [existing, listener];
        } else if (prepend) {
          existing.unshift(listener);
        } else {
          existing.push(listener);
        }
        m3 = _getMaxListeners(target);
        if (m3 > 0 && existing.length > m3 && !existing.warned) {
          existing.warned = true;
          var w3 = new Error("Possible EventEmitter memory leak detected. " + existing.length + " " + String(type) + " listeners added. Use emitter.setMaxListeners() to increase limit");
          w3.name = "MaxListenersExceededWarning";
          w3.emitter = target;
          w3.type = type;
          w3.count = existing.length;
          ProcessEmitWarning(w3);
        }
      }
      return target;
    }
    EventEmitter.prototype.addListener = function addListener(type, listener) {
      return _addListener(this, type, listener, false);
    };
    EventEmitter.prototype.on = EventEmitter.prototype.addListener;
    EventEmitter.prototype.prependListener = function prependListener(type, listener) {
      return _addListener(this, type, listener, true);
    };
    function onceWrapper() {
      if (!this.fired) {
        this.target.removeListener(this.type, this.wrapFn);
        this.fired = true;
        if (arguments.length === 0)
          return this.listener.call(this.target);
        return this.listener.apply(this.target, arguments);
      }
    }
    function _onceWrap(target, type, listener) {
      var state = { fired: false, wrapFn: void 0, target, type, listener };
      var wrapped = onceWrapper.bind(state);
      wrapped.listener = listener;
      state.wrapFn = wrapped;
      return wrapped;
    }
    EventEmitter.prototype.once = function once2(type, listener) {
      checkListener(listener);
      this.on(type, _onceWrap(this, type, listener));
      return this;
    };
    EventEmitter.prototype.prependOnceListener = function prependOnceListener(type, listener) {
      checkListener(listener);
      this.prependListener(type, _onceWrap(this, type, listener));
      return this;
    };
    EventEmitter.prototype.removeListener = function removeListener(type, listener) {
      var list, events, position, i2, originalListener;
      checkListener(listener);
      events = this._events;
      if (events === void 0)
        return this;
      list = events[type];
      if (list === void 0)
        return this;
      if (list === listener || list.listener === listener) {
        if (--this._eventsCount === 0)
          this._events = Object.create(null);
        else {
          delete events[type];
          if (events.removeListener)
            this.emit("removeListener", type, list.listener || listener);
        }
      } else if (typeof list !== "function") {
        position = -1;
        for (i2 = list.length - 1; i2 >= 0; i2--) {
          if (list[i2] === listener || list[i2].listener === listener) {
            originalListener = list[i2].listener;
            position = i2;
            break;
          }
        }
        if (position < 0)
          return this;
        if (position === 0)
          list.shift();
        else {
          spliceOne(list, position);
        }
        if (list.length === 1)
          events[type] = list[0];
        if (events.removeListener !== void 0)
          this.emit("removeListener", type, originalListener || listener);
      }
      return this;
    };
    EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
    EventEmitter.prototype.removeAllListeners = function removeAllListeners(type) {
      var listeners, events, i2;
      events = this._events;
      if (events === void 0)
        return this;
      if (events.removeListener === void 0) {
        if (arguments.length === 0) {
          this._events = Object.create(null);
          this._eventsCount = 0;
        } else if (events[type] !== void 0) {
          if (--this._eventsCount === 0)
            this._events = Object.create(null);
          else
            delete events[type];
        }
        return this;
      }
      if (arguments.length === 0) {
        var keys = Object.keys(events);
        var key2;
        for (i2 = 0; i2 < keys.length; ++i2) {
          key2 = keys[i2];
          if (key2 === "removeListener")
            continue;
          this.removeAllListeners(key2);
        }
        this.removeAllListeners("removeListener");
        this._events = Object.create(null);
        this._eventsCount = 0;
        return this;
      }
      listeners = events[type];
      if (typeof listeners === "function") {
        this.removeListener(type, listeners);
      } else if (listeners !== void 0) {
        for (i2 = listeners.length - 1; i2 >= 0; i2--) {
          this.removeListener(type, listeners[i2]);
        }
      }
      return this;
    };
    function _listeners(target, type, unwrap) {
      var events = target._events;
      if (events === void 0)
        return [];
      var evlistener = events[type];
      if (evlistener === void 0)
        return [];
      if (typeof evlistener === "function")
        return unwrap ? [evlistener.listener || evlistener] : [evlistener];
      return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
    }
    EventEmitter.prototype.listeners = function listeners(type) {
      return _listeners(this, type, true);
    };
    EventEmitter.prototype.rawListeners = function rawListeners(type) {
      return _listeners(this, type, false);
    };
    EventEmitter.listenerCount = function(emitter, type) {
      if (typeof emitter.listenerCount === "function") {
        return emitter.listenerCount(type);
      } else {
        return listenerCount.call(emitter, type);
      }
    };
    EventEmitter.prototype.listenerCount = listenerCount;
    function listenerCount(type) {
      var events = this._events;
      if (events !== void 0) {
        var evlistener = events[type];
        if (typeof evlistener === "function") {
          return 1;
        } else if (evlistener !== void 0) {
          return evlistener.length;
        }
      }
      return 0;
    }
    EventEmitter.prototype.eventNames = function eventNames() {
      return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
    };
    function arrayClone(arr, n) {
      var copy = new Array(n);
      for (var i2 = 0; i2 < n; ++i2)
        copy[i2] = arr[i2];
      return copy;
    }
    function spliceOne(list, index) {
      for (; index + 1 < list.length; index++)
        list[index] = list[index + 1];
      list.pop();
    }
    function unwrapListeners(arr) {
      var ret = new Array(arr.length);
      for (var i2 = 0; i2 < ret.length; ++i2) {
        ret[i2] = arr[i2].listener || arr[i2];
      }
      return ret;
    }
    function once(emitter, name2) {
      return new Promise(function(resolve, reject) {
        function errorListener(err) {
          emitter.removeListener(name2, resolver);
          reject(err);
        }
        function resolver() {
          if (typeof emitter.removeListener === "function") {
            emitter.removeListener("error", errorListener);
          }
          resolve([].slice.call(arguments));
        }
        ;
        eventTargetAgnosticAddListener(emitter, name2, resolver, { once: true });
        if (name2 !== "error") {
          addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });
        }
      });
    }
    function addErrorHandlerIfEventEmitter(emitter, handler, flags) {
      if (typeof emitter.on === "function") {
        eventTargetAgnosticAddListener(emitter, "error", handler, flags);
      }
    }
    function eventTargetAgnosticAddListener(emitter, name2, listener, flags) {
      if (typeof emitter.on === "function") {
        if (flags.once) {
          emitter.once(name2, listener);
        } else {
          emitter.on(name2, listener);
        }
      } else if (typeof emitter.addEventListener === "function") {
        emitter.addEventListener(name2, function wrapListener(arg) {
          if (flags.once) {
            emitter.removeEventListener(name2, wrapListener);
          }
          listener(arg);
        });
      } else {
        throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof emitter);
      }
    }
  }
});

// node_modules/readable-stream/lib/internal/streams/stream-browser.js
var require_stream_browser = __commonJS({
  "node_modules/readable-stream/lib/internal/streams/stream-browser.js"(exports, module) {
    init_define_process();
    module.exports = require_events().EventEmitter;
  }
});

// node_modules/buffer/index.js
var require_buffer2 = __commonJS({
  "node_modules/buffer/index.js"(exports) {
    init_define_process();
    "use strict";
    var base64 = require_base64_js();
    var ieee754 = require_ieee754();
    var customInspectSymbol = typeof Symbol === "function" && typeof Symbol["for"] === "function" ? Symbol["for"]("nodejs.util.inspect.custom") : null;
    exports.Buffer = Buffer2;
    exports.SlowBuffer = SlowBuffer;
    exports.INSPECT_MAX_BYTES = 50;
    var K_MAX_LENGTH = 2147483647;
    exports.kMaxLength = K_MAX_LENGTH;
    Buffer2.TYPED_ARRAY_SUPPORT = typedArraySupport();
    if (!Buffer2.TYPED_ARRAY_SUPPORT && typeof console !== "undefined" && typeof console.error === "function") {
      console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support.");
    }
    function typedArraySupport() {
      try {
        var arr = new Uint8Array(1);
        var proto = { foo: function() {
          return 42;
        } };
        Object.setPrototypeOf(proto, Uint8Array.prototype);
        Object.setPrototypeOf(arr, proto);
        return arr.foo() === 42;
      } catch (e) {
        return false;
      }
    }
    Object.defineProperty(Buffer2.prototype, "parent", {
      enumerable: true,
      get: function() {
        if (!Buffer2.isBuffer(this))
          return void 0;
        return this.buffer;
      }
    });
    Object.defineProperty(Buffer2.prototype, "offset", {
      enumerable: true,
      get: function() {
        if (!Buffer2.isBuffer(this))
          return void 0;
        return this.byteOffset;
      }
    });
    function createBuffer(length) {
      if (length > K_MAX_LENGTH) {
        throw new RangeError('The value "' + length + '" is invalid for option "size"');
      }
      var buf = new Uint8Array(length);
      Object.setPrototypeOf(buf, Buffer2.prototype);
      return buf;
    }
    function Buffer2(arg, encodingOrOffset, length) {
      if (typeof arg === "number") {
        if (typeof encodingOrOffset === "string") {
          throw new TypeError('The "string" argument must be of type string. Received type number');
        }
        return allocUnsafe(arg);
      }
      return from(arg, encodingOrOffset, length);
    }
    Buffer2.poolSize = 8192;
    function from(value2, encodingOrOffset, length) {
      if (typeof value2 === "string") {
        return fromString(value2, encodingOrOffset);
      }
      if (ArrayBuffer.isView(value2)) {
        return fromArrayView(value2);
      }
      if (value2 == null) {
        throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value2);
      }
      if (isInstance(value2, ArrayBuffer) || value2 && isInstance(value2.buffer, ArrayBuffer)) {
        return fromArrayBuffer(value2, encodingOrOffset, length);
      }
      if (typeof SharedArrayBuffer !== "undefined" && (isInstance(value2, SharedArrayBuffer) || value2 && isInstance(value2.buffer, SharedArrayBuffer))) {
        return fromArrayBuffer(value2, encodingOrOffset, length);
      }
      if (typeof value2 === "number") {
        throw new TypeError('The "value" argument must not be of type number. Received type number');
      }
      var valueOf = value2.valueOf && value2.valueOf();
      if (valueOf != null && valueOf !== value2) {
        return Buffer2.from(valueOf, encodingOrOffset, length);
      }
      var b2 = fromObject(value2);
      if (b2)
        return b2;
      if (typeof Symbol !== "undefined" && Symbol.toPrimitive != null && typeof value2[Symbol.toPrimitive] === "function") {
        return Buffer2.from(value2[Symbol.toPrimitive]("string"), encodingOrOffset, length);
      }
      throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value2);
    }
    Buffer2.from = function(value2, encodingOrOffset, length) {
      return from(value2, encodingOrOffset, length);
    };
    Object.setPrototypeOf(Buffer2.prototype, Uint8Array.prototype);
    Object.setPrototypeOf(Buffer2, Uint8Array);
    function assertSize(size) {
      if (typeof size !== "number") {
        throw new TypeError('"size" argument must be of type number');
      } else if (size < 0) {
        throw new RangeError('The value "' + size + '" is invalid for option "size"');
      }
    }
    function alloc(size, fill, encoding) {
      assertSize(size);
      if (size <= 0) {
        return createBuffer(size);
      }
      if (fill !== void 0) {
        return typeof encoding === "string" ? createBuffer(size).fill(fill, encoding) : createBuffer(size).fill(fill);
      }
      return createBuffer(size);
    }
    Buffer2.alloc = function(size, fill, encoding) {
      return alloc(size, fill, encoding);
    };
    function allocUnsafe(size) {
      assertSize(size);
      return createBuffer(size < 0 ? 0 : checked(size) | 0);
    }
    Buffer2.allocUnsafe = function(size) {
      return allocUnsafe(size);
    };
    Buffer2.allocUnsafeSlow = function(size) {
      return allocUnsafe(size);
    };
    function fromString(string, encoding) {
      if (typeof encoding !== "string" || encoding === "") {
        encoding = "utf8";
      }
      if (!Buffer2.isEncoding(encoding)) {
        throw new TypeError("Unknown encoding: " + encoding);
      }
      var length = byteLength(string, encoding) | 0;
      var buf = createBuffer(length);
      var actual = buf.write(string, encoding);
      if (actual !== length) {
        buf = buf.slice(0, actual);
      }
      return buf;
    }
    function fromArrayLike(array) {
      var length = array.length < 0 ? 0 : checked(array.length) | 0;
      var buf = createBuffer(length);
      for (var i2 = 0; i2 < length; i2 += 1) {
        buf[i2] = array[i2] & 255;
      }
      return buf;
    }
    function fromArrayView(arrayView) {
      if (isInstance(arrayView, Uint8Array)) {
        var copy = new Uint8Array(arrayView);
        return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength);
      }
      return fromArrayLike(arrayView);
    }
    function fromArrayBuffer(array, byteOffset, length) {
      if (byteOffset < 0 || array.byteLength < byteOffset) {
        throw new RangeError('"offset" is outside of buffer bounds');
      }
      if (array.byteLength < byteOffset + (length || 0)) {
        throw new RangeError('"length" is outside of buffer bounds');
      }
      var buf;
      if (byteOffset === void 0 && length === void 0) {
        buf = new Uint8Array(array);
      } else if (length === void 0) {
        buf = new Uint8Array(array, byteOffset);
      } else {
        buf = new Uint8Array(array, byteOffset, length);
      }
      Object.setPrototypeOf(buf, Buffer2.prototype);
      return buf;
    }
    function fromObject(obj) {
      if (Buffer2.isBuffer(obj)) {
        var len = checked(obj.length) | 0;
        var buf = createBuffer(len);
        if (buf.length === 0) {
          return buf;
        }
        obj.copy(buf, 0, 0, len);
        return buf;
      }
      if (obj.length !== void 0) {
        if (typeof obj.length !== "number" || numberIsNaN(obj.length)) {
          return createBuffer(0);
        }
        return fromArrayLike(obj);
      }
      if (obj.type === "Buffer" && Array.isArray(obj.data)) {
        return fromArrayLike(obj.data);
      }
    }
    function checked(length) {
      if (length >= K_MAX_LENGTH) {
        throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + K_MAX_LENGTH.toString(16) + " bytes");
      }
      return length | 0;
    }
    function SlowBuffer(length) {
      if (+length != length) {
        length = 0;
      }
      return Buffer2.alloc(+length);
    }
    Buffer2.isBuffer = function isBuffer(b2) {
      return b2 != null && b2._isBuffer === true && b2 !== Buffer2.prototype;
    };
    Buffer2.compare = function compare(a, b2) {
      if (isInstance(a, Uint8Array))
        a = Buffer2.from(a, a.offset, a.byteLength);
      if (isInstance(b2, Uint8Array))
        b2 = Buffer2.from(b2, b2.offset, b2.byteLength);
      if (!Buffer2.isBuffer(a) || !Buffer2.isBuffer(b2)) {
        throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');
      }
      if (a === b2)
        return 0;
      var x4 = a.length;
      var y2 = b2.length;
      for (var i2 = 0, len = Math.min(x4, y2); i2 < len; ++i2) {
        if (a[i2] !== b2[i2]) {
          x4 = a[i2];
          y2 = b2[i2];
          break;
        }
      }
      if (x4 < y2)
        return -1;
      if (y2 < x4)
        return 1;
      return 0;
    };
    Buffer2.isEncoding = function isEncoding(encoding) {
      switch (String(encoding).toLowerCase()) {
        case "hex":
        case "utf8":
        case "utf-8":
        case "ascii":
        case "latin1":
        case "binary":
        case "base64":
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
          return true;
        default:
          return false;
      }
    };
    Buffer2.concat = function concat2(list, length) {
      if (!Array.isArray(list)) {
        throw new TypeError('"list" argument must be an Array of Buffers');
      }
      if (list.length === 0) {
        return Buffer2.alloc(0);
      }
      var i2;
      if (length === void 0) {
        length = 0;
        for (i2 = 0; i2 < list.length; ++i2) {
          length += list[i2].length;
        }
      }
      var buffer = Buffer2.allocUnsafe(length);
      var pos = 0;
      for (i2 = 0; i2 < list.length; ++i2) {
        var buf = list[i2];
        if (isInstance(buf, Uint8Array)) {
          if (pos + buf.length > buffer.length) {
            Buffer2.from(buf).copy(buffer, pos);
          } else {
            Uint8Array.prototype.set.call(buffer, buf, pos);
          }
        } else if (!Buffer2.isBuffer(buf)) {
          throw new TypeError('"list" argument must be an Array of Buffers');
        } else {
          buf.copy(buffer, pos);
        }
        pos += buf.length;
      }
      return buffer;
    };
    function byteLength(string, encoding) {
      if (Buffer2.isBuffer(string)) {
        return string.length;
      }
      if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {
        return string.byteLength;
      }
      if (typeof string !== "string") {
        throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' + typeof string);
      }
      var len = string.length;
      var mustMatch = arguments.length > 2 && arguments[2] === true;
      if (!mustMatch && len === 0)
        return 0;
      var loweredCase = false;
      for (; ; ) {
        switch (encoding) {
          case "ascii":
          case "latin1":
          case "binary":
            return len;
          case "utf8":
          case "utf-8":
            return utf8ToBytes(string).length;
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
            return len * 2;
          case "hex":
            return len >>> 1;
          case "base64":
            return base64ToBytes(string).length;
          default:
            if (loweredCase) {
              return mustMatch ? -1 : utf8ToBytes(string).length;
            }
            encoding = ("" + encoding).toLowerCase();
            loweredCase = true;
        }
      }
    }
    Buffer2.byteLength = byteLength;
    function slowToString(encoding, start, end) {
      var loweredCase = false;
      if (start === void 0 || start < 0) {
        start = 0;
      }
      if (start > this.length) {
        return "";
      }
      if (end === void 0 || end > this.length) {
        end = this.length;
      }
      if (end <= 0) {
        return "";
      }
      end >>>= 0;
      start >>>= 0;
      if (end <= start) {
        return "";
      }
      if (!encoding)
        encoding = "utf8";
      while (true) {
        switch (encoding) {
          case "hex":
            return hexSlice(this, start, end);
          case "utf8":
          case "utf-8":
            return utf8Slice(this, start, end);
          case "ascii":
            return asciiSlice(this, start, end);
          case "latin1":
          case "binary":
            return latin1Slice(this, start, end);
          case "base64":
            return base64Slice(this, start, end);
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
            return utf16leSlice(this, start, end);
          default:
            if (loweredCase)
              throw new TypeError("Unknown encoding: " + encoding);
            encoding = (encoding + "").toLowerCase();
            loweredCase = true;
        }
      }
    }
    Buffer2.prototype._isBuffer = true;
    function swap(b2, n, m3) {
      var i2 = b2[n];
      b2[n] = b2[m3];
      b2[m3] = i2;
    }
    Buffer2.prototype.swap16 = function swap16() {
      var len = this.length;
      if (len % 2 !== 0) {
        throw new RangeError("Buffer size must be a multiple of 16-bits");
      }
      for (var i2 = 0; i2 < len; i2 += 2) {
        swap(this, i2, i2 + 1);
      }
      return this;
    };
    Buffer2.prototype.swap32 = function swap32() {
      var len = this.length;
      if (len % 4 !== 0) {
        throw new RangeError("Buffer size must be a multiple of 32-bits");
      }
      for (var i2 = 0; i2 < len; i2 += 4) {
        swap(this, i2, i2 + 3);
        swap(this, i2 + 1, i2 + 2);
      }
      return this;
    };
    Buffer2.prototype.swap64 = function swap64() {
      var len = this.length;
      if (len % 8 !== 0) {
        throw new RangeError("Buffer size must be a multiple of 64-bits");
      }
      for (var i2 = 0; i2 < len; i2 += 8) {
        swap(this, i2, i2 + 7);
        swap(this, i2 + 1, i2 + 6);
        swap(this, i2 + 2, i2 + 5);
        swap(this, i2 + 3, i2 + 4);
      }
      return this;
    };
    Buffer2.prototype.toString = function toString() {
      var length = this.length;
      if (length === 0)
        return "";
      if (arguments.length === 0)
        return utf8Slice(this, 0, length);
      return slowToString.apply(this, arguments);
    };
    Buffer2.prototype.toLocaleString = Buffer2.prototype.toString;
    Buffer2.prototype.equals = function equals(b2) {
      if (!Buffer2.isBuffer(b2))
        throw new TypeError("Argument must be a Buffer");
      if (this === b2)
        return true;
      return Buffer2.compare(this, b2) === 0;
    };
    Buffer2.prototype.inspect = function inspect4() {
      var str = "";
      var max = exports.INSPECT_MAX_BYTES;
      str = this.toString("hex", 0, max).replace(/(.{2})/g, "$1 ").trim();
      if (this.length > max)
        str += " ... ";
      return "<Buffer " + str + ">";
    };
    if (customInspectSymbol) {
      Buffer2.prototype[customInspectSymbol] = Buffer2.prototype.inspect;
    }
    Buffer2.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
      if (isInstance(target, Uint8Array)) {
        target = Buffer2.from(target, target.offset, target.byteLength);
      }
      if (!Buffer2.isBuffer(target)) {
        throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type ' + typeof target);
      }
      if (start === void 0) {
        start = 0;
      }
      if (end === void 0) {
        end = target ? target.length : 0;
      }
      if (thisStart === void 0) {
        thisStart = 0;
      }
      if (thisEnd === void 0) {
        thisEnd = this.length;
      }
      if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
        throw new RangeError("out of range index");
      }
      if (thisStart >= thisEnd && start >= end) {
        return 0;
      }
      if (thisStart >= thisEnd) {
        return -1;
      }
      if (start >= end) {
        return 1;
      }
      start >>>= 0;
      end >>>= 0;
      thisStart >>>= 0;
      thisEnd >>>= 0;
      if (this === target)
        return 0;
      var x4 = thisEnd - thisStart;
      var y2 = end - start;
      var len = Math.min(x4, y2);
      var thisCopy = this.slice(thisStart, thisEnd);
      var targetCopy = target.slice(start, end);
      for (var i2 = 0; i2 < len; ++i2) {
        if (thisCopy[i2] !== targetCopy[i2]) {
          x4 = thisCopy[i2];
          y2 = targetCopy[i2];
          break;
        }
      }
      if (x4 < y2)
        return -1;
      if (y2 < x4)
        return 1;
      return 0;
    };
    function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
      if (buffer.length === 0)
        return -1;
      if (typeof byteOffset === "string") {
        encoding = byteOffset;
        byteOffset = 0;
      } else if (byteOffset > 2147483647) {
        byteOffset = 2147483647;
      } else if (byteOffset < -2147483648) {
        byteOffset = -2147483648;
      }
      byteOffset = +byteOffset;
      if (numberIsNaN(byteOffset)) {
        byteOffset = dir ? 0 : buffer.length - 1;
      }
      if (byteOffset < 0)
        byteOffset = buffer.length + byteOffset;
      if (byteOffset >= buffer.length) {
        if (dir)
          return -1;
        else
          byteOffset = buffer.length - 1;
      } else if (byteOffset < 0) {
        if (dir)
          byteOffset = 0;
        else
          return -1;
      }
      if (typeof val === "string") {
        val = Buffer2.from(val, encoding);
      }
      if (Buffer2.isBuffer(val)) {
        if (val.length === 0) {
          return -1;
        }
        return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
      } else if (typeof val === "number") {
        val = val & 255;
        if (typeof Uint8Array.prototype.indexOf === "function") {
          if (dir) {
            return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
          } else {
            return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
          }
        }
        return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);
      }
      throw new TypeError("val must be string, number or Buffer");
    }
    function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
      var indexSize = 1;
      var arrLength = arr.length;
      var valLength = val.length;
      if (encoding !== void 0) {
        encoding = String(encoding).toLowerCase();
        if (encoding === "ucs2" || encoding === "ucs-2" || encoding === "utf16le" || encoding === "utf-16le") {
          if (arr.length < 2 || val.length < 2) {
            return -1;
          }
          indexSize = 2;
          arrLength /= 2;
          valLength /= 2;
          byteOffset /= 2;
        }
      }
      function read(buf, i3) {
        if (indexSize === 1) {
          return buf[i3];
        } else {
          return buf.readUInt16BE(i3 * indexSize);
        }
      }
      var i2;
      if (dir) {
        var foundIndex = -1;
        for (i2 = byteOffset; i2 < arrLength; i2++) {
          if (read(arr, i2) === read(val, foundIndex === -1 ? 0 : i2 - foundIndex)) {
            if (foundIndex === -1)
              foundIndex = i2;
            if (i2 - foundIndex + 1 === valLength)
              return foundIndex * indexSize;
          } else {
            if (foundIndex !== -1)
              i2 -= i2 - foundIndex;
            foundIndex = -1;
          }
        }
      } else {
        if (byteOffset + valLength > arrLength)
          byteOffset = arrLength - valLength;
        for (i2 = byteOffset; i2 >= 0; i2--) {
          var found = true;
          for (var j3 = 0; j3 < valLength; j3++) {
            if (read(arr, i2 + j3) !== read(val, j3)) {
              found = false;
              break;
            }
          }
          if (found)
            return i2;
        }
      }
      return -1;
    }
    Buffer2.prototype.includes = function includes(val, byteOffset, encoding) {
      return this.indexOf(val, byteOffset, encoding) !== -1;
    };
    Buffer2.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
      return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
    };
    Buffer2.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
      return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
    };
    function hexWrite(buf, string, offset, length) {
      offset = Number(offset) || 0;
      var remaining = buf.length - offset;
      if (!length) {
        length = remaining;
      } else {
        length = Number(length);
        if (length > remaining) {
          length = remaining;
        }
      }
      var strLen = string.length;
      if (length > strLen / 2) {
        length = strLen / 2;
      }
      for (var i2 = 0; i2 < length; ++i2) {
        var parsed = parseInt(string.substr(i2 * 2, 2), 16);
        if (numberIsNaN(parsed))
          return i2;
        buf[offset + i2] = parsed;
      }
      return i2;
    }
    function utf8Write(buf, string, offset, length) {
      return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
    }
    function asciiWrite(buf, string, offset, length) {
      return blitBuffer(asciiToBytes(string), buf, offset, length);
    }
    function base64Write(buf, string, offset, length) {
      return blitBuffer(base64ToBytes(string), buf, offset, length);
    }
    function ucs2Write(buf, string, offset, length) {
      return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
    }
    Buffer2.prototype.write = function write(string, offset, length, encoding) {
      if (offset === void 0) {
        encoding = "utf8";
        length = this.length;
        offset = 0;
      } else if (length === void 0 && typeof offset === "string") {
        encoding = offset;
        length = this.length;
        offset = 0;
      } else if (isFinite(offset)) {
        offset = offset >>> 0;
        if (isFinite(length)) {
          length = length >>> 0;
          if (encoding === void 0)
            encoding = "utf8";
        } else {
          encoding = length;
          length = void 0;
        }
      } else {
        throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");
      }
      var remaining = this.length - offset;
      if (length === void 0 || length > remaining)
        length = remaining;
      if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {
        throw new RangeError("Attempt to write outside buffer bounds");
      }
      if (!encoding)
        encoding = "utf8";
      var loweredCase = false;
      for (; ; ) {
        switch (encoding) {
          case "hex":
            return hexWrite(this, string, offset, length);
          case "utf8":
          case "utf-8":
            return utf8Write(this, string, offset, length);
          case "ascii":
          case "latin1":
          case "binary":
            return asciiWrite(this, string, offset, length);
          case "base64":
            return base64Write(this, string, offset, length);
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
            return ucs2Write(this, string, offset, length);
          default:
            if (loweredCase)
              throw new TypeError("Unknown encoding: " + encoding);
            encoding = ("" + encoding).toLowerCase();
            loweredCase = true;
        }
      }
    };
    Buffer2.prototype.toJSON = function toJSON2() {
      return {
        type: "Buffer",
        data: Array.prototype.slice.call(this._arr || this, 0)
      };
    };
    function base64Slice(buf, start, end) {
      if (start === 0 && end === buf.length) {
        return base64.fromByteArray(buf);
      } else {
        return base64.fromByteArray(buf.slice(start, end));
      }
    }
    function utf8Slice(buf, start, end) {
      end = Math.min(buf.length, end);
      var res = [];
      var i2 = start;
      while (i2 < end) {
        var firstByte = buf[i2];
        var codePoint = null;
        var bytesPerSequence = firstByte > 239 ? 4 : firstByte > 223 ? 3 : firstByte > 191 ? 2 : 1;
        if (i2 + bytesPerSequence <= end) {
          var secondByte, thirdByte, fourthByte, tempCodePoint;
          switch (bytesPerSequence) {
            case 1:
              if (firstByte < 128) {
                codePoint = firstByte;
              }
              break;
            case 2:
              secondByte = buf[i2 + 1];
              if ((secondByte & 192) === 128) {
                tempCodePoint = (firstByte & 31) << 6 | secondByte & 63;
                if (tempCodePoint > 127) {
                  codePoint = tempCodePoint;
                }
              }
              break;
            case 3:
              secondByte = buf[i2 + 1];
              thirdByte = buf[i2 + 2];
              if ((secondByte & 192) === 128 && (thirdByte & 192) === 128) {
                tempCodePoint = (firstByte & 15) << 12 | (secondByte & 63) << 6 | thirdByte & 63;
                if (tempCodePoint > 2047 && (tempCodePoint < 55296 || tempCodePoint > 57343)) {
                  codePoint = tempCodePoint;
                }
              }
              break;
            case 4:
              secondByte = buf[i2 + 1];
              thirdByte = buf[i2 + 2];
              fourthByte = buf[i2 + 3];
              if ((secondByte & 192) === 128 && (thirdByte & 192) === 128 && (fourthByte & 192) === 128) {
                tempCodePoint = (firstByte & 15) << 18 | (secondByte & 63) << 12 | (thirdByte & 63) << 6 | fourthByte & 63;
                if (tempCodePoint > 65535 && tempCodePoint < 1114112) {
                  codePoint = tempCodePoint;
                }
              }
          }
        }
        if (codePoint === null) {
          codePoint = 65533;
          bytesPerSequence = 1;
        } else if (codePoint > 65535) {
          codePoint -= 65536;
          res.push(codePoint >>> 10 & 1023 | 55296);
          codePoint = 56320 | codePoint & 1023;
        }
        res.push(codePoint);
        i2 += bytesPerSequence;
      }
      return decodeCodePointsArray(res);
    }
    var MAX_ARGUMENTS_LENGTH = 4096;
    function decodeCodePointsArray(codePoints) {
      var len = codePoints.length;
      if (len <= MAX_ARGUMENTS_LENGTH) {
        return String.fromCharCode.apply(String, codePoints);
      }
      var res = "";
      var i2 = 0;
      while (i2 < len) {
        res += String.fromCharCode.apply(String, codePoints.slice(i2, i2 += MAX_ARGUMENTS_LENGTH));
      }
      return res;
    }
    function asciiSlice(buf, start, end) {
      var ret = "";
      end = Math.min(buf.length, end);
      for (var i2 = start; i2 < end; ++i2) {
        ret += String.fromCharCode(buf[i2] & 127);
      }
      return ret;
    }
    function latin1Slice(buf, start, end) {
      var ret = "";
      end = Math.min(buf.length, end);
      for (var i2 = start; i2 < end; ++i2) {
        ret += String.fromCharCode(buf[i2]);
      }
      return ret;
    }
    function hexSlice(buf, start, end) {
      var len = buf.length;
      if (!start || start < 0)
        start = 0;
      if (!end || end < 0 || end > len)
        end = len;
      var out = "";
      for (var i2 = start; i2 < end; ++i2) {
        out += hexSliceLookupTable[buf[i2]];
      }
      return out;
    }
    function utf16leSlice(buf, start, end) {
      var bytes = buf.slice(start, end);
      var res = "";
      for (var i2 = 0; i2 < bytes.length - 1; i2 += 2) {
        res += String.fromCharCode(bytes[i2] + bytes[i2 + 1] * 256);
      }
      return res;
    }
    Buffer2.prototype.slice = function slice(start, end) {
      var len = this.length;
      start = ~~start;
      end = end === void 0 ? len : ~~end;
      if (start < 0) {
        start += len;
        if (start < 0)
          start = 0;
      } else if (start > len) {
        start = len;
      }
      if (end < 0) {
        end += len;
        if (end < 0)
          end = 0;
      } else if (end > len) {
        end = len;
      }
      if (end < start)
        end = start;
      var newBuf = this.subarray(start, end);
      Object.setPrototypeOf(newBuf, Buffer2.prototype);
      return newBuf;
    };
    function checkOffset(offset, ext, length) {
      if (offset % 1 !== 0 || offset < 0)
        throw new RangeError("offset is not uint");
      if (offset + ext > length)
        throw new RangeError("Trying to access beyond buffer length");
    }
    Buffer2.prototype.readUintLE = Buffer2.prototype.readUIntLE = function readUIntLE(offset, byteLength2, noAssert) {
      offset = offset >>> 0;
      byteLength2 = byteLength2 >>> 0;
      if (!noAssert)
        checkOffset(offset, byteLength2, this.length);
      var val = this[offset];
      var mul3 = 1;
      var i2 = 0;
      while (++i2 < byteLength2 && (mul3 *= 256)) {
        val += this[offset + i2] * mul3;
      }
      return val;
    };
    Buffer2.prototype.readUintBE = Buffer2.prototype.readUIntBE = function readUIntBE(offset, byteLength2, noAssert) {
      offset = offset >>> 0;
      byteLength2 = byteLength2 >>> 0;
      if (!noAssert) {
        checkOffset(offset, byteLength2, this.length);
      }
      var val = this[offset + --byteLength2];
      var mul3 = 1;
      while (byteLength2 > 0 && (mul3 *= 256)) {
        val += this[offset + --byteLength2] * mul3;
      }
      return val;
    };
    Buffer2.prototype.readUint8 = Buffer2.prototype.readUInt8 = function readUInt8(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert)
        checkOffset(offset, 1, this.length);
      return this[offset];
    };
    Buffer2.prototype.readUint16LE = Buffer2.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert)
        checkOffset(offset, 2, this.length);
      return this[offset] | this[offset + 1] << 8;
    };
    Buffer2.prototype.readUint16BE = Buffer2.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert)
        checkOffset(offset, 2, this.length);
      return this[offset] << 8 | this[offset + 1];
    };
    Buffer2.prototype.readUint32LE = Buffer2.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert)
        checkOffset(offset, 4, this.length);
      return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 16777216;
    };
    Buffer2.prototype.readUint32BE = Buffer2.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert)
        checkOffset(offset, 4, this.length);
      return this[offset] * 16777216 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
    };
    Buffer2.prototype.readIntLE = function readIntLE(offset, byteLength2, noAssert) {
      offset = offset >>> 0;
      byteLength2 = byteLength2 >>> 0;
      if (!noAssert)
        checkOffset(offset, byteLength2, this.length);
      var val = this[offset];
      var mul3 = 1;
      var i2 = 0;
      while (++i2 < byteLength2 && (mul3 *= 256)) {
        val += this[offset + i2] * mul3;
      }
      mul3 *= 128;
      if (val >= mul3)
        val -= Math.pow(2, 8 * byteLength2);
      return val;
    };
    Buffer2.prototype.readIntBE = function readIntBE(offset, byteLength2, noAssert) {
      offset = offset >>> 0;
      byteLength2 = byteLength2 >>> 0;
      if (!noAssert)
        checkOffset(offset, byteLength2, this.length);
      var i2 = byteLength2;
      var mul3 = 1;
      var val = this[offset + --i2];
      while (i2 > 0 && (mul3 *= 256)) {
        val += this[offset + --i2] * mul3;
      }
      mul3 *= 128;
      if (val >= mul3)
        val -= Math.pow(2, 8 * byteLength2);
      return val;
    };
    Buffer2.prototype.readInt8 = function readInt8(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert)
        checkOffset(offset, 1, this.length);
      if (!(this[offset] & 128))
        return this[offset];
      return (255 - this[offset] + 1) * -1;
    };
    Buffer2.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert)
        checkOffset(offset, 2, this.length);
      var val = this[offset] | this[offset + 1] << 8;
      return val & 32768 ? val | 4294901760 : val;
    };
    Buffer2.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert)
        checkOffset(offset, 2, this.length);
      var val = this[offset + 1] | this[offset] << 8;
      return val & 32768 ? val | 4294901760 : val;
    };
    Buffer2.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert)
        checkOffset(offset, 4, this.length);
      return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
    };
    Buffer2.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert)
        checkOffset(offset, 4, this.length);
      return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
    };
    Buffer2.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert)
        checkOffset(offset, 4, this.length);
      return ieee754.read(this, offset, true, 23, 4);
    };
    Buffer2.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert)
        checkOffset(offset, 4, this.length);
      return ieee754.read(this, offset, false, 23, 4);
    };
    Buffer2.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert)
        checkOffset(offset, 8, this.length);
      return ieee754.read(this, offset, true, 52, 8);
    };
    Buffer2.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert)
        checkOffset(offset, 8, this.length);
      return ieee754.read(this, offset, false, 52, 8);
    };
    function checkInt(buf, value2, offset, ext, max, min) {
      if (!Buffer2.isBuffer(buf))
        throw new TypeError('"buffer" argument must be a Buffer instance');
      if (value2 > max || value2 < min)
        throw new RangeError('"value" argument is out of bounds');
      if (offset + ext > buf.length)
        throw new RangeError("Index out of range");
    }
    Buffer2.prototype.writeUintLE = Buffer2.prototype.writeUIntLE = function writeUIntLE(value2, offset, byteLength2, noAssert) {
      value2 = +value2;
      offset = offset >>> 0;
      byteLength2 = byteLength2 >>> 0;
      if (!noAssert) {
        var maxBytes = Math.pow(2, 8 * byteLength2) - 1;
        checkInt(this, value2, offset, byteLength2, maxBytes, 0);
      }
      var mul3 = 1;
      var i2 = 0;
      this[offset] = value2 & 255;
      while (++i2 < byteLength2 && (mul3 *= 256)) {
        this[offset + i2] = value2 / mul3 & 255;
      }
      return offset + byteLength2;
    };
    Buffer2.prototype.writeUintBE = Buffer2.prototype.writeUIntBE = function writeUIntBE(value2, offset, byteLength2, noAssert) {
      value2 = +value2;
      offset = offset >>> 0;
      byteLength2 = byteLength2 >>> 0;
      if (!noAssert) {
        var maxBytes = Math.pow(2, 8 * byteLength2) - 1;
        checkInt(this, value2, offset, byteLength2, maxBytes, 0);
      }
      var i2 = byteLength2 - 1;
      var mul3 = 1;
      this[offset + i2] = value2 & 255;
      while (--i2 >= 0 && (mul3 *= 256)) {
        this[offset + i2] = value2 / mul3 & 255;
      }
      return offset + byteLength2;
    };
    Buffer2.prototype.writeUint8 = Buffer2.prototype.writeUInt8 = function writeUInt8(value2, offset, noAssert) {
      value2 = +value2;
      offset = offset >>> 0;
      if (!noAssert)
        checkInt(this, value2, offset, 1, 255, 0);
      this[offset] = value2 & 255;
      return offset + 1;
    };
    Buffer2.prototype.writeUint16LE = Buffer2.prototype.writeUInt16LE = function writeUInt16LE(value2, offset, noAssert) {
      value2 = +value2;
      offset = offset >>> 0;
      if (!noAssert)
        checkInt(this, value2, offset, 2, 65535, 0);
      this[offset] = value2 & 255;
      this[offset + 1] = value2 >>> 8;
      return offset + 2;
    };
    Buffer2.prototype.writeUint16BE = Buffer2.prototype.writeUInt16BE = function writeUInt16BE(value2, offset, noAssert) {
      value2 = +value2;
      offset = offset >>> 0;
      if (!noAssert)
        checkInt(this, value2, offset, 2, 65535, 0);
      this[offset] = value2 >>> 8;
      this[offset + 1] = value2 & 255;
      return offset + 2;
    };
    Buffer2.prototype.writeUint32LE = Buffer2.prototype.writeUInt32LE = function writeUInt32LE(value2, offset, noAssert) {
      value2 = +value2;
      offset = offset >>> 0;
      if (!noAssert)
        checkInt(this, value2, offset, 4, 4294967295, 0);
      this[offset + 3] = value2 >>> 24;
      this[offset + 2] = value2 >>> 16;
      this[offset + 1] = value2 >>> 8;
      this[offset] = value2 & 255;
      return offset + 4;
    };
    Buffer2.prototype.writeUint32BE = Buffer2.prototype.writeUInt32BE = function writeUInt32BE(value2, offset, noAssert) {
      value2 = +value2;
      offset = offset >>> 0;
      if (!noAssert)
        checkInt(this, value2, offset, 4, 4294967295, 0);
      this[offset] = value2 >>> 24;
      this[offset + 1] = value2 >>> 16;
      this[offset + 2] = value2 >>> 8;
      this[offset + 3] = value2 & 255;
      return offset + 4;
    };
    Buffer2.prototype.writeIntLE = function writeIntLE(value2, offset, byteLength2, noAssert) {
      value2 = +value2;
      offset = offset >>> 0;
      if (!noAssert) {
        var limit = Math.pow(2, 8 * byteLength2 - 1);
        checkInt(this, value2, offset, byteLength2, limit - 1, -limit);
      }
      var i2 = 0;
      var mul3 = 1;
      var sub = 0;
      this[offset] = value2 & 255;
      while (++i2 < byteLength2 && (mul3 *= 256)) {
        if (value2 < 0 && sub === 0 && this[offset + i2 - 1] !== 0) {
          sub = 1;
        }
        this[offset + i2] = (value2 / mul3 >> 0) - sub & 255;
      }
      return offset + byteLength2;
    };
    Buffer2.prototype.writeIntBE = function writeIntBE(value2, offset, byteLength2, noAssert) {
      value2 = +value2;
      offset = offset >>> 0;
      if (!noAssert) {
        var limit = Math.pow(2, 8 * byteLength2 - 1);
        checkInt(this, value2, offset, byteLength2, limit - 1, -limit);
      }
      var i2 = byteLength2 - 1;
      var mul3 = 1;
      var sub = 0;
      this[offset + i2] = value2 & 255;
      while (--i2 >= 0 && (mul3 *= 256)) {
        if (value2 < 0 && sub === 0 && this[offset + i2 + 1] !== 0) {
          sub = 1;
        }
        this[offset + i2] = (value2 / mul3 >> 0) - sub & 255;
      }
      return offset + byteLength2;
    };
    Buffer2.prototype.writeInt8 = function writeInt8(value2, offset, noAssert) {
      value2 = +value2;
      offset = offset >>> 0;
      if (!noAssert)
        checkInt(this, value2, offset, 1, 127, -128);
      if (value2 < 0)
        value2 = 255 + value2 + 1;
      this[offset] = value2 & 255;
      return offset + 1;
    };
    Buffer2.prototype.writeInt16LE = function writeInt16LE(value2, offset, noAssert) {
      value2 = +value2;
      offset = offset >>> 0;
      if (!noAssert)
        checkInt(this, value2, offset, 2, 32767, -32768);
      this[offset] = value2 & 255;
      this[offset + 1] = value2 >>> 8;
      return offset + 2;
    };
    Buffer2.prototype.writeInt16BE = function writeInt16BE(value2, offset, noAssert) {
      value2 = +value2;
      offset = offset >>> 0;
      if (!noAssert)
        checkInt(this, value2, offset, 2, 32767, -32768);
      this[offset] = value2 >>> 8;
      this[offset + 1] = value2 & 255;
      return offset + 2;
    };
    Buffer2.prototype.writeInt32LE = function writeInt32LE(value2, offset, noAssert) {
      value2 = +value2;
      offset = offset >>> 0;
      if (!noAssert)
        checkInt(this, value2, offset, 4, 2147483647, -2147483648);
      this[offset] = value2 & 255;
      this[offset + 1] = value2 >>> 8;
      this[offset + 2] = value2 >>> 16;
      this[offset + 3] = value2 >>> 24;
      return offset + 4;
    };
    Buffer2.prototype.writeInt32BE = function writeInt32BE(value2, offset, noAssert) {
      value2 = +value2;
      offset = offset >>> 0;
      if (!noAssert)
        checkInt(this, value2, offset, 4, 2147483647, -2147483648);
      if (value2 < 0)
        value2 = 4294967295 + value2 + 1;
      this[offset] = value2 >>> 24;
      this[offset + 1] = value2 >>> 16;
      this[offset + 2] = value2 >>> 8;
      this[offset + 3] = value2 & 255;
      return offset + 4;
    };
    function checkIEEE754(buf, value2, offset, ext, max, min) {
      if (offset + ext > buf.length)
        throw new RangeError("Index out of range");
      if (offset < 0)
        throw new RangeError("Index out of range");
    }
    function writeFloat(buf, value2, offset, littleEndian, noAssert) {
      value2 = +value2;
      offset = offset >>> 0;
      if (!noAssert) {
        checkIEEE754(buf, value2, offset, 4, 34028234663852886e22, -34028234663852886e22);
      }
      ieee754.write(buf, value2, offset, littleEndian, 23, 4);
      return offset + 4;
    }
    Buffer2.prototype.writeFloatLE = function writeFloatLE(value2, offset, noAssert) {
      return writeFloat(this, value2, offset, true, noAssert);
    };
    Buffer2.prototype.writeFloatBE = function writeFloatBE(value2, offset, noAssert) {
      return writeFloat(this, value2, offset, false, noAssert);
    };
    function writeDouble(buf, value2, offset, littleEndian, noAssert) {
      value2 = +value2;
      offset = offset >>> 0;
      if (!noAssert) {
        checkIEEE754(buf, value2, offset, 8, 17976931348623157e292, -17976931348623157e292);
      }
      ieee754.write(buf, value2, offset, littleEndian, 52, 8);
      return offset + 8;
    }
    Buffer2.prototype.writeDoubleLE = function writeDoubleLE(value2, offset, noAssert) {
      return writeDouble(this, value2, offset, true, noAssert);
    };
    Buffer2.prototype.writeDoubleBE = function writeDoubleBE(value2, offset, noAssert) {
      return writeDouble(this, value2, offset, false, noAssert);
    };
    Buffer2.prototype.copy = function copy(target, targetStart, start, end) {
      if (!Buffer2.isBuffer(target))
        throw new TypeError("argument should be a Buffer");
      if (!start)
        start = 0;
      if (!end && end !== 0)
        end = this.length;
      if (targetStart >= target.length)
        targetStart = target.length;
      if (!targetStart)
        targetStart = 0;
      if (end > 0 && end < start)
        end = start;
      if (end === start)
        return 0;
      if (target.length === 0 || this.length === 0)
        return 0;
      if (targetStart < 0) {
        throw new RangeError("targetStart out of bounds");
      }
      if (start < 0 || start >= this.length)
        throw new RangeError("Index out of range");
      if (end < 0)
        throw new RangeError("sourceEnd out of bounds");
      if (end > this.length)
        end = this.length;
      if (target.length - targetStart < end - start) {
        end = target.length - targetStart + start;
      }
      var len = end - start;
      if (this === target && typeof Uint8Array.prototype.copyWithin === "function") {
        this.copyWithin(targetStart, start, end);
      } else {
        Uint8Array.prototype.set.call(target, this.subarray(start, end), targetStart);
      }
      return len;
    };
    Buffer2.prototype.fill = function fill(val, start, end, encoding) {
      if (typeof val === "string") {
        if (typeof start === "string") {
          encoding = start;
          start = 0;
          end = this.length;
        } else if (typeof end === "string") {
          encoding = end;
          end = this.length;
        }
        if (encoding !== void 0 && typeof encoding !== "string") {
          throw new TypeError("encoding must be a string");
        }
        if (typeof encoding === "string" && !Buffer2.isEncoding(encoding)) {
          throw new TypeError("Unknown encoding: " + encoding);
        }
        if (val.length === 1) {
          var code = val.charCodeAt(0);
          if (encoding === "utf8" && code < 128 || encoding === "latin1") {
            val = code;
          }
        }
      } else if (typeof val === "number") {
        val = val & 255;
      } else if (typeof val === "boolean") {
        val = Number(val);
      }
      if (start < 0 || this.length < start || this.length < end) {
        throw new RangeError("Out of range index");
      }
      if (end <= start) {
        return this;
      }
      start = start >>> 0;
      end = end === void 0 ? this.length : end >>> 0;
      if (!val)
        val = 0;
      var i2;
      if (typeof val === "number") {
        for (i2 = start; i2 < end; ++i2) {
          this[i2] = val;
        }
      } else {
        var bytes = Buffer2.isBuffer(val) ? val : Buffer2.from(val, encoding);
        var len = bytes.length;
        if (len === 0) {
          throw new TypeError('The value "' + val + '" is invalid for argument "value"');
        }
        for (i2 = 0; i2 < end - start; ++i2) {
          this[i2 + start] = bytes[i2 % len];
        }
      }
      return this;
    };
    var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;
    function base64clean(str) {
      str = str.split("=")[0];
      str = str.trim().replace(INVALID_BASE64_RE, "");
      if (str.length < 2)
        return "";
      while (str.length % 4 !== 0) {
        str = str + "=";
      }
      return str;
    }
    function utf8ToBytes(string, units) {
      units = units || Infinity;
      var codePoint;
      var length = string.length;
      var leadSurrogate = null;
      var bytes = [];
      for (var i2 = 0; i2 < length; ++i2) {
        codePoint = string.charCodeAt(i2);
        if (codePoint > 55295 && codePoint < 57344) {
          if (!leadSurrogate) {
            if (codePoint > 56319) {
              if ((units -= 3) > -1)
                bytes.push(239, 191, 189);
              continue;
            } else if (i2 + 1 === length) {
              if ((units -= 3) > -1)
                bytes.push(239, 191, 189);
              continue;
            }
            leadSurrogate = codePoint;
            continue;
          }
          if (codePoint < 56320) {
            if ((units -= 3) > -1)
              bytes.push(239, 191, 189);
            leadSurrogate = codePoint;
            continue;
          }
          codePoint = (leadSurrogate - 55296 << 10 | codePoint - 56320) + 65536;
        } else if (leadSurrogate) {
          if ((units -= 3) > -1)
            bytes.push(239, 191, 189);
        }
        leadSurrogate = null;
        if (codePoint < 128) {
          if ((units -= 1) < 0)
            break;
          bytes.push(codePoint);
        } else if (codePoint < 2048) {
          if ((units -= 2) < 0)
            break;
          bytes.push(codePoint >> 6 | 192, codePoint & 63 | 128);
        } else if (codePoint < 65536) {
          if ((units -= 3) < 0)
            break;
          bytes.push(codePoint >> 12 | 224, codePoint >> 6 & 63 | 128, codePoint & 63 | 128);
        } else if (codePoint < 1114112) {
          if ((units -= 4) < 0)
            break;
          bytes.push(codePoint >> 18 | 240, codePoint >> 12 & 63 | 128, codePoint >> 6 & 63 | 128, codePoint & 63 | 128);
        } else {
          throw new Error("Invalid code point");
        }
      }
      return bytes;
    }
    function asciiToBytes(str) {
      var byteArray = [];
      for (var i2 = 0; i2 < str.length; ++i2) {
        byteArray.push(str.charCodeAt(i2) & 255);
      }
      return byteArray;
    }
    function utf16leToBytes(str, units) {
      var c2, hi, lo2;
      var byteArray = [];
      for (var i2 = 0; i2 < str.length; ++i2) {
        if ((units -= 2) < 0)
          break;
        c2 = str.charCodeAt(i2);
        hi = c2 >> 8;
        lo2 = c2 % 256;
        byteArray.push(lo2);
        byteArray.push(hi);
      }
      return byteArray;
    }
    function base64ToBytes(str) {
      return base64.toByteArray(base64clean(str));
    }
    function blitBuffer(src, dst, offset, length) {
      for (var i2 = 0; i2 < length; ++i2) {
        if (i2 + offset >= dst.length || i2 >= src.length)
          break;
        dst[i2 + offset] = src[i2];
      }
      return i2;
    }
    function isInstance(obj, type) {
      return obj instanceof type || obj != null && obj.constructor != null && obj.constructor.name != null && obj.constructor.name === type.name;
    }
    function numberIsNaN(obj) {
      return obj !== obj;
    }
    var hexSliceLookupTable = function() {
      var alphabet = "0123456789abcdef";
      var table = new Array(256);
      for (var i2 = 0; i2 < 16; ++i2) {
        var i16 = i2 * 16;
        for (var j3 = 0; j3 < 16; ++j3) {
          table[i16 + j3] = alphabet[i2] + alphabet[j3];
        }
      }
      return table;
    }();
  }
});

// node_modules/has-symbols/shams.js
var require_shams = __commonJS({
  "node_modules/has-symbols/shams.js"(exports, module) {
    init_define_process();
    "use strict";
    module.exports = function hasSymbols() {
      if (typeof Symbol !== "function" || typeof Object.getOwnPropertySymbols !== "function") {
        return false;
      }
      if (typeof Symbol.iterator === "symbol") {
        return true;
      }
      var obj = {};
      var sym = Symbol("test");
      var symObj = Object(sym);
      if (typeof sym === "string") {
        return false;
      }
      if (Object.prototype.toString.call(sym) !== "[object Symbol]") {
        return false;
      }
      if (Object.prototype.toString.call(symObj) !== "[object Symbol]") {
        return false;
      }
      var symVal = 42;
      obj[sym] = symVal;
      for (sym in obj) {
        return false;
      }
      if (typeof Object.keys === "function" && Object.keys(obj).length !== 0) {
        return false;
      }
      if (typeof Object.getOwnPropertyNames === "function" && Object.getOwnPropertyNames(obj).length !== 0) {
        return false;
      }
      var syms = Object.getOwnPropertySymbols(obj);
      if (syms.length !== 1 || syms[0] !== sym) {
        return false;
      }
      if (!Object.prototype.propertyIsEnumerable.call(obj, sym)) {
        return false;
      }
      if (typeof Object.getOwnPropertyDescriptor === "function") {
        var descriptor = Object.getOwnPropertyDescriptor(obj, sym);
        if (descriptor.value !== symVal || descriptor.enumerable !== true) {
          return false;
        }
      }
      return true;
    };
  }
});

// node_modules/has-tostringtag/shams.js
var require_shams2 = __commonJS({
  "node_modules/has-tostringtag/shams.js"(exports, module) {
    init_define_process();
    "use strict";
    var hasSymbols = require_shams();
    module.exports = function hasToStringTagShams() {
      return hasSymbols() && !!Symbol.toStringTag;
    };
  }
});

// node_modules/has-symbols/index.js
var require_has_symbols = __commonJS({
  "node_modules/has-symbols/index.js"(exports, module) {
    init_define_process();
    "use strict";
    var origSymbol = typeof Symbol !== "undefined" && Symbol;
    var hasSymbolSham = require_shams();
    module.exports = function hasNativeSymbols() {
      if (typeof origSymbol !== "function") {
        return false;
      }
      if (typeof Symbol !== "function") {
        return false;
      }
      if (typeof origSymbol("foo") !== "symbol") {
        return false;
      }
      if (typeof Symbol("bar") !== "symbol") {
        return false;
      }
      return hasSymbolSham();
    };
  }
});

// node_modules/function-bind/implementation.js
var require_implementation = __commonJS({
  "node_modules/function-bind/implementation.js"(exports, module) {
    init_define_process();
    "use strict";
    var ERROR_MESSAGE = "Function.prototype.bind called on incompatible ";
    var slice = Array.prototype.slice;
    var toStr = Object.prototype.toString;
    var funcType = "[object Function]";
    module.exports = function bind(that) {
      var target = this;
      if (typeof target !== "function" || toStr.call(target) !== funcType) {
        throw new TypeError(ERROR_MESSAGE + target);
      }
      var args = slice.call(arguments, 1);
      var bound;
      var binder = function() {
        if (this instanceof bound) {
          var result = target.apply(this, args.concat(slice.call(arguments)));
          if (Object(result) === result) {
            return result;
          }
          return this;
        } else {
          return target.apply(that, args.concat(slice.call(arguments)));
        }
      };
      var boundLength = Math.max(0, target.length - args.length);
      var boundArgs = [];
      for (var i2 = 0; i2 < boundLength; i2++) {
        boundArgs.push("$" + i2);
      }
      bound = Function("binder", "return function (" + boundArgs.join(",") + "){ return binder.apply(this,arguments); }")(binder);
      if (target.prototype) {
        var Empty = function Empty2() {
        };
        Empty.prototype = target.prototype;
        bound.prototype = new Empty();
        Empty.prototype = null;
      }
      return bound;
    };
  }
});

// node_modules/function-bind/index.js
var require_function_bind = __commonJS({
  "node_modules/function-bind/index.js"(exports, module) {
    init_define_process();
    "use strict";
    var implementation = require_implementation();
    module.exports = Function.prototype.bind || implementation;
  }
});

// node_modules/has/src/index.js
var require_src = __commonJS({
  "node_modules/has/src/index.js"(exports, module) {
    init_define_process();
    "use strict";
    var bind = require_function_bind();
    module.exports = bind.call(Function.call, Object.prototype.hasOwnProperty);
  }
});

// node_modules/get-intrinsic/index.js
var require_get_intrinsic = __commonJS({
  "node_modules/get-intrinsic/index.js"(exports, module) {
    init_define_process();
    "use strict";
    var undefined2;
    var $SyntaxError = SyntaxError;
    var $Function = Function;
    var $TypeError = TypeError;
    var getEvalledConstructor = function(expressionSyntax) {
      try {
        return $Function('"use strict"; return (' + expressionSyntax + ").constructor;")();
      } catch (e) {
      }
    };
    var $gOPD = Object.getOwnPropertyDescriptor;
    if ($gOPD) {
      try {
        $gOPD({}, "");
      } catch (e) {
        $gOPD = null;
      }
    }
    var throwTypeError = function() {
      throw new $TypeError();
    };
    var ThrowTypeError = $gOPD ? function() {
      try {
        arguments.callee;
        return throwTypeError;
      } catch (calleeThrows) {
        try {
          return $gOPD(arguments, "callee").get;
        } catch (gOPDthrows) {
          return throwTypeError;
        }
      }
    }() : throwTypeError;
    var hasSymbols = require_has_symbols()();
    var getProto = Object.getPrototypeOf || function(x4) {
      return x4.__proto__;
    };
    var needsEval = {};
    var TypedArray = typeof Uint8Array === "undefined" ? undefined2 : getProto(Uint8Array);
    var INTRINSICS = {
      "%AggregateError%": typeof AggregateError === "undefined" ? undefined2 : AggregateError,
      "%Array%": Array,
      "%ArrayBuffer%": typeof ArrayBuffer === "undefined" ? undefined2 : ArrayBuffer,
      "%ArrayIteratorPrototype%": hasSymbols ? getProto([][Symbol.iterator]()) : undefined2,
      "%AsyncFromSyncIteratorPrototype%": undefined2,
      "%AsyncFunction%": needsEval,
      "%AsyncGenerator%": needsEval,
      "%AsyncGeneratorFunction%": needsEval,
      "%AsyncIteratorPrototype%": needsEval,
      "%Atomics%": typeof Atomics === "undefined" ? undefined2 : Atomics,
      "%BigInt%": typeof BigInt === "undefined" ? undefined2 : BigInt,
      "%Boolean%": Boolean,
      "%DataView%": typeof DataView === "undefined" ? undefined2 : DataView,
      "%Date%": Date,
      "%decodeURI%": decodeURI,
      "%decodeURIComponent%": decodeURIComponent,
      "%encodeURI%": encodeURI,
      "%encodeURIComponent%": encodeURIComponent,
      "%Error%": Error,
      "%eval%": eval,
      "%EvalError%": EvalError,
      "%Float32Array%": typeof Float32Array === "undefined" ? undefined2 : Float32Array,
      "%Float64Array%": typeof Float64Array === "undefined" ? undefined2 : Float64Array,
      "%FinalizationRegistry%": typeof FinalizationRegistry === "undefined" ? undefined2 : FinalizationRegistry,
      "%Function%": $Function,
      "%GeneratorFunction%": needsEval,
      "%Int8Array%": typeof Int8Array === "undefined" ? undefined2 : Int8Array,
      "%Int16Array%": typeof Int16Array === "undefined" ? undefined2 : Int16Array,
      "%Int32Array%": typeof Int32Array === "undefined" ? undefined2 : Int32Array,
      "%isFinite%": isFinite,
      "%isNaN%": isNaN,
      "%IteratorPrototype%": hasSymbols ? getProto(getProto([][Symbol.iterator]())) : undefined2,
      "%JSON%": typeof JSON === "object" ? JSON : undefined2,
      "%Map%": typeof Map === "undefined" ? undefined2 : Map,
      "%MapIteratorPrototype%": typeof Map === "undefined" || !hasSymbols ? undefined2 : getProto(new Map()[Symbol.iterator]()),
      "%Math%": Math,
      "%Number%": Number,
      "%Object%": Object,
      "%parseFloat%": parseFloat,
      "%parseInt%": parseInt,
      "%Promise%": typeof Promise === "undefined" ? undefined2 : Promise,
      "%Proxy%": typeof Proxy === "undefined" ? undefined2 : Proxy,
      "%RangeError%": RangeError,
      "%ReferenceError%": ReferenceError,
      "%Reflect%": typeof Reflect === "undefined" ? undefined2 : Reflect,
      "%RegExp%": RegExp,
      "%Set%": typeof Set === "undefined" ? undefined2 : Set,
      "%SetIteratorPrototype%": typeof Set === "undefined" || !hasSymbols ? undefined2 : getProto(new Set()[Symbol.iterator]()),
      "%SharedArrayBuffer%": typeof SharedArrayBuffer === "undefined" ? undefined2 : SharedArrayBuffer,
      "%String%": String,
      "%StringIteratorPrototype%": hasSymbols ? getProto(""[Symbol.iterator]()) : undefined2,
      "%Symbol%": hasSymbols ? Symbol : undefined2,
      "%SyntaxError%": $SyntaxError,
      "%ThrowTypeError%": ThrowTypeError,
      "%TypedArray%": TypedArray,
      "%TypeError%": $TypeError,
      "%Uint8Array%": typeof Uint8Array === "undefined" ? undefined2 : Uint8Array,
      "%Uint8ClampedArray%": typeof Uint8ClampedArray === "undefined" ? undefined2 : Uint8ClampedArray,
      "%Uint16Array%": typeof Uint16Array === "undefined" ? undefined2 : Uint16Array,
      "%Uint32Array%": typeof Uint32Array === "undefined" ? undefined2 : Uint32Array,
      "%URIError%": URIError,
      "%WeakMap%": typeof WeakMap === "undefined" ? undefined2 : WeakMap,
      "%WeakRef%": typeof WeakRef === "undefined" ? undefined2 : WeakRef,
      "%WeakSet%": typeof WeakSet === "undefined" ? undefined2 : WeakSet
    };
    var doEval = function doEval2(name2) {
      var value2;
      if (name2 === "%AsyncFunction%") {
        value2 = getEvalledConstructor("async function () {}");
      } else if (name2 === "%GeneratorFunction%") {
        value2 = getEvalledConstructor("function* () {}");
      } else if (name2 === "%AsyncGeneratorFunction%") {
        value2 = getEvalledConstructor("async function* () {}");
      } else if (name2 === "%AsyncGenerator%") {
        var fn = doEval2("%AsyncGeneratorFunction%");
        if (fn) {
          value2 = fn.prototype;
        }
      } else if (name2 === "%AsyncIteratorPrototype%") {
        var gen = doEval2("%AsyncGenerator%");
        if (gen) {
          value2 = getProto(gen.prototype);
        }
      }
      INTRINSICS[name2] = value2;
      return value2;
    };
    var LEGACY_ALIASES = {
      "%ArrayBufferPrototype%": ["ArrayBuffer", "prototype"],
      "%ArrayPrototype%": ["Array", "prototype"],
      "%ArrayProto_entries%": ["Array", "prototype", "entries"],
      "%ArrayProto_forEach%": ["Array", "prototype", "forEach"],
      "%ArrayProto_keys%": ["Array", "prototype", "keys"],
      "%ArrayProto_values%": ["Array", "prototype", "values"],
      "%AsyncFunctionPrototype%": ["AsyncFunction", "prototype"],
      "%AsyncGenerator%": ["AsyncGeneratorFunction", "prototype"],
      "%AsyncGeneratorPrototype%": ["AsyncGeneratorFunction", "prototype", "prototype"],
      "%BooleanPrototype%": ["Boolean", "prototype"],
      "%DataViewPrototype%": ["DataView", "prototype"],
      "%DatePrototype%": ["Date", "prototype"],
      "%ErrorPrototype%": ["Error", "prototype"],
      "%EvalErrorPrototype%": ["EvalError", "prototype"],
      "%Float32ArrayPrototype%": ["Float32Array", "prototype"],
      "%Float64ArrayPrototype%": ["Float64Array", "prototype"],
      "%FunctionPrototype%": ["Function", "prototype"],
      "%Generator%": ["GeneratorFunction", "prototype"],
      "%GeneratorPrototype%": ["GeneratorFunction", "prototype", "prototype"],
      "%Int8ArrayPrototype%": ["Int8Array", "prototype"],
      "%Int16ArrayPrototype%": ["Int16Array", "prototype"],
      "%Int32ArrayPrototype%": ["Int32Array", "prototype"],
      "%JSONParse%": ["JSON", "parse"],
      "%JSONStringify%": ["JSON", "stringify"],
      "%MapPrototype%": ["Map", "prototype"],
      "%NumberPrototype%": ["Number", "prototype"],
      "%ObjectPrototype%": ["Object", "prototype"],
      "%ObjProto_toString%": ["Object", "prototype", "toString"],
      "%ObjProto_valueOf%": ["Object", "prototype", "valueOf"],
      "%PromisePrototype%": ["Promise", "prototype"],
      "%PromiseProto_then%": ["Promise", "prototype", "then"],
      "%Promise_all%": ["Promise", "all"],
      "%Promise_reject%": ["Promise", "reject"],
      "%Promise_resolve%": ["Promise", "resolve"],
      "%RangeErrorPrototype%": ["RangeError", "prototype"],
      "%ReferenceErrorPrototype%": ["ReferenceError", "prototype"],
      "%RegExpPrototype%": ["RegExp", "prototype"],
      "%SetPrototype%": ["Set", "prototype"],
      "%SharedArrayBufferPrototype%": ["SharedArrayBuffer", "prototype"],
      "%StringPrototype%": ["String", "prototype"],
      "%SymbolPrototype%": ["Symbol", "prototype"],
      "%SyntaxErrorPrototype%": ["SyntaxError", "prototype"],
      "%TypedArrayPrototype%": ["TypedArray", "prototype"],
      "%TypeErrorPrototype%": ["TypeError", "prototype"],
      "%Uint8ArrayPrototype%": ["Uint8Array", "prototype"],
      "%Uint8ClampedArrayPrototype%": ["Uint8ClampedArray", "prototype"],
      "%Uint16ArrayPrototype%": ["Uint16Array", "prototype"],
      "%Uint32ArrayPrototype%": ["Uint32Array", "prototype"],
      "%URIErrorPrototype%": ["URIError", "prototype"],
      "%WeakMapPrototype%": ["WeakMap", "prototype"],
      "%WeakSetPrototype%": ["WeakSet", "prototype"]
    };
    var bind = require_function_bind();
    var hasOwn = require_src();
    var $concat = bind.call(Function.call, Array.prototype.concat);
    var $spliceApply = bind.call(Function.apply, Array.prototype.splice);
    var $replace = bind.call(Function.call, String.prototype.replace);
    var $strSlice = bind.call(Function.call, String.prototype.slice);
    var rePropName = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g;
    var reEscapeChar = /\\(\\)?/g;
    var stringToPath = function stringToPath2(string) {
      var first = $strSlice(string, 0, 1);
      var last = $strSlice(string, -1);
      if (first === "%" && last !== "%") {
        throw new $SyntaxError("invalid intrinsic syntax, expected closing `%`");
      } else if (last === "%" && first !== "%") {
        throw new $SyntaxError("invalid intrinsic syntax, expected opening `%`");
      }
      var result = [];
      $replace(string, rePropName, function(match, number, quote, subString) {
        result[result.length] = quote ? $replace(subString, reEscapeChar, "$1") : number || match;
      });
      return result;
    };
    var getBaseIntrinsic = function getBaseIntrinsic2(name2, allowMissing) {
      var intrinsicName = name2;
      var alias;
      if (hasOwn(LEGACY_ALIASES, intrinsicName)) {
        alias = LEGACY_ALIASES[intrinsicName];
        intrinsicName = "%" + alias[0] + "%";
      }
      if (hasOwn(INTRINSICS, intrinsicName)) {
        var value2 = INTRINSICS[intrinsicName];
        if (value2 === needsEval) {
          value2 = doEval(intrinsicName);
        }
        if (typeof value2 === "undefined" && !allowMissing) {
          throw new $TypeError("intrinsic " + name2 + " exists, but is not available. Please file an issue!");
        }
        return {
          alias,
          name: intrinsicName,
          value: value2
        };
      }
      throw new $SyntaxError("intrinsic " + name2 + " does not exist!");
    };
    module.exports = function GetIntrinsic(name2, allowMissing) {
      if (typeof name2 !== "string" || name2.length === 0) {
        throw new $TypeError("intrinsic name must be a non-empty string");
      }
      if (arguments.length > 1 && typeof allowMissing !== "boolean") {
        throw new $TypeError('"allowMissing" argument must be a boolean');
      }
      var parts = stringToPath(name2);
      var intrinsicBaseName = parts.length > 0 ? parts[0] : "";
      var intrinsic = getBaseIntrinsic("%" + intrinsicBaseName + "%", allowMissing);
      var intrinsicRealName = intrinsic.name;
      var value2 = intrinsic.value;
      var skipFurtherCaching = false;
      var alias = intrinsic.alias;
      if (alias) {
        intrinsicBaseName = alias[0];
        $spliceApply(parts, $concat([0, 1], alias));
      }
      for (var i2 = 1, isOwn = true; i2 < parts.length; i2 += 1) {
        var part = parts[i2];
        var first = $strSlice(part, 0, 1);
        var last = $strSlice(part, -1);
        if ((first === '"' || first === "'" || first === "`" || (last === '"' || last === "'" || last === "`")) && first !== last) {
          throw new $SyntaxError("property names with quotes must have matching quotes");
        }
        if (part === "constructor" || !isOwn) {
          skipFurtherCaching = true;
        }
        intrinsicBaseName += "." + part;
        intrinsicRealName = "%" + intrinsicBaseName + "%";
        if (hasOwn(INTRINSICS, intrinsicRealName)) {
          value2 = INTRINSICS[intrinsicRealName];
        } else if (value2 != null) {
          if (!(part in value2)) {
            if (!allowMissing) {
              throw new $TypeError("base intrinsic for " + name2 + " exists, but the property is not available.");
            }
            return void 0;
          }
          if ($gOPD && i2 + 1 >= parts.length) {
            var desc = $gOPD(value2, part);
            isOwn = !!desc;
            if (isOwn && "get" in desc && !("originalValue" in desc.get)) {
              value2 = desc.get;
            } else {
              value2 = value2[part];
            }
          } else {
            isOwn = hasOwn(value2, part);
            value2 = value2[part];
          }
          if (isOwn && !skipFurtherCaching) {
            INTRINSICS[intrinsicRealName] = value2;
          }
        }
      }
      return value2;
    };
  }
});

// node_modules/call-bind/index.js
var require_call_bind = __commonJS({
  "node_modules/call-bind/index.js"(exports, module) {
    init_define_process();
    "use strict";
    var bind = require_function_bind();
    var GetIntrinsic = require_get_intrinsic();
    var $apply = GetIntrinsic("%Function.prototype.apply%");
    var $call = GetIntrinsic("%Function.prototype.call%");
    var $reflectApply = GetIntrinsic("%Reflect.apply%", true) || bind.call($call, $apply);
    var $gOPD = GetIntrinsic("%Object.getOwnPropertyDescriptor%", true);
    var $defineProperty = GetIntrinsic("%Object.defineProperty%", true);
    var $max = GetIntrinsic("%Math.max%");
    if ($defineProperty) {
      try {
        $defineProperty({}, "a", { value: 1 });
      } catch (e) {
        $defineProperty = null;
      }
    }
    module.exports = function callBind(originalFunction) {
      var func = $reflectApply(bind, $call, arguments);
      if ($gOPD && $defineProperty) {
        var desc = $gOPD(func, "length");
        if (desc.configurable) {
          $defineProperty(func, "length", { value: 1 + $max(0, originalFunction.length - (arguments.length - 1)) });
        }
      }
      return func;
    };
    var applyBind = function applyBind2() {
      return $reflectApply(bind, $apply, arguments);
    };
    if ($defineProperty) {
      $defineProperty(module.exports, "apply", { value: applyBind });
    } else {
      module.exports.apply = applyBind;
    }
  }
});

// node_modules/call-bind/callBound.js
var require_callBound = __commonJS({
  "node_modules/call-bind/callBound.js"(exports, module) {
    init_define_process();
    "use strict";
    var GetIntrinsic = require_get_intrinsic();
    var callBind = require_call_bind();
    var $indexOf = callBind(GetIntrinsic("String.prototype.indexOf"));
    module.exports = function callBoundIntrinsic(name2, allowMissing) {
      var intrinsic = GetIntrinsic(name2, !!allowMissing);
      if (typeof intrinsic === "function" && $indexOf(name2, ".prototype.") > -1) {
        return callBind(intrinsic);
      }
      return intrinsic;
    };
  }
});

// node_modules/is-arguments/index.js
var require_is_arguments = __commonJS({
  "node_modules/is-arguments/index.js"(exports, module) {
    init_define_process();
    "use strict";
    var hasToStringTag = require_shams2()();
    var callBound = require_callBound();
    var $toString = callBound("Object.prototype.toString");
    var isStandardArguments = function isArguments(value2) {
      if (hasToStringTag && value2 && typeof value2 === "object" && Symbol.toStringTag in value2) {
        return false;
      }
      return $toString(value2) === "[object Arguments]";
    };
    var isLegacyArguments = function isArguments(value2) {
      if (isStandardArguments(value2)) {
        return true;
      }
      return value2 !== null && typeof value2 === "object" && typeof value2.length === "number" && value2.length >= 0 && $toString(value2) !== "[object Array]" && $toString(value2.callee) === "[object Function]";
    };
    var supportsStandardArguments = function() {
      return isStandardArguments(arguments);
    }();
    isStandardArguments.isLegacyArguments = isLegacyArguments;
    module.exports = supportsStandardArguments ? isStandardArguments : isLegacyArguments;
  }
});

// node_modules/is-generator-function/index.js
var require_is_generator_function = __commonJS({
  "node_modules/is-generator-function/index.js"(exports, module) {
    init_define_process();
    "use strict";
    var toStr = Object.prototype.toString;
    var fnToStr = Function.prototype.toString;
    var isFnRegex = /^\s*(?:function)?\*/;
    var hasToStringTag = require_shams2()();
    var getProto = Object.getPrototypeOf;
    var getGeneratorFunc = function() {
      if (!hasToStringTag) {
        return false;
      }
      try {
        return Function("return function*() {}")();
      } catch (e) {
      }
    };
    var GeneratorFunction;
    module.exports = function isGeneratorFunction(fn) {
      if (typeof fn !== "function") {
        return false;
      }
      if (isFnRegex.test(fnToStr.call(fn))) {
        return true;
      }
      if (!hasToStringTag) {
        var str = toStr.call(fn);
        return str === "[object GeneratorFunction]";
      }
      if (!getProto) {
        return false;
      }
      if (typeof GeneratorFunction === "undefined") {
        var generatorFunc = getGeneratorFunc();
        GeneratorFunction = generatorFunc ? getProto(generatorFunc) : false;
      }
      return getProto(fn) === GeneratorFunction;
    };
  }
});

// node_modules/foreach/index.js
var require_foreach = __commonJS({
  "node_modules/foreach/index.js"(exports, module) {
    init_define_process();
    var hasOwn = Object.prototype.hasOwnProperty;
    var toString = Object.prototype.toString;
    module.exports = function forEach(obj, fn, ctx) {
      if (toString.call(fn) !== "[object Function]") {
        throw new TypeError("iterator must be a function");
      }
      var l2 = obj.length;
      if (l2 === +l2) {
        for (var i2 = 0; i2 < l2; i2++) {
          fn.call(ctx, obj[i2], i2, obj);
        }
      } else {
        for (var k4 in obj) {
          if (hasOwn.call(obj, k4)) {
            fn.call(ctx, obj[k4], k4, obj);
          }
        }
      }
    };
  }
});

// node_modules/available-typed-arrays/index.js
var require_available_typed_arrays = __commonJS({
  "node_modules/available-typed-arrays/index.js"(exports, module) {
    init_define_process();
    "use strict";
    var possibleNames = [
      "BigInt64Array",
      "BigUint64Array",
      "Float32Array",
      "Float64Array",
      "Int16Array",
      "Int32Array",
      "Int8Array",
      "Uint16Array",
      "Uint32Array",
      "Uint8Array",
      "Uint8ClampedArray"
    ];
    var g3 = typeof globalThis === "undefined" ? globalThis : globalThis;
    module.exports = function availableTypedArrays() {
      var out = [];
      for (var i2 = 0; i2 < possibleNames.length; i2++) {
        if (typeof g3[possibleNames[i2]] === "function") {
          out[out.length] = possibleNames[i2];
        }
      }
      return out;
    };
  }
});

// node_modules/es-abstract/helpers/getOwnPropertyDescriptor.js
var require_getOwnPropertyDescriptor = __commonJS({
  "node_modules/es-abstract/helpers/getOwnPropertyDescriptor.js"(exports, module) {
    init_define_process();
    "use strict";
    var GetIntrinsic = require_get_intrinsic();
    var $gOPD = GetIntrinsic("%Object.getOwnPropertyDescriptor%", true);
    if ($gOPD) {
      try {
        $gOPD([], "length");
      } catch (e) {
        $gOPD = null;
      }
    }
    module.exports = $gOPD;
  }
});

// node_modules/is-typed-array/index.js
var require_is_typed_array = __commonJS({
  "node_modules/is-typed-array/index.js"(exports, module) {
    init_define_process();
    "use strict";
    var forEach = require_foreach();
    var availableTypedArrays = require_available_typed_arrays();
    var callBound = require_callBound();
    var $toString = callBound("Object.prototype.toString");
    var hasToStringTag = require_shams2()();
    var g3 = typeof globalThis === "undefined" ? globalThis : globalThis;
    var typedArrays = availableTypedArrays();
    var $indexOf = callBound("Array.prototype.indexOf", true) || function indexOf(array, value2) {
      for (var i2 = 0; i2 < array.length; i2 += 1) {
        if (array[i2] === value2) {
          return i2;
        }
      }
      return -1;
    };
    var $slice = callBound("String.prototype.slice");
    var toStrTags = {};
    var gOPD = require_getOwnPropertyDescriptor();
    var getPrototypeOf = Object.getPrototypeOf;
    if (hasToStringTag && gOPD && getPrototypeOf) {
      forEach(typedArrays, function(typedArray) {
        var arr = new g3[typedArray]();
        if (Symbol.toStringTag in arr) {
          var proto = getPrototypeOf(arr);
          var descriptor = gOPD(proto, Symbol.toStringTag);
          if (!descriptor) {
            var superProto = getPrototypeOf(proto);
            descriptor = gOPD(superProto, Symbol.toStringTag);
          }
          toStrTags[typedArray] = descriptor.get;
        }
      });
    }
    var tryTypedArrays = function tryAllTypedArrays(value2) {
      var anyTrue = false;
      forEach(toStrTags, function(getter, typedArray) {
        if (!anyTrue) {
          try {
            anyTrue = getter.call(value2) === typedArray;
          } catch (e) {
          }
        }
      });
      return anyTrue;
    };
    module.exports = function isTypedArray(value2) {
      if (!value2 || typeof value2 !== "object") {
        return false;
      }
      if (!hasToStringTag || !(Symbol.toStringTag in value2)) {
        var tag = $slice($toString(value2), 8, -1);
        return $indexOf(typedArrays, tag) > -1;
      }
      if (!gOPD) {
        return false;
      }
      return tryTypedArrays(value2);
    };
  }
});

// node_modules/which-typed-array/index.js
var require_which_typed_array = __commonJS({
  "node_modules/which-typed-array/index.js"(exports, module) {
    init_define_process();
    "use strict";
    var forEach = require_foreach();
    var availableTypedArrays = require_available_typed_arrays();
    var callBound = require_callBound();
    var $toString = callBound("Object.prototype.toString");
    var hasToStringTag = require_shams2()();
    var g3 = typeof globalThis === "undefined" ? globalThis : globalThis;
    var typedArrays = availableTypedArrays();
    var $slice = callBound("String.prototype.slice");
    var toStrTags = {};
    var gOPD = require_getOwnPropertyDescriptor();
    var getPrototypeOf = Object.getPrototypeOf;
    if (hasToStringTag && gOPD && getPrototypeOf) {
      forEach(typedArrays, function(typedArray) {
        if (typeof g3[typedArray] === "function") {
          var arr = new g3[typedArray]();
          if (Symbol.toStringTag in arr) {
            var proto = getPrototypeOf(arr);
            var descriptor = gOPD(proto, Symbol.toStringTag);
            if (!descriptor) {
              var superProto = getPrototypeOf(proto);
              descriptor = gOPD(superProto, Symbol.toStringTag);
            }
            toStrTags[typedArray] = descriptor.get;
          }
        }
      });
    }
    var tryTypedArrays = function tryAllTypedArrays(value2) {
      var foundName = false;
      forEach(toStrTags, function(getter, typedArray) {
        if (!foundName) {
          try {
            var name2 = getter.call(value2);
            if (name2 === typedArray) {
              foundName = name2;
            }
          } catch (e) {
          }
        }
      });
      return foundName;
    };
    var isTypedArray = require_is_typed_array();
    module.exports = function whichTypedArray(value2) {
      if (!isTypedArray(value2)) {
        return false;
      }
      if (!hasToStringTag || !(Symbol.toStringTag in value2)) {
        return $slice($toString(value2), 8, -1);
      }
      return tryTypedArrays(value2);
    };
  }
});

// node_modules/util/support/types.js
var require_types = __commonJS({
  "node_modules/util/support/types.js"(exports) {
    init_define_process();
    "use strict";
    var isArgumentsObject = require_is_arguments();
    var isGeneratorFunction = require_is_generator_function();
    var whichTypedArray = require_which_typed_array();
    var isTypedArray = require_is_typed_array();
    function uncurryThis(f3) {
      return f3.call.bind(f3);
    }
    var BigIntSupported = typeof BigInt !== "undefined";
    var SymbolSupported = typeof Symbol !== "undefined";
    var ObjectToString = uncurryThis(Object.prototype.toString);
    var numberValue = uncurryThis(Number.prototype.valueOf);
    var stringValue = uncurryThis(String.prototype.valueOf);
    var booleanValue = uncurryThis(Boolean.prototype.valueOf);
    if (BigIntSupported) {
      bigIntValue = uncurryThis(BigInt.prototype.valueOf);
    }
    var bigIntValue;
    if (SymbolSupported) {
      symbolValue = uncurryThis(Symbol.prototype.valueOf);
    }
    var symbolValue;
    function checkBoxedPrimitive(value2, prototypeValueOf) {
      if (typeof value2 !== "object") {
        return false;
      }
      try {
        prototypeValueOf(value2);
        return true;
      } catch (e) {
        return false;
      }
    }
    exports.isArgumentsObject = isArgumentsObject;
    exports.isGeneratorFunction = isGeneratorFunction;
    exports.isTypedArray = isTypedArray;
    function isPromise(input) {
      return typeof Promise !== "undefined" && input instanceof Promise || input !== null && typeof input === "object" && typeof input.then === "function" && typeof input.catch === "function";
    }
    exports.isPromise = isPromise;
    function isArrayBufferView(value2) {
      if (typeof ArrayBuffer !== "undefined" && ArrayBuffer.isView) {
        return ArrayBuffer.isView(value2);
      }
      return isTypedArray(value2) || isDataView(value2);
    }
    exports.isArrayBufferView = isArrayBufferView;
    function isUint8Array(value2) {
      return whichTypedArray(value2) === "Uint8Array";
    }
    exports.isUint8Array = isUint8Array;
    function isUint8ClampedArray(value2) {
      return whichTypedArray(value2) === "Uint8ClampedArray";
    }
    exports.isUint8ClampedArray = isUint8ClampedArray;
    function isUint16Array(value2) {
      return whichTypedArray(value2) === "Uint16Array";
    }
    exports.isUint16Array = isUint16Array;
    function isUint32Array(value2) {
      return whichTypedArray(value2) === "Uint32Array";
    }
    exports.isUint32Array = isUint32Array;
    function isInt8Array(value2) {
      return whichTypedArray(value2) === "Int8Array";
    }
    exports.isInt8Array = isInt8Array;
    function isInt16Array(value2) {
      return whichTypedArray(value2) === "Int16Array";
    }
    exports.isInt16Array = isInt16Array;
    function isInt32Array(value2) {
      return whichTypedArray(value2) === "Int32Array";
    }
    exports.isInt32Array = isInt32Array;
    function isFloat32Array(value2) {
      return whichTypedArray(value2) === "Float32Array";
    }
    exports.isFloat32Array = isFloat32Array;
    function isFloat64Array(value2) {
      return whichTypedArray(value2) === "Float64Array";
    }
    exports.isFloat64Array = isFloat64Array;
    function isBigInt64Array(value2) {
      return whichTypedArray(value2) === "BigInt64Array";
    }
    exports.isBigInt64Array = isBigInt64Array;
    function isBigUint64Array(value2) {
      return whichTypedArray(value2) === "BigUint64Array";
    }
    exports.isBigUint64Array = isBigUint64Array;
    function isMapToString(value2) {
      return ObjectToString(value2) === "[object Map]";
    }
    isMapToString.working = typeof Map !== "undefined" && isMapToString(new Map());
    function isMap(value2) {
      if (typeof Map === "undefined") {
        return false;
      }
      return isMapToString.working ? isMapToString(value2) : value2 instanceof Map;
    }
    exports.isMap = isMap;
    function isSetToString(value2) {
      return ObjectToString(value2) === "[object Set]";
    }
    isSetToString.working = typeof Set !== "undefined" && isSetToString(new Set());
    function isSet(value2) {
      if (typeof Set === "undefined") {
        return false;
      }
      return isSetToString.working ? isSetToString(value2) : value2 instanceof Set;
    }
    exports.isSet = isSet;
    function isWeakMapToString(value2) {
      return ObjectToString(value2) === "[object WeakMap]";
    }
    isWeakMapToString.working = typeof WeakMap !== "undefined" && isWeakMapToString(new WeakMap());
    function isWeakMap(value2) {
      if (typeof WeakMap === "undefined") {
        return false;
      }
      return isWeakMapToString.working ? isWeakMapToString(value2) : value2 instanceof WeakMap;
    }
    exports.isWeakMap = isWeakMap;
    function isWeakSetToString(value2) {
      return ObjectToString(value2) === "[object WeakSet]";
    }
    isWeakSetToString.working = typeof WeakSet !== "undefined" && isWeakSetToString(new WeakSet());
    function isWeakSet(value2) {
      return isWeakSetToString(value2);
    }
    exports.isWeakSet = isWeakSet;
    function isArrayBufferToString(value2) {
      return ObjectToString(value2) === "[object ArrayBuffer]";
    }
    isArrayBufferToString.working = typeof ArrayBuffer !== "undefined" && isArrayBufferToString(new ArrayBuffer());
    function isArrayBuffer(value2) {
      if (typeof ArrayBuffer === "undefined") {
        return false;
      }
      return isArrayBufferToString.working ? isArrayBufferToString(value2) : value2 instanceof ArrayBuffer;
    }
    exports.isArrayBuffer = isArrayBuffer;
    function isDataViewToString(value2) {
      return ObjectToString(value2) === "[object DataView]";
    }
    isDataViewToString.working = typeof ArrayBuffer !== "undefined" && typeof DataView !== "undefined" && isDataViewToString(new DataView(new ArrayBuffer(1), 0, 1));
    function isDataView(value2) {
      if (typeof DataView === "undefined") {
        return false;
      }
      return isDataViewToString.working ? isDataViewToString(value2) : value2 instanceof DataView;
    }
    exports.isDataView = isDataView;
    var SharedArrayBufferCopy = typeof SharedArrayBuffer !== "undefined" ? SharedArrayBuffer : void 0;
    function isSharedArrayBufferToString(value2) {
      return ObjectToString(value2) === "[object SharedArrayBuffer]";
    }
    function isSharedArrayBuffer(value2) {
      if (typeof SharedArrayBufferCopy === "undefined") {
        return false;
      }
      if (typeof isSharedArrayBufferToString.working === "undefined") {
        isSharedArrayBufferToString.working = isSharedArrayBufferToString(new SharedArrayBufferCopy());
      }
      return isSharedArrayBufferToString.working ? isSharedArrayBufferToString(value2) : value2 instanceof SharedArrayBufferCopy;
    }
    exports.isSharedArrayBuffer = isSharedArrayBuffer;
    function isAsyncFunction(value2) {
      return ObjectToString(value2) === "[object AsyncFunction]";
    }
    exports.isAsyncFunction = isAsyncFunction;
    function isMapIterator(value2) {
      return ObjectToString(value2) === "[object Map Iterator]";
    }
    exports.isMapIterator = isMapIterator;
    function isSetIterator(value2) {
      return ObjectToString(value2) === "[object Set Iterator]";
    }
    exports.isSetIterator = isSetIterator;
    function isGeneratorObject(value2) {
      return ObjectToString(value2) === "[object Generator]";
    }
    exports.isGeneratorObject = isGeneratorObject;
    function isWebAssemblyCompiledModule(value2) {
      return ObjectToString(value2) === "[object WebAssembly.Module]";
    }
    exports.isWebAssemblyCompiledModule = isWebAssemblyCompiledModule;
    function isNumberObject(value2) {
      return checkBoxedPrimitive(value2, numberValue);
    }
    exports.isNumberObject = isNumberObject;
    function isStringObject(value2) {
      return checkBoxedPrimitive(value2, stringValue);
    }
    exports.isStringObject = isStringObject;
    function isBooleanObject(value2) {
      return checkBoxedPrimitive(value2, booleanValue);
    }
    exports.isBooleanObject = isBooleanObject;
    function isBigIntObject(value2) {
      return BigIntSupported && checkBoxedPrimitive(value2, bigIntValue);
    }
    exports.isBigIntObject = isBigIntObject;
    function isSymbolObject(value2) {
      return SymbolSupported && checkBoxedPrimitive(value2, symbolValue);
    }
    exports.isSymbolObject = isSymbolObject;
    function isBoxedPrimitive(value2) {
      return isNumberObject(value2) || isStringObject(value2) || isBooleanObject(value2) || isBigIntObject(value2) || isSymbolObject(value2);
    }
    exports.isBoxedPrimitive = isBoxedPrimitive;
    function isAnyArrayBuffer(value2) {
      return typeof Uint8Array !== "undefined" && (isArrayBuffer(value2) || isSharedArrayBuffer(value2));
    }
    exports.isAnyArrayBuffer = isAnyArrayBuffer;
    ["isProxy", "isExternal", "isModuleNamespaceObject"].forEach(function(method) {
      Object.defineProperty(exports, method, {
        enumerable: false,
        value: function() {
          throw new Error(method + " is not supported in userland");
        }
      });
    });
  }
});

// node_modules/util/support/isBufferBrowser.js
var require_isBufferBrowser = __commonJS({
  "node_modules/util/support/isBufferBrowser.js"(exports, module) {
    init_define_process();
    module.exports = function isBuffer(arg) {
      return arg && typeof arg === "object" && typeof arg.copy === "function" && typeof arg.fill === "function" && typeof arg.readUInt8 === "function";
    };
  }
});

// node_modules/util/util.js
var require_util = __commonJS({
  "node_modules/util/util.js"(exports) {
    init_define_process();
    var getOwnPropertyDescriptors = Object.getOwnPropertyDescriptors || function getOwnPropertyDescriptors2(obj) {
      var keys = Object.keys(obj);
      var descriptors = {};
      for (var i2 = 0; i2 < keys.length; i2++) {
        descriptors[keys[i2]] = Object.getOwnPropertyDescriptor(obj, keys[i2]);
      }
      return descriptors;
    };
    var formatRegExp = /%[sdj%]/g;
    exports.format = function(f3) {
      if (!isString(f3)) {
        var objects = [];
        for (var i2 = 0; i2 < arguments.length; i2++) {
          objects.push(inspect4(arguments[i2]));
        }
        return objects.join(" ");
      }
      var i2 = 1;
      var args = arguments;
      var len = args.length;
      var str = String(f3).replace(formatRegExp, function(x5) {
        if (x5 === "%%")
          return "%";
        if (i2 >= len)
          return x5;
        switch (x5) {
          case "%s":
            return String(args[i2++]);
          case "%d":
            return Number(args[i2++]);
          case "%j":
            try {
              return JSON.stringify(args[i2++]);
            } catch (_2) {
              return "[Circular]";
            }
          default:
            return x5;
        }
      });
      for (var x4 = args[i2]; i2 < len; x4 = args[++i2]) {
        if (isNull(x4) || !isObject(x4)) {
          str += " " + x4;
        } else {
          str += " " + inspect4(x4);
        }
      }
      return str;
    };
    exports.deprecate = function(fn, msg) {
      if (typeof define_process_default !== "undefined" && define_process_default.noDeprecation === true) {
        return fn;
      }
      if (typeof define_process_default === "undefined") {
        return function() {
          return exports.deprecate(fn, msg).apply(this, arguments);
        };
      }
      var warned = false;
      function deprecated() {
        if (!warned) {
          if (define_process_default.throwDeprecation) {
            throw new Error(msg);
          } else if (define_process_default.traceDeprecation) {
            console.trace(msg);
          } else {
            console.error(msg);
          }
          warned = true;
        }
        return fn.apply(this, arguments);
      }
      return deprecated;
    };
    var debugs = {};
    var debugEnvRegex = /^$/;
    if (define_process_default.env.NODE_DEBUG) {
      debugEnv = define_process_default.env.NODE_DEBUG;
      debugEnv = debugEnv.replace(/[|\\{}()[\]^$+?.]/g, "\\$&").replace(/\*/g, ".*").replace(/,/g, "$|^").toUpperCase();
      debugEnvRegex = new RegExp("^" + debugEnv + "$", "i");
    }
    var debugEnv;
    exports.debuglog = function(set) {
      set = set.toUpperCase();
      if (!debugs[set]) {
        if (debugEnvRegex.test(set)) {
          var pid = define_process_default.pid;
          debugs[set] = function() {
            var msg = exports.format.apply(exports, arguments);
            console.error("%s %d: %s", set, pid, msg);
          };
        } else {
          debugs[set] = function() {
          };
        }
      }
      return debugs[set];
    };
    function inspect4(obj, opts) {
      var ctx = {
        seen: [],
        stylize: stylizeNoColor
      };
      if (arguments.length >= 3)
        ctx.depth = arguments[2];
      if (arguments.length >= 4)
        ctx.colors = arguments[3];
      if (isBoolean(opts)) {
        ctx.showHidden = opts;
      } else if (opts) {
        exports._extend(ctx, opts);
      }
      if (isUndefined(ctx.showHidden))
        ctx.showHidden = false;
      if (isUndefined(ctx.depth))
        ctx.depth = 2;
      if (isUndefined(ctx.colors))
        ctx.colors = false;
      if (isUndefined(ctx.customInspect))
        ctx.customInspect = true;
      if (ctx.colors)
        ctx.stylize = stylizeWithColor;
      return formatValue(ctx, obj, ctx.depth);
    }
    exports.inspect = inspect4;
    inspect4.colors = {
      "bold": [1, 22],
      "italic": [3, 23],
      "underline": [4, 24],
      "inverse": [7, 27],
      "white": [37, 39],
      "grey": [90, 39],
      "black": [30, 39],
      "blue": [34, 39],
      "cyan": [36, 39],
      "green": [32, 39],
      "magenta": [35, 39],
      "red": [31, 39],
      "yellow": [33, 39]
    };
    inspect4.styles = {
      "special": "cyan",
      "number": "yellow",
      "boolean": "yellow",
      "undefined": "grey",
      "null": "bold",
      "string": "green",
      "date": "magenta",
      "regexp": "red"
    };
    function stylizeWithColor(str, styleType) {
      var style = inspect4.styles[styleType];
      if (style) {
        return "[" + inspect4.colors[style][0] + "m" + str + "[" + inspect4.colors[style][1] + "m";
      } else {
        return str;
      }
    }
    function stylizeNoColor(str, styleType) {
      return str;
    }
    function arrayToHash(array) {
      var hash3 = {};
      array.forEach(function(val, idx) {
        hash3[val] = true;
      });
      return hash3;
    }
    function formatValue(ctx, value2, recurseTimes) {
      if (ctx.customInspect && value2 && isFunction(value2.inspect) && value2.inspect !== exports.inspect && !(value2.constructor && value2.constructor.prototype === value2)) {
        var ret = value2.inspect(recurseTimes, ctx);
        if (!isString(ret)) {
          ret = formatValue(ctx, ret, recurseTimes);
        }
        return ret;
      }
      var primitive = formatPrimitive(ctx, value2);
      if (primitive) {
        return primitive;
      }
      var keys = Object.keys(value2);
      var visibleKeys = arrayToHash(keys);
      if (ctx.showHidden) {
        keys = Object.getOwnPropertyNames(value2);
      }
      if (isError(value2) && (keys.indexOf("message") >= 0 || keys.indexOf("description") >= 0)) {
        return formatError(value2);
      }
      if (keys.length === 0) {
        if (isFunction(value2)) {
          var name2 = value2.name ? ": " + value2.name : "";
          return ctx.stylize("[Function" + name2 + "]", "special");
        }
        if (isRegExp(value2)) {
          return ctx.stylize(RegExp.prototype.toString.call(value2), "regexp");
        }
        if (isDate(value2)) {
          return ctx.stylize(Date.prototype.toString.call(value2), "date");
        }
        if (isError(value2)) {
          return formatError(value2);
        }
      }
      var base2 = "", array = false, braces = ["{", "}"];
      if (isArray(value2)) {
        array = true;
        braces = ["[", "]"];
      }
      if (isFunction(value2)) {
        var n = value2.name ? ": " + value2.name : "";
        base2 = " [Function" + n + "]";
      }
      if (isRegExp(value2)) {
        base2 = " " + RegExp.prototype.toString.call(value2);
      }
      if (isDate(value2)) {
        base2 = " " + Date.prototype.toUTCString.call(value2);
      }
      if (isError(value2)) {
        base2 = " " + formatError(value2);
      }
      if (keys.length === 0 && (!array || value2.length == 0)) {
        return braces[0] + base2 + braces[1];
      }
      if (recurseTimes < 0) {
        if (isRegExp(value2)) {
          return ctx.stylize(RegExp.prototype.toString.call(value2), "regexp");
        } else {
          return ctx.stylize("[Object]", "special");
        }
      }
      ctx.seen.push(value2);
      var output;
      if (array) {
        output = formatArray(ctx, value2, recurseTimes, visibleKeys, keys);
      } else {
        output = keys.map(function(key2) {
          return formatProperty(ctx, value2, recurseTimes, visibleKeys, key2, array);
        });
      }
      ctx.seen.pop();
      return reduceToSingleString(output, base2, braces);
    }
    function formatPrimitive(ctx, value2) {
      if (isUndefined(value2))
        return ctx.stylize("undefined", "undefined");
      if (isString(value2)) {
        var simple = "'" + JSON.stringify(value2).replace(/^"|"$/g, "").replace(/'/g, "\\'").replace(/\\"/g, '"') + "'";
        return ctx.stylize(simple, "string");
      }
      if (isNumber(value2))
        return ctx.stylize("" + value2, "number");
      if (isBoolean(value2))
        return ctx.stylize("" + value2, "boolean");
      if (isNull(value2))
        return ctx.stylize("null", "null");
    }
    function formatError(value2) {
      return "[" + Error.prototype.toString.call(value2) + "]";
    }
    function formatArray(ctx, value2, recurseTimes, visibleKeys, keys) {
      var output = [];
      for (var i2 = 0, l2 = value2.length; i2 < l2; ++i2) {
        if (hasOwnProperty(value2, String(i2))) {
          output.push(formatProperty(ctx, value2, recurseTimes, visibleKeys, String(i2), true));
        } else {
          output.push("");
        }
      }
      keys.forEach(function(key2) {
        if (!key2.match(/^\d+$/)) {
          output.push(formatProperty(ctx, value2, recurseTimes, visibleKeys, key2, true));
        }
      });
      return output;
    }
    function formatProperty(ctx, value2, recurseTimes, visibleKeys, key2, array) {
      var name2, str, desc;
      desc = Object.getOwnPropertyDescriptor(value2, key2) || { value: value2[key2] };
      if (desc.get) {
        if (desc.set) {
          str = ctx.stylize("[Getter/Setter]", "special");
        } else {
          str = ctx.stylize("[Getter]", "special");
        }
      } else {
        if (desc.set) {
          str = ctx.stylize("[Setter]", "special");
        }
      }
      if (!hasOwnProperty(visibleKeys, key2)) {
        name2 = "[" + key2 + "]";
      }
      if (!str) {
        if (ctx.seen.indexOf(desc.value) < 0) {
          if (isNull(recurseTimes)) {
            str = formatValue(ctx, desc.value, null);
          } else {
            str = formatValue(ctx, desc.value, recurseTimes - 1);
          }
          if (str.indexOf("\n") > -1) {
            if (array) {
              str = str.split("\n").map(function(line) {
                return "  " + line;
              }).join("\n").substr(2);
            } else {
              str = "\n" + str.split("\n").map(function(line) {
                return "   " + line;
              }).join("\n");
            }
          }
        } else {
          str = ctx.stylize("[Circular]", "special");
        }
      }
      if (isUndefined(name2)) {
        if (array && key2.match(/^\d+$/)) {
          return str;
        }
        name2 = JSON.stringify("" + key2);
        if (name2.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
          name2 = name2.substr(1, name2.length - 2);
          name2 = ctx.stylize(name2, "name");
        } else {
          name2 = name2.replace(/'/g, "\\'").replace(/\\"/g, '"').replace(/(^"|"$)/g, "'");
          name2 = ctx.stylize(name2, "string");
        }
      }
      return name2 + ": " + str;
    }
    function reduceToSingleString(output, base2, braces) {
      var numLinesEst = 0;
      var length = output.reduce(function(prev, cur) {
        numLinesEst++;
        if (cur.indexOf("\n") >= 0)
          numLinesEst++;
        return prev + cur.replace(/\u001b\[\d\d?m/g, "").length + 1;
      }, 0);
      if (length > 60) {
        return braces[0] + (base2 === "" ? "" : base2 + "\n ") + " " + output.join(",\n  ") + " " + braces[1];
      }
      return braces[0] + base2 + " " + output.join(", ") + " " + braces[1];
    }
    exports.types = require_types();
    function isArray(ar) {
      return Array.isArray(ar);
    }
    exports.isArray = isArray;
    function isBoolean(arg) {
      return typeof arg === "boolean";
    }
    exports.isBoolean = isBoolean;
    function isNull(arg) {
      return arg === null;
    }
    exports.isNull = isNull;
    function isNullOrUndefined(arg) {
      return arg == null;
    }
    exports.isNullOrUndefined = isNullOrUndefined;
    function isNumber(arg) {
      return typeof arg === "number";
    }
    exports.isNumber = isNumber;
    function isString(arg) {
      return typeof arg === "string";
    }
    exports.isString = isString;
    function isSymbol(arg) {
      return typeof arg === "symbol";
    }
    exports.isSymbol = isSymbol;
    function isUndefined(arg) {
      return arg === void 0;
    }
    exports.isUndefined = isUndefined;
    function isRegExp(re2) {
      return isObject(re2) && objectToString(re2) === "[object RegExp]";
    }
    exports.isRegExp = isRegExp;
    exports.types.isRegExp = isRegExp;
    function isObject(arg) {
      return typeof arg === "object" && arg !== null;
    }
    exports.isObject = isObject;
    function isDate(d2) {
      return isObject(d2) && objectToString(d2) === "[object Date]";
    }
    exports.isDate = isDate;
    exports.types.isDate = isDate;
    function isError(e) {
      return isObject(e) && (objectToString(e) === "[object Error]" || e instanceof Error);
    }
    exports.isError = isError;
    exports.types.isNativeError = isError;
    function isFunction(arg) {
      return typeof arg === "function";
    }
    exports.isFunction = isFunction;
    function isPrimitive(arg) {
      return arg === null || typeof arg === "boolean" || typeof arg === "number" || typeof arg === "string" || typeof arg === "symbol" || typeof arg === "undefined";
    }
    exports.isPrimitive = isPrimitive;
    exports.isBuffer = require_isBufferBrowser();
    function objectToString(o2) {
      return Object.prototype.toString.call(o2);
    }
    function pad(n) {
      return n < 10 ? "0" + n.toString(10) : n.toString(10);
    }
    var months = [
      "Jan",
      "Feb",
      "Mar",
      "Apr",
      "May",
      "Jun",
      "Jul",
      "Aug",
      "Sep",
      "Oct",
      "Nov",
      "Dec"
    ];
    function timestamp() {
      var d2 = new Date();
      var time = [
        pad(d2.getHours()),
        pad(d2.getMinutes()),
        pad(d2.getSeconds())
      ].join(":");
      return [d2.getDate(), months[d2.getMonth()], time].join(" ");
    }
    exports.log = function() {
      console.log("%s - %s", timestamp(), exports.format.apply(exports, arguments));
    };
    exports.inherits = require_inherits_browser();
    exports._extend = function(origin, add3) {
      if (!add3 || !isObject(add3))
        return origin;
      var keys = Object.keys(add3);
      var i2 = keys.length;
      while (i2--) {
        origin[keys[i2]] = add3[keys[i2]];
      }
      return origin;
    };
    function hasOwnProperty(obj, prop) {
      return Object.prototype.hasOwnProperty.call(obj, prop);
    }
    var kCustomPromisifiedSymbol = typeof Symbol !== "undefined" ? Symbol("util.promisify.custom") : void 0;
    exports.promisify = function promisify(original) {
      if (typeof original !== "function")
        throw new TypeError('The "original" argument must be of type Function');
      if (kCustomPromisifiedSymbol && original[kCustomPromisifiedSymbol]) {
        var fn = original[kCustomPromisifiedSymbol];
        if (typeof fn !== "function") {
          throw new TypeError('The "util.promisify.custom" argument must be of type Function');
        }
        Object.defineProperty(fn, kCustomPromisifiedSymbol, {
          value: fn,
          enumerable: false,
          writable: false,
          configurable: true
        });
        return fn;
      }
      function fn() {
        var promiseResolve, promiseReject;
        var promise = new Promise(function(resolve, reject) {
          promiseResolve = resolve;
          promiseReject = reject;
        });
        var args = [];
        for (var i2 = 0; i2 < arguments.length; i2++) {
          args.push(arguments[i2]);
        }
        args.push(function(err, value2) {
          if (err) {
            promiseReject(err);
          } else {
            promiseResolve(value2);
          }
        });
        try {
          original.apply(this, args);
        } catch (err) {
          promiseReject(err);
        }
        return promise;
      }
      Object.setPrototypeOf(fn, Object.getPrototypeOf(original));
      if (kCustomPromisifiedSymbol)
        Object.defineProperty(fn, kCustomPromisifiedSymbol, {
          value: fn,
          enumerable: false,
          writable: false,
          configurable: true
        });
      return Object.defineProperties(fn, getOwnPropertyDescriptors(original));
    };
    exports.promisify.custom = kCustomPromisifiedSymbol;
    function callbackifyOnRejected(reason, cb) {
      if (!reason) {
        var newReason = new Error("Promise was rejected with a falsy value");
        newReason.reason = reason;
        reason = newReason;
      }
      return cb(reason);
    }
    function callbackify(original) {
      if (typeof original !== "function") {
        throw new TypeError('The "original" argument must be of type Function');
      }
      function callbackified() {
        var args = [];
        for (var i2 = 0; i2 < arguments.length; i2++) {
          args.push(arguments[i2]);
        }
        var maybeCb = args.pop();
        if (typeof maybeCb !== "function") {
          throw new TypeError("The last argument must be of type Function");
        }
        var self2 = this;
        var cb = function() {
          return maybeCb.apply(self2, arguments);
        };
        original.apply(this, args).then(function(ret) {
          define_process_default.nextTick(cb.bind(null, null, ret));
        }, function(rej) {
          define_process_default.nextTick(callbackifyOnRejected.bind(null, rej, cb));
        });
      }
      Object.setPrototypeOf(callbackified, Object.getPrototypeOf(original));
      Object.defineProperties(callbackified, getOwnPropertyDescriptors(original));
      return callbackified;
    }
    exports.callbackify = callbackify;
  }
});

// node_modules/readable-stream/lib/internal/streams/buffer_list.js
var require_buffer_list = __commonJS({
  "node_modules/readable-stream/lib/internal/streams/buffer_list.js"(exports, module) {
    init_define_process();
    "use strict";
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly)
          symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          });
        keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i2 = 1; i2 < arguments.length; i2++) {
        var source = arguments[i2] != null ? arguments[i2] : {};
        if (i2 % 2) {
          ownKeys(Object(source), true).forEach(function(key2) {
            _defineProperty(target, key2, source[key2]);
          });
        } else if (Object.getOwnPropertyDescriptors) {
          Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        } else {
          ownKeys(Object(source)).forEach(function(key2) {
            Object.defineProperty(target, key2, Object.getOwnPropertyDescriptor(source, key2));
          });
        }
      }
      return target;
    }
    function _defineProperty(obj, key2, value2) {
      if (key2 in obj) {
        Object.defineProperty(obj, key2, { value: value2, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key2] = value2;
      }
      return obj;
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i2 = 0; i2 < props.length; i2++) {
        var descriptor = props[i2];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    var _require = require_buffer2();
    var Buffer2 = _require.Buffer;
    var _require2 = require_util();
    var inspect4 = _require2.inspect;
    var custom2 = inspect4 && inspect4.custom || "inspect";
    function copyBuffer(src, target, offset) {
      Buffer2.prototype.copy.call(src, target, offset);
    }
    module.exports = function() {
      function BufferList() {
        _classCallCheck(this, BufferList);
        this.head = null;
        this.tail = null;
        this.length = 0;
      }
      _createClass(BufferList, [{
        key: "push",
        value: function push(v7) {
          var entry = {
            data: v7,
            next: null
          };
          if (this.length > 0)
            this.tail.next = entry;
          else
            this.head = entry;
          this.tail = entry;
          ++this.length;
        }
      }, {
        key: "unshift",
        value: function unshift(v7) {
          var entry = {
            data: v7,
            next: this.head
          };
          if (this.length === 0)
            this.tail = entry;
          this.head = entry;
          ++this.length;
        }
      }, {
        key: "shift",
        value: function shift() {
          if (this.length === 0)
            return;
          var ret = this.head.data;
          if (this.length === 1)
            this.head = this.tail = null;
          else
            this.head = this.head.next;
          --this.length;
          return ret;
        }
      }, {
        key: "clear",
        value: function clear() {
          this.head = this.tail = null;
          this.length = 0;
        }
      }, {
        key: "join",
        value: function join(s2) {
          if (this.length === 0)
            return "";
          var p3 = this.head;
          var ret = "" + p3.data;
          while (p3 = p3.next) {
            ret += s2 + p3.data;
          }
          return ret;
        }
      }, {
        key: "concat",
        value: function concat2(n) {
          if (this.length === 0)
            return Buffer2.alloc(0);
          var ret = Buffer2.allocUnsafe(n >>> 0);
          var p3 = this.head;
          var i2 = 0;
          while (p3) {
            copyBuffer(p3.data, ret, i2);
            i2 += p3.data.length;
            p3 = p3.next;
          }
          return ret;
        }
      }, {
        key: "consume",
        value: function consume(n, hasStrings) {
          var ret;
          if (n < this.head.data.length) {
            ret = this.head.data.slice(0, n);
            this.head.data = this.head.data.slice(n);
          } else if (n === this.head.data.length) {
            ret = this.shift();
          } else {
            ret = hasStrings ? this._getString(n) : this._getBuffer(n);
          }
          return ret;
        }
      }, {
        key: "first",
        value: function first() {
          return this.head.data;
        }
      }, {
        key: "_getString",
        value: function _getString(n) {
          var p3 = this.head;
          var c2 = 1;
          var ret = p3.data;
          n -= ret.length;
          while (p3 = p3.next) {
            var str = p3.data;
            var nb = n > str.length ? str.length : n;
            if (nb === str.length)
              ret += str;
            else
              ret += str.slice(0, n);
            n -= nb;
            if (n === 0) {
              if (nb === str.length) {
                ++c2;
                if (p3.next)
                  this.head = p3.next;
                else
                  this.head = this.tail = null;
              } else {
                this.head = p3;
                p3.data = str.slice(nb);
              }
              break;
            }
            ++c2;
          }
          this.length -= c2;
          return ret;
        }
      }, {
        key: "_getBuffer",
        value: function _getBuffer(n) {
          var ret = Buffer2.allocUnsafe(n);
          var p3 = this.head;
          var c2 = 1;
          p3.data.copy(ret);
          n -= p3.data.length;
          while (p3 = p3.next) {
            var buf = p3.data;
            var nb = n > buf.length ? buf.length : n;
            buf.copy(ret, ret.length - n, 0, nb);
            n -= nb;
            if (n === 0) {
              if (nb === buf.length) {
                ++c2;
                if (p3.next)
                  this.head = p3.next;
                else
                  this.head = this.tail = null;
              } else {
                this.head = p3;
                p3.data = buf.slice(nb);
              }
              break;
            }
            ++c2;
          }
          this.length -= c2;
          return ret;
        }
      }, {
        key: custom2,
        value: function value2(_2, options) {
          return inspect4(this, _objectSpread({}, options, {
            depth: 0,
            customInspect: false
          }));
        }
      }]);
      return BufferList;
    }();
  }
});

// node_modules/readable-stream/lib/internal/streams/destroy.js
var require_destroy = __commonJS({
  "node_modules/readable-stream/lib/internal/streams/destroy.js"(exports, module) {
    init_define_process();
    "use strict";
    function destroy(err, cb) {
      var _this = this;
      var readableDestroyed = this._readableState && this._readableState.destroyed;
      var writableDestroyed = this._writableState && this._writableState.destroyed;
      if (readableDestroyed || writableDestroyed) {
        if (cb) {
          cb(err);
        } else if (err) {
          if (!this._writableState) {
            define_process_default.nextTick(emitErrorNT, this, err);
          } else if (!this._writableState.errorEmitted) {
            this._writableState.errorEmitted = true;
            define_process_default.nextTick(emitErrorNT, this, err);
          }
        }
        return this;
      }
      if (this._readableState) {
        this._readableState.destroyed = true;
      }
      if (this._writableState) {
        this._writableState.destroyed = true;
      }
      this._destroy(err || null, function(err2) {
        if (!cb && err2) {
          if (!_this._writableState) {
            define_process_default.nextTick(emitErrorAndCloseNT, _this, err2);
          } else if (!_this._writableState.errorEmitted) {
            _this._writableState.errorEmitted = true;
            define_process_default.nextTick(emitErrorAndCloseNT, _this, err2);
          } else {
            define_process_default.nextTick(emitCloseNT, _this);
          }
        } else if (cb) {
          define_process_default.nextTick(emitCloseNT, _this);
          cb(err2);
        } else {
          define_process_default.nextTick(emitCloseNT, _this);
        }
      });
      return this;
    }
    function emitErrorAndCloseNT(self2, err) {
      emitErrorNT(self2, err);
      emitCloseNT(self2);
    }
    function emitCloseNT(self2) {
      if (self2._writableState && !self2._writableState.emitClose)
        return;
      if (self2._readableState && !self2._readableState.emitClose)
        return;
      self2.emit("close");
    }
    function undestroy() {
      if (this._readableState) {
        this._readableState.destroyed = false;
        this._readableState.reading = false;
        this._readableState.ended = false;
        this._readableState.endEmitted = false;
      }
      if (this._writableState) {
        this._writableState.destroyed = false;
        this._writableState.ended = false;
        this._writableState.ending = false;
        this._writableState.finalCalled = false;
        this._writableState.prefinished = false;
        this._writableState.finished = false;
        this._writableState.errorEmitted = false;
      }
    }
    function emitErrorNT(self2, err) {
      self2.emit("error", err);
    }
    function errorOrDestroy(stream, err) {
      var rState = stream._readableState;
      var wState = stream._writableState;
      if (rState && rState.autoDestroy || wState && wState.autoDestroy)
        stream.destroy(err);
      else
        stream.emit("error", err);
    }
    module.exports = {
      destroy,
      undestroy,
      errorOrDestroy
    };
  }
});

// node_modules/readable-stream/errors-browser.js
var require_errors_browser = __commonJS({
  "node_modules/readable-stream/errors-browser.js"(exports, module) {
    init_define_process();
    "use strict";
    function _inheritsLoose(subClass, superClass) {
      subClass.prototype = Object.create(superClass.prototype);
      subClass.prototype.constructor = subClass;
      subClass.__proto__ = superClass;
    }
    var codes = {};
    function createErrorType(code, message, Base) {
      if (!Base) {
        Base = Error;
      }
      function getMessage(arg1, arg2, arg3) {
        if (typeof message === "string") {
          return message;
        } else {
          return message(arg1, arg2, arg3);
        }
      }
      var NodeError = function(_Base) {
        _inheritsLoose(NodeError2, _Base);
        function NodeError2(arg1, arg2, arg3) {
          return _Base.call(this, getMessage(arg1, arg2, arg3)) || this;
        }
        return NodeError2;
      }(Base);
      NodeError.prototype.name = Base.name;
      NodeError.prototype.code = code;
      codes[code] = NodeError;
    }
    function oneOf(expected, thing) {
      if (Array.isArray(expected)) {
        var len = expected.length;
        expected = expected.map(function(i2) {
          return String(i2);
        });
        if (len > 2) {
          return "one of ".concat(thing, " ").concat(expected.slice(0, len - 1).join(", "), ", or ") + expected[len - 1];
        } else if (len === 2) {
          return "one of ".concat(thing, " ").concat(expected[0], " or ").concat(expected[1]);
        } else {
          return "of ".concat(thing, " ").concat(expected[0]);
        }
      } else {
        return "of ".concat(thing, " ").concat(String(expected));
      }
    }
    function startsWith(str, search, pos) {
      return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
    }
    function endsWith(str, search, this_len) {
      if (this_len === void 0 || this_len > str.length) {
        this_len = str.length;
      }
      return str.substring(this_len - search.length, this_len) === search;
    }
    function includes(str, search, start) {
      if (typeof start !== "number") {
        start = 0;
      }
      if (start + search.length > str.length) {
        return false;
      } else {
        return str.indexOf(search, start) !== -1;
      }
    }
    createErrorType("ERR_INVALID_OPT_VALUE", function(name2, value2) {
      return 'The value "' + value2 + '" is invalid for option "' + name2 + '"';
    }, TypeError);
    createErrorType("ERR_INVALID_ARG_TYPE", function(name2, expected, actual) {
      var determiner;
      if (typeof expected === "string" && startsWith(expected, "not ")) {
        determiner = "must not be";
        expected = expected.replace(/^not /, "");
      } else {
        determiner = "must be";
      }
      var msg;
      if (endsWith(name2, " argument")) {
        msg = "The ".concat(name2, " ").concat(determiner, " ").concat(oneOf(expected, "type"));
      } else {
        var type = includes(name2, ".") ? "property" : "argument";
        msg = 'The "'.concat(name2, '" ').concat(type, " ").concat(determiner, " ").concat(oneOf(expected, "type"));
      }
      msg += ". Received type ".concat(typeof actual);
      return msg;
    }, TypeError);
    createErrorType("ERR_STREAM_PUSH_AFTER_EOF", "stream.push() after EOF");
    createErrorType("ERR_METHOD_NOT_IMPLEMENTED", function(name2) {
      return "The " + name2 + " method is not implemented";
    });
    createErrorType("ERR_STREAM_PREMATURE_CLOSE", "Premature close");
    createErrorType("ERR_STREAM_DESTROYED", function(name2) {
      return "Cannot call " + name2 + " after a stream was destroyed";
    });
    createErrorType("ERR_MULTIPLE_CALLBACK", "Callback called multiple times");
    createErrorType("ERR_STREAM_CANNOT_PIPE", "Cannot pipe, not readable");
    createErrorType("ERR_STREAM_WRITE_AFTER_END", "write after end");
    createErrorType("ERR_STREAM_NULL_VALUES", "May not write null values to stream", TypeError);
    createErrorType("ERR_UNKNOWN_ENCODING", function(arg) {
      return "Unknown encoding: " + arg;
    }, TypeError);
    createErrorType("ERR_STREAM_UNSHIFT_AFTER_END_EVENT", "stream.unshift() after end event");
    module.exports.codes = codes;
  }
});

// node_modules/readable-stream/lib/internal/streams/state.js
var require_state = __commonJS({
  "node_modules/readable-stream/lib/internal/streams/state.js"(exports, module) {
    init_define_process();
    "use strict";
    var ERR_INVALID_OPT_VALUE = require_errors_browser().codes.ERR_INVALID_OPT_VALUE;
    function highWaterMarkFrom(options, isDuplex, duplexKey) {
      return options.highWaterMark != null ? options.highWaterMark : isDuplex ? options[duplexKey] : null;
    }
    function getHighWaterMark(state, options, duplexKey, isDuplex) {
      var hwm = highWaterMarkFrom(options, isDuplex, duplexKey);
      if (hwm != null) {
        if (!(isFinite(hwm) && Math.floor(hwm) === hwm) || hwm < 0) {
          var name2 = isDuplex ? duplexKey : "highWaterMark";
          throw new ERR_INVALID_OPT_VALUE(name2, hwm);
        }
        return Math.floor(hwm);
      }
      return state.objectMode ? 16 : 16 * 1024;
    }
    module.exports = {
      getHighWaterMark
    };
  }
});

// node_modules/util-deprecate/browser.js
var require_browser = __commonJS({
  "node_modules/util-deprecate/browser.js"(exports, module) {
    init_define_process();
    module.exports = deprecate;
    function deprecate(fn, msg) {
      if (config("noDeprecation")) {
        return fn;
      }
      var warned = false;
      function deprecated() {
        if (!warned) {
          if (config("throwDeprecation")) {
            throw new Error(msg);
          } else if (config("traceDeprecation")) {
            console.trace(msg);
          } else {
            console.warn(msg);
          }
          warned = true;
        }
        return fn.apply(this, arguments);
      }
      return deprecated;
    }
    function config(name2) {
      try {
        if (!globalThis.localStorage)
          return false;
      } catch (_2) {
        return false;
      }
      var val = globalThis.localStorage[name2];
      if (val == null)
        return false;
      return String(val).toLowerCase() === "true";
    }
  }
});

// node_modules/readable-stream/lib/_stream_writable.js
var require_stream_writable = __commonJS({
  "node_modules/readable-stream/lib/_stream_writable.js"(exports, module) {
    init_define_process();
    "use strict";
    module.exports = Writable;
    function CorkedRequest(state) {
      var _this = this;
      this.next = null;
      this.entry = null;
      this.finish = function() {
        onCorkedFinish(_this, state);
      };
    }
    var Duplex;
    Writable.WritableState = WritableState;
    var internalUtil = {
      deprecate: require_browser()
    };
    var Stream = require_stream_browser();
    var Buffer2 = require_buffer2().Buffer;
    var OurUint8Array = globalThis.Uint8Array || function() {
    };
    function _uint8ArrayToBuffer(chunk) {
      return Buffer2.from(chunk);
    }
    function _isUint8Array(obj) {
      return Buffer2.isBuffer(obj) || obj instanceof OurUint8Array;
    }
    var destroyImpl = require_destroy();
    var _require = require_state();
    var getHighWaterMark = _require.getHighWaterMark;
    var _require$codes = require_errors_browser().codes;
    var ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE;
    var ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED;
    var ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK;
    var ERR_STREAM_CANNOT_PIPE = _require$codes.ERR_STREAM_CANNOT_PIPE;
    var ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;
    var ERR_STREAM_NULL_VALUES = _require$codes.ERR_STREAM_NULL_VALUES;
    var ERR_STREAM_WRITE_AFTER_END = _require$codes.ERR_STREAM_WRITE_AFTER_END;
    var ERR_UNKNOWN_ENCODING = _require$codes.ERR_UNKNOWN_ENCODING;
    var errorOrDestroy = destroyImpl.errorOrDestroy;
    require_inherits_browser()(Writable, Stream);
    function nop() {
    }
    function WritableState(options, stream, isDuplex) {
      Duplex = Duplex || require_stream_duplex();
      options = options || {};
      if (typeof isDuplex !== "boolean")
        isDuplex = stream instanceof Duplex;
      this.objectMode = !!options.objectMode;
      if (isDuplex)
        this.objectMode = this.objectMode || !!options.writableObjectMode;
      this.highWaterMark = getHighWaterMark(this, options, "writableHighWaterMark", isDuplex);
      this.finalCalled = false;
      this.needDrain = false;
      this.ending = false;
      this.ended = false;
      this.finished = false;
      this.destroyed = false;
      var noDecode = options.decodeStrings === false;
      this.decodeStrings = !noDecode;
      this.defaultEncoding = options.defaultEncoding || "utf8";
      this.length = 0;
      this.writing = false;
      this.corked = 0;
      this.sync = true;
      this.bufferProcessing = false;
      this.onwrite = function(er2) {
        onwrite(stream, er2);
      };
      this.writecb = null;
      this.writelen = 0;
      this.bufferedRequest = null;
      this.lastBufferedRequest = null;
      this.pendingcb = 0;
      this.prefinished = false;
      this.errorEmitted = false;
      this.emitClose = options.emitClose !== false;
      this.autoDestroy = !!options.autoDestroy;
      this.bufferedRequestCount = 0;
      this.corkedRequestsFree = new CorkedRequest(this);
    }
    WritableState.prototype.getBuffer = function getBuffer() {
      var current = this.bufferedRequest;
      var out = [];
      while (current) {
        out.push(current);
        current = current.next;
      }
      return out;
    };
    (function() {
      try {
        Object.defineProperty(WritableState.prototype, "buffer", {
          get: internalUtil.deprecate(function writableStateBufferGetter() {
            return this.getBuffer();
          }, "_writableState.buffer is deprecated. Use _writableState.getBuffer instead.", "DEP0003")
        });
      } catch (_2) {
      }
    })();
    var realHasInstance;
    if (typeof Symbol === "function" && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === "function") {
      realHasInstance = Function.prototype[Symbol.hasInstance];
      Object.defineProperty(Writable, Symbol.hasInstance, {
        value: function value2(object) {
          if (realHasInstance.call(this, object))
            return true;
          if (this !== Writable)
            return false;
          return object && object._writableState instanceof WritableState;
        }
      });
    } else {
      realHasInstance = function realHasInstance2(object) {
        return object instanceof this;
      };
    }
    function Writable(options) {
      Duplex = Duplex || require_stream_duplex();
      var isDuplex = this instanceof Duplex;
      if (!isDuplex && !realHasInstance.call(Writable, this))
        return new Writable(options);
      this._writableState = new WritableState(options, this, isDuplex);
      this.writable = true;
      if (options) {
        if (typeof options.write === "function")
          this._write = options.write;
        if (typeof options.writev === "function")
          this._writev = options.writev;
        if (typeof options.destroy === "function")
          this._destroy = options.destroy;
        if (typeof options.final === "function")
          this._final = options.final;
      }
      Stream.call(this);
    }
    Writable.prototype.pipe = function() {
      errorOrDestroy(this, new ERR_STREAM_CANNOT_PIPE());
    };
    function writeAfterEnd(stream, cb) {
      var er2 = new ERR_STREAM_WRITE_AFTER_END();
      errorOrDestroy(stream, er2);
      define_process_default.nextTick(cb, er2);
    }
    function validChunk(stream, state, chunk, cb) {
      var er2;
      if (chunk === null) {
        er2 = new ERR_STREAM_NULL_VALUES();
      } else if (typeof chunk !== "string" && !state.objectMode) {
        er2 = new ERR_INVALID_ARG_TYPE("chunk", ["string", "Buffer"], chunk);
      }
      if (er2) {
        errorOrDestroy(stream, er2);
        define_process_default.nextTick(cb, er2);
        return false;
      }
      return true;
    }
    Writable.prototype.write = function(chunk, encoding, cb) {
      var state = this._writableState;
      var ret = false;
      var isBuf = !state.objectMode && _isUint8Array(chunk);
      if (isBuf && !Buffer2.isBuffer(chunk)) {
        chunk = _uint8ArrayToBuffer(chunk);
      }
      if (typeof encoding === "function") {
        cb = encoding;
        encoding = null;
      }
      if (isBuf)
        encoding = "buffer";
      else if (!encoding)
        encoding = state.defaultEncoding;
      if (typeof cb !== "function")
        cb = nop;
      if (state.ending)
        writeAfterEnd(this, cb);
      else if (isBuf || validChunk(this, state, chunk, cb)) {
        state.pendingcb++;
        ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
      }
      return ret;
    };
    Writable.prototype.cork = function() {
      this._writableState.corked++;
    };
    Writable.prototype.uncork = function() {
      var state = this._writableState;
      if (state.corked) {
        state.corked--;
        if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest)
          clearBuffer(this, state);
      }
    };
    Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
      if (typeof encoding === "string")
        encoding = encoding.toLowerCase();
      if (!(["hex", "utf8", "utf-8", "ascii", "binary", "base64", "ucs2", "ucs-2", "utf16le", "utf-16le", "raw"].indexOf((encoding + "").toLowerCase()) > -1))
        throw new ERR_UNKNOWN_ENCODING(encoding);
      this._writableState.defaultEncoding = encoding;
      return this;
    };
    Object.defineProperty(Writable.prototype, "writableBuffer", {
      enumerable: false,
      get: function get() {
        return this._writableState && this._writableState.getBuffer();
      }
    });
    function decodeChunk(state, chunk, encoding) {
      if (!state.objectMode && state.decodeStrings !== false && typeof chunk === "string") {
        chunk = Buffer2.from(chunk, encoding);
      }
      return chunk;
    }
    Object.defineProperty(Writable.prototype, "writableHighWaterMark", {
      enumerable: false,
      get: function get() {
        return this._writableState.highWaterMark;
      }
    });
    function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
      if (!isBuf) {
        var newChunk = decodeChunk(state, chunk, encoding);
        if (chunk !== newChunk) {
          isBuf = true;
          encoding = "buffer";
          chunk = newChunk;
        }
      }
      var len = state.objectMode ? 1 : chunk.length;
      state.length += len;
      var ret = state.length < state.highWaterMark;
      if (!ret)
        state.needDrain = true;
      if (state.writing || state.corked) {
        var last = state.lastBufferedRequest;
        state.lastBufferedRequest = {
          chunk,
          encoding,
          isBuf,
          callback: cb,
          next: null
        };
        if (last) {
          last.next = state.lastBufferedRequest;
        } else {
          state.bufferedRequest = state.lastBufferedRequest;
        }
        state.bufferedRequestCount += 1;
      } else {
        doWrite(stream, state, false, len, chunk, encoding, cb);
      }
      return ret;
    }
    function doWrite(stream, state, writev, len, chunk, encoding, cb) {
      state.writelen = len;
      state.writecb = cb;
      state.writing = true;
      state.sync = true;
      if (state.destroyed)
        state.onwrite(new ERR_STREAM_DESTROYED("write"));
      else if (writev)
        stream._writev(chunk, state.onwrite);
      else
        stream._write(chunk, encoding, state.onwrite);
      state.sync = false;
    }
    function onwriteError(stream, state, sync, er2, cb) {
      --state.pendingcb;
      if (sync) {
        define_process_default.nextTick(cb, er2);
        define_process_default.nextTick(finishMaybe, stream, state);
        stream._writableState.errorEmitted = true;
        errorOrDestroy(stream, er2);
      } else {
        cb(er2);
        stream._writableState.errorEmitted = true;
        errorOrDestroy(stream, er2);
        finishMaybe(stream, state);
      }
    }
    function onwriteStateUpdate(state) {
      state.writing = false;
      state.writecb = null;
      state.length -= state.writelen;
      state.writelen = 0;
    }
    function onwrite(stream, er2) {
      var state = stream._writableState;
      var sync = state.sync;
      var cb = state.writecb;
      if (typeof cb !== "function")
        throw new ERR_MULTIPLE_CALLBACK();
      onwriteStateUpdate(state);
      if (er2)
        onwriteError(stream, state, sync, er2, cb);
      else {
        var finished = needFinish(state) || stream.destroyed;
        if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
          clearBuffer(stream, state);
        }
        if (sync) {
          define_process_default.nextTick(afterWrite, stream, state, finished, cb);
        } else {
          afterWrite(stream, state, finished, cb);
        }
      }
    }
    function afterWrite(stream, state, finished, cb) {
      if (!finished)
        onwriteDrain(stream, state);
      state.pendingcb--;
      cb();
      finishMaybe(stream, state);
    }
    function onwriteDrain(stream, state) {
      if (state.length === 0 && state.needDrain) {
        state.needDrain = false;
        stream.emit("drain");
      }
    }
    function clearBuffer(stream, state) {
      state.bufferProcessing = true;
      var entry = state.bufferedRequest;
      if (stream._writev && entry && entry.next) {
        var l2 = state.bufferedRequestCount;
        var buffer = new Array(l2);
        var holder = state.corkedRequestsFree;
        holder.entry = entry;
        var count = 0;
        var allBuffers = true;
        while (entry) {
          buffer[count] = entry;
          if (!entry.isBuf)
            allBuffers = false;
          entry = entry.next;
          count += 1;
        }
        buffer.allBuffers = allBuffers;
        doWrite(stream, state, true, state.length, buffer, "", holder.finish);
        state.pendingcb++;
        state.lastBufferedRequest = null;
        if (holder.next) {
          state.corkedRequestsFree = holder.next;
          holder.next = null;
        } else {
          state.corkedRequestsFree = new CorkedRequest(state);
        }
        state.bufferedRequestCount = 0;
      } else {
        while (entry) {
          var chunk = entry.chunk;
          var encoding = entry.encoding;
          var cb = entry.callback;
          var len = state.objectMode ? 1 : chunk.length;
          doWrite(stream, state, false, len, chunk, encoding, cb);
          entry = entry.next;
          state.bufferedRequestCount--;
          if (state.writing) {
            break;
          }
        }
        if (entry === null)
          state.lastBufferedRequest = null;
      }
      state.bufferedRequest = entry;
      state.bufferProcessing = false;
    }
    Writable.prototype._write = function(chunk, encoding, cb) {
      cb(new ERR_METHOD_NOT_IMPLEMENTED("_write()"));
    };
    Writable.prototype._writev = null;
    Writable.prototype.end = function(chunk, encoding, cb) {
      var state = this._writableState;
      if (typeof chunk === "function") {
        cb = chunk;
        chunk = null;
        encoding = null;
      } else if (typeof encoding === "function") {
        cb = encoding;
        encoding = null;
      }
      if (chunk !== null && chunk !== void 0)
        this.write(chunk, encoding);
      if (state.corked) {
        state.corked = 1;
        this.uncork();
      }
      if (!state.ending)
        endWritable(this, state, cb);
      return this;
    };
    Object.defineProperty(Writable.prototype, "writableLength", {
      enumerable: false,
      get: function get() {
        return this._writableState.length;
      }
    });
    function needFinish(state) {
      return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
    }
    function callFinal(stream, state) {
      stream._final(function(err) {
        state.pendingcb--;
        if (err) {
          errorOrDestroy(stream, err);
        }
        state.prefinished = true;
        stream.emit("prefinish");
        finishMaybe(stream, state);
      });
    }
    function prefinish(stream, state) {
      if (!state.prefinished && !state.finalCalled) {
        if (typeof stream._final === "function" && !state.destroyed) {
          state.pendingcb++;
          state.finalCalled = true;
          define_process_default.nextTick(callFinal, stream, state);
        } else {
          state.prefinished = true;
          stream.emit("prefinish");
        }
      }
    }
    function finishMaybe(stream, state) {
      var need = needFinish(state);
      if (need) {
        prefinish(stream, state);
        if (state.pendingcb === 0) {
          state.finished = true;
          stream.emit("finish");
          if (state.autoDestroy) {
            var rState = stream._readableState;
            if (!rState || rState.autoDestroy && rState.endEmitted) {
              stream.destroy();
            }
          }
        }
      }
      return need;
    }
    function endWritable(stream, state, cb) {
      state.ending = true;
      finishMaybe(stream, state);
      if (cb) {
        if (state.finished)
          define_process_default.nextTick(cb);
        else
          stream.once("finish", cb);
      }
      state.ended = true;
      stream.writable = false;
    }
    function onCorkedFinish(corkReq, state, err) {
      var entry = corkReq.entry;
      corkReq.entry = null;
      while (entry) {
        var cb = entry.callback;
        state.pendingcb--;
        cb(err);
        entry = entry.next;
      }
      state.corkedRequestsFree.next = corkReq;
    }
    Object.defineProperty(Writable.prototype, "destroyed", {
      enumerable: false,
      get: function get() {
        if (this._writableState === void 0) {
          return false;
        }
        return this._writableState.destroyed;
      },
      set: function set(value2) {
        if (!this._writableState) {
          return;
        }
        this._writableState.destroyed = value2;
      }
    });
    Writable.prototype.destroy = destroyImpl.destroy;
    Writable.prototype._undestroy = destroyImpl.undestroy;
    Writable.prototype._destroy = function(err, cb) {
      cb(err);
    };
  }
});

// node_modules/readable-stream/lib/_stream_duplex.js
var require_stream_duplex = __commonJS({
  "node_modules/readable-stream/lib/_stream_duplex.js"(exports, module) {
    init_define_process();
    "use strict";
    var objectKeys = Object.keys || function(obj) {
      var keys2 = [];
      for (var key2 in obj) {
        keys2.push(key2);
      }
      return keys2;
    };
    module.exports = Duplex;
    var Readable = require_stream_readable();
    var Writable = require_stream_writable();
    require_inherits_browser()(Duplex, Readable);
    {
      keys = objectKeys(Writable.prototype);
      for (v7 = 0; v7 < keys.length; v7++) {
        method = keys[v7];
        if (!Duplex.prototype[method])
          Duplex.prototype[method] = Writable.prototype[method];
      }
    }
    var keys;
    var method;
    var v7;
    function Duplex(options) {
      if (!(this instanceof Duplex))
        return new Duplex(options);
      Readable.call(this, options);
      Writable.call(this, options);
      this.allowHalfOpen = true;
      if (options) {
        if (options.readable === false)
          this.readable = false;
        if (options.writable === false)
          this.writable = false;
        if (options.allowHalfOpen === false) {
          this.allowHalfOpen = false;
          this.once("end", onend);
        }
      }
    }
    Object.defineProperty(Duplex.prototype, "writableHighWaterMark", {
      enumerable: false,
      get: function get() {
        return this._writableState.highWaterMark;
      }
    });
    Object.defineProperty(Duplex.prototype, "writableBuffer", {
      enumerable: false,
      get: function get() {
        return this._writableState && this._writableState.getBuffer();
      }
    });
    Object.defineProperty(Duplex.prototype, "writableLength", {
      enumerable: false,
      get: function get() {
        return this._writableState.length;
      }
    });
    function onend() {
      if (this._writableState.ended)
        return;
      define_process_default.nextTick(onEndNT, this);
    }
    function onEndNT(self2) {
      self2.end();
    }
    Object.defineProperty(Duplex.prototype, "destroyed", {
      enumerable: false,
      get: function get() {
        if (this._readableState === void 0 || this._writableState === void 0) {
          return false;
        }
        return this._readableState.destroyed && this._writableState.destroyed;
      },
      set: function set(value2) {
        if (this._readableState === void 0 || this._writableState === void 0) {
          return;
        }
        this._readableState.destroyed = value2;
        this._writableState.destroyed = value2;
      }
    });
  }
});

// node_modules/string_decoder/node_modules/safe-buffer/index.js
var require_safe_buffer = __commonJS({
  "node_modules/string_decoder/node_modules/safe-buffer/index.js"(exports, module) {
    init_define_process();
    var buffer = require_buffer2();
    var Buffer2 = buffer.Buffer;
    function copyProps(src, dst) {
      for (var key2 in src) {
        dst[key2] = src[key2];
      }
    }
    if (Buffer2.from && Buffer2.alloc && Buffer2.allocUnsafe && Buffer2.allocUnsafeSlow) {
      module.exports = buffer;
    } else {
      copyProps(buffer, exports);
      exports.Buffer = SafeBuffer;
    }
    function SafeBuffer(arg, encodingOrOffset, length) {
      return Buffer2(arg, encodingOrOffset, length);
    }
    SafeBuffer.prototype = Object.create(Buffer2.prototype);
    copyProps(Buffer2, SafeBuffer);
    SafeBuffer.from = function(arg, encodingOrOffset, length) {
      if (typeof arg === "number") {
        throw new TypeError("Argument must not be a number");
      }
      return Buffer2(arg, encodingOrOffset, length);
    };
    SafeBuffer.alloc = function(size, fill, encoding) {
      if (typeof size !== "number") {
        throw new TypeError("Argument must be a number");
      }
      var buf = Buffer2(size);
      if (fill !== void 0) {
        if (typeof encoding === "string") {
          buf.fill(fill, encoding);
        } else {
          buf.fill(fill);
        }
      } else {
        buf.fill(0);
      }
      return buf;
    };
    SafeBuffer.allocUnsafe = function(size) {
      if (typeof size !== "number") {
        throw new TypeError("Argument must be a number");
      }
      return Buffer2(size);
    };
    SafeBuffer.allocUnsafeSlow = function(size) {
      if (typeof size !== "number") {
        throw new TypeError("Argument must be a number");
      }
      return buffer.SlowBuffer(size);
    };
  }
});

// node_modules/string_decoder/lib/string_decoder.js
var require_string_decoder = __commonJS({
  "node_modules/string_decoder/lib/string_decoder.js"(exports) {
    init_define_process();
    "use strict";
    var Buffer2 = require_safe_buffer().Buffer;
    var isEncoding = Buffer2.isEncoding || function(encoding) {
      encoding = "" + encoding;
      switch (encoding && encoding.toLowerCase()) {
        case "hex":
        case "utf8":
        case "utf-8":
        case "ascii":
        case "binary":
        case "base64":
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
        case "raw":
          return true;
        default:
          return false;
      }
    };
    function _normalizeEncoding(enc) {
      if (!enc)
        return "utf8";
      var retried;
      while (true) {
        switch (enc) {
          case "utf8":
          case "utf-8":
            return "utf8";
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
            return "utf16le";
          case "latin1":
          case "binary":
            return "latin1";
          case "base64":
          case "ascii":
          case "hex":
            return enc;
          default:
            if (retried)
              return;
            enc = ("" + enc).toLowerCase();
            retried = true;
        }
      }
    }
    function normalizeEncoding(enc) {
      var nenc = _normalizeEncoding(enc);
      if (typeof nenc !== "string" && (Buffer2.isEncoding === isEncoding || !isEncoding(enc)))
        throw new Error("Unknown encoding: " + enc);
      return nenc || enc;
    }
    exports.StringDecoder = StringDecoder;
    function StringDecoder(encoding) {
      this.encoding = normalizeEncoding(encoding);
      var nb;
      switch (this.encoding) {
        case "utf16le":
          this.text = utf16Text;
          this.end = utf16End;
          nb = 4;
          break;
        case "utf8":
          this.fillLast = utf8FillLast;
          nb = 4;
          break;
        case "base64":
          this.text = base64Text;
          this.end = base64End;
          nb = 3;
          break;
        default:
          this.write = simpleWrite;
          this.end = simpleEnd;
          return;
      }
      this.lastNeed = 0;
      this.lastTotal = 0;
      this.lastChar = Buffer2.allocUnsafe(nb);
    }
    StringDecoder.prototype.write = function(buf) {
      if (buf.length === 0)
        return "";
      var r2;
      var i2;
      if (this.lastNeed) {
        r2 = this.fillLast(buf);
        if (r2 === void 0)
          return "";
        i2 = this.lastNeed;
        this.lastNeed = 0;
      } else {
        i2 = 0;
      }
      if (i2 < buf.length)
        return r2 ? r2 + this.text(buf, i2) : this.text(buf, i2);
      return r2 || "";
    };
    StringDecoder.prototype.end = utf8End;
    StringDecoder.prototype.text = utf8Text;
    StringDecoder.prototype.fillLast = function(buf) {
      if (this.lastNeed <= buf.length) {
        buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
        return this.lastChar.toString(this.encoding, 0, this.lastTotal);
      }
      buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
      this.lastNeed -= buf.length;
    };
    function utf8CheckByte(byte) {
      if (byte <= 127)
        return 0;
      else if (byte >> 5 === 6)
        return 2;
      else if (byte >> 4 === 14)
        return 3;
      else if (byte >> 3 === 30)
        return 4;
      return byte >> 6 === 2 ? -1 : -2;
    }
    function utf8CheckIncomplete(self2, buf, i2) {
      var j3 = buf.length - 1;
      if (j3 < i2)
        return 0;
      var nb = utf8CheckByte(buf[j3]);
      if (nb >= 0) {
        if (nb > 0)
          self2.lastNeed = nb - 1;
        return nb;
      }
      if (--j3 < i2 || nb === -2)
        return 0;
      nb = utf8CheckByte(buf[j3]);
      if (nb >= 0) {
        if (nb > 0)
          self2.lastNeed = nb - 2;
        return nb;
      }
      if (--j3 < i2 || nb === -2)
        return 0;
      nb = utf8CheckByte(buf[j3]);
      if (nb >= 0) {
        if (nb > 0) {
          if (nb === 2)
            nb = 0;
          else
            self2.lastNeed = nb - 3;
        }
        return nb;
      }
      return 0;
    }
    function utf8CheckExtraBytes(self2, buf, p3) {
      if ((buf[0] & 192) !== 128) {
        self2.lastNeed = 0;
        return "\uFFFD";
      }
      if (self2.lastNeed > 1 && buf.length > 1) {
        if ((buf[1] & 192) !== 128) {
          self2.lastNeed = 1;
          return "\uFFFD";
        }
        if (self2.lastNeed > 2 && buf.length > 2) {
          if ((buf[2] & 192) !== 128) {
            self2.lastNeed = 2;
            return "\uFFFD";
          }
        }
      }
    }
    function utf8FillLast(buf) {
      var p3 = this.lastTotal - this.lastNeed;
      var r2 = utf8CheckExtraBytes(this, buf, p3);
      if (r2 !== void 0)
        return r2;
      if (this.lastNeed <= buf.length) {
        buf.copy(this.lastChar, p3, 0, this.lastNeed);
        return this.lastChar.toString(this.encoding, 0, this.lastTotal);
      }
      buf.copy(this.lastChar, p3, 0, buf.length);
      this.lastNeed -= buf.length;
    }
    function utf8Text(buf, i2) {
      var total = utf8CheckIncomplete(this, buf, i2);
      if (!this.lastNeed)
        return buf.toString("utf8", i2);
      this.lastTotal = total;
      var end = buf.length - (total - this.lastNeed);
      buf.copy(this.lastChar, 0, end);
      return buf.toString("utf8", i2, end);
    }
    function utf8End(buf) {
      var r2 = buf && buf.length ? this.write(buf) : "";
      if (this.lastNeed)
        return r2 + "\uFFFD";
      return r2;
    }
    function utf16Text(buf, i2) {
      if ((buf.length - i2) % 2 === 0) {
        var r2 = buf.toString("utf16le", i2);
        if (r2) {
          var c2 = r2.charCodeAt(r2.length - 1);
          if (c2 >= 55296 && c2 <= 56319) {
            this.lastNeed = 2;
            this.lastTotal = 4;
            this.lastChar[0] = buf[buf.length - 2];
            this.lastChar[1] = buf[buf.length - 1];
            return r2.slice(0, -1);
          }
        }
        return r2;
      }
      this.lastNeed = 1;
      this.lastTotal = 2;
      this.lastChar[0] = buf[buf.length - 1];
      return buf.toString("utf16le", i2, buf.length - 1);
    }
    function utf16End(buf) {
      var r2 = buf && buf.length ? this.write(buf) : "";
      if (this.lastNeed) {
        var end = this.lastTotal - this.lastNeed;
        return r2 + this.lastChar.toString("utf16le", 0, end);
      }
      return r2;
    }
    function base64Text(buf, i2) {
      var n = (buf.length - i2) % 3;
      if (n === 0)
        return buf.toString("base64", i2);
      this.lastNeed = 3 - n;
      this.lastTotal = 3;
      if (n === 1) {
        this.lastChar[0] = buf[buf.length - 1];
      } else {
        this.lastChar[0] = buf[buf.length - 2];
        this.lastChar[1] = buf[buf.length - 1];
      }
      return buf.toString("base64", i2, buf.length - n);
    }
    function base64End(buf) {
      var r2 = buf && buf.length ? this.write(buf) : "";
      if (this.lastNeed)
        return r2 + this.lastChar.toString("base64", 0, 3 - this.lastNeed);
      return r2;
    }
    function simpleWrite(buf) {
      return buf.toString(this.encoding);
    }
    function simpleEnd(buf) {
      return buf && buf.length ? this.write(buf) : "";
    }
  }
});

// node_modules/readable-stream/lib/internal/streams/end-of-stream.js
var require_end_of_stream = __commonJS({
  "node_modules/readable-stream/lib/internal/streams/end-of-stream.js"(exports, module) {
    init_define_process();
    "use strict";
    var ERR_STREAM_PREMATURE_CLOSE = require_errors_browser().codes.ERR_STREAM_PREMATURE_CLOSE;
    function once(callback) {
      var called = false;
      return function() {
        if (called)
          return;
        called = true;
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        callback.apply(this, args);
      };
    }
    function noop() {
    }
    function isRequest(stream) {
      return stream.setHeader && typeof stream.abort === "function";
    }
    function eos(stream, opts, callback) {
      if (typeof opts === "function")
        return eos(stream, null, opts);
      if (!opts)
        opts = {};
      callback = once(callback || noop);
      var readable = opts.readable || opts.readable !== false && stream.readable;
      var writable = opts.writable || opts.writable !== false && stream.writable;
      var onlegacyfinish = function onlegacyfinish2() {
        if (!stream.writable)
          onfinish();
      };
      var writableEnded = stream._writableState && stream._writableState.finished;
      var onfinish = function onfinish2() {
        writable = false;
        writableEnded = true;
        if (!readable)
          callback.call(stream);
      };
      var readableEnded = stream._readableState && stream._readableState.endEmitted;
      var onend = function onend2() {
        readable = false;
        readableEnded = true;
        if (!writable)
          callback.call(stream);
      };
      var onerror = function onerror2(err) {
        callback.call(stream, err);
      };
      var onclose = function onclose2() {
        var err;
        if (readable && !readableEnded) {
          if (!stream._readableState || !stream._readableState.ended)
            err = new ERR_STREAM_PREMATURE_CLOSE();
          return callback.call(stream, err);
        }
        if (writable && !writableEnded) {
          if (!stream._writableState || !stream._writableState.ended)
            err = new ERR_STREAM_PREMATURE_CLOSE();
          return callback.call(stream, err);
        }
      };
      var onrequest = function onrequest2() {
        stream.req.on("finish", onfinish);
      };
      if (isRequest(stream)) {
        stream.on("complete", onfinish);
        stream.on("abort", onclose);
        if (stream.req)
          onrequest();
        else
          stream.on("request", onrequest);
      } else if (writable && !stream._writableState) {
        stream.on("end", onlegacyfinish);
        stream.on("close", onlegacyfinish);
      }
      stream.on("end", onend);
      stream.on("finish", onfinish);
      if (opts.error !== false)
        stream.on("error", onerror);
      stream.on("close", onclose);
      return function() {
        stream.removeListener("complete", onfinish);
        stream.removeListener("abort", onclose);
        stream.removeListener("request", onrequest);
        if (stream.req)
          stream.req.removeListener("finish", onfinish);
        stream.removeListener("end", onlegacyfinish);
        stream.removeListener("close", onlegacyfinish);
        stream.removeListener("finish", onfinish);
        stream.removeListener("end", onend);
        stream.removeListener("error", onerror);
        stream.removeListener("close", onclose);
      };
    }
    module.exports = eos;
  }
});

// node_modules/readable-stream/lib/internal/streams/async_iterator.js
var require_async_iterator = __commonJS({
  "node_modules/readable-stream/lib/internal/streams/async_iterator.js"(exports, module) {
    init_define_process();
    "use strict";
    var _Object$setPrototypeO;
    function _defineProperty(obj, key2, value2) {
      if (key2 in obj) {
        Object.defineProperty(obj, key2, { value: value2, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key2] = value2;
      }
      return obj;
    }
    var finished = require_end_of_stream();
    var kLastResolve = Symbol("lastResolve");
    var kLastReject = Symbol("lastReject");
    var kError = Symbol("error");
    var kEnded = Symbol("ended");
    var kLastPromise = Symbol("lastPromise");
    var kHandlePromise = Symbol("handlePromise");
    var kStream = Symbol("stream");
    function createIterResult(value2, done) {
      return {
        value: value2,
        done
      };
    }
    function readAndResolve(iter) {
      var resolve = iter[kLastResolve];
      if (resolve !== null) {
        var data = iter[kStream].read();
        if (data !== null) {
          iter[kLastPromise] = null;
          iter[kLastResolve] = null;
          iter[kLastReject] = null;
          resolve(createIterResult(data, false));
        }
      }
    }
    function onReadable(iter) {
      define_process_default.nextTick(readAndResolve, iter);
    }
    function wrapForNext(lastPromise, iter) {
      return function(resolve, reject) {
        lastPromise.then(function() {
          if (iter[kEnded]) {
            resolve(createIterResult(void 0, true));
            return;
          }
          iter[kHandlePromise](resolve, reject);
        }, reject);
      };
    }
    var AsyncIteratorPrototype = Object.getPrototypeOf(function() {
    });
    var ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf((_Object$setPrototypeO = {
      get stream() {
        return this[kStream];
      },
      next: function next() {
        var _this = this;
        var error = this[kError];
        if (error !== null) {
          return Promise.reject(error);
        }
        if (this[kEnded]) {
          return Promise.resolve(createIterResult(void 0, true));
        }
        if (this[kStream].destroyed) {
          return new Promise(function(resolve, reject) {
            define_process_default.nextTick(function() {
              if (_this[kError]) {
                reject(_this[kError]);
              } else {
                resolve(createIterResult(void 0, true));
              }
            });
          });
        }
        var lastPromise = this[kLastPromise];
        var promise;
        if (lastPromise) {
          promise = new Promise(wrapForNext(lastPromise, this));
        } else {
          var data = this[kStream].read();
          if (data !== null) {
            return Promise.resolve(createIterResult(data, false));
          }
          promise = new Promise(this[kHandlePromise]);
        }
        this[kLastPromise] = promise;
        return promise;
      }
    }, _defineProperty(_Object$setPrototypeO, Symbol.asyncIterator, function() {
      return this;
    }), _defineProperty(_Object$setPrototypeO, "return", function _return() {
      var _this2 = this;
      return new Promise(function(resolve, reject) {
        _this2[kStream].destroy(null, function(err) {
          if (err) {
            reject(err);
            return;
          }
          resolve(createIterResult(void 0, true));
        });
      });
    }), _Object$setPrototypeO), AsyncIteratorPrototype);
    var createReadableStreamAsyncIterator = function createReadableStreamAsyncIterator2(stream) {
      var _Object$create;
      var iterator = Object.create(ReadableStreamAsyncIteratorPrototype, (_Object$create = {}, _defineProperty(_Object$create, kStream, {
        value: stream,
        writable: true
      }), _defineProperty(_Object$create, kLastResolve, {
        value: null,
        writable: true
      }), _defineProperty(_Object$create, kLastReject, {
        value: null,
        writable: true
      }), _defineProperty(_Object$create, kError, {
        value: null,
        writable: true
      }), _defineProperty(_Object$create, kEnded, {
        value: stream._readableState.endEmitted,
        writable: true
      }), _defineProperty(_Object$create, kHandlePromise, {
        value: function value2(resolve, reject) {
          var data = iterator[kStream].read();
          if (data) {
            iterator[kLastPromise] = null;
            iterator[kLastResolve] = null;
            iterator[kLastReject] = null;
            resolve(createIterResult(data, false));
          } else {
            iterator[kLastResolve] = resolve;
            iterator[kLastReject] = reject;
          }
        },
        writable: true
      }), _Object$create));
      iterator[kLastPromise] = null;
      finished(stream, function(err) {
        if (err && err.code !== "ERR_STREAM_PREMATURE_CLOSE") {
          var reject = iterator[kLastReject];
          if (reject !== null) {
            iterator[kLastPromise] = null;
            iterator[kLastResolve] = null;
            iterator[kLastReject] = null;
            reject(err);
          }
          iterator[kError] = err;
          return;
        }
        var resolve = iterator[kLastResolve];
        if (resolve !== null) {
          iterator[kLastPromise] = null;
          iterator[kLastResolve] = null;
          iterator[kLastReject] = null;
          resolve(createIterResult(void 0, true));
        }
        iterator[kEnded] = true;
      });
      stream.on("readable", onReadable.bind(null, iterator));
      return iterator;
    };
    module.exports = createReadableStreamAsyncIterator;
  }
});

// node_modules/readable-stream/lib/internal/streams/from-browser.js
var require_from_browser = __commonJS({
  "node_modules/readable-stream/lib/internal/streams/from-browser.js"(exports, module) {
    init_define_process();
    module.exports = function() {
      throw new Error("Readable.from is not available in the browser");
    };
  }
});

// node_modules/readable-stream/lib/_stream_readable.js
var require_stream_readable = __commonJS({
  "node_modules/readable-stream/lib/_stream_readable.js"(exports, module) {
    init_define_process();
    "use strict";
    module.exports = Readable;
    var Duplex;
    Readable.ReadableState = ReadableState;
    var EE = require_events().EventEmitter;
    var EElistenerCount = function EElistenerCount2(emitter, type) {
      return emitter.listeners(type).length;
    };
    var Stream = require_stream_browser();
    var Buffer2 = require_buffer2().Buffer;
    var OurUint8Array = globalThis.Uint8Array || function() {
    };
    function _uint8ArrayToBuffer(chunk) {
      return Buffer2.from(chunk);
    }
    function _isUint8Array(obj) {
      return Buffer2.isBuffer(obj) || obj instanceof OurUint8Array;
    }
    var debugUtil = require_util();
    var debug;
    if (debugUtil && debugUtil.debuglog) {
      debug = debugUtil.debuglog("stream");
    } else {
      debug = function debug2() {
      };
    }
    var BufferList = require_buffer_list();
    var destroyImpl = require_destroy();
    var _require = require_state();
    var getHighWaterMark = _require.getHighWaterMark;
    var _require$codes = require_errors_browser().codes;
    var ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE;
    var ERR_STREAM_PUSH_AFTER_EOF = _require$codes.ERR_STREAM_PUSH_AFTER_EOF;
    var ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED;
    var ERR_STREAM_UNSHIFT_AFTER_END_EVENT = _require$codes.ERR_STREAM_UNSHIFT_AFTER_END_EVENT;
    var StringDecoder;
    var createReadableStreamAsyncIterator;
    var from;
    require_inherits_browser()(Readable, Stream);
    var errorOrDestroy = destroyImpl.errorOrDestroy;
    var kProxyEvents = ["error", "close", "destroy", "pause", "resume"];
    function prependListener(emitter, event, fn) {
      if (typeof emitter.prependListener === "function")
        return emitter.prependListener(event, fn);
      if (!emitter._events || !emitter._events[event])
        emitter.on(event, fn);
      else if (Array.isArray(emitter._events[event]))
        emitter._events[event].unshift(fn);
      else
        emitter._events[event] = [fn, emitter._events[event]];
    }
    function ReadableState(options, stream, isDuplex) {
      Duplex = Duplex || require_stream_duplex();
      options = options || {};
      if (typeof isDuplex !== "boolean")
        isDuplex = stream instanceof Duplex;
      this.objectMode = !!options.objectMode;
      if (isDuplex)
        this.objectMode = this.objectMode || !!options.readableObjectMode;
      this.highWaterMark = getHighWaterMark(this, options, "readableHighWaterMark", isDuplex);
      this.buffer = new BufferList();
      this.length = 0;
      this.pipes = null;
      this.pipesCount = 0;
      this.flowing = null;
      this.ended = false;
      this.endEmitted = false;
      this.reading = false;
      this.sync = true;
      this.needReadable = false;
      this.emittedReadable = false;
      this.readableListening = false;
      this.resumeScheduled = false;
      this.paused = true;
      this.emitClose = options.emitClose !== false;
      this.autoDestroy = !!options.autoDestroy;
      this.destroyed = false;
      this.defaultEncoding = options.defaultEncoding || "utf8";
      this.awaitDrain = 0;
      this.readingMore = false;
      this.decoder = null;
      this.encoding = null;
      if (options.encoding) {
        if (!StringDecoder)
          StringDecoder = require_string_decoder().StringDecoder;
        this.decoder = new StringDecoder(options.encoding);
        this.encoding = options.encoding;
      }
    }
    function Readable(options) {
      Duplex = Duplex || require_stream_duplex();
      if (!(this instanceof Readable))
        return new Readable(options);
      var isDuplex = this instanceof Duplex;
      this._readableState = new ReadableState(options, this, isDuplex);
      this.readable = true;
      if (options) {
        if (typeof options.read === "function")
          this._read = options.read;
        if (typeof options.destroy === "function")
          this._destroy = options.destroy;
      }
      Stream.call(this);
    }
    Object.defineProperty(Readable.prototype, "destroyed", {
      enumerable: false,
      get: function get() {
        if (this._readableState === void 0) {
          return false;
        }
        return this._readableState.destroyed;
      },
      set: function set(value2) {
        if (!this._readableState) {
          return;
        }
        this._readableState.destroyed = value2;
      }
    });
    Readable.prototype.destroy = destroyImpl.destroy;
    Readable.prototype._undestroy = destroyImpl.undestroy;
    Readable.prototype._destroy = function(err, cb) {
      cb(err);
    };
    Readable.prototype.push = function(chunk, encoding) {
      var state = this._readableState;
      var skipChunkCheck;
      if (!state.objectMode) {
        if (typeof chunk === "string") {
          encoding = encoding || state.defaultEncoding;
          if (encoding !== state.encoding) {
            chunk = Buffer2.from(chunk, encoding);
            encoding = "";
          }
          skipChunkCheck = true;
        }
      } else {
        skipChunkCheck = true;
      }
      return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
    };
    Readable.prototype.unshift = function(chunk) {
      return readableAddChunk(this, chunk, null, true, false);
    };
    function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
      debug("readableAddChunk", chunk);
      var state = stream._readableState;
      if (chunk === null) {
        state.reading = false;
        onEofChunk(stream, state);
      } else {
        var er2;
        if (!skipChunkCheck)
          er2 = chunkInvalid(state, chunk);
        if (er2) {
          errorOrDestroy(stream, er2);
        } else if (state.objectMode || chunk && chunk.length > 0) {
          if (typeof chunk !== "string" && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer2.prototype) {
            chunk = _uint8ArrayToBuffer(chunk);
          }
          if (addToFront) {
            if (state.endEmitted)
              errorOrDestroy(stream, new ERR_STREAM_UNSHIFT_AFTER_END_EVENT());
            else
              addChunk(stream, state, chunk, true);
          } else if (state.ended) {
            errorOrDestroy(stream, new ERR_STREAM_PUSH_AFTER_EOF());
          } else if (state.destroyed) {
            return false;
          } else {
            state.reading = false;
            if (state.decoder && !encoding) {
              chunk = state.decoder.write(chunk);
              if (state.objectMode || chunk.length !== 0)
                addChunk(stream, state, chunk, false);
              else
                maybeReadMore(stream, state);
            } else {
              addChunk(stream, state, chunk, false);
            }
          }
        } else if (!addToFront) {
          state.reading = false;
          maybeReadMore(stream, state);
        }
      }
      return !state.ended && (state.length < state.highWaterMark || state.length === 0);
    }
    function addChunk(stream, state, chunk, addToFront) {
      if (state.flowing && state.length === 0 && !state.sync) {
        state.awaitDrain = 0;
        stream.emit("data", chunk);
      } else {
        state.length += state.objectMode ? 1 : chunk.length;
        if (addToFront)
          state.buffer.unshift(chunk);
        else
          state.buffer.push(chunk);
        if (state.needReadable)
          emitReadable(stream);
      }
      maybeReadMore(stream, state);
    }
    function chunkInvalid(state, chunk) {
      var er2;
      if (!_isUint8Array(chunk) && typeof chunk !== "string" && chunk !== void 0 && !state.objectMode) {
        er2 = new ERR_INVALID_ARG_TYPE("chunk", ["string", "Buffer", "Uint8Array"], chunk);
      }
      return er2;
    }
    Readable.prototype.isPaused = function() {
      return this._readableState.flowing === false;
    };
    Readable.prototype.setEncoding = function(enc) {
      if (!StringDecoder)
        StringDecoder = require_string_decoder().StringDecoder;
      var decoder = new StringDecoder(enc);
      this._readableState.decoder = decoder;
      this._readableState.encoding = this._readableState.decoder.encoding;
      var p3 = this._readableState.buffer.head;
      var content = "";
      while (p3 !== null) {
        content += decoder.write(p3.data);
        p3 = p3.next;
      }
      this._readableState.buffer.clear();
      if (content !== "")
        this._readableState.buffer.push(content);
      this._readableState.length = content.length;
      return this;
    };
    var MAX_HWM = 1073741824;
    function computeNewHighWaterMark(n) {
      if (n >= MAX_HWM) {
        n = MAX_HWM;
      } else {
        n--;
        n |= n >>> 1;
        n |= n >>> 2;
        n |= n >>> 4;
        n |= n >>> 8;
        n |= n >>> 16;
        n++;
      }
      return n;
    }
    function howMuchToRead(n, state) {
      if (n <= 0 || state.length === 0 && state.ended)
        return 0;
      if (state.objectMode)
        return 1;
      if (n !== n) {
        if (state.flowing && state.length)
          return state.buffer.head.data.length;
        else
          return state.length;
      }
      if (n > state.highWaterMark)
        state.highWaterMark = computeNewHighWaterMark(n);
      if (n <= state.length)
        return n;
      if (!state.ended) {
        state.needReadable = true;
        return 0;
      }
      return state.length;
    }
    Readable.prototype.read = function(n) {
      debug("read", n);
      n = parseInt(n, 10);
      var state = this._readableState;
      var nOrig = n;
      if (n !== 0)
        state.emittedReadable = false;
      if (n === 0 && state.needReadable && ((state.highWaterMark !== 0 ? state.length >= state.highWaterMark : state.length > 0) || state.ended)) {
        debug("read: emitReadable", state.length, state.ended);
        if (state.length === 0 && state.ended)
          endReadable(this);
        else
          emitReadable(this);
        return null;
      }
      n = howMuchToRead(n, state);
      if (n === 0 && state.ended) {
        if (state.length === 0)
          endReadable(this);
        return null;
      }
      var doRead = state.needReadable;
      debug("need readable", doRead);
      if (state.length === 0 || state.length - n < state.highWaterMark) {
        doRead = true;
        debug("length less than watermark", doRead);
      }
      if (state.ended || state.reading) {
        doRead = false;
        debug("reading or ended", doRead);
      } else if (doRead) {
        debug("do read");
        state.reading = true;
        state.sync = true;
        if (state.length === 0)
          state.needReadable = true;
        this._read(state.highWaterMark);
        state.sync = false;
        if (!state.reading)
          n = howMuchToRead(nOrig, state);
      }
      var ret;
      if (n > 0)
        ret = fromList(n, state);
      else
        ret = null;
      if (ret === null) {
        state.needReadable = state.length <= state.highWaterMark;
        n = 0;
      } else {
        state.length -= n;
        state.awaitDrain = 0;
      }
      if (state.length === 0) {
        if (!state.ended)
          state.needReadable = true;
        if (nOrig !== n && state.ended)
          endReadable(this);
      }
      if (ret !== null)
        this.emit("data", ret);
      return ret;
    };
    function onEofChunk(stream, state) {
      debug("onEofChunk");
      if (state.ended)
        return;
      if (state.decoder) {
        var chunk = state.decoder.end();
        if (chunk && chunk.length) {
          state.buffer.push(chunk);
          state.length += state.objectMode ? 1 : chunk.length;
        }
      }
      state.ended = true;
      if (state.sync) {
        emitReadable(stream);
      } else {
        state.needReadable = false;
        if (!state.emittedReadable) {
          state.emittedReadable = true;
          emitReadable_(stream);
        }
      }
    }
    function emitReadable(stream) {
      var state = stream._readableState;
      debug("emitReadable", state.needReadable, state.emittedReadable);
      state.needReadable = false;
      if (!state.emittedReadable) {
        debug("emitReadable", state.flowing);
        state.emittedReadable = true;
        define_process_default.nextTick(emitReadable_, stream);
      }
    }
    function emitReadable_(stream) {
      var state = stream._readableState;
      debug("emitReadable_", state.destroyed, state.length, state.ended);
      if (!state.destroyed && (state.length || state.ended)) {
        stream.emit("readable");
        state.emittedReadable = false;
      }
      state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark;
      flow(stream);
    }
    function maybeReadMore(stream, state) {
      if (!state.readingMore) {
        state.readingMore = true;
        define_process_default.nextTick(maybeReadMore_, stream, state);
      }
    }
    function maybeReadMore_(stream, state) {
      while (!state.reading && !state.ended && (state.length < state.highWaterMark || state.flowing && state.length === 0)) {
        var len = state.length;
        debug("maybeReadMore read 0");
        stream.read(0);
        if (len === state.length)
          break;
      }
      state.readingMore = false;
    }
    Readable.prototype._read = function(n) {
      errorOrDestroy(this, new ERR_METHOD_NOT_IMPLEMENTED("_read()"));
    };
    Readable.prototype.pipe = function(dest, pipeOpts) {
      var src = this;
      var state = this._readableState;
      switch (state.pipesCount) {
        case 0:
          state.pipes = dest;
          break;
        case 1:
          state.pipes = [state.pipes, dest];
          break;
        default:
          state.pipes.push(dest);
          break;
      }
      state.pipesCount += 1;
      debug("pipe count=%d opts=%j", state.pipesCount, pipeOpts);
      var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== define_process_default.stdout && dest !== define_process_default.stderr;
      var endFn = doEnd ? onend : unpipe;
      if (state.endEmitted)
        define_process_default.nextTick(endFn);
      else
        src.once("end", endFn);
      dest.on("unpipe", onunpipe);
      function onunpipe(readable, unpipeInfo) {
        debug("onunpipe");
        if (readable === src) {
          if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
            unpipeInfo.hasUnpiped = true;
            cleanup();
          }
        }
      }
      function onend() {
        debug("onend");
        dest.end();
      }
      var ondrain = pipeOnDrain(src);
      dest.on("drain", ondrain);
      var cleanedUp = false;
      function cleanup() {
        debug("cleanup");
        dest.removeListener("close", onclose);
        dest.removeListener("finish", onfinish);
        dest.removeListener("drain", ondrain);
        dest.removeListener("error", onerror);
        dest.removeListener("unpipe", onunpipe);
        src.removeListener("end", onend);
        src.removeListener("end", unpipe);
        src.removeListener("data", ondata);
        cleanedUp = true;
        if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain))
          ondrain();
      }
      src.on("data", ondata);
      function ondata(chunk) {
        debug("ondata");
        var ret = dest.write(chunk);
        debug("dest.write", ret);
        if (ret === false) {
          if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
            debug("false write response, pause", state.awaitDrain);
            state.awaitDrain++;
          }
          src.pause();
        }
      }
      function onerror(er2) {
        debug("onerror", er2);
        unpipe();
        dest.removeListener("error", onerror);
        if (EElistenerCount(dest, "error") === 0)
          errorOrDestroy(dest, er2);
      }
      prependListener(dest, "error", onerror);
      function onclose() {
        dest.removeListener("finish", onfinish);
        unpipe();
      }
      dest.once("close", onclose);
      function onfinish() {
        debug("onfinish");
        dest.removeListener("close", onclose);
        unpipe();
      }
      dest.once("finish", onfinish);
      function unpipe() {
        debug("unpipe");
        src.unpipe(dest);
      }
      dest.emit("pipe", src);
      if (!state.flowing) {
        debug("pipe resume");
        src.resume();
      }
      return dest;
    };
    function pipeOnDrain(src) {
      return function pipeOnDrainFunctionResult() {
        var state = src._readableState;
        debug("pipeOnDrain", state.awaitDrain);
        if (state.awaitDrain)
          state.awaitDrain--;
        if (state.awaitDrain === 0 && EElistenerCount(src, "data")) {
          state.flowing = true;
          flow(src);
        }
      };
    }
    Readable.prototype.unpipe = function(dest) {
      var state = this._readableState;
      var unpipeInfo = {
        hasUnpiped: false
      };
      if (state.pipesCount === 0)
        return this;
      if (state.pipesCount === 1) {
        if (dest && dest !== state.pipes)
          return this;
        if (!dest)
          dest = state.pipes;
        state.pipes = null;
        state.pipesCount = 0;
        state.flowing = false;
        if (dest)
          dest.emit("unpipe", this, unpipeInfo);
        return this;
      }
      if (!dest) {
        var dests = state.pipes;
        var len = state.pipesCount;
        state.pipes = null;
        state.pipesCount = 0;
        state.flowing = false;
        for (var i2 = 0; i2 < len; i2++) {
          dests[i2].emit("unpipe", this, {
            hasUnpiped: false
          });
        }
        return this;
      }
      var index = indexOf(state.pipes, dest);
      if (index === -1)
        return this;
      state.pipes.splice(index, 1);
      state.pipesCount -= 1;
      if (state.pipesCount === 1)
        state.pipes = state.pipes[0];
      dest.emit("unpipe", this, unpipeInfo);
      return this;
    };
    Readable.prototype.on = function(ev, fn) {
      var res = Stream.prototype.on.call(this, ev, fn);
      var state = this._readableState;
      if (ev === "data") {
        state.readableListening = this.listenerCount("readable") > 0;
        if (state.flowing !== false)
          this.resume();
      } else if (ev === "readable") {
        if (!state.endEmitted && !state.readableListening) {
          state.readableListening = state.needReadable = true;
          state.flowing = false;
          state.emittedReadable = false;
          debug("on readable", state.length, state.reading);
          if (state.length) {
            emitReadable(this);
          } else if (!state.reading) {
            define_process_default.nextTick(nReadingNextTick, this);
          }
        }
      }
      return res;
    };
    Readable.prototype.addListener = Readable.prototype.on;
    Readable.prototype.removeListener = function(ev, fn) {
      var res = Stream.prototype.removeListener.call(this, ev, fn);
      if (ev === "readable") {
        define_process_default.nextTick(updateReadableListening, this);
      }
      return res;
    };
    Readable.prototype.removeAllListeners = function(ev) {
      var res = Stream.prototype.removeAllListeners.apply(this, arguments);
      if (ev === "readable" || ev === void 0) {
        define_process_default.nextTick(updateReadableListening, this);
      }
      return res;
    };
    function updateReadableListening(self2) {
      var state = self2._readableState;
      state.readableListening = self2.listenerCount("readable") > 0;
      if (state.resumeScheduled && !state.paused) {
        state.flowing = true;
      } else if (self2.listenerCount("data") > 0) {
        self2.resume();
      }
    }
    function nReadingNextTick(self2) {
      debug("readable nexttick read 0");
      self2.read(0);
    }
    Readable.prototype.resume = function() {
      var state = this._readableState;
      if (!state.flowing) {
        debug("resume");
        state.flowing = !state.readableListening;
        resume(this, state);
      }
      state.paused = false;
      return this;
    };
    function resume(stream, state) {
      if (!state.resumeScheduled) {
        state.resumeScheduled = true;
        define_process_default.nextTick(resume_, stream, state);
      }
    }
    function resume_(stream, state) {
      debug("resume", state.reading);
      if (!state.reading) {
        stream.read(0);
      }
      state.resumeScheduled = false;
      stream.emit("resume");
      flow(stream);
      if (state.flowing && !state.reading)
        stream.read(0);
    }
    Readable.prototype.pause = function() {
      debug("call pause flowing=%j", this._readableState.flowing);
      if (this._readableState.flowing !== false) {
        debug("pause");
        this._readableState.flowing = false;
        this.emit("pause");
      }
      this._readableState.paused = true;
      return this;
    };
    function flow(stream) {
      var state = stream._readableState;
      debug("flow", state.flowing);
      while (state.flowing && stream.read() !== null) {
        ;
      }
    }
    Readable.prototype.wrap = function(stream) {
      var _this = this;
      var state = this._readableState;
      var paused = false;
      stream.on("end", function() {
        debug("wrapped end");
        if (state.decoder && !state.ended) {
          var chunk = state.decoder.end();
          if (chunk && chunk.length)
            _this.push(chunk);
        }
        _this.push(null);
      });
      stream.on("data", function(chunk) {
        debug("wrapped data");
        if (state.decoder)
          chunk = state.decoder.write(chunk);
        if (state.objectMode && (chunk === null || chunk === void 0))
          return;
        else if (!state.objectMode && (!chunk || !chunk.length))
          return;
        var ret = _this.push(chunk);
        if (!ret) {
          paused = true;
          stream.pause();
        }
      });
      for (var i2 in stream) {
        if (this[i2] === void 0 && typeof stream[i2] === "function") {
          this[i2] = function methodWrap(method) {
            return function methodWrapReturnFunction() {
              return stream[method].apply(stream, arguments);
            };
          }(i2);
        }
      }
      for (var n = 0; n < kProxyEvents.length; n++) {
        stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
      }
      this._read = function(n2) {
        debug("wrapped _read", n2);
        if (paused) {
          paused = false;
          stream.resume();
        }
      };
      return this;
    };
    if (typeof Symbol === "function") {
      Readable.prototype[Symbol.asyncIterator] = function() {
        if (createReadableStreamAsyncIterator === void 0) {
          createReadableStreamAsyncIterator = require_async_iterator();
        }
        return createReadableStreamAsyncIterator(this);
      };
    }
    Object.defineProperty(Readable.prototype, "readableHighWaterMark", {
      enumerable: false,
      get: function get() {
        return this._readableState.highWaterMark;
      }
    });
    Object.defineProperty(Readable.prototype, "readableBuffer", {
      enumerable: false,
      get: function get() {
        return this._readableState && this._readableState.buffer;
      }
    });
    Object.defineProperty(Readable.prototype, "readableFlowing", {
      enumerable: false,
      get: function get() {
        return this._readableState.flowing;
      },
      set: function set(state) {
        if (this._readableState) {
          this._readableState.flowing = state;
        }
      }
    });
    Readable._fromList = fromList;
    Object.defineProperty(Readable.prototype, "readableLength", {
      enumerable: false,
      get: function get() {
        return this._readableState.length;
      }
    });
    function fromList(n, state) {
      if (state.length === 0)
        return null;
      var ret;
      if (state.objectMode)
        ret = state.buffer.shift();
      else if (!n || n >= state.length) {
        if (state.decoder)
          ret = state.buffer.join("");
        else if (state.buffer.length === 1)
          ret = state.buffer.first();
        else
          ret = state.buffer.concat(state.length);
        state.buffer.clear();
      } else {
        ret = state.buffer.consume(n, state.decoder);
      }
      return ret;
    }
    function endReadable(stream) {
      var state = stream._readableState;
      debug("endReadable", state.endEmitted);
      if (!state.endEmitted) {
        state.ended = true;
        define_process_default.nextTick(endReadableNT, state, stream);
      }
    }
    function endReadableNT(state, stream) {
      debug("endReadableNT", state.endEmitted, state.length);
      if (!state.endEmitted && state.length === 0) {
        state.endEmitted = true;
        stream.readable = false;
        stream.emit("end");
        if (state.autoDestroy) {
          var wState = stream._writableState;
          if (!wState || wState.autoDestroy && wState.finished) {
            stream.destroy();
          }
        }
      }
    }
    if (typeof Symbol === "function") {
      Readable.from = function(iterable, opts) {
        if (from === void 0) {
          from = require_from_browser();
        }
        return from(Readable, iterable, opts);
      };
    }
    function indexOf(xs, x4) {
      for (var i2 = 0, l2 = xs.length; i2 < l2; i2++) {
        if (xs[i2] === x4)
          return i2;
      }
      return -1;
    }
  }
});

// node_modules/readable-stream/lib/_stream_transform.js
var require_stream_transform = __commonJS({
  "node_modules/readable-stream/lib/_stream_transform.js"(exports, module) {
    init_define_process();
    "use strict";
    module.exports = Transform;
    var _require$codes = require_errors_browser().codes;
    var ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED;
    var ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK;
    var ERR_TRANSFORM_ALREADY_TRANSFORMING = _require$codes.ERR_TRANSFORM_ALREADY_TRANSFORMING;
    var ERR_TRANSFORM_WITH_LENGTH_0 = _require$codes.ERR_TRANSFORM_WITH_LENGTH_0;
    var Duplex = require_stream_duplex();
    require_inherits_browser()(Transform, Duplex);
    function afterTransform(er2, data) {
      var ts2 = this._transformState;
      ts2.transforming = false;
      var cb = ts2.writecb;
      if (cb === null) {
        return this.emit("error", new ERR_MULTIPLE_CALLBACK());
      }
      ts2.writechunk = null;
      ts2.writecb = null;
      if (data != null)
        this.push(data);
      cb(er2);
      var rs2 = this._readableState;
      rs2.reading = false;
      if (rs2.needReadable || rs2.length < rs2.highWaterMark) {
        this._read(rs2.highWaterMark);
      }
    }
    function Transform(options) {
      if (!(this instanceof Transform))
        return new Transform(options);
      Duplex.call(this, options);
      this._transformState = {
        afterTransform: afterTransform.bind(this),
        needTransform: false,
        transforming: false,
        writecb: null,
        writechunk: null,
        writeencoding: null
      };
      this._readableState.needReadable = true;
      this._readableState.sync = false;
      if (options) {
        if (typeof options.transform === "function")
          this._transform = options.transform;
        if (typeof options.flush === "function")
          this._flush = options.flush;
      }
      this.on("prefinish", prefinish);
    }
    function prefinish() {
      var _this = this;
      if (typeof this._flush === "function" && !this._readableState.destroyed) {
        this._flush(function(er2, data) {
          done(_this, er2, data);
        });
      } else {
        done(this, null, null);
      }
    }
    Transform.prototype.push = function(chunk, encoding) {
      this._transformState.needTransform = false;
      return Duplex.prototype.push.call(this, chunk, encoding);
    };
    Transform.prototype._transform = function(chunk, encoding, cb) {
      cb(new ERR_METHOD_NOT_IMPLEMENTED("_transform()"));
    };
    Transform.prototype._write = function(chunk, encoding, cb) {
      var ts2 = this._transformState;
      ts2.writecb = cb;
      ts2.writechunk = chunk;
      ts2.writeencoding = encoding;
      if (!ts2.transforming) {
        var rs2 = this._readableState;
        if (ts2.needTransform || rs2.needReadable || rs2.length < rs2.highWaterMark)
          this._read(rs2.highWaterMark);
      }
    };
    Transform.prototype._read = function(n) {
      var ts2 = this._transformState;
      if (ts2.writechunk !== null && !ts2.transforming) {
        ts2.transforming = true;
        this._transform(ts2.writechunk, ts2.writeencoding, ts2.afterTransform);
      } else {
        ts2.needTransform = true;
      }
    };
    Transform.prototype._destroy = function(err, cb) {
      Duplex.prototype._destroy.call(this, err, function(err2) {
        cb(err2);
      });
    };
    function done(stream, er2, data) {
      if (er2)
        return stream.emit("error", er2);
      if (data != null)
        stream.push(data);
      if (stream._writableState.length)
        throw new ERR_TRANSFORM_WITH_LENGTH_0();
      if (stream._transformState.transforming)
        throw new ERR_TRANSFORM_ALREADY_TRANSFORMING();
      return stream.push(null);
    }
  }
});

// node_modules/readable-stream/lib/_stream_passthrough.js
var require_stream_passthrough = __commonJS({
  "node_modules/readable-stream/lib/_stream_passthrough.js"(exports, module) {
    init_define_process();
    "use strict";
    module.exports = PassThrough;
    var Transform = require_stream_transform();
    require_inherits_browser()(PassThrough, Transform);
    function PassThrough(options) {
      if (!(this instanceof PassThrough))
        return new PassThrough(options);
      Transform.call(this, options);
    }
    PassThrough.prototype._transform = function(chunk, encoding, cb) {
      cb(null, chunk);
    };
  }
});

// node_modules/readable-stream/lib/internal/streams/pipeline.js
var require_pipeline = __commonJS({
  "node_modules/readable-stream/lib/internal/streams/pipeline.js"(exports, module) {
    init_define_process();
    "use strict";
    var eos;
    function once(callback) {
      var called = false;
      return function() {
        if (called)
          return;
        called = true;
        callback.apply(void 0, arguments);
      };
    }
    var _require$codes = require_errors_browser().codes;
    var ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS;
    var ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;
    function noop(err) {
      if (err)
        throw err;
    }
    function isRequest(stream) {
      return stream.setHeader && typeof stream.abort === "function";
    }
    function destroyer(stream, reading, writing, callback) {
      callback = once(callback);
      var closed = false;
      stream.on("close", function() {
        closed = true;
      });
      if (eos === void 0)
        eos = require_end_of_stream();
      eos(stream, {
        readable: reading,
        writable: writing
      }, function(err) {
        if (err)
          return callback(err);
        closed = true;
        callback();
      });
      var destroyed = false;
      return function(err) {
        if (closed)
          return;
        if (destroyed)
          return;
        destroyed = true;
        if (isRequest(stream))
          return stream.abort();
        if (typeof stream.destroy === "function")
          return stream.destroy();
        callback(err || new ERR_STREAM_DESTROYED("pipe"));
      };
    }
    function call(fn) {
      fn();
    }
    function pipe(from, to2) {
      return from.pipe(to2);
    }
    function popCallback(streams) {
      if (!streams.length)
        return noop;
      if (typeof streams[streams.length - 1] !== "function")
        return noop;
      return streams.pop();
    }
    function pipeline() {
      for (var _len = arguments.length, streams = new Array(_len), _key = 0; _key < _len; _key++) {
        streams[_key] = arguments[_key];
      }
      var callback = popCallback(streams);
      if (Array.isArray(streams[0]))
        streams = streams[0];
      if (streams.length < 2) {
        throw new ERR_MISSING_ARGS("streams");
      }
      var error;
      var destroys = streams.map(function(stream, i2) {
        var reading = i2 < streams.length - 1;
        var writing = i2 > 0;
        return destroyer(stream, reading, writing, function(err) {
          if (!error)
            error = err;
          if (err)
            destroys.forEach(call);
          if (reading)
            return;
          destroys.forEach(call);
          callback(error);
        });
      });
      return streams.reduce(pipe);
    }
    module.exports = pipeline;
  }
});

// node_modules/readable-stream/readable-browser.js
var require_readable_browser = __commonJS({
  "node_modules/readable-stream/readable-browser.js"(exports, module) {
    init_define_process();
    exports = module.exports = require_stream_readable();
    exports.Stream = exports;
    exports.Readable = exports;
    exports.Writable = require_stream_writable();
    exports.Duplex = require_stream_duplex();
    exports.Transform = require_stream_transform();
    exports.PassThrough = require_stream_passthrough();
    exports.finished = require_end_of_stream();
    exports.pipeline = require_pipeline();
  }
});

// node_modules/keccak/lib/api/keccak.js
var require_keccak = __commonJS({
  "node_modules/keccak/lib/api/keccak.js"(exports, module) {
    init_define_process();
    var { Transform } = require_readable_browser();
    module.exports = (KeccakState) => class Keccak extends Transform {
      constructor(rate, capacity, delimitedSuffix, hashBitLength, options) {
        super(options);
        this._rate = rate;
        this._capacity = capacity;
        this._delimitedSuffix = delimitedSuffix;
        this._hashBitLength = hashBitLength;
        this._options = options;
        this._state = new KeccakState();
        this._state.initialize(rate, capacity);
        this._finalized = false;
      }
      _transform(chunk, encoding, callback) {
        let error = null;
        try {
          this.update(chunk, encoding);
        } catch (err) {
          error = err;
        }
        callback(error);
      }
      _flush(callback) {
        let error = null;
        try {
          this.push(this.digest());
        } catch (err) {
          error = err;
        }
        callback(error);
      }
      update(data, encoding) {
        if (!Buffer.isBuffer(data) && typeof data !== "string")
          throw new TypeError("Data must be a string or a buffer");
        if (this._finalized)
          throw new Error("Digest already called");
        if (!Buffer.isBuffer(data))
          data = Buffer.from(data, encoding);
        this._state.absorb(data);
        return this;
      }
      digest(encoding) {
        if (this._finalized)
          throw new Error("Digest already called");
        this._finalized = true;
        if (this._delimitedSuffix)
          this._state.absorbLastFewBits(this._delimitedSuffix);
        let digest = this._state.squeeze(this._hashBitLength / 8);
        if (encoding !== void 0)
          digest = digest.toString(encoding);
        this._resetState();
        return digest;
      }
      _resetState() {
        this._state.initialize(this._rate, this._capacity);
        return this;
      }
      _clone() {
        const clone = new Keccak(this._rate, this._capacity, this._delimitedSuffix, this._hashBitLength, this._options);
        this._state.copy(clone._state);
        clone._finalized = this._finalized;
        return clone;
      }
    };
  }
});

// node_modules/keccak/lib/api/shake.js
var require_shake = __commonJS({
  "node_modules/keccak/lib/api/shake.js"(exports, module) {
    init_define_process();
    var { Transform } = require_readable_browser();
    module.exports = (KeccakState) => class Shake extends Transform {
      constructor(rate, capacity, delimitedSuffix, options) {
        super(options);
        this._rate = rate;
        this._capacity = capacity;
        this._delimitedSuffix = delimitedSuffix;
        this._options = options;
        this._state = new KeccakState();
        this._state.initialize(rate, capacity);
        this._finalized = false;
      }
      _transform(chunk, encoding, callback) {
        let error = null;
        try {
          this.update(chunk, encoding);
        } catch (err) {
          error = err;
        }
        callback(error);
      }
      _flush() {
      }
      _read(size) {
        this.push(this.squeeze(size));
      }
      update(data, encoding) {
        if (!Buffer.isBuffer(data) && typeof data !== "string")
          throw new TypeError("Data must be a string or a buffer");
        if (this._finalized)
          throw new Error("Squeeze already called");
        if (!Buffer.isBuffer(data))
          data = Buffer.from(data, encoding);
        this._state.absorb(data);
        return this;
      }
      squeeze(dataByteLength, encoding) {
        if (!this._finalized) {
          this._finalized = true;
          this._state.absorbLastFewBits(this._delimitedSuffix);
        }
        let data = this._state.squeeze(dataByteLength);
        if (encoding !== void 0)
          data = data.toString(encoding);
        return data;
      }
      _resetState() {
        this._state.initialize(this._rate, this._capacity);
        return this;
      }
      _clone() {
        const clone = new Shake(this._rate, this._capacity, this._delimitedSuffix, this._options);
        this._state.copy(clone._state);
        clone._finalized = this._finalized;
        return clone;
      }
    };
  }
});

// node_modules/keccak/lib/api/index.js
var require_api = __commonJS({
  "node_modules/keccak/lib/api/index.js"(exports, module) {
    init_define_process();
    var createKeccak = require_keccak();
    var createShake = require_shake();
    module.exports = function(KeccakState) {
      const Keccak = createKeccak(KeccakState);
      const Shake = createShake(KeccakState);
      return function(algorithm, options) {
        const hash3 = typeof algorithm === "string" ? algorithm.toLowerCase() : algorithm;
        switch (hash3) {
          case "keccak224":
            return new Keccak(1152, 448, null, 224, options);
          case "keccak256":
            return new Keccak(1088, 512, null, 256, options);
          case "keccak384":
            return new Keccak(832, 768, null, 384, options);
          case "keccak512":
            return new Keccak(576, 1024, null, 512, options);
          case "sha3-224":
            return new Keccak(1152, 448, 6, 224, options);
          case "sha3-256":
            return new Keccak(1088, 512, 6, 256, options);
          case "sha3-384":
            return new Keccak(832, 768, 6, 384, options);
          case "sha3-512":
            return new Keccak(576, 1024, 6, 512, options);
          case "shake128":
            return new Shake(1344, 256, 31, options);
          case "shake256":
            return new Shake(1088, 512, 31, options);
          default:
            throw new Error("Invald algorithm: " + algorithm);
        }
      };
    };
  }
});

// node_modules/keccak/lib/keccak-state-unroll.js
var require_keccak_state_unroll = __commonJS({
  "node_modules/keccak/lib/keccak-state-unroll.js"(exports) {
    init_define_process();
    var P1600_ROUND_CONSTANTS = [1, 0, 32898, 0, 32906, 2147483648, 2147516416, 2147483648, 32907, 0, 2147483649, 0, 2147516545, 2147483648, 32777, 2147483648, 138, 0, 136, 0, 2147516425, 0, 2147483658, 0, 2147516555, 0, 139, 2147483648, 32905, 2147483648, 32771, 2147483648, 32770, 2147483648, 128, 2147483648, 32778, 0, 2147483658, 2147483648, 2147516545, 2147483648, 32896, 2147483648, 2147483649, 0, 2147516424, 2147483648];
    exports.p1600 = function(s2) {
      for (let round = 0; round < 24; ++round) {
        const lo0 = s2[0] ^ s2[10] ^ s2[20] ^ s2[30] ^ s2[40];
        const hi0 = s2[1] ^ s2[11] ^ s2[21] ^ s2[31] ^ s2[41];
        const lo1 = s2[2] ^ s2[12] ^ s2[22] ^ s2[32] ^ s2[42];
        const hi1 = s2[3] ^ s2[13] ^ s2[23] ^ s2[33] ^ s2[43];
        const lo2 = s2[4] ^ s2[14] ^ s2[24] ^ s2[34] ^ s2[44];
        const hi2 = s2[5] ^ s2[15] ^ s2[25] ^ s2[35] ^ s2[45];
        const lo3 = s2[6] ^ s2[16] ^ s2[26] ^ s2[36] ^ s2[46];
        const hi3 = s2[7] ^ s2[17] ^ s2[27] ^ s2[37] ^ s2[47];
        const lo4 = s2[8] ^ s2[18] ^ s2[28] ^ s2[38] ^ s2[48];
        const hi4 = s2[9] ^ s2[19] ^ s2[29] ^ s2[39] ^ s2[49];
        let lo5 = lo4 ^ (lo1 << 1 | hi1 >>> 31);
        let hi = hi4 ^ (hi1 << 1 | lo1 >>> 31);
        const t1slo0 = s2[0] ^ lo5;
        const t1shi0 = s2[1] ^ hi;
        const t1slo5 = s2[10] ^ lo5;
        const t1shi5 = s2[11] ^ hi;
        const t1slo10 = s2[20] ^ lo5;
        const t1shi10 = s2[21] ^ hi;
        const t1slo15 = s2[30] ^ lo5;
        const t1shi15 = s2[31] ^ hi;
        const t1slo20 = s2[40] ^ lo5;
        const t1shi20 = s2[41] ^ hi;
        lo5 = lo0 ^ (lo2 << 1 | hi2 >>> 31);
        hi = hi0 ^ (hi2 << 1 | lo2 >>> 31);
        const t1slo1 = s2[2] ^ lo5;
        const t1shi1 = s2[3] ^ hi;
        const t1slo6 = s2[12] ^ lo5;
        const t1shi6 = s2[13] ^ hi;
        const t1slo11 = s2[22] ^ lo5;
        const t1shi11 = s2[23] ^ hi;
        const t1slo16 = s2[32] ^ lo5;
        const t1shi16 = s2[33] ^ hi;
        const t1slo21 = s2[42] ^ lo5;
        const t1shi21 = s2[43] ^ hi;
        lo5 = lo1 ^ (lo3 << 1 | hi3 >>> 31);
        hi = hi1 ^ (hi3 << 1 | lo3 >>> 31);
        const t1slo2 = s2[4] ^ lo5;
        const t1shi2 = s2[5] ^ hi;
        const t1slo7 = s2[14] ^ lo5;
        const t1shi7 = s2[15] ^ hi;
        const t1slo12 = s2[24] ^ lo5;
        const t1shi12 = s2[25] ^ hi;
        const t1slo17 = s2[34] ^ lo5;
        const t1shi17 = s2[35] ^ hi;
        const t1slo22 = s2[44] ^ lo5;
        const t1shi22 = s2[45] ^ hi;
        lo5 = lo2 ^ (lo4 << 1 | hi4 >>> 31);
        hi = hi2 ^ (hi4 << 1 | lo4 >>> 31);
        const t1slo3 = s2[6] ^ lo5;
        const t1shi3 = s2[7] ^ hi;
        const t1slo8 = s2[16] ^ lo5;
        const t1shi8 = s2[17] ^ hi;
        const t1slo13 = s2[26] ^ lo5;
        const t1shi13 = s2[27] ^ hi;
        const t1slo18 = s2[36] ^ lo5;
        const t1shi18 = s2[37] ^ hi;
        const t1slo23 = s2[46] ^ lo5;
        const t1shi23 = s2[47] ^ hi;
        lo5 = lo3 ^ (lo0 << 1 | hi0 >>> 31);
        hi = hi3 ^ (hi0 << 1 | lo0 >>> 31);
        const t1slo4 = s2[8] ^ lo5;
        const t1shi4 = s2[9] ^ hi;
        const t1slo9 = s2[18] ^ lo5;
        const t1shi9 = s2[19] ^ hi;
        const t1slo14 = s2[28] ^ lo5;
        const t1shi14 = s2[29] ^ hi;
        const t1slo19 = s2[38] ^ lo5;
        const t1shi19 = s2[39] ^ hi;
        const t1slo24 = s2[48] ^ lo5;
        const t1shi24 = s2[49] ^ hi;
        const t2slo0 = t1slo0;
        const t2shi0 = t1shi0;
        const t2slo16 = t1shi5 << 4 | t1slo5 >>> 28;
        const t2shi16 = t1slo5 << 4 | t1shi5 >>> 28;
        const t2slo7 = t1slo10 << 3 | t1shi10 >>> 29;
        const t2shi7 = t1shi10 << 3 | t1slo10 >>> 29;
        const t2slo23 = t1shi15 << 9 | t1slo15 >>> 23;
        const t2shi23 = t1slo15 << 9 | t1shi15 >>> 23;
        const t2slo14 = t1slo20 << 18 | t1shi20 >>> 14;
        const t2shi14 = t1shi20 << 18 | t1slo20 >>> 14;
        const t2slo10 = t1slo1 << 1 | t1shi1 >>> 31;
        const t2shi10 = t1shi1 << 1 | t1slo1 >>> 31;
        const t2slo1 = t1shi6 << 12 | t1slo6 >>> 20;
        const t2shi1 = t1slo6 << 12 | t1shi6 >>> 20;
        const t2slo17 = t1slo11 << 10 | t1shi11 >>> 22;
        const t2shi17 = t1shi11 << 10 | t1slo11 >>> 22;
        const t2slo8 = t1shi16 << 13 | t1slo16 >>> 19;
        const t2shi8 = t1slo16 << 13 | t1shi16 >>> 19;
        const t2slo24 = t1slo21 << 2 | t1shi21 >>> 30;
        const t2shi24 = t1shi21 << 2 | t1slo21 >>> 30;
        const t2slo20 = t1shi2 << 30 | t1slo2 >>> 2;
        const t2shi20 = t1slo2 << 30 | t1shi2 >>> 2;
        const t2slo11 = t1slo7 << 6 | t1shi7 >>> 26;
        const t2shi11 = t1shi7 << 6 | t1slo7 >>> 26;
        const t2slo2 = t1shi12 << 11 | t1slo12 >>> 21;
        const t2shi2 = t1slo12 << 11 | t1shi12 >>> 21;
        const t2slo18 = t1slo17 << 15 | t1shi17 >>> 17;
        const t2shi18 = t1shi17 << 15 | t1slo17 >>> 17;
        const t2slo9 = t1shi22 << 29 | t1slo22 >>> 3;
        const t2shi9 = t1slo22 << 29 | t1shi22 >>> 3;
        const t2slo5 = t1slo3 << 28 | t1shi3 >>> 4;
        const t2shi5 = t1shi3 << 28 | t1slo3 >>> 4;
        const t2slo21 = t1shi8 << 23 | t1slo8 >>> 9;
        const t2shi21 = t1slo8 << 23 | t1shi8 >>> 9;
        const t2slo12 = t1slo13 << 25 | t1shi13 >>> 7;
        const t2shi12 = t1shi13 << 25 | t1slo13 >>> 7;
        const t2slo3 = t1slo18 << 21 | t1shi18 >>> 11;
        const t2shi3 = t1shi18 << 21 | t1slo18 >>> 11;
        const t2slo19 = t1shi23 << 24 | t1slo23 >>> 8;
        const t2shi19 = t1slo23 << 24 | t1shi23 >>> 8;
        const t2slo15 = t1slo4 << 27 | t1shi4 >>> 5;
        const t2shi15 = t1shi4 << 27 | t1slo4 >>> 5;
        const t2slo6 = t1slo9 << 20 | t1shi9 >>> 12;
        const t2shi6 = t1shi9 << 20 | t1slo9 >>> 12;
        const t2slo22 = t1shi14 << 7 | t1slo14 >>> 25;
        const t2shi22 = t1slo14 << 7 | t1shi14 >>> 25;
        const t2slo13 = t1slo19 << 8 | t1shi19 >>> 24;
        const t2shi13 = t1shi19 << 8 | t1slo19 >>> 24;
        const t2slo4 = t1slo24 << 14 | t1shi24 >>> 18;
        const t2shi4 = t1shi24 << 14 | t1slo24 >>> 18;
        s2[0] = t2slo0 ^ ~t2slo1 & t2slo2;
        s2[1] = t2shi0 ^ ~t2shi1 & t2shi2;
        s2[10] = t2slo5 ^ ~t2slo6 & t2slo7;
        s2[11] = t2shi5 ^ ~t2shi6 & t2shi7;
        s2[20] = t2slo10 ^ ~t2slo11 & t2slo12;
        s2[21] = t2shi10 ^ ~t2shi11 & t2shi12;
        s2[30] = t2slo15 ^ ~t2slo16 & t2slo17;
        s2[31] = t2shi15 ^ ~t2shi16 & t2shi17;
        s2[40] = t2slo20 ^ ~t2slo21 & t2slo22;
        s2[41] = t2shi20 ^ ~t2shi21 & t2shi22;
        s2[2] = t2slo1 ^ ~t2slo2 & t2slo3;
        s2[3] = t2shi1 ^ ~t2shi2 & t2shi3;
        s2[12] = t2slo6 ^ ~t2slo7 & t2slo8;
        s2[13] = t2shi6 ^ ~t2shi7 & t2shi8;
        s2[22] = t2slo11 ^ ~t2slo12 & t2slo13;
        s2[23] = t2shi11 ^ ~t2shi12 & t2shi13;
        s2[32] = t2slo16 ^ ~t2slo17 & t2slo18;
        s2[33] = t2shi16 ^ ~t2shi17 & t2shi18;
        s2[42] = t2slo21 ^ ~t2slo22 & t2slo23;
        s2[43] = t2shi21 ^ ~t2shi22 & t2shi23;
        s2[4] = t2slo2 ^ ~t2slo3 & t2slo4;
        s2[5] = t2shi2 ^ ~t2shi3 & t2shi4;
        s2[14] = t2slo7 ^ ~t2slo8 & t2slo9;
        s2[15] = t2shi7 ^ ~t2shi8 & t2shi9;
        s2[24] = t2slo12 ^ ~t2slo13 & t2slo14;
        s2[25] = t2shi12 ^ ~t2shi13 & t2shi14;
        s2[34] = t2slo17 ^ ~t2slo18 & t2slo19;
        s2[35] = t2shi17 ^ ~t2shi18 & t2shi19;
        s2[44] = t2slo22 ^ ~t2slo23 & t2slo24;
        s2[45] = t2shi22 ^ ~t2shi23 & t2shi24;
        s2[6] = t2slo3 ^ ~t2slo4 & t2slo0;
        s2[7] = t2shi3 ^ ~t2shi4 & t2shi0;
        s2[16] = t2slo8 ^ ~t2slo9 & t2slo5;
        s2[17] = t2shi8 ^ ~t2shi9 & t2shi5;
        s2[26] = t2slo13 ^ ~t2slo14 & t2slo10;
        s2[27] = t2shi13 ^ ~t2shi14 & t2shi10;
        s2[36] = t2slo18 ^ ~t2slo19 & t2slo15;
        s2[37] = t2shi18 ^ ~t2shi19 & t2shi15;
        s2[46] = t2slo23 ^ ~t2slo24 & t2slo20;
        s2[47] = t2shi23 ^ ~t2shi24 & t2shi20;
        s2[8] = t2slo4 ^ ~t2slo0 & t2slo1;
        s2[9] = t2shi4 ^ ~t2shi0 & t2shi1;
        s2[18] = t2slo9 ^ ~t2slo5 & t2slo6;
        s2[19] = t2shi9 ^ ~t2shi5 & t2shi6;
        s2[28] = t2slo14 ^ ~t2slo10 & t2slo11;
        s2[29] = t2shi14 ^ ~t2shi10 & t2shi11;
        s2[38] = t2slo19 ^ ~t2slo15 & t2slo16;
        s2[39] = t2shi19 ^ ~t2shi15 & t2shi16;
        s2[48] = t2slo24 ^ ~t2slo20 & t2slo21;
        s2[49] = t2shi24 ^ ~t2shi20 & t2shi21;
        s2[0] ^= P1600_ROUND_CONSTANTS[round * 2];
        s2[1] ^= P1600_ROUND_CONSTANTS[round * 2 + 1];
      }
    };
  }
});

// node_modules/keccak/lib/keccak.js
var require_keccak2 = __commonJS({
  "node_modules/keccak/lib/keccak.js"(exports, module) {
    init_define_process();
    var keccakState = require_keccak_state_unroll();
    function Keccak() {
      this.state = [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ];
      this.blockSize = null;
      this.count = 0;
      this.squeezing = false;
    }
    Keccak.prototype.initialize = function(rate, capacity) {
      for (let i2 = 0; i2 < 50; ++i2)
        this.state[i2] = 0;
      this.blockSize = rate / 8;
      this.count = 0;
      this.squeezing = false;
    };
    Keccak.prototype.absorb = function(data) {
      for (let i2 = 0; i2 < data.length; ++i2) {
        this.state[~~(this.count / 4)] ^= data[i2] << 8 * (this.count % 4);
        this.count += 1;
        if (this.count === this.blockSize) {
          keccakState.p1600(this.state);
          this.count = 0;
        }
      }
    };
    Keccak.prototype.absorbLastFewBits = function(bits) {
      this.state[~~(this.count / 4)] ^= bits << 8 * (this.count % 4);
      if ((bits & 128) !== 0 && this.count === this.blockSize - 1)
        keccakState.p1600(this.state);
      this.state[~~((this.blockSize - 1) / 4)] ^= 128 << 8 * ((this.blockSize - 1) % 4);
      keccakState.p1600(this.state);
      this.count = 0;
      this.squeezing = true;
    };
    Keccak.prototype.squeeze = function(length) {
      if (!this.squeezing)
        this.absorbLastFewBits(1);
      const output = Buffer.alloc(length);
      for (let i2 = 0; i2 < length; ++i2) {
        output[i2] = this.state[~~(this.count / 4)] >>> 8 * (this.count % 4) & 255;
        this.count += 1;
        if (this.count === this.blockSize) {
          keccakState.p1600(this.state);
          this.count = 0;
        }
      }
      return output;
    };
    Keccak.prototype.copy = function(dest) {
      for (let i2 = 0; i2 < 50; ++i2)
        dest.state[i2] = this.state[i2];
      dest.blockSize = this.blockSize;
      dest.count = this.count;
      dest.squeezing = this.squeezing;
    };
    module.exports = Keccak;
  }
});

// node_modules/keccak/js.js
var require_js = __commonJS({
  "node_modules/keccak/js.js"(exports, module) {
    init_define_process();
    module.exports = require_api()(require_keccak2());
  }
});

// node_modules/keccak256/dist/keccak256.js
var require_keccak256 = __commonJS({
  "node_modules/keccak256/dist/keccak256.js"(exports, module) {
    init_define_process();
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod2) {
      return mod2 && mod2.__esModule ? mod2 : { "default": mod2 };
    };
    var bn_js_1 = __importDefault(require_bn2());
    var buffer_1 = __importDefault(require_buffer());
    var keccak_1 = __importDefault(require_js());
    var Buffer2 = buffer_1.default.Buffer;
    function keccak2563(value2) {
      value2 = toBuffer(value2);
      return (0, keccak_1.default)("keccak256").update(value2).digest();
    }
    function toBuffer(value2) {
      if (!Buffer2.isBuffer(value2)) {
        if (Array.isArray(value2)) {
          value2 = Buffer2.from(value2);
        } else if (typeof value2 === "string") {
          if (isHexString2(value2)) {
            value2 = Buffer2.from(padToEven(stripHexPrefix(value2)), "hex");
          } else {
            value2 = Buffer2.from(value2);
          }
        } else if (typeof value2 === "number") {
          value2 = intToBuffer(value2);
        } else if (value2 === null || value2 === void 0) {
          value2 = Buffer2.allocUnsafe(0);
        } else if (bn_js_1.default.isBN(value2)) {
          value2 = value2.toArrayLike(Buffer2);
        } else if (value2.toArray) {
          value2 = Buffer2.from(value2.toArray());
        } else {
          throw new Error("invalid type");
        }
      }
      return value2;
    }
    function isHexString2(value2, length) {
      if (typeof value2 !== "string" || !value2.match(/^0x[0-9A-Fa-f]*$/)) {
        return false;
      }
      if (length && value2.length !== 2 + 2 * length) {
        return false;
      }
      return true;
    }
    function padToEven(value2) {
      if (typeof value2 !== "string") {
        throw new Error(`while padding to even, value must be string, is currently ${typeof value2}, while padToEven.`);
      }
      if (value2.length % 2) {
        value2 = `0${value2}`;
      }
      return value2;
    }
    function stripHexPrefix(value2) {
      if (typeof value2 !== "string") {
        return value2;
      }
      return isHexPrefixed(value2) ? value2.slice(2) : value2;
    }
    function isHexPrefixed(value2) {
      if (typeof value2 !== "string") {
        throw new Error("value must be type 'string', is currently type " + typeof value2 + ", while checking isHexPrefixed.");
      }
      return value2.slice(0, 2) === "0x";
    }
    function intToBuffer(i2) {
      const hex = intToHex(i2);
      return Buffer2.from(padToEven(hex.slice(2)), "hex");
    }
    function intToHex(i2) {
      const hex = i2.toString(16);
      return `0x${hex}`;
    }
    if (typeof window !== "undefined") {
      window.keccak256 = keccak2563;
    }
    module.exports = keccak2563;
  }
});

// node_modules/object-keys/isArguments.js
var require_isArguments = __commonJS({
  "node_modules/object-keys/isArguments.js"(exports, module) {
    init_define_process();
    "use strict";
    var toStr = Object.prototype.toString;
    module.exports = function isArguments(value2) {
      var str = toStr.call(value2);
      var isArgs = str === "[object Arguments]";
      if (!isArgs) {
        isArgs = str !== "[object Array]" && value2 !== null && typeof value2 === "object" && typeof value2.length === "number" && value2.length >= 0 && toStr.call(value2.callee) === "[object Function]";
      }
      return isArgs;
    };
  }
});

// node_modules/object-keys/implementation.js
var require_implementation2 = __commonJS({
  "node_modules/object-keys/implementation.js"(exports, module) {
    init_define_process();
    "use strict";
    var keysShim;
    if (!Object.keys) {
      has = Object.prototype.hasOwnProperty;
      toStr = Object.prototype.toString;
      isArgs = require_isArguments();
      isEnumerable = Object.prototype.propertyIsEnumerable;
      hasDontEnumBug = !isEnumerable.call({ toString: null }, "toString");
      hasProtoEnumBug = isEnumerable.call(function() {
      }, "prototype");
      dontEnums = [
        "toString",
        "toLocaleString",
        "valueOf",
        "hasOwnProperty",
        "isPrototypeOf",
        "propertyIsEnumerable",
        "constructor"
      ];
      equalsConstructorPrototype = function(o2) {
        var ctor = o2.constructor;
        return ctor && ctor.prototype === o2;
      };
      excludedKeys = {
        $applicationCache: true,
        $console: true,
        $external: true,
        $frame: true,
        $frameElement: true,
        $frames: true,
        $innerHeight: true,
        $innerWidth: true,
        $onmozfullscreenchange: true,
        $onmozfullscreenerror: true,
        $outerHeight: true,
        $outerWidth: true,
        $pageXOffset: true,
        $pageYOffset: true,
        $parent: true,
        $scrollLeft: true,
        $scrollTop: true,
        $scrollX: true,
        $scrollY: true,
        $self: true,
        $webkitIndexedDB: true,
        $webkitStorageInfo: true,
        $window: true
      };
      hasAutomationEqualityBug = function() {
        if (typeof window === "undefined") {
          return false;
        }
        for (var k4 in window) {
          try {
            if (!excludedKeys["$" + k4] && has.call(window, k4) && window[k4] !== null && typeof window[k4] === "object") {
              try {
                equalsConstructorPrototype(window[k4]);
              } catch (e) {
                return true;
              }
            }
          } catch (e) {
            return true;
          }
        }
        return false;
      }();
      equalsConstructorPrototypeIfNotBuggy = function(o2) {
        if (typeof window === "undefined" || !hasAutomationEqualityBug) {
          return equalsConstructorPrototype(o2);
        }
        try {
          return equalsConstructorPrototype(o2);
        } catch (e) {
          return false;
        }
      };
      keysShim = function keys(object) {
        var isObject = object !== null && typeof object === "object";
        var isFunction = toStr.call(object) === "[object Function]";
        var isArguments = isArgs(object);
        var isString = isObject && toStr.call(object) === "[object String]";
        var theKeys = [];
        if (!isObject && !isFunction && !isArguments) {
          throw new TypeError("Object.keys called on a non-object");
        }
        var skipProto = hasProtoEnumBug && isFunction;
        if (isString && object.length > 0 && !has.call(object, 0)) {
          for (var i2 = 0; i2 < object.length; ++i2) {
            theKeys.push(String(i2));
          }
        }
        if (isArguments && object.length > 0) {
          for (var j3 = 0; j3 < object.length; ++j3) {
            theKeys.push(String(j3));
          }
        } else {
          for (var name2 in object) {
            if (!(skipProto && name2 === "prototype") && has.call(object, name2)) {
              theKeys.push(String(name2));
            }
          }
        }
        if (hasDontEnumBug) {
          var skipConstructor = equalsConstructorPrototypeIfNotBuggy(object);
          for (var k4 = 0; k4 < dontEnums.length; ++k4) {
            if (!(skipConstructor && dontEnums[k4] === "constructor") && has.call(object, dontEnums[k4])) {
              theKeys.push(dontEnums[k4]);
            }
          }
        }
        return theKeys;
      };
    }
    var has;
    var toStr;
    var isArgs;
    var isEnumerable;
    var hasDontEnumBug;
    var hasProtoEnumBug;
    var dontEnums;
    var equalsConstructorPrototype;
    var excludedKeys;
    var hasAutomationEqualityBug;
    var equalsConstructorPrototypeIfNotBuggy;
    module.exports = keysShim;
  }
});

// node_modules/object-keys/index.js
var require_object_keys = __commonJS({
  "node_modules/object-keys/index.js"(exports, module) {
    init_define_process();
    "use strict";
    var slice = Array.prototype.slice;
    var isArgs = require_isArguments();
    var origKeys = Object.keys;
    var keysShim = origKeys ? function keys(o2) {
      return origKeys(o2);
    } : require_implementation2();
    var originalKeys = Object.keys;
    keysShim.shim = function shimObjectKeys() {
      if (Object.keys) {
        var keysWorksWithArguments = function() {
          var args = Object.keys(arguments);
          return args && args.length === arguments.length;
        }(1, 2);
        if (!keysWorksWithArguments) {
          Object.keys = function keys(object) {
            if (isArgs(object)) {
              return originalKeys(slice.call(object));
            }
            return originalKeys(object);
          };
        }
      } else {
        Object.keys = keysShim;
      }
      return Object.keys || keysShim;
    };
    module.exports = keysShim;
  }
});

// node_modules/define-properties/index.js
var require_define_properties = __commonJS({
  "node_modules/define-properties/index.js"(exports, module) {
    init_define_process();
    "use strict";
    var keys = require_object_keys();
    var hasSymbols = typeof Symbol === "function" && typeof Symbol("foo") === "symbol";
    var toStr = Object.prototype.toString;
    var concat2 = Array.prototype.concat;
    var origDefineProperty = Object.defineProperty;
    var isFunction = function(fn) {
      return typeof fn === "function" && toStr.call(fn) === "[object Function]";
    };
    var arePropertyDescriptorsSupported = function() {
      var obj = {};
      try {
        origDefineProperty(obj, "x", { enumerable: false, value: obj });
        for (var _2 in obj) {
          return false;
        }
        return obj.x === obj;
      } catch (e) {
        return false;
      }
    };
    var supportsDescriptors = origDefineProperty && arePropertyDescriptorsSupported();
    var defineProperty = function(object, name2, value2, predicate) {
      if (name2 in object && (!isFunction(predicate) || !predicate())) {
        return;
      }
      if (supportsDescriptors) {
        origDefineProperty(object, name2, {
          configurable: true,
          enumerable: false,
          value: value2,
          writable: true
        });
      } else {
        object[name2] = value2;
      }
    };
    var defineProperties = function(object, map) {
      var predicates = arguments.length > 2 ? arguments[2] : {};
      var props = keys(map);
      if (hasSymbols) {
        props = concat2.call(props, Object.getOwnPropertySymbols(map));
      }
      for (var i2 = 0; i2 < props.length; i2 += 1) {
        defineProperty(object, props[i2], map[props[i2]], predicates[props[i2]]);
      }
    };
    defineProperties.supportsDescriptors = !!supportsDescriptors;
    module.exports = defineProperties;
  }
});

// node_modules/object-is/implementation.js
var require_implementation3 = __commonJS({
  "node_modules/object-is/implementation.js"(exports, module) {
    init_define_process();
    "use strict";
    var numberIsNaN = function(value2) {
      return value2 !== value2;
    };
    module.exports = function is2(a, b2) {
      if (a === 0 && b2 === 0) {
        return 1 / a === 1 / b2;
      }
      if (a === b2) {
        return true;
      }
      if (numberIsNaN(a) && numberIsNaN(b2)) {
        return true;
      }
      return false;
    };
  }
});

// node_modules/object-is/polyfill.js
var require_polyfill = __commonJS({
  "node_modules/object-is/polyfill.js"(exports, module) {
    init_define_process();
    "use strict";
    var implementation = require_implementation3();
    module.exports = function getPolyfill() {
      return typeof Object.is === "function" ? Object.is : implementation;
    };
  }
});

// node_modules/object-is/shim.js
var require_shim = __commonJS({
  "node_modules/object-is/shim.js"(exports, module) {
    init_define_process();
    "use strict";
    var getPolyfill = require_polyfill();
    var define2 = require_define_properties();
    module.exports = function shimObjectIs() {
      var polyfill = getPolyfill();
      define2(Object, { is: polyfill }, {
        is: function testObjectIs() {
          return Object.is !== polyfill;
        }
      });
      return polyfill;
    };
  }
});

// node_modules/object-is/index.js
var require_object_is = __commonJS({
  "node_modules/object-is/index.js"(exports, module) {
    init_define_process();
    "use strict";
    var define2 = require_define_properties();
    var callBind = require_call_bind();
    var implementation = require_implementation3();
    var getPolyfill = require_polyfill();
    var shim = require_shim();
    var polyfill = callBind(getPolyfill(), Object);
    define2(polyfill, {
      getPolyfill,
      implementation,
      shim
    });
    module.exports = polyfill;
  }
});

// node_modules/is-regex/index.js
var require_is_regex = __commonJS({
  "node_modules/is-regex/index.js"(exports, module) {
    init_define_process();
    "use strict";
    var callBound = require_callBound();
    var hasToStringTag = require_shams2()();
    var has;
    var $exec;
    var isRegexMarker;
    var badStringifier;
    if (hasToStringTag) {
      has = callBound("Object.prototype.hasOwnProperty");
      $exec = callBound("RegExp.prototype.exec");
      isRegexMarker = {};
      throwRegexMarker = function() {
        throw isRegexMarker;
      };
      badStringifier = {
        toString: throwRegexMarker,
        valueOf: throwRegexMarker
      };
      if (typeof Symbol.toPrimitive === "symbol") {
        badStringifier[Symbol.toPrimitive] = throwRegexMarker;
      }
    }
    var throwRegexMarker;
    var $toString = callBound("Object.prototype.toString");
    var gOPD = Object.getOwnPropertyDescriptor;
    var regexClass = "[object RegExp]";
    module.exports = hasToStringTag ? function isRegex(value2) {
      if (!value2 || typeof value2 !== "object") {
        return false;
      }
      var descriptor = gOPD(value2, "lastIndex");
      var hasLastIndexDataProperty = descriptor && has(descriptor, "value");
      if (!hasLastIndexDataProperty) {
        return false;
      }
      try {
        $exec(value2, badStringifier);
      } catch (e) {
        return e === isRegexMarker;
      }
    } : function isRegex(value2) {
      if (!value2 || typeof value2 !== "object" && typeof value2 !== "function") {
        return false;
      }
      return $toString(value2) === regexClass;
    };
  }
});

// node_modules/regexp.prototype.flags/implementation.js
var require_implementation4 = __commonJS({
  "node_modules/regexp.prototype.flags/implementation.js"(exports, module) {
    init_define_process();
    "use strict";
    var $Object = Object;
    var $TypeError = TypeError;
    module.exports = function flags() {
      if (this != null && this !== $Object(this)) {
        throw new $TypeError("RegExp.prototype.flags getter called on non-object");
      }
      var result = "";
      if (this.hasIndices) {
        result += "d";
      }
      if (this.global) {
        result += "g";
      }
      if (this.ignoreCase) {
        result += "i";
      }
      if (this.multiline) {
        result += "m";
      }
      if (this.dotAll) {
        result += "s";
      }
      if (this.unicode) {
        result += "u";
      }
      if (this.sticky) {
        result += "y";
      }
      return result;
    };
  }
});

// node_modules/regexp.prototype.flags/polyfill.js
var require_polyfill2 = __commonJS({
  "node_modules/regexp.prototype.flags/polyfill.js"(exports, module) {
    init_define_process();
    "use strict";
    var implementation = require_implementation4();
    var supportsDescriptors = require_define_properties().supportsDescriptors;
    var $gOPD = Object.getOwnPropertyDescriptor;
    module.exports = function getPolyfill() {
      if (supportsDescriptors && /a/mig.flags === "gim") {
        var descriptor = $gOPD(RegExp.prototype, "flags");
        if (descriptor && typeof descriptor.get === "function" && typeof /a/.dotAll === "boolean") {
          return descriptor.get;
        }
      }
      return implementation;
    };
  }
});

// node_modules/regexp.prototype.flags/shim.js
var require_shim2 = __commonJS({
  "node_modules/regexp.prototype.flags/shim.js"(exports, module) {
    init_define_process();
    "use strict";
    var supportsDescriptors = require_define_properties().supportsDescriptors;
    var getPolyfill = require_polyfill2();
    var gOPD = Object.getOwnPropertyDescriptor;
    var defineProperty = Object.defineProperty;
    var TypeErr = TypeError;
    var getProto = Object.getPrototypeOf;
    var regex = /a/;
    module.exports = function shimFlags() {
      if (!supportsDescriptors || !getProto) {
        throw new TypeErr("RegExp.prototype.flags requires a true ES5 environment that supports property descriptors");
      }
      var polyfill = getPolyfill();
      var proto = getProto(regex);
      var descriptor = gOPD(proto, "flags");
      if (!descriptor || descriptor.get !== polyfill) {
        defineProperty(proto, "flags", {
          configurable: true,
          enumerable: false,
          get: polyfill
        });
      }
      return polyfill;
    };
  }
});

// node_modules/regexp.prototype.flags/index.js
var require_regexp_prototype = __commonJS({
  "node_modules/regexp.prototype.flags/index.js"(exports, module) {
    init_define_process();
    "use strict";
    var define2 = require_define_properties();
    var callBind = require_call_bind();
    var implementation = require_implementation4();
    var getPolyfill = require_polyfill2();
    var shim = require_shim2();
    var flagsBound = callBind(getPolyfill());
    define2(flagsBound, {
      getPolyfill,
      implementation,
      shim
    });
    module.exports = flagsBound;
  }
});

// node_modules/isarray/index.js
var require_isarray = __commonJS({
  "node_modules/isarray/index.js"(exports, module) {
    init_define_process();
    var toString = {}.toString;
    module.exports = Array.isArray || function(arr) {
      return toString.call(arr) == "[object Array]";
    };
  }
});

// node_modules/is-date-object/index.js
var require_is_date_object = __commonJS({
  "node_modules/is-date-object/index.js"(exports, module) {
    init_define_process();
    "use strict";
    var getDay = Date.prototype.getDay;
    var tryDateObject = function tryDateGetDayCall(value2) {
      try {
        getDay.call(value2);
        return true;
      } catch (e) {
        return false;
      }
    };
    var toStr = Object.prototype.toString;
    var dateClass = "[object Date]";
    var hasToStringTag = require_shams2()();
    module.exports = function isDateObject(value2) {
      if (typeof value2 !== "object" || value2 === null) {
        return false;
      }
      return hasToStringTag ? tryDateObject(value2) : toStr.call(value2) === dateClass;
    };
  }
});

// node_modules/is-string/index.js
var require_is_string = __commonJS({
  "node_modules/is-string/index.js"(exports, module) {
    init_define_process();
    "use strict";
    var strValue = String.prototype.valueOf;
    var tryStringObject = function tryStringObject2(value2) {
      try {
        strValue.call(value2);
        return true;
      } catch (e) {
        return false;
      }
    };
    var toStr = Object.prototype.toString;
    var strClass = "[object String]";
    var hasToStringTag = require_shams2()();
    module.exports = function isString(value2) {
      if (typeof value2 === "string") {
        return true;
      }
      if (typeof value2 !== "object") {
        return false;
      }
      return hasToStringTag ? tryStringObject(value2) : toStr.call(value2) === strClass;
    };
  }
});

// node_modules/is-number-object/index.js
var require_is_number_object = __commonJS({
  "node_modules/is-number-object/index.js"(exports, module) {
    init_define_process();
    "use strict";
    var numToStr = Number.prototype.toString;
    var tryNumberObject = function tryNumberObject2(value2) {
      try {
        numToStr.call(value2);
        return true;
      } catch (e) {
        return false;
      }
    };
    var toStr = Object.prototype.toString;
    var numClass = "[object Number]";
    var hasToStringTag = require_shams2()();
    module.exports = function isNumberObject(value2) {
      if (typeof value2 === "number") {
        return true;
      }
      if (typeof value2 !== "object") {
        return false;
      }
      return hasToStringTag ? tryNumberObject(value2) : toStr.call(value2) === numClass;
    };
  }
});

// node_modules/is-boolean-object/index.js
var require_is_boolean_object = __commonJS({
  "node_modules/is-boolean-object/index.js"(exports, module) {
    init_define_process();
    "use strict";
    var callBound = require_callBound();
    var $boolToStr = callBound("Boolean.prototype.toString");
    var $toString = callBound("Object.prototype.toString");
    var tryBooleanObject = function booleanBrandCheck(value2) {
      try {
        $boolToStr(value2);
        return true;
      } catch (e) {
        return false;
      }
    };
    var boolClass = "[object Boolean]";
    var hasToStringTag = require_shams2()();
    module.exports = function isBoolean(value2) {
      if (typeof value2 === "boolean") {
        return true;
      }
      if (value2 === null || typeof value2 !== "object") {
        return false;
      }
      return hasToStringTag && Symbol.toStringTag in value2 ? tryBooleanObject(value2) : $toString(value2) === boolClass;
    };
  }
});

// node_modules/is-symbol/index.js
var require_is_symbol = __commonJS({
  "node_modules/is-symbol/index.js"(exports, module) {
    init_define_process();
    "use strict";
    var toStr = Object.prototype.toString;
    var hasSymbols = require_has_symbols()();
    if (hasSymbols) {
      symToStr = Symbol.prototype.toString;
      symStringRegex = /^Symbol\(.*\)$/;
      isSymbolObject = function isRealSymbolObject(value2) {
        if (typeof value2.valueOf() !== "symbol") {
          return false;
        }
        return symStringRegex.test(symToStr.call(value2));
      };
      module.exports = function isSymbol(value2) {
        if (typeof value2 === "symbol") {
          return true;
        }
        if (toStr.call(value2) !== "[object Symbol]") {
          return false;
        }
        try {
          return isSymbolObject(value2);
        } catch (e) {
          return false;
        }
      };
    } else {
      module.exports = function isSymbol(value2) {
        return false;
      };
    }
    var symToStr;
    var symStringRegex;
    var isSymbolObject;
  }
});

// node_modules/has-bigints/index.js
var require_has_bigints = __commonJS({
  "node_modules/has-bigints/index.js"(exports, module) {
    init_define_process();
    "use strict";
    var $BigInt = globalThis.BigInt;
    module.exports = function hasNativeBigInts() {
      return typeof $BigInt === "function" && typeof BigInt === "function" && typeof $BigInt(42) === "bigint" && typeof BigInt(42) === "bigint";
    };
  }
});

// node_modules/is-bigint/index.js
var require_is_bigint = __commonJS({
  "node_modules/is-bigint/index.js"(exports, module) {
    init_define_process();
    "use strict";
    var hasBigInts = require_has_bigints()();
    if (hasBigInts) {
      bigIntValueOf = BigInt.prototype.valueOf;
      tryBigInt = function tryBigIntObject(value2) {
        try {
          bigIntValueOf.call(value2);
          return true;
        } catch (e) {
        }
        return false;
      };
      module.exports = function isBigInt(value2) {
        if (value2 === null || typeof value2 === "undefined" || typeof value2 === "boolean" || typeof value2 === "string" || typeof value2 === "number" || typeof value2 === "symbol" || typeof value2 === "function") {
          return false;
        }
        if (typeof value2 === "bigint") {
          return true;
        }
        return tryBigInt(value2);
      };
    } else {
      module.exports = function isBigInt(value2) {
        return false;
      };
    }
    var bigIntValueOf;
    var tryBigInt;
  }
});

// node_modules/which-boxed-primitive/index.js
var require_which_boxed_primitive = __commonJS({
  "node_modules/which-boxed-primitive/index.js"(exports, module) {
    init_define_process();
    "use strict";
    var isString = require_is_string();
    var isNumber = require_is_number_object();
    var isBoolean = require_is_boolean_object();
    var isSymbol = require_is_symbol();
    var isBigInt = require_is_bigint();
    module.exports = function whichBoxedPrimitive(value2) {
      if (value2 == null || typeof value2 !== "object" && typeof value2 !== "function") {
        return null;
      }
      if (isString(value2)) {
        return "String";
      }
      if (isNumber(value2)) {
        return "Number";
      }
      if (isBoolean(value2)) {
        return "Boolean";
      }
      if (isSymbol(value2)) {
        return "Symbol";
      }
      if (isBigInt(value2)) {
        return "BigInt";
      }
    };
  }
});

// node_modules/is-map/index.js
var require_is_map = __commonJS({
  "node_modules/is-map/index.js"(exports, module) {
    init_define_process();
    "use strict";
    var $Map = typeof Map === "function" && Map.prototype ? Map : null;
    var $Set = typeof Set === "function" && Set.prototype ? Set : null;
    var exported;
    if (!$Map) {
      exported = function isMap(x4) {
        return false;
      };
    }
    var $mapHas = $Map ? Map.prototype.has : null;
    var $setHas = $Set ? Set.prototype.has : null;
    if (!exported && !$mapHas) {
      exported = function isMap(x4) {
        return false;
      };
    }
    module.exports = exported || function isMap(x4) {
      if (!x4 || typeof x4 !== "object") {
        return false;
      }
      try {
        $mapHas.call(x4);
        if ($setHas) {
          try {
            $setHas.call(x4);
          } catch (e) {
            return true;
          }
        }
        return x4 instanceof $Map;
      } catch (e) {
      }
      return false;
    };
  }
});

// node_modules/is-set/index.js
var require_is_set = __commonJS({
  "node_modules/is-set/index.js"(exports, module) {
    init_define_process();
    "use strict";
    var $Map = typeof Map === "function" && Map.prototype ? Map : null;
    var $Set = typeof Set === "function" && Set.prototype ? Set : null;
    var exported;
    if (!$Set) {
      exported = function isSet(x4) {
        return false;
      };
    }
    var $mapHas = $Map ? Map.prototype.has : null;
    var $setHas = $Set ? Set.prototype.has : null;
    if (!exported && !$setHas) {
      exported = function isSet(x4) {
        return false;
      };
    }
    module.exports = exported || function isSet(x4) {
      if (!x4 || typeof x4 !== "object") {
        return false;
      }
      try {
        $setHas.call(x4);
        if ($mapHas) {
          try {
            $mapHas.call(x4);
          } catch (e) {
            return true;
          }
        }
        return x4 instanceof $Set;
      } catch (e) {
      }
      return false;
    };
  }
});

// node_modules/is-weakmap/index.js
var require_is_weakmap = __commonJS({
  "node_modules/is-weakmap/index.js"(exports, module) {
    init_define_process();
    "use strict";
    var $WeakMap = typeof WeakMap === "function" && WeakMap.prototype ? WeakMap : null;
    var $WeakSet = typeof WeakSet === "function" && WeakSet.prototype ? WeakSet : null;
    var exported;
    if (!$WeakMap) {
      exported = function isWeakMap(x4) {
        return false;
      };
    }
    var $mapHas = $WeakMap ? $WeakMap.prototype.has : null;
    var $setHas = $WeakSet ? $WeakSet.prototype.has : null;
    if (!exported && !$mapHas) {
      exported = function isWeakMap(x4) {
        return false;
      };
    }
    module.exports = exported || function isWeakMap(x4) {
      if (!x4 || typeof x4 !== "object") {
        return false;
      }
      try {
        $mapHas.call(x4, $mapHas);
        if ($setHas) {
          try {
            $setHas.call(x4, $setHas);
          } catch (e) {
            return true;
          }
        }
        return x4 instanceof $WeakMap;
      } catch (e) {
      }
      return false;
    };
  }
});

// node_modules/is-weakset/index.js
var require_is_weakset = __commonJS({
  "node_modules/is-weakset/index.js"(exports, module) {
    init_define_process();
    "use strict";
    var GetIntrinsic = require_get_intrinsic();
    var callBound = require_callBound();
    var $WeakSet = GetIntrinsic("%WeakSet%", true);
    var $setHas = callBound("WeakSet.prototype.has", true);
    if ($setHas) {
      $mapHas = callBound("WeakMap.prototype.has", true);
      module.exports = function isWeakSet(x4) {
        if (!x4 || typeof x4 !== "object") {
          return false;
        }
        try {
          $setHas(x4, $setHas);
          if ($mapHas) {
            try {
              $mapHas(x4, $mapHas);
            } catch (e) {
              return true;
            }
          }
          return x4 instanceof $WeakSet;
        } catch (e) {
        }
        return false;
      };
    } else {
      module.exports = function isWeakSet(x4) {
        return false;
      };
    }
    var $mapHas;
  }
});

// node_modules/which-collection/index.js
var require_which_collection = __commonJS({
  "node_modules/which-collection/index.js"(exports, module) {
    init_define_process();
    "use strict";
    var isMap = require_is_map();
    var isSet = require_is_set();
    var isWeakMap = require_is_weakmap();
    var isWeakSet = require_is_weakset();
    module.exports = function whichCollection(value2) {
      if (value2 && typeof value2 === "object") {
        if (isMap(value2)) {
          return "Map";
        }
        if (isSet(value2)) {
          return "Set";
        }
        if (isWeakMap(value2)) {
          return "WeakMap";
        }
        if (isWeakSet(value2)) {
          return "WeakSet";
        }
      }
      return false;
    };
  }
});

// node_modules/es-get-iterator/index.js
var require_es_get_iterator = __commonJS({
  "node_modules/es-get-iterator/index.js"(exports, module) {
    init_define_process();
    "use strict";
    var isArguments = require_is_arguments();
    if (require_has_symbols()() || require_shams()()) {
      $iterator = Symbol.iterator;
      module.exports = function getIterator(iterable) {
        if (iterable != null && typeof iterable[$iterator] !== "undefined") {
          return iterable[$iterator]();
        }
        if (isArguments(iterable)) {
          return Array.prototype[$iterator].call(iterable);
        }
      };
    } else {
      isArray = require_isarray();
      isString = require_is_string();
      GetIntrinsic = require_get_intrinsic();
      $Map = GetIntrinsic("%Map%", true);
      $Set = GetIntrinsic("%Set%", true);
      callBound = require_callBound();
      $arrayPush = callBound("Array.prototype.push");
      $charCodeAt = callBound("String.prototype.charCodeAt");
      $stringSlice = callBound("String.prototype.slice");
      advanceStringIndex = function advanceStringIndex2(S2, index) {
        var length = S2.length;
        if (index + 1 >= length) {
          return index + 1;
        }
        var first = $charCodeAt(S2, index);
        if (first < 55296 || first > 56319) {
          return index + 1;
        }
        var second = $charCodeAt(S2, index + 1);
        if (second < 56320 || second > 57343) {
          return index + 1;
        }
        return index + 2;
      };
      getArrayIterator = function getArrayIterator2(arraylike) {
        var i2 = 0;
        return {
          next: function next() {
            var done = i2 >= arraylike.length;
            var value2;
            if (!done) {
              value2 = arraylike[i2];
              i2 += 1;
            }
            return {
              done,
              value: value2
            };
          }
        };
      };
      getNonCollectionIterator = function getNonCollectionIterator2(iterable, noPrimordialCollections) {
        if (isArray(iterable) || isArguments(iterable)) {
          return getArrayIterator(iterable);
        }
        if (isString(iterable)) {
          var i2 = 0;
          return {
            next: function next() {
              var nextIndex = advanceStringIndex(iterable, i2);
              var value2 = $stringSlice(iterable, i2, nextIndex);
              i2 = nextIndex;
              return {
                done: nextIndex > iterable.length,
                value: value2
              };
            }
          };
        }
        if (noPrimordialCollections && typeof iterable["_es6-shim iterator_"] !== "undefined") {
          return iterable["_es6-shim iterator_"]();
        }
      };
      if (!$Map && !$Set) {
        module.exports = function getIterator(iterable) {
          if (iterable != null) {
            return getNonCollectionIterator(iterable, true);
          }
        };
      } else {
        isMap = require_is_map();
        isSet = require_is_set();
        $mapForEach = callBound("Map.prototype.forEach", true);
        $setForEach = callBound("Set.prototype.forEach", true);
        if (typeof define_process_default === "undefined" || !define_process_default.versions || !define_process_default.versions.node) {
          $mapIterator = callBound("Map.prototype.iterator", true);
          $setIterator = callBound("Set.prototype.iterator", true);
          getStopIterationIterator = function(iterator) {
            var done = false;
            return {
              next: function next() {
                try {
                  return {
                    done,
                    value: done ? void 0 : iterator.next()
                  };
                } catch (e) {
                  done = true;
                  return {
                    done: true,
                    value: void 0
                  };
                }
              }
            };
          };
        }
        $mapAtAtIterator = callBound("Map.prototype.@@iterator", true) || callBound("Map.prototype._es6-shim iterator_", true);
        $setAtAtIterator = callBound("Set.prototype.@@iterator", true) || callBound("Set.prototype._es6-shim iterator_", true);
        getCollectionIterator = function getCollectionIterator2(iterable) {
          if (isMap(iterable)) {
            if ($mapIterator) {
              return getStopIterationIterator($mapIterator(iterable));
            }
            if ($mapAtAtIterator) {
              return $mapAtAtIterator(iterable);
            }
            if ($mapForEach) {
              var entries = [];
              $mapForEach(iterable, function(v7, k4) {
                $arrayPush(entries, [k4, v7]);
              });
              return getArrayIterator(entries);
            }
          }
          if (isSet(iterable)) {
            if ($setIterator) {
              return getStopIterationIterator($setIterator(iterable));
            }
            if ($setAtAtIterator) {
              return $setAtAtIterator(iterable);
            }
            if ($setForEach) {
              var values = [];
              $setForEach(iterable, function(v7) {
                $arrayPush(values, v7);
              });
              return getArrayIterator(values);
            }
          }
        };
        module.exports = function getIterator(iterable) {
          return getCollectionIterator(iterable) || getNonCollectionIterator(iterable);
        };
      }
    }
    var $iterator;
    var isArray;
    var isString;
    var GetIntrinsic;
    var $Map;
    var $Set;
    var callBound;
    var $arrayPush;
    var $charCodeAt;
    var $stringSlice;
    var advanceStringIndex;
    var getArrayIterator;
    var getNonCollectionIterator;
    var isMap;
    var isSet;
    var $mapForEach;
    var $setForEach;
    var $mapIterator;
    var $setIterator;
    var getStopIterationIterator;
    var $mapAtAtIterator;
    var $setAtAtIterator;
    var getCollectionIterator;
  }
});

// (disabled):node_modules/object-inspect/util.inspect
var require_util2 = __commonJS({
  "(disabled):node_modules/object-inspect/util.inspect"() {
    init_define_process();
  }
});

// node_modules/object-inspect/index.js
var require_object_inspect = __commonJS({
  "node_modules/object-inspect/index.js"(exports, module) {
    init_define_process();
    var hasMap = typeof Map === "function" && Map.prototype;
    var mapSizeDescriptor = Object.getOwnPropertyDescriptor && hasMap ? Object.getOwnPropertyDescriptor(Map.prototype, "size") : null;
    var mapSize = hasMap && mapSizeDescriptor && typeof mapSizeDescriptor.get === "function" ? mapSizeDescriptor.get : null;
    var mapForEach = hasMap && Map.prototype.forEach;
    var hasSet = typeof Set === "function" && Set.prototype;
    var setSizeDescriptor = Object.getOwnPropertyDescriptor && hasSet ? Object.getOwnPropertyDescriptor(Set.prototype, "size") : null;
    var setSize = hasSet && setSizeDescriptor && typeof setSizeDescriptor.get === "function" ? setSizeDescriptor.get : null;
    var setForEach = hasSet && Set.prototype.forEach;
    var hasWeakMap = typeof WeakMap === "function" && WeakMap.prototype;
    var weakMapHas = hasWeakMap ? WeakMap.prototype.has : null;
    var hasWeakSet = typeof WeakSet === "function" && WeakSet.prototype;
    var weakSetHas = hasWeakSet ? WeakSet.prototype.has : null;
    var hasWeakRef = typeof WeakRef === "function" && WeakRef.prototype;
    var weakRefDeref = hasWeakRef ? WeakRef.prototype.deref : null;
    var booleanValueOf = Boolean.prototype.valueOf;
    var objectToString = Object.prototype.toString;
    var functionToString = Function.prototype.toString;
    var $match = String.prototype.match;
    var $slice = String.prototype.slice;
    var $replace = String.prototype.replace;
    var $toUpperCase = String.prototype.toUpperCase;
    var $toLowerCase = String.prototype.toLowerCase;
    var $test = RegExp.prototype.test;
    var $concat = Array.prototype.concat;
    var $join = Array.prototype.join;
    var $arrSlice = Array.prototype.slice;
    var $floor = Math.floor;
    var bigIntValueOf = typeof BigInt === "function" ? BigInt.prototype.valueOf : null;
    var gOPS = Object.getOwnPropertySymbols;
    var symToString = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? Symbol.prototype.toString : null;
    var hasShammedSymbols = typeof Symbol === "function" && typeof Symbol.iterator === "object";
    var toStringTag = typeof Symbol === "function" && Symbol.toStringTag && (typeof Symbol.toStringTag === hasShammedSymbols ? "object" : "symbol") ? Symbol.toStringTag : null;
    var isEnumerable = Object.prototype.propertyIsEnumerable;
    var gPO = (typeof Reflect === "function" ? Reflect.getPrototypeOf : Object.getPrototypeOf) || ([].__proto__ === Array.prototype ? function(O3) {
      return O3.__proto__;
    } : null);
    function addNumericSeparator(num, str) {
      if (num === Infinity || num === -Infinity || num !== num || num && num > -1e3 && num < 1e3 || $test.call(/e/, str)) {
        return str;
      }
      var sepRegex = /[0-9](?=(?:[0-9]{3})+(?![0-9]))/g;
      if (typeof num === "number") {
        var int = num < 0 ? -$floor(-num) : $floor(num);
        if (int !== num) {
          var intStr = String(int);
          var dec = $slice.call(str, intStr.length + 1);
          return $replace.call(intStr, sepRegex, "$&_") + "." + $replace.call($replace.call(dec, /([0-9]{3})/g, "$&_"), /_$/, "");
        }
      }
      return $replace.call(str, sepRegex, "$&_");
    }
    var inspectCustom = require_util2().custom;
    var inspectSymbol = inspectCustom && isSymbol(inspectCustom) ? inspectCustom : null;
    module.exports = function inspect_(obj, options, depth, seen) {
      var opts = options || {};
      if (has(opts, "quoteStyle") && (opts.quoteStyle !== "single" && opts.quoteStyle !== "double")) {
        throw new TypeError('option "quoteStyle" must be "single" or "double"');
      }
      if (has(opts, "maxStringLength") && (typeof opts.maxStringLength === "number" ? opts.maxStringLength < 0 && opts.maxStringLength !== Infinity : opts.maxStringLength !== null)) {
        throw new TypeError('option "maxStringLength", if provided, must be a positive integer, Infinity, or `null`');
      }
      var customInspect = has(opts, "customInspect") ? opts.customInspect : true;
      if (typeof customInspect !== "boolean" && customInspect !== "symbol") {
        throw new TypeError("option \"customInspect\", if provided, must be `true`, `false`, or `'symbol'`");
      }
      if (has(opts, "indent") && opts.indent !== null && opts.indent !== "	" && !(parseInt(opts.indent, 10) === opts.indent && opts.indent > 0)) {
        throw new TypeError('option "indent" must be "\\t", an integer > 0, or `null`');
      }
      if (has(opts, "numericSeparator") && typeof opts.numericSeparator !== "boolean") {
        throw new TypeError('option "numericSeparator", if provided, must be `true` or `false`');
      }
      var numericSeparator = opts.numericSeparator;
      if (typeof obj === "undefined") {
        return "undefined";
      }
      if (obj === null) {
        return "null";
      }
      if (typeof obj === "boolean") {
        return obj ? "true" : "false";
      }
      if (typeof obj === "string") {
        return inspectString(obj, opts);
      }
      if (typeof obj === "number") {
        if (obj === 0) {
          return Infinity / obj > 0 ? "0" : "-0";
        }
        var str = String(obj);
        return numericSeparator ? addNumericSeparator(obj, str) : str;
      }
      if (typeof obj === "bigint") {
        var bigIntStr = String(obj) + "n";
        return numericSeparator ? addNumericSeparator(obj, bigIntStr) : bigIntStr;
      }
      var maxDepth = typeof opts.depth === "undefined" ? 5 : opts.depth;
      if (typeof depth === "undefined") {
        depth = 0;
      }
      if (depth >= maxDepth && maxDepth > 0 && typeof obj === "object") {
        return isArray(obj) ? "[Array]" : "[Object]";
      }
      var indent = getIndent(opts, depth);
      if (typeof seen === "undefined") {
        seen = [];
      } else if (indexOf(seen, obj) >= 0) {
        return "[Circular]";
      }
      function inspect4(value2, from, noIndent) {
        if (from) {
          seen = $arrSlice.call(seen);
          seen.push(from);
        }
        if (noIndent) {
          var newOpts = {
            depth: opts.depth
          };
          if (has(opts, "quoteStyle")) {
            newOpts.quoteStyle = opts.quoteStyle;
          }
          return inspect_(value2, newOpts, depth + 1, seen);
        }
        return inspect_(value2, opts, depth + 1, seen);
      }
      if (typeof obj === "function") {
        var name2 = nameOf(obj);
        var keys = arrObjKeys(obj, inspect4);
        return "[Function" + (name2 ? ": " + name2 : " (anonymous)") + "]" + (keys.length > 0 ? " { " + $join.call(keys, ", ") + " }" : "");
      }
      if (isSymbol(obj)) {
        var symString = hasShammedSymbols ? $replace.call(String(obj), /^(Symbol\(.*\))_[^)]*$/, "$1") : symToString.call(obj);
        return typeof obj === "object" && !hasShammedSymbols ? markBoxed(symString) : symString;
      }
      if (isElement(obj)) {
        var s2 = "<" + $toLowerCase.call(String(obj.nodeName));
        var attrs = obj.attributes || [];
        for (var i2 = 0; i2 < attrs.length; i2++) {
          s2 += " " + attrs[i2].name + "=" + wrapQuotes(quote(attrs[i2].value), "double", opts);
        }
        s2 += ">";
        if (obj.childNodes && obj.childNodes.length) {
          s2 += "...";
        }
        s2 += "</" + $toLowerCase.call(String(obj.nodeName)) + ">";
        return s2;
      }
      if (isArray(obj)) {
        if (obj.length === 0) {
          return "[]";
        }
        var xs = arrObjKeys(obj, inspect4);
        if (indent && !singleLineValues(xs)) {
          return "[" + indentedJoin(xs, indent) + "]";
        }
        return "[ " + $join.call(xs, ", ") + " ]";
      }
      if (isError(obj)) {
        var parts = arrObjKeys(obj, inspect4);
        if ("cause" in obj && !isEnumerable.call(obj, "cause")) {
          return "{ [" + String(obj) + "] " + $join.call($concat.call("[cause]: " + inspect4(obj.cause), parts), ", ") + " }";
        }
        if (parts.length === 0) {
          return "[" + String(obj) + "]";
        }
        return "{ [" + String(obj) + "] " + $join.call(parts, ", ") + " }";
      }
      if (typeof obj === "object" && customInspect) {
        if (inspectSymbol && typeof obj[inspectSymbol] === "function") {
          return obj[inspectSymbol]();
        } else if (customInspect !== "symbol" && typeof obj.inspect === "function") {
          return obj.inspect();
        }
      }
      if (isMap(obj)) {
        var mapParts = [];
        mapForEach.call(obj, function(value2, key2) {
          mapParts.push(inspect4(key2, obj, true) + " => " + inspect4(value2, obj));
        });
        return collectionOf("Map", mapSize.call(obj), mapParts, indent);
      }
      if (isSet(obj)) {
        var setParts = [];
        setForEach.call(obj, function(value2) {
          setParts.push(inspect4(value2, obj));
        });
        return collectionOf("Set", setSize.call(obj), setParts, indent);
      }
      if (isWeakMap(obj)) {
        return weakCollectionOf("WeakMap");
      }
      if (isWeakSet(obj)) {
        return weakCollectionOf("WeakSet");
      }
      if (isWeakRef(obj)) {
        return weakCollectionOf("WeakRef");
      }
      if (isNumber(obj)) {
        return markBoxed(inspect4(Number(obj)));
      }
      if (isBigInt(obj)) {
        return markBoxed(inspect4(bigIntValueOf.call(obj)));
      }
      if (isBoolean(obj)) {
        return markBoxed(booleanValueOf.call(obj));
      }
      if (isString(obj)) {
        return markBoxed(inspect4(String(obj)));
      }
      if (!isDate(obj) && !isRegExp(obj)) {
        var ys = arrObjKeys(obj, inspect4);
        var isPlainObject = gPO ? gPO(obj) === Object.prototype : obj instanceof Object || obj.constructor === Object;
        var protoTag = obj instanceof Object ? "" : "null prototype";
        var stringTag = !isPlainObject && toStringTag && Object(obj) === obj && toStringTag in obj ? $slice.call(toStr(obj), 8, -1) : protoTag ? "Object" : "";
        var constructorTag = isPlainObject || typeof obj.constructor !== "function" ? "" : obj.constructor.name ? obj.constructor.name + " " : "";
        var tag = constructorTag + (stringTag || protoTag ? "[" + $join.call($concat.call([], stringTag || [], protoTag || []), ": ") + "] " : "");
        if (ys.length === 0) {
          return tag + "{}";
        }
        if (indent) {
          return tag + "{" + indentedJoin(ys, indent) + "}";
        }
        return tag + "{ " + $join.call(ys, ", ") + " }";
      }
      return String(obj);
    };
    function wrapQuotes(s2, defaultStyle, opts) {
      var quoteChar = (opts.quoteStyle || defaultStyle) === "double" ? '"' : "'";
      return quoteChar + s2 + quoteChar;
    }
    function quote(s2) {
      return $replace.call(String(s2), /"/g, "&quot;");
    }
    function isArray(obj) {
      return toStr(obj) === "[object Array]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
    }
    function isDate(obj) {
      return toStr(obj) === "[object Date]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
    }
    function isRegExp(obj) {
      return toStr(obj) === "[object RegExp]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
    }
    function isError(obj) {
      return toStr(obj) === "[object Error]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
    }
    function isString(obj) {
      return toStr(obj) === "[object String]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
    }
    function isNumber(obj) {
      return toStr(obj) === "[object Number]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
    }
    function isBoolean(obj) {
      return toStr(obj) === "[object Boolean]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
    }
    function isSymbol(obj) {
      if (hasShammedSymbols) {
        return obj && typeof obj === "object" && obj instanceof Symbol;
      }
      if (typeof obj === "symbol") {
        return true;
      }
      if (!obj || typeof obj !== "object" || !symToString) {
        return false;
      }
      try {
        symToString.call(obj);
        return true;
      } catch (e) {
      }
      return false;
    }
    function isBigInt(obj) {
      if (!obj || typeof obj !== "object" || !bigIntValueOf) {
        return false;
      }
      try {
        bigIntValueOf.call(obj);
        return true;
      } catch (e) {
      }
      return false;
    }
    var hasOwn = Object.prototype.hasOwnProperty || function(key2) {
      return key2 in this;
    };
    function has(obj, key2) {
      return hasOwn.call(obj, key2);
    }
    function toStr(obj) {
      return objectToString.call(obj);
    }
    function nameOf(f3) {
      if (f3.name) {
        return f3.name;
      }
      var m3 = $match.call(functionToString.call(f3), /^function\s*([\w$]+)/);
      if (m3) {
        return m3[1];
      }
      return null;
    }
    function indexOf(xs, x4) {
      if (xs.indexOf) {
        return xs.indexOf(x4);
      }
      for (var i2 = 0, l2 = xs.length; i2 < l2; i2++) {
        if (xs[i2] === x4) {
          return i2;
        }
      }
      return -1;
    }
    function isMap(x4) {
      if (!mapSize || !x4 || typeof x4 !== "object") {
        return false;
      }
      try {
        mapSize.call(x4);
        try {
          setSize.call(x4);
        } catch (s2) {
          return true;
        }
        return x4 instanceof Map;
      } catch (e) {
      }
      return false;
    }
    function isWeakMap(x4) {
      if (!weakMapHas || !x4 || typeof x4 !== "object") {
        return false;
      }
      try {
        weakMapHas.call(x4, weakMapHas);
        try {
          weakSetHas.call(x4, weakSetHas);
        } catch (s2) {
          return true;
        }
        return x4 instanceof WeakMap;
      } catch (e) {
      }
      return false;
    }
    function isWeakRef(x4) {
      if (!weakRefDeref || !x4 || typeof x4 !== "object") {
        return false;
      }
      try {
        weakRefDeref.call(x4);
        return true;
      } catch (e) {
      }
      return false;
    }
    function isSet(x4) {
      if (!setSize || !x4 || typeof x4 !== "object") {
        return false;
      }
      try {
        setSize.call(x4);
        try {
          mapSize.call(x4);
        } catch (m3) {
          return true;
        }
        return x4 instanceof Set;
      } catch (e) {
      }
      return false;
    }
    function isWeakSet(x4) {
      if (!weakSetHas || !x4 || typeof x4 !== "object") {
        return false;
      }
      try {
        weakSetHas.call(x4, weakSetHas);
        try {
          weakMapHas.call(x4, weakMapHas);
        } catch (s2) {
          return true;
        }
        return x4 instanceof WeakSet;
      } catch (e) {
      }
      return false;
    }
    function isElement(x4) {
      if (!x4 || typeof x4 !== "object") {
        return false;
      }
      if (typeof HTMLElement !== "undefined" && x4 instanceof HTMLElement) {
        return true;
      }
      return typeof x4.nodeName === "string" && typeof x4.getAttribute === "function";
    }
    function inspectString(str, opts) {
      if (str.length > opts.maxStringLength) {
        var remaining = str.length - opts.maxStringLength;
        var trailer = "... " + remaining + " more character" + (remaining > 1 ? "s" : "");
        return inspectString($slice.call(str, 0, opts.maxStringLength), opts) + trailer;
      }
      var s2 = $replace.call($replace.call(str, /(['\\])/g, "\\$1"), /[\x00-\x1f]/g, lowbyte);
      return wrapQuotes(s2, "single", opts);
    }
    function lowbyte(c2) {
      var n = c2.charCodeAt(0);
      var x4 = {
        8: "b",
        9: "t",
        10: "n",
        12: "f",
        13: "r"
      }[n];
      if (x4) {
        return "\\" + x4;
      }
      return "\\x" + (n < 16 ? "0" : "") + $toUpperCase.call(n.toString(16));
    }
    function markBoxed(str) {
      return "Object(" + str + ")";
    }
    function weakCollectionOf(type) {
      return type + " { ? }";
    }
    function collectionOf(type, size, entries, indent) {
      var joinedEntries = indent ? indentedJoin(entries, indent) : $join.call(entries, ", ");
      return type + " (" + size + ") {" + joinedEntries + "}";
    }
    function singleLineValues(xs) {
      for (var i2 = 0; i2 < xs.length; i2++) {
        if (indexOf(xs[i2], "\n") >= 0) {
          return false;
        }
      }
      return true;
    }
    function getIndent(opts, depth) {
      var baseIndent;
      if (opts.indent === "	") {
        baseIndent = "	";
      } else if (typeof opts.indent === "number" && opts.indent > 0) {
        baseIndent = $join.call(Array(opts.indent + 1), " ");
      } else {
        return null;
      }
      return {
        base: baseIndent,
        prev: $join.call(Array(depth + 1), baseIndent)
      };
    }
    function indentedJoin(xs, indent) {
      if (xs.length === 0) {
        return "";
      }
      var lineJoiner = "\n" + indent.prev + indent.base;
      return lineJoiner + $join.call(xs, "," + lineJoiner) + "\n" + indent.prev;
    }
    function arrObjKeys(obj, inspect4) {
      var isArr = isArray(obj);
      var xs = [];
      if (isArr) {
        xs.length = obj.length;
        for (var i2 = 0; i2 < obj.length; i2++) {
          xs[i2] = has(obj, i2) ? inspect4(obj[i2], obj) : "";
        }
      }
      var syms = typeof gOPS === "function" ? gOPS(obj) : [];
      var symMap;
      if (hasShammedSymbols) {
        symMap = {};
        for (var k4 = 0; k4 < syms.length; k4++) {
          symMap["$" + syms[k4]] = syms[k4];
        }
      }
      for (var key2 in obj) {
        if (!has(obj, key2)) {
          continue;
        }
        if (isArr && String(Number(key2)) === key2 && key2 < obj.length) {
          continue;
        }
        if (hasShammedSymbols && symMap["$" + key2] instanceof Symbol) {
          continue;
        } else if ($test.call(/[^\w$]/, key2)) {
          xs.push(inspect4(key2, obj) + ": " + inspect4(obj[key2], obj));
        } else {
          xs.push(key2 + ": " + inspect4(obj[key2], obj));
        }
      }
      if (typeof gOPS === "function") {
        for (var j3 = 0; j3 < syms.length; j3++) {
          if (isEnumerable.call(obj, syms[j3])) {
            xs.push("[" + inspect4(syms[j3]) + "]: " + inspect4(obj[syms[j3]], obj));
          }
        }
      }
      return xs;
    }
  }
});

// node_modules/side-channel/index.js
var require_side_channel = __commonJS({
  "node_modules/side-channel/index.js"(exports, module) {
    init_define_process();
    "use strict";
    var GetIntrinsic = require_get_intrinsic();
    var callBound = require_callBound();
    var inspect4 = require_object_inspect();
    var $TypeError = GetIntrinsic("%TypeError%");
    var $WeakMap = GetIntrinsic("%WeakMap%", true);
    var $Map = GetIntrinsic("%Map%", true);
    var $weakMapGet = callBound("WeakMap.prototype.get", true);
    var $weakMapSet = callBound("WeakMap.prototype.set", true);
    var $weakMapHas = callBound("WeakMap.prototype.has", true);
    var $mapGet = callBound("Map.prototype.get", true);
    var $mapSet = callBound("Map.prototype.set", true);
    var $mapHas = callBound("Map.prototype.has", true);
    var listGetNode = function(list, key2) {
      for (var prev = list, curr; (curr = prev.next) !== null; prev = curr) {
        if (curr.key === key2) {
          prev.next = curr.next;
          curr.next = list.next;
          list.next = curr;
          return curr;
        }
      }
    };
    var listGet = function(objects, key2) {
      var node = listGetNode(objects, key2);
      return node && node.value;
    };
    var listSet = function(objects, key2, value2) {
      var node = listGetNode(objects, key2);
      if (node) {
        node.value = value2;
      } else {
        objects.next = {
          key: key2,
          next: objects.next,
          value: value2
        };
      }
    };
    var listHas = function(objects, key2) {
      return !!listGetNode(objects, key2);
    };
    module.exports = function getSideChannel() {
      var $wm;
      var $m;
      var $o2;
      var channel = {
        assert: function(key2) {
          if (!channel.has(key2)) {
            throw new $TypeError("Side channel does not contain " + inspect4(key2));
          }
        },
        get: function(key2) {
          if ($WeakMap && key2 && (typeof key2 === "object" || typeof key2 === "function")) {
            if ($wm) {
              return $weakMapGet($wm, key2);
            }
          } else if ($Map) {
            if ($m) {
              return $mapGet($m, key2);
            }
          } else {
            if ($o2) {
              return listGet($o2, key2);
            }
          }
        },
        has: function(key2) {
          if ($WeakMap && key2 && (typeof key2 === "object" || typeof key2 === "function")) {
            if ($wm) {
              return $weakMapHas($wm, key2);
            }
          } else if ($Map) {
            if ($m) {
              return $mapHas($m, key2);
            }
          } else {
            if ($o2) {
              return listHas($o2, key2);
            }
          }
          return false;
        },
        set: function(key2, value2) {
          if ($WeakMap && key2 && (typeof key2 === "object" || typeof key2 === "function")) {
            if (!$wm) {
              $wm = new $WeakMap();
            }
            $weakMapSet($wm, key2, value2);
          } else if ($Map) {
            if (!$m) {
              $m = new $Map();
            }
            $mapSet($m, key2, value2);
          } else {
            if (!$o2) {
              $o2 = { key: {}, next: null };
            }
            listSet($o2, key2, value2);
          }
        }
      };
      return channel;
    };
  }
});

// node_modules/object.assign/implementation.js
var require_implementation5 = __commonJS({
  "node_modules/object.assign/implementation.js"(exports, module) {
    init_define_process();
    "use strict";
    var keys = require_object_keys();
    var canBeObject = function(obj) {
      return typeof obj !== "undefined" && obj !== null;
    };
    var hasSymbols = require_shams()();
    var callBound = require_callBound();
    var toObject = Object;
    var $push = callBound("Array.prototype.push");
    var $propIsEnumerable = callBound("Object.prototype.propertyIsEnumerable");
    var originalGetSymbols = hasSymbols ? Object.getOwnPropertySymbols : null;
    module.exports = function assign(target, source1) {
      if (!canBeObject(target)) {
        throw new TypeError("target must be an object");
      }
      var objTarget = toObject(target);
      var s2, source, i2, props, syms, value2, key2;
      for (s2 = 1; s2 < arguments.length; ++s2) {
        source = toObject(arguments[s2]);
        props = keys(source);
        var getSymbols = hasSymbols && (Object.getOwnPropertySymbols || originalGetSymbols);
        if (getSymbols) {
          syms = getSymbols(source);
          for (i2 = 0; i2 < syms.length; ++i2) {
            key2 = syms[i2];
            if ($propIsEnumerable(source, key2)) {
              $push(props, key2);
            }
          }
        }
        for (i2 = 0; i2 < props.length; ++i2) {
          key2 = props[i2];
          value2 = source[key2];
          if ($propIsEnumerable(source, key2)) {
            objTarget[key2] = value2;
          }
        }
      }
      return objTarget;
    };
  }
});

// node_modules/object.assign/polyfill.js
var require_polyfill3 = __commonJS({
  "node_modules/object.assign/polyfill.js"(exports, module) {
    init_define_process();
    "use strict";
    var implementation = require_implementation5();
    var lacksProperEnumerationOrder = function() {
      if (!Object.assign) {
        return false;
      }
      var str = "abcdefghijklmnopqrst";
      var letters = str.split("");
      var map = {};
      for (var i2 = 0; i2 < letters.length; ++i2) {
        map[letters[i2]] = letters[i2];
      }
      var obj = Object.assign({}, map);
      var actual = "";
      for (var k4 in obj) {
        actual += k4;
      }
      return str !== actual;
    };
    var assignHasPendingExceptions = function() {
      if (!Object.assign || !Object.preventExtensions) {
        return false;
      }
      var thrower = Object.preventExtensions({ 1: 2 });
      try {
        Object.assign(thrower, "xy");
      } catch (e) {
        return thrower[1] === "y";
      }
      return false;
    };
    module.exports = function getPolyfill() {
      if (!Object.assign) {
        return implementation;
      }
      if (lacksProperEnumerationOrder()) {
        return implementation;
      }
      if (assignHasPendingExceptions()) {
        return implementation;
      }
      return Object.assign;
    };
  }
});

// node_modules/object.assign/shim.js
var require_shim3 = __commonJS({
  "node_modules/object.assign/shim.js"(exports, module) {
    init_define_process();
    "use strict";
    var define2 = require_define_properties();
    var getPolyfill = require_polyfill3();
    module.exports = function shimAssign() {
      var polyfill = getPolyfill();
      define2(Object, { assign: polyfill }, { assign: function() {
        return Object.assign !== polyfill;
      } });
      return polyfill;
    };
  }
});

// node_modules/object.assign/index.js
var require_object = __commonJS({
  "node_modules/object.assign/index.js"(exports, module) {
    init_define_process();
    "use strict";
    var defineProperties = require_define_properties();
    var callBind = require_call_bind();
    var implementation = require_implementation5();
    var getPolyfill = require_polyfill3();
    var shim = require_shim3();
    var polyfill = callBind.apply(getPolyfill());
    var bound = function assign(target, source1) {
      return polyfill(Object, arguments);
    };
    defineProperties(bound, {
      getPolyfill,
      implementation,
      shim
    });
    module.exports = bound;
  }
});

// node_modules/deep-equal/index.js
var require_deep_equal = __commonJS({
  "node_modules/deep-equal/index.js"(exports, module) {
    init_define_process();
    "use strict";
    var objectKeys = require_object_keys();
    var isArguments = require_is_arguments();
    var is2 = require_object_is();
    var isRegex = require_is_regex();
    var flags = require_regexp_prototype();
    var isArray = require_isarray();
    var isDate = require_is_date_object();
    var whichBoxedPrimitive = require_which_boxed_primitive();
    var GetIntrinsic = require_get_intrinsic();
    var callBound = require_callBound();
    var whichCollection = require_which_collection();
    var getIterator = require_es_get_iterator();
    var getSideChannel = require_side_channel();
    var whichTypedArray = require_which_typed_array();
    var assign = require_object();
    var $getTime = callBound("Date.prototype.getTime");
    var gPO = Object.getPrototypeOf;
    var $objToString = callBound("Object.prototype.toString");
    var $Set = GetIntrinsic("%Set%", true);
    var $mapHas = callBound("Map.prototype.has", true);
    var $mapGet = callBound("Map.prototype.get", true);
    var $mapSize = callBound("Map.prototype.size", true);
    var $setAdd = callBound("Set.prototype.add", true);
    var $setDelete = callBound("Set.prototype.delete", true);
    var $setHas = callBound("Set.prototype.has", true);
    var $setSize = callBound("Set.prototype.size", true);
    function setHasEqualElement(set, val1, opts, channel) {
      var i2 = getIterator(set);
      var result;
      while ((result = i2.next()) && !result.done) {
        if (internalDeepEqual(val1, result.value, opts, channel)) {
          $setDelete(set, result.value);
          return true;
        }
      }
      return false;
    }
    function findLooseMatchingPrimitives(prim) {
      if (typeof prim === "undefined") {
        return null;
      }
      if (typeof prim === "object") {
        return void 0;
      }
      if (typeof prim === "symbol") {
        return false;
      }
      if (typeof prim === "string" || typeof prim === "number") {
        return +prim === +prim;
      }
      return true;
    }
    function mapMightHaveLoosePrim(a, b2, prim, item, opts, channel) {
      var altValue = findLooseMatchingPrimitives(prim);
      if (altValue != null) {
        return altValue;
      }
      var curB = $mapGet(b2, altValue);
      var looseOpts = assign({}, opts, { strict: false });
      if (typeof curB === "undefined" && !$mapHas(b2, altValue) || !internalDeepEqual(item, curB, looseOpts, channel)) {
        return false;
      }
      return !$mapHas(a, altValue) && internalDeepEqual(item, curB, looseOpts, channel);
    }
    function setMightHaveLoosePrim(a, b2, prim) {
      var altValue = findLooseMatchingPrimitives(prim);
      if (altValue != null) {
        return altValue;
      }
      return $setHas(b2, altValue) && !$setHas(a, altValue);
    }
    function mapHasEqualEntry(set, map, key1, item1, opts, channel) {
      var i2 = getIterator(set);
      var result;
      var key2;
      while ((result = i2.next()) && !result.done) {
        key2 = result.value;
        if (internalDeepEqual(key1, key2, opts, channel) && internalDeepEqual(item1, $mapGet(map, key2), opts, channel)) {
          $setDelete(set, key2);
          return true;
        }
      }
      return false;
    }
    function internalDeepEqual(actual, expected, options, channel) {
      var opts = options || {};
      if (opts.strict ? is2(actual, expected) : actual === expected) {
        return true;
      }
      var actualBoxed = whichBoxedPrimitive(actual);
      var expectedBoxed = whichBoxedPrimitive(expected);
      if (actualBoxed !== expectedBoxed) {
        return false;
      }
      if (!actual || !expected || typeof actual !== "object" && typeof expected !== "object") {
        return opts.strict ? is2(actual, expected) : actual == expected;
      }
      var hasActual = channel.has(actual);
      var hasExpected = channel.has(expected);
      var sentinel;
      if (hasActual && hasExpected) {
        if (channel.get(actual) === channel.get(expected)) {
          return true;
        }
      } else {
        sentinel = {};
      }
      if (!hasActual) {
        channel.set(actual, sentinel);
      }
      if (!hasExpected) {
        channel.set(expected, sentinel);
      }
      return objEquiv(actual, expected, opts, channel);
    }
    function isBuffer(x4) {
      if (!x4 || typeof x4 !== "object" || typeof x4.length !== "number") {
        return false;
      }
      if (typeof x4.copy !== "function" || typeof x4.slice !== "function") {
        return false;
      }
      if (x4.length > 0 && typeof x4[0] !== "number") {
        return false;
      }
      return !!(x4.constructor && x4.constructor.isBuffer && x4.constructor.isBuffer(x4));
    }
    function setEquiv(a, b2, opts, channel) {
      if ($setSize(a) !== $setSize(b2)) {
        return false;
      }
      var iA = getIterator(a);
      var iB = getIterator(b2);
      var resultA;
      var resultB;
      var set;
      while ((resultA = iA.next()) && !resultA.done) {
        if (resultA.value && typeof resultA.value === "object") {
          if (!set) {
            set = new $Set();
          }
          $setAdd(set, resultA.value);
        } else if (!$setHas(b2, resultA.value)) {
          if (opts.strict) {
            return false;
          }
          if (!setMightHaveLoosePrim(a, b2, resultA.value)) {
            return false;
          }
          if (!set) {
            set = new $Set();
          }
          $setAdd(set, resultA.value);
        }
      }
      if (set) {
        while ((resultB = iB.next()) && !resultB.done) {
          if (resultB.value && typeof resultB.value === "object") {
            if (!setHasEqualElement(set, resultB.value, opts.strict, channel)) {
              return false;
            }
          } else if (!opts.strict && !$setHas(a, resultB.value) && !setHasEqualElement(set, resultB.value, opts.strict, channel)) {
            return false;
          }
        }
        return $setSize(set) === 0;
      }
      return true;
    }
    function mapEquiv(a, b2, opts, channel) {
      if ($mapSize(a) !== $mapSize(b2)) {
        return false;
      }
      var iA = getIterator(a);
      var iB = getIterator(b2);
      var resultA;
      var resultB;
      var set;
      var key2;
      var item1;
      var item2;
      while ((resultA = iA.next()) && !resultA.done) {
        key2 = resultA.value[0];
        item1 = resultA.value[1];
        if (key2 && typeof key2 === "object") {
          if (!set) {
            set = new $Set();
          }
          $setAdd(set, key2);
        } else {
          item2 = $mapGet(b2, key2);
          if (typeof item2 === "undefined" && !$mapHas(b2, key2) || !internalDeepEqual(item1, item2, opts, channel)) {
            if (opts.strict) {
              return false;
            }
            if (!mapMightHaveLoosePrim(a, b2, key2, item1, opts, channel)) {
              return false;
            }
            if (!set) {
              set = new $Set();
            }
            $setAdd(set, key2);
          }
        }
      }
      if (set) {
        while ((resultB = iB.next()) && !resultB.done) {
          key2 = resultB.value[0];
          item2 = resultB.value[1];
          if (key2 && typeof key2 === "object") {
            if (!mapHasEqualEntry(set, a, key2, item2, opts, channel)) {
              return false;
            }
          } else if (!opts.strict && (!a.has(key2) || !internalDeepEqual($mapGet(a, key2), item2, opts, channel)) && !mapHasEqualEntry(set, a, key2, item2, assign({}, opts, { strict: false }), channel)) {
            return false;
          }
        }
        return $setSize(set) === 0;
      }
      return true;
    }
    function objEquiv(a, b2, opts, channel) {
      var i2, key2;
      if (typeof a !== typeof b2) {
        return false;
      }
      if (a == null || b2 == null) {
        return false;
      }
      if ($objToString(a) !== $objToString(b2)) {
        return false;
      }
      if (isArguments(a) !== isArguments(b2)) {
        return false;
      }
      var aIsArray = isArray(a);
      var bIsArray = isArray(b2);
      if (aIsArray !== bIsArray) {
        return false;
      }
      var aIsError = a instanceof Error;
      var bIsError = b2 instanceof Error;
      if (aIsError !== bIsError) {
        return false;
      }
      if (aIsError || bIsError) {
        if (a.name !== b2.name || a.message !== b2.message) {
          return false;
        }
      }
      var aIsRegex = isRegex(a);
      var bIsRegex = isRegex(b2);
      if (aIsRegex !== bIsRegex) {
        return false;
      }
      if ((aIsRegex || bIsRegex) && (a.source !== b2.source || flags(a) !== flags(b2))) {
        return false;
      }
      var aIsDate = isDate(a);
      var bIsDate = isDate(b2);
      if (aIsDate !== bIsDate) {
        return false;
      }
      if (aIsDate || bIsDate) {
        if ($getTime(a) !== $getTime(b2)) {
          return false;
        }
      }
      if (opts.strict && gPO && gPO(a) !== gPO(b2)) {
        return false;
      }
      if (whichTypedArray(a) !== whichTypedArray(b2)) {
        return false;
      }
      var aIsBuffer = isBuffer(a);
      var bIsBuffer = isBuffer(b2);
      if (aIsBuffer !== bIsBuffer) {
        return false;
      }
      if (aIsBuffer || bIsBuffer) {
        if (a.length !== b2.length) {
          return false;
        }
        for (i2 = 0; i2 < a.length; i2++) {
          if (a[i2] !== b2[i2]) {
            return false;
          }
        }
        return true;
      }
      if (typeof a !== typeof b2) {
        return false;
      }
      var ka = objectKeys(a);
      var kb = objectKeys(b2);
      if (ka.length !== kb.length) {
        return false;
      }
      ka.sort();
      kb.sort();
      for (i2 = ka.length - 1; i2 >= 0; i2--) {
        if (ka[i2] != kb[i2]) {
          return false;
        }
      }
      for (i2 = ka.length - 1; i2 >= 0; i2--) {
        key2 = ka[i2];
        if (!internalDeepEqual(a[key2], b2[key2], opts, channel)) {
          return false;
        }
      }
      var aCollection = whichCollection(a);
      var bCollection = whichCollection(b2);
      if (aCollection !== bCollection) {
        return false;
      }
      if (aCollection === "Set" || bCollection === "Set") {
        return setEquiv(a, b2, opts, channel);
      }
      if (aCollection === "Map") {
        return mapEquiv(a, b2, opts, channel);
      }
      return true;
    }
    module.exports = function deepEqual(a, b2, opts) {
      return internalDeepEqual(a, b2, opts, getSideChannel());
    };
  }
});

// node_modules/@thirdweb-dev/sdk/dist/index.mjs
init_define_process();
var import_polyfill = __toModule(require_browser_polyfill());

// node_modules/ethers/lib.esm/index.js
init_define_process();

// node_modules/ethers/lib.esm/ethers.js
var ethers_exports = {};
__export(ethers_exports, {
  BaseContract: () => BaseContract,
  BigNumber: () => BigNumber,
  Contract: () => Contract,
  ContractFactory: () => ContractFactory,
  FixedNumber: () => FixedNumber,
  Signer: () => Signer,
  VoidSigner: () => VoidSigner,
  Wallet: () => Wallet,
  Wordlist: () => Wordlist,
  constants: () => lib_exports7,
  errors: () => ErrorCode,
  getDefaultProvider: () => getDefaultProvider,
  logger: () => logger46,
  providers: () => lib_exports21,
  utils: () => utils_exports,
  version: () => version26,
  wordlists: () => wordlists
});
init_define_process();

// node_modules/@ethersproject/contracts/lib.esm/index.js
init_define_process();
init_lib11();
init_lib12();
init_lib13();
init_lib7();
init_lib3();
init_lib2();
init_lib4();
init_lib15();
init_lib();

// node_modules/@ethersproject/contracts/lib.esm/_version.js
init_define_process();
var version14 = "contracts/5.6.0";

// node_modules/@ethersproject/contracts/lib.esm/index.js
"use strict";
var __awaiter5 = function(thisArg, _arguments, P3, generator) {
  function adopt(value2) {
    return value2 instanceof P3 ? value2 : new P3(function(resolve) {
      resolve(value2);
    });
  }
  return new (P3 || (P3 = Promise))(function(resolve, reject) {
    function fulfilled(value2) {
      try {
        step(generator.next(value2));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value2) {
      try {
        step(generator["throw"](value2));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var logger19 = new Logger(version14);
var allowedTransactionKeys3 = {
  chainId: true,
  data: true,
  from: true,
  gasLimit: true,
  gasPrice: true,
  nonce: true,
  to: true,
  value: true,
  type: true,
  accessList: true,
  maxFeePerGas: true,
  maxPriorityFeePerGas: true,
  customData: true,
  ccipReadEnabled: true
};
function resolveName(resolver, nameOrPromise) {
  return __awaiter5(this, void 0, void 0, function* () {
    const name2 = yield nameOrPromise;
    if (typeof name2 !== "string") {
      logger19.throwArgumentError("invalid address or ENS name", "name", name2);
    }
    try {
      return getAddress(name2);
    } catch (error) {
    }
    if (!resolver) {
      logger19.throwError("a provider or signer is needed to resolve ENS names", Logger.errors.UNSUPPORTED_OPERATION, {
        operation: "resolveName"
      });
    }
    const address = yield resolver.resolveName(name2);
    if (address == null) {
      logger19.throwArgumentError("resolver or addr is not configured for ENS name", "name", name2);
    }
    return address;
  });
}
function resolveAddresses(resolver, value2, paramType) {
  return __awaiter5(this, void 0, void 0, function* () {
    if (Array.isArray(paramType)) {
      return yield Promise.all(paramType.map((paramType2, index) => {
        return resolveAddresses(resolver, Array.isArray(value2) ? value2[index] : value2[paramType2.name], paramType2);
      }));
    }
    if (paramType.type === "address") {
      return yield resolveName(resolver, value2);
    }
    if (paramType.type === "tuple") {
      return yield resolveAddresses(resolver, value2, paramType.components);
    }
    if (paramType.baseType === "array") {
      if (!Array.isArray(value2)) {
        return Promise.reject(logger19.makeError("invalid value for array", Logger.errors.INVALID_ARGUMENT, {
          argument: "value",
          value: value2
        }));
      }
      return yield Promise.all(value2.map((v7) => resolveAddresses(resolver, v7, paramType.arrayChildren)));
    }
    return value2;
  });
}
function populateTransaction(contract, fragment, args) {
  return __awaiter5(this, void 0, void 0, function* () {
    let overrides = {};
    if (args.length === fragment.inputs.length + 1 && typeof args[args.length - 1] === "object") {
      overrides = shallowCopy(args.pop());
    }
    logger19.checkArgumentCount(args.length, fragment.inputs.length, "passed to contract");
    if (contract.signer) {
      if (overrides.from) {
        overrides.from = resolveProperties({
          override: resolveName(contract.signer, overrides.from),
          signer: contract.signer.getAddress()
        }).then((check) => __awaiter5(this, void 0, void 0, function* () {
          if (getAddress(check.signer) !== check.override) {
            logger19.throwError("Contract with a Signer cannot override from", Logger.errors.UNSUPPORTED_OPERATION, {
              operation: "overrides.from"
            });
          }
          return check.override;
        }));
      } else {
        overrides.from = contract.signer.getAddress();
      }
    } else if (overrides.from) {
      overrides.from = resolveName(contract.provider, overrides.from);
    }
    const resolved = yield resolveProperties({
      args: resolveAddresses(contract.signer || contract.provider, args, fragment.inputs),
      address: contract.resolvedAddress,
      overrides: resolveProperties(overrides) || {}
    });
    const data = contract.interface.encodeFunctionData(fragment, resolved.args);
    const tx = {
      data,
      to: resolved.address
    };
    const ro = resolved.overrides;
    if (ro.nonce != null) {
      tx.nonce = BigNumber.from(ro.nonce).toNumber();
    }
    if (ro.gasLimit != null) {
      tx.gasLimit = BigNumber.from(ro.gasLimit);
    }
    if (ro.gasPrice != null) {
      tx.gasPrice = BigNumber.from(ro.gasPrice);
    }
    if (ro.maxFeePerGas != null) {
      tx.maxFeePerGas = BigNumber.from(ro.maxFeePerGas);
    }
    if (ro.maxPriorityFeePerGas != null) {
      tx.maxPriorityFeePerGas = BigNumber.from(ro.maxPriorityFeePerGas);
    }
    if (ro.from != null) {
      tx.from = ro.from;
    }
    if (ro.type != null) {
      tx.type = ro.type;
    }
    if (ro.accessList != null) {
      tx.accessList = accessListify(ro.accessList);
    }
    if (tx.gasLimit == null && fragment.gas != null) {
      let intrinsic = 21e3;
      const bytes = arrayify(data);
      for (let i2 = 0; i2 < bytes.length; i2++) {
        intrinsic += 4;
        if (bytes[i2]) {
          intrinsic += 64;
        }
      }
      tx.gasLimit = BigNumber.from(fragment.gas).add(intrinsic);
    }
    if (ro.value) {
      const roValue = BigNumber.from(ro.value);
      if (!roValue.isZero() && !fragment.payable) {
        logger19.throwError("non-payable method cannot override value", Logger.errors.UNSUPPORTED_OPERATION, {
          operation: "overrides.value",
          value: overrides.value
        });
      }
      tx.value = roValue;
    }
    if (ro.customData) {
      tx.customData = shallowCopy(ro.customData);
    }
    if (ro.ccipReadEnabled) {
      tx.ccipReadEnabled = !!ro.ccipReadEnabled;
    }
    delete overrides.nonce;
    delete overrides.gasLimit;
    delete overrides.gasPrice;
    delete overrides.from;
    delete overrides.value;
    delete overrides.type;
    delete overrides.accessList;
    delete overrides.maxFeePerGas;
    delete overrides.maxPriorityFeePerGas;
    delete overrides.customData;
    delete overrides.ccipReadEnabled;
    const leftovers = Object.keys(overrides).filter((key2) => overrides[key2] != null);
    if (leftovers.length) {
      logger19.throwError(`cannot override ${leftovers.map((l2) => JSON.stringify(l2)).join(",")}`, Logger.errors.UNSUPPORTED_OPERATION, {
        operation: "overrides",
        overrides: leftovers
      });
    }
    return tx;
  });
}
function buildPopulate(contract, fragment) {
  return function(...args) {
    return populateTransaction(contract, fragment, args);
  };
}
function buildEstimate(contract, fragment) {
  const signerOrProvider = contract.signer || contract.provider;
  return function(...args) {
    return __awaiter5(this, void 0, void 0, function* () {
      if (!signerOrProvider) {
        logger19.throwError("estimate require a provider or signer", Logger.errors.UNSUPPORTED_OPERATION, {
          operation: "estimateGas"
        });
      }
      const tx = yield populateTransaction(contract, fragment, args);
      return yield signerOrProvider.estimateGas(tx);
    });
  };
}
function addContractWait(contract, tx) {
  const wait = tx.wait.bind(tx);
  tx.wait = (confirmations) => {
    return wait(confirmations).then((receipt) => {
      receipt.events = receipt.logs.map((log) => {
        let event = deepCopy(log);
        let parsed = null;
        try {
          parsed = contract.interface.parseLog(log);
        } catch (e) {
        }
        if (parsed) {
          event.args = parsed.args;
          event.decode = (data, topics) => {
            return contract.interface.decodeEventLog(parsed.eventFragment, data, topics);
          };
          event.event = parsed.name;
          event.eventSignature = parsed.signature;
        }
        event.removeListener = () => {
          return contract.provider;
        };
        event.getBlock = () => {
          return contract.provider.getBlock(receipt.blockHash);
        };
        event.getTransaction = () => {
          return contract.provider.getTransaction(receipt.transactionHash);
        };
        event.getTransactionReceipt = () => {
          return Promise.resolve(receipt);
        };
        return event;
      });
      return receipt;
    });
  };
}
function buildCall(contract, fragment, collapseSimple) {
  const signerOrProvider = contract.signer || contract.provider;
  return function(...args) {
    return __awaiter5(this, void 0, void 0, function* () {
      let blockTag = void 0;
      if (args.length === fragment.inputs.length + 1 && typeof args[args.length - 1] === "object") {
        const overrides = shallowCopy(args.pop());
        if (overrides.blockTag != null) {
          blockTag = yield overrides.blockTag;
        }
        delete overrides.blockTag;
        args.push(overrides);
      }
      if (contract.deployTransaction != null) {
        yield contract._deployed(blockTag);
      }
      const tx = yield populateTransaction(contract, fragment, args);
      const result = yield signerOrProvider.call(tx, blockTag);
      try {
        let value2 = contract.interface.decodeFunctionResult(fragment, result);
        if (collapseSimple && fragment.outputs.length === 1) {
          value2 = value2[0];
        }
        return value2;
      } catch (error) {
        if (error.code === Logger.errors.CALL_EXCEPTION) {
          error.address = contract.address;
          error.args = args;
          error.transaction = tx;
        }
        throw error;
      }
    });
  };
}
function buildSend(contract, fragment) {
  return function(...args) {
    return __awaiter5(this, void 0, void 0, function* () {
      if (!contract.signer) {
        logger19.throwError("sending a transaction requires a signer", Logger.errors.UNSUPPORTED_OPERATION, {
          operation: "sendTransaction"
        });
      }
      if (contract.deployTransaction != null) {
        yield contract._deployed();
      }
      const txRequest = yield populateTransaction(contract, fragment, args);
      const tx = yield contract.signer.sendTransaction(txRequest);
      addContractWait(contract, tx);
      return tx;
    });
  };
}
function buildDefault(contract, fragment, collapseSimple) {
  if (fragment.constant) {
    return buildCall(contract, fragment, collapseSimple);
  }
  return buildSend(contract, fragment);
}
function getEventTag(filter) {
  if (filter.address && (filter.topics == null || filter.topics.length === 0)) {
    return "*";
  }
  return (filter.address || "*") + "@" + (filter.topics ? filter.topics.map((topic) => {
    if (Array.isArray(topic)) {
      return topic.join("|");
    }
    return topic;
  }).join(":") : "");
}
var RunningEvent = class {
  constructor(tag, filter) {
    defineReadOnly(this, "tag", tag);
    defineReadOnly(this, "filter", filter);
    this._listeners = [];
  }
  addListener(listener, once) {
    this._listeners.push({ listener, once });
  }
  removeListener(listener) {
    let done = false;
    this._listeners = this._listeners.filter((item) => {
      if (done || item.listener !== listener) {
        return true;
      }
      done = true;
      return false;
    });
  }
  removeAllListeners() {
    this._listeners = [];
  }
  listeners() {
    return this._listeners.map((i2) => i2.listener);
  }
  listenerCount() {
    return this._listeners.length;
  }
  run(args) {
    const listenerCount = this.listenerCount();
    this._listeners = this._listeners.filter((item) => {
      const argsCopy = args.slice();
      setTimeout(() => {
        item.listener.apply(this, argsCopy);
      }, 0);
      return !item.once;
    });
    return listenerCount;
  }
  prepareEvent(event) {
  }
  getEmit(event) {
    return [event];
  }
};
var ErrorRunningEvent = class extends RunningEvent {
  constructor() {
    super("error", null);
  }
};
var FragmentRunningEvent = class extends RunningEvent {
  constructor(address, contractInterface, fragment, topics) {
    const filter = {
      address
    };
    let topic = contractInterface.getEventTopic(fragment);
    if (topics) {
      if (topic !== topics[0]) {
        logger19.throwArgumentError("topic mismatch", "topics", topics);
      }
      filter.topics = topics.slice();
    } else {
      filter.topics = [topic];
    }
    super(getEventTag(filter), filter);
    defineReadOnly(this, "address", address);
    defineReadOnly(this, "interface", contractInterface);
    defineReadOnly(this, "fragment", fragment);
  }
  prepareEvent(event) {
    super.prepareEvent(event);
    event.event = this.fragment.name;
    event.eventSignature = this.fragment.format();
    event.decode = (data, topics) => {
      return this.interface.decodeEventLog(this.fragment, data, topics);
    };
    try {
      event.args = this.interface.decodeEventLog(this.fragment, event.data, event.topics);
    } catch (error) {
      event.args = null;
      event.decodeError = error;
    }
  }
  getEmit(event) {
    const errors = checkResultErrors(event.args);
    if (errors.length) {
      throw errors[0].error;
    }
    const args = (event.args || []).slice();
    args.push(event);
    return args;
  }
};
var WildcardRunningEvent = class extends RunningEvent {
  constructor(address, contractInterface) {
    super("*", { address });
    defineReadOnly(this, "address", address);
    defineReadOnly(this, "interface", contractInterface);
  }
  prepareEvent(event) {
    super.prepareEvent(event);
    try {
      const parsed = this.interface.parseLog(event);
      event.event = parsed.name;
      event.eventSignature = parsed.signature;
      event.decode = (data, topics) => {
        return this.interface.decodeEventLog(parsed.eventFragment, data, topics);
      };
      event.args = parsed.args;
    } catch (error) {
    }
  }
};
var BaseContract = class {
  constructor(addressOrName, contractInterface, signerOrProvider) {
    logger19.checkNew(new.target, Contract);
    defineReadOnly(this, "interface", getStatic(new.target, "getInterface")(contractInterface));
    if (signerOrProvider == null) {
      defineReadOnly(this, "provider", null);
      defineReadOnly(this, "signer", null);
    } else if (Signer.isSigner(signerOrProvider)) {
      defineReadOnly(this, "provider", signerOrProvider.provider || null);
      defineReadOnly(this, "signer", signerOrProvider);
    } else if (Provider.isProvider(signerOrProvider)) {
      defineReadOnly(this, "provider", signerOrProvider);
      defineReadOnly(this, "signer", null);
    } else {
      logger19.throwArgumentError("invalid signer or provider", "signerOrProvider", signerOrProvider);
    }
    defineReadOnly(this, "callStatic", {});
    defineReadOnly(this, "estimateGas", {});
    defineReadOnly(this, "functions", {});
    defineReadOnly(this, "populateTransaction", {});
    defineReadOnly(this, "filters", {});
    {
      const uniqueFilters = {};
      Object.keys(this.interface.events).forEach((eventSignature) => {
        const event = this.interface.events[eventSignature];
        defineReadOnly(this.filters, eventSignature, (...args) => {
          return {
            address: this.address,
            topics: this.interface.encodeFilterTopics(event, args)
          };
        });
        if (!uniqueFilters[event.name]) {
          uniqueFilters[event.name] = [];
        }
        uniqueFilters[event.name].push(eventSignature);
      });
      Object.keys(uniqueFilters).forEach((name2) => {
        const filters = uniqueFilters[name2];
        if (filters.length === 1) {
          defineReadOnly(this.filters, name2, this.filters[filters[0]]);
        } else {
          logger19.warn(`Duplicate definition of ${name2} (${filters.join(", ")})`);
        }
      });
    }
    defineReadOnly(this, "_runningEvents", {});
    defineReadOnly(this, "_wrappedEmits", {});
    if (addressOrName == null) {
      logger19.throwArgumentError("invalid contract address or ENS name", "addressOrName", addressOrName);
    }
    defineReadOnly(this, "address", addressOrName);
    if (this.provider) {
      defineReadOnly(this, "resolvedAddress", resolveName(this.provider, addressOrName));
    } else {
      try {
        defineReadOnly(this, "resolvedAddress", Promise.resolve(getAddress(addressOrName)));
      } catch (error) {
        logger19.throwError("provider is required to use ENS name as contract address", Logger.errors.UNSUPPORTED_OPERATION, {
          operation: "new Contract"
        });
      }
    }
    this.resolvedAddress.catch((e) => {
    });
    const uniqueNames = {};
    const uniqueSignatures = {};
    Object.keys(this.interface.functions).forEach((signature2) => {
      const fragment = this.interface.functions[signature2];
      if (uniqueSignatures[signature2]) {
        logger19.warn(`Duplicate ABI entry for ${JSON.stringify(signature2)}`);
        return;
      }
      uniqueSignatures[signature2] = true;
      {
        const name2 = fragment.name;
        if (!uniqueNames[`%${name2}`]) {
          uniqueNames[`%${name2}`] = [];
        }
        uniqueNames[`%${name2}`].push(signature2);
      }
      if (this[signature2] == null) {
        defineReadOnly(this, signature2, buildDefault(this, fragment, true));
      }
      if (this.functions[signature2] == null) {
        defineReadOnly(this.functions, signature2, buildDefault(this, fragment, false));
      }
      if (this.callStatic[signature2] == null) {
        defineReadOnly(this.callStatic, signature2, buildCall(this, fragment, true));
      }
      if (this.populateTransaction[signature2] == null) {
        defineReadOnly(this.populateTransaction, signature2, buildPopulate(this, fragment));
      }
      if (this.estimateGas[signature2] == null) {
        defineReadOnly(this.estimateGas, signature2, buildEstimate(this, fragment));
      }
    });
    Object.keys(uniqueNames).forEach((name2) => {
      const signatures = uniqueNames[name2];
      if (signatures.length > 1) {
        return;
      }
      name2 = name2.substring(1);
      const signature2 = signatures[0];
      try {
        if (this[name2] == null) {
          defineReadOnly(this, name2, this[signature2]);
        }
      } catch (e) {
      }
      if (this.functions[name2] == null) {
        defineReadOnly(this.functions, name2, this.functions[signature2]);
      }
      if (this.callStatic[name2] == null) {
        defineReadOnly(this.callStatic, name2, this.callStatic[signature2]);
      }
      if (this.populateTransaction[name2] == null) {
        defineReadOnly(this.populateTransaction, name2, this.populateTransaction[signature2]);
      }
      if (this.estimateGas[name2] == null) {
        defineReadOnly(this.estimateGas, name2, this.estimateGas[signature2]);
      }
    });
  }
  static getContractAddress(transaction) {
    return getContractAddress(transaction);
  }
  static getInterface(contractInterface) {
    if (Interface.isInterface(contractInterface)) {
      return contractInterface;
    }
    return new Interface(contractInterface);
  }
  deployed() {
    return this._deployed();
  }
  _deployed(blockTag) {
    if (!this._deployedPromise) {
      if (this.deployTransaction) {
        this._deployedPromise = this.deployTransaction.wait().then(() => {
          return this;
        });
      } else {
        this._deployedPromise = this.provider.getCode(this.address, blockTag).then((code) => {
          if (code === "0x") {
            logger19.throwError("contract not deployed", Logger.errors.UNSUPPORTED_OPERATION, {
              contractAddress: this.address,
              operation: "getDeployed"
            });
          }
          return this;
        });
      }
    }
    return this._deployedPromise;
  }
  fallback(overrides) {
    if (!this.signer) {
      logger19.throwError("sending a transactions require a signer", Logger.errors.UNSUPPORTED_OPERATION, { operation: "sendTransaction(fallback)" });
    }
    const tx = shallowCopy(overrides || {});
    ["from", "to"].forEach(function(key2) {
      if (tx[key2] == null) {
        return;
      }
      logger19.throwError("cannot override " + key2, Logger.errors.UNSUPPORTED_OPERATION, { operation: key2 });
    });
    tx.to = this.resolvedAddress;
    return this.deployed().then(() => {
      return this.signer.sendTransaction(tx);
    });
  }
  connect(signerOrProvider) {
    if (typeof signerOrProvider === "string") {
      signerOrProvider = new VoidSigner(signerOrProvider, this.provider);
    }
    const contract = new this.constructor(this.address, this.interface, signerOrProvider);
    if (this.deployTransaction) {
      defineReadOnly(contract, "deployTransaction", this.deployTransaction);
    }
    return contract;
  }
  attach(addressOrName) {
    return new this.constructor(addressOrName, this.interface, this.signer || this.provider);
  }
  static isIndexed(value2) {
    return Indexed.isIndexed(value2);
  }
  _normalizeRunningEvent(runningEvent) {
    if (this._runningEvents[runningEvent.tag]) {
      return this._runningEvents[runningEvent.tag];
    }
    return runningEvent;
  }
  _getRunningEvent(eventName) {
    if (typeof eventName === "string") {
      if (eventName === "error") {
        return this._normalizeRunningEvent(new ErrorRunningEvent());
      }
      if (eventName === "event") {
        return this._normalizeRunningEvent(new RunningEvent("event", null));
      }
      if (eventName === "*") {
        return this._normalizeRunningEvent(new WildcardRunningEvent(this.address, this.interface));
      }
      const fragment = this.interface.getEvent(eventName);
      return this._normalizeRunningEvent(new FragmentRunningEvent(this.address, this.interface, fragment));
    }
    if (eventName.topics && eventName.topics.length > 0) {
      try {
        const topic = eventName.topics[0];
        if (typeof topic !== "string") {
          throw new Error("invalid topic");
        }
        const fragment = this.interface.getEvent(topic);
        return this._normalizeRunningEvent(new FragmentRunningEvent(this.address, this.interface, fragment, eventName.topics));
      } catch (error) {
      }
      const filter = {
        address: this.address,
        topics: eventName.topics
      };
      return this._normalizeRunningEvent(new RunningEvent(getEventTag(filter), filter));
    }
    return this._normalizeRunningEvent(new WildcardRunningEvent(this.address, this.interface));
  }
  _checkRunningEvents(runningEvent) {
    if (runningEvent.listenerCount() === 0) {
      delete this._runningEvents[runningEvent.tag];
      const emit = this._wrappedEmits[runningEvent.tag];
      if (emit && runningEvent.filter) {
        this.provider.off(runningEvent.filter, emit);
        delete this._wrappedEmits[runningEvent.tag];
      }
    }
  }
  _wrapEvent(runningEvent, log, listener) {
    const event = deepCopy(log);
    event.removeListener = () => {
      if (!listener) {
        return;
      }
      runningEvent.removeListener(listener);
      this._checkRunningEvents(runningEvent);
    };
    event.getBlock = () => {
      return this.provider.getBlock(log.blockHash);
    };
    event.getTransaction = () => {
      return this.provider.getTransaction(log.transactionHash);
    };
    event.getTransactionReceipt = () => {
      return this.provider.getTransactionReceipt(log.transactionHash);
    };
    runningEvent.prepareEvent(event);
    return event;
  }
  _addEventListener(runningEvent, listener, once) {
    if (!this.provider) {
      logger19.throwError("events require a provider or a signer with a provider", Logger.errors.UNSUPPORTED_OPERATION, { operation: "once" });
    }
    runningEvent.addListener(listener, once);
    this._runningEvents[runningEvent.tag] = runningEvent;
    if (!this._wrappedEmits[runningEvent.tag]) {
      const wrappedEmit = (log) => {
        let event = this._wrapEvent(runningEvent, log, listener);
        if (event.decodeError == null) {
          try {
            const args = runningEvent.getEmit(event);
            this.emit(runningEvent.filter, ...args);
          } catch (error) {
            event.decodeError = error.error;
          }
        }
        if (runningEvent.filter != null) {
          this.emit("event", event);
        }
        if (event.decodeError != null) {
          this.emit("error", event.decodeError, event);
        }
      };
      this._wrappedEmits[runningEvent.tag] = wrappedEmit;
      if (runningEvent.filter != null) {
        this.provider.on(runningEvent.filter, wrappedEmit);
      }
    }
  }
  queryFilter(event, fromBlockOrBlockhash, toBlock) {
    const runningEvent = this._getRunningEvent(event);
    const filter = shallowCopy(runningEvent.filter);
    if (typeof fromBlockOrBlockhash === "string" && isHexString(fromBlockOrBlockhash, 32)) {
      if (toBlock != null) {
        logger19.throwArgumentError("cannot specify toBlock with blockhash", "toBlock", toBlock);
      }
      filter.blockHash = fromBlockOrBlockhash;
    } else {
      filter.fromBlock = fromBlockOrBlockhash != null ? fromBlockOrBlockhash : 0;
      filter.toBlock = toBlock != null ? toBlock : "latest";
    }
    return this.provider.getLogs(filter).then((logs) => {
      return logs.map((log) => this._wrapEvent(runningEvent, log, null));
    });
  }
  on(event, listener) {
    this._addEventListener(this._getRunningEvent(event), listener, false);
    return this;
  }
  once(event, listener) {
    this._addEventListener(this._getRunningEvent(event), listener, true);
    return this;
  }
  emit(eventName, ...args) {
    if (!this.provider) {
      return false;
    }
    const runningEvent = this._getRunningEvent(eventName);
    const result = runningEvent.run(args) > 0;
    this._checkRunningEvents(runningEvent);
    return result;
  }
  listenerCount(eventName) {
    if (!this.provider) {
      return 0;
    }
    if (eventName == null) {
      return Object.keys(this._runningEvents).reduce((accum, key2) => {
        return accum + this._runningEvents[key2].listenerCount();
      }, 0);
    }
    return this._getRunningEvent(eventName).listenerCount();
  }
  listeners(eventName) {
    if (!this.provider) {
      return [];
    }
    if (eventName == null) {
      const result = [];
      for (let tag in this._runningEvents) {
        this._runningEvents[tag].listeners().forEach((listener) => {
          result.push(listener);
        });
      }
      return result;
    }
    return this._getRunningEvent(eventName).listeners();
  }
  removeAllListeners(eventName) {
    if (!this.provider) {
      return this;
    }
    if (eventName == null) {
      for (const tag in this._runningEvents) {
        const runningEvent2 = this._runningEvents[tag];
        runningEvent2.removeAllListeners();
        this._checkRunningEvents(runningEvent2);
      }
      return this;
    }
    const runningEvent = this._getRunningEvent(eventName);
    runningEvent.removeAllListeners();
    this._checkRunningEvents(runningEvent);
    return this;
  }
  off(eventName, listener) {
    if (!this.provider) {
      return this;
    }
    const runningEvent = this._getRunningEvent(eventName);
    runningEvent.removeListener(listener);
    this._checkRunningEvents(runningEvent);
    return this;
  }
  removeListener(eventName, listener) {
    return this.off(eventName, listener);
  }
};
var Contract = class extends BaseContract {
};
var ContractFactory = class {
  constructor(contractInterface, bytecode, signer) {
    let bytecodeHex = null;
    if (typeof bytecode === "string") {
      bytecodeHex = bytecode;
    } else if (isBytes(bytecode)) {
      bytecodeHex = hexlify(bytecode);
    } else if (bytecode && typeof bytecode.object === "string") {
      bytecodeHex = bytecode.object;
    } else {
      bytecodeHex = "!";
    }
    if (bytecodeHex.substring(0, 2) !== "0x") {
      bytecodeHex = "0x" + bytecodeHex;
    }
    if (!isHexString(bytecodeHex) || bytecodeHex.length % 2) {
      logger19.throwArgumentError("invalid bytecode", "bytecode", bytecode);
    }
    if (signer && !Signer.isSigner(signer)) {
      logger19.throwArgumentError("invalid signer", "signer", signer);
    }
    defineReadOnly(this, "bytecode", bytecodeHex);
    defineReadOnly(this, "interface", getStatic(new.target, "getInterface")(contractInterface));
    defineReadOnly(this, "signer", signer || null);
  }
  getDeployTransaction(...args) {
    let tx = {};
    if (args.length === this.interface.deploy.inputs.length + 1 && typeof args[args.length - 1] === "object") {
      tx = shallowCopy(args.pop());
      for (const key2 in tx) {
        if (!allowedTransactionKeys3[key2]) {
          throw new Error("unknown transaction override " + key2);
        }
      }
    }
    ["data", "from", "to"].forEach((key2) => {
      if (tx[key2] == null) {
        return;
      }
      logger19.throwError("cannot override " + key2, Logger.errors.UNSUPPORTED_OPERATION, { operation: key2 });
    });
    if (tx.value) {
      const value2 = BigNumber.from(tx.value);
      if (!value2.isZero() && !this.interface.deploy.payable) {
        logger19.throwError("non-payable constructor cannot override value", Logger.errors.UNSUPPORTED_OPERATION, {
          operation: "overrides.value",
          value: tx.value
        });
      }
    }
    logger19.checkArgumentCount(args.length, this.interface.deploy.inputs.length, " in Contract constructor");
    tx.data = hexlify(concat([
      this.bytecode,
      this.interface.encodeDeploy(args)
    ]));
    return tx;
  }
  deploy(...args) {
    return __awaiter5(this, void 0, void 0, function* () {
      let overrides = {};
      if (args.length === this.interface.deploy.inputs.length + 1) {
        overrides = args.pop();
      }
      logger19.checkArgumentCount(args.length, this.interface.deploy.inputs.length, " in Contract constructor");
      const params = yield resolveAddresses(this.signer, args, this.interface.deploy.inputs);
      params.push(overrides);
      const unsignedTx = this.getDeployTransaction(...params);
      const tx = yield this.signer.sendTransaction(unsignedTx);
      const address = getStatic(this.constructor, "getContractAddress")(tx);
      const contract = getStatic(this.constructor, "getContract")(address, this.interface, this.signer);
      addContractWait(contract, tx);
      defineReadOnly(contract, "deployTransaction", tx);
      return contract;
    });
  }
  attach(address) {
    return this.constructor.getContract(address, this.interface, this.signer);
  }
  connect(signer) {
    return new this.constructor(this.interface, this.bytecode, signer);
  }
  static fromSolidity(compilerOutput, signer) {
    if (compilerOutput == null) {
      logger19.throwError("missing compiler output", Logger.errors.MISSING_ARGUMENT, { argument: "compilerOutput" });
    }
    if (typeof compilerOutput === "string") {
      compilerOutput = JSON.parse(compilerOutput);
    }
    const abi = compilerOutput.abi;
    let bytecode = null;
    if (compilerOutput.bytecode) {
      bytecode = compilerOutput.bytecode;
    } else if (compilerOutput.evm && compilerOutput.evm.bytecode) {
      bytecode = compilerOutput.evm.bytecode;
    }
    return new this(abi, bytecode, signer);
  }
  static getInterface(contractInterface) {
    return Contract.getInterface(contractInterface);
  }
  static getContractAddress(tx) {
    return getContractAddress(tx);
  }
  static getContract(address, contractInterface, signer) {
    return new Contract(address, contractInterface, signer);
  }
};

// node_modules/ethers/lib.esm/ethers.js
init_lib3();
init_lib13();
init_lib23();
init_lib8();

// node_modules/@ethersproject/providers/lib.esm/index.js
var lib_exports21 = {};
__export(lib_exports21, {
  AlchemyProvider: () => AlchemyProvider,
  AlchemyWebSocketProvider: () => AlchemyWebSocketProvider,
  AnkrProvider: () => AnkrProvider,
  BaseProvider: () => BaseProvider,
  CloudflareProvider: () => CloudflareProvider,
  EtherscanProvider: () => EtherscanProvider,
  FallbackProvider: () => FallbackProvider,
  Formatter: () => Formatter,
  InfuraProvider: () => InfuraProvider,
  InfuraWebSocketProvider: () => InfuraWebSocketProvider,
  IpcProvider: () => IpcProvider,
  JsonRpcBatchProvider: () => JsonRpcBatchProvider,
  JsonRpcProvider: () => JsonRpcProvider,
  JsonRpcSigner: () => JsonRpcSigner,
  NodesmithProvider: () => NodesmithProvider,
  PocketProvider: () => PocketProvider,
  Provider: () => Provider,
  Resolver: () => Resolver,
  StaticJsonRpcProvider: () => StaticJsonRpcProvider,
  UrlJsonRpcProvider: () => UrlJsonRpcProvider,
  Web3Provider: () => Web3Provider,
  WebSocketProvider: () => WebSocketProvider,
  getDefaultProvider: () => getDefaultProvider,
  getNetwork: () => getNetwork,
  isCommunityResourcable: () => isCommunityResourcable,
  isCommunityResource: () => isCommunityResource,
  showThrottleMessage: () => showThrottleMessage
});
init_define_process();
init_lib12();

// node_modules/@ethersproject/networks/lib.esm/index.js
init_define_process();
init_lib();

// node_modules/@ethersproject/networks/lib.esm/_version.js
init_define_process();
var version21 = "networks/5.6.1";

// node_modules/@ethersproject/networks/lib.esm/index.js
"use strict";
var logger27 = new Logger(version21);
function isRenetworkable(value2) {
  return value2 && typeof value2.renetwork === "function";
}
function ethDefaultProvider(network) {
  const func = function(providers, options) {
    if (options == null) {
      options = {};
    }
    const providerList = [];
    if (providers.InfuraProvider && options.infura !== "-") {
      try {
        providerList.push(new providers.InfuraProvider(network, options.infura));
      } catch (error) {
      }
    }
    if (providers.EtherscanProvider && options.etherscan !== "-") {
      try {
        providerList.push(new providers.EtherscanProvider(network, options.etherscan));
      } catch (error) {
      }
    }
    if (providers.AlchemyProvider && options.alchemy !== "-") {
      try {
        providerList.push(new providers.AlchemyProvider(network, options.alchemy));
      } catch (error) {
      }
    }
    if (providers.PocketProvider && options.pocket !== "-") {
      const skip = ["goerli", "ropsten", "rinkeby"];
      try {
        const provider = new providers.PocketProvider(network);
        if (provider.network && skip.indexOf(provider.network.name) === -1) {
          providerList.push(provider);
        }
      } catch (error) {
      }
    }
    if (providers.CloudflareProvider && options.cloudflare !== "-") {
      try {
        providerList.push(new providers.CloudflareProvider(network));
      } catch (error) {
      }
    }
    if (providers.AnkrProvider && options.ankr !== "-") {
      try {
        providerList.push(new providers.AnkrProvider(network, options.ankr));
      } catch (error) {
      }
    }
    if (providerList.length === 0) {
      return null;
    }
    if (providers.FallbackProvider) {
      let quorum = 1;
      if (options.quorum != null) {
        quorum = options.quorum;
      } else if (network === "homestead") {
        quorum = 2;
      }
      return new providers.FallbackProvider(providerList, quorum);
    }
    return providerList[0];
  };
  func.renetwork = function(network2) {
    return ethDefaultProvider(network2);
  };
  return func;
}
function etcDefaultProvider(url, network) {
  const func = function(providers, options) {
    if (providers.JsonRpcProvider) {
      return new providers.JsonRpcProvider(url, network);
    }
    return null;
  };
  func.renetwork = function(network2) {
    return etcDefaultProvider(url, network2);
  };
  return func;
}
var homestead = {
  chainId: 1,
  ensAddress: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
  name: "homestead",
  _defaultProvider: ethDefaultProvider("homestead")
};
var ropsten = {
  chainId: 3,
  ensAddress: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
  name: "ropsten",
  _defaultProvider: ethDefaultProvider("ropsten")
};
var classicMordor = {
  chainId: 63,
  name: "classicMordor",
  _defaultProvider: etcDefaultProvider("https://www.ethercluster.com/mordor", "classicMordor")
};
var networks = {
  unspecified: { chainId: 0, name: "unspecified" },
  homestead,
  mainnet: homestead,
  morden: { chainId: 2, name: "morden" },
  ropsten,
  testnet: ropsten,
  rinkeby: {
    chainId: 4,
    ensAddress: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
    name: "rinkeby",
    _defaultProvider: ethDefaultProvider("rinkeby")
  },
  kovan: {
    chainId: 42,
    name: "kovan",
    _defaultProvider: ethDefaultProvider("kovan")
  },
  goerli: {
    chainId: 5,
    ensAddress: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
    name: "goerli",
    _defaultProvider: ethDefaultProvider("goerli")
  },
  kintsugi: { chainId: 1337702, name: "kintsugi" },
  classic: {
    chainId: 61,
    name: "classic",
    _defaultProvider: etcDefaultProvider("https://www.ethercluster.com/etc", "classic")
  },
  classicMorden: { chainId: 62, name: "classicMorden" },
  classicMordor,
  classicTestnet: classicMordor,
  classicKotti: {
    chainId: 6,
    name: "classicKotti",
    _defaultProvider: etcDefaultProvider("https://www.ethercluster.com/kotti", "classicKotti")
  },
  xdai: { chainId: 100, name: "xdai" },
  matic: { chainId: 137, name: "matic" },
  maticmum: { chainId: 80001, name: "maticmum" },
  optimism: { chainId: 10, name: "optimism" },
  "optimism-kovan": { chainId: 69, name: "optimism-kovan" },
  "optimism-goerli": { chainId: 420, name: "optimism-goerli" },
  arbitrum: { chainId: 42161, name: "arbitrum" },
  "arbitrum-rinkeby": { chainId: 421611, name: "arbitrum-rinkeby" },
  bnb: { chainId: 56, name: "bnb" },
  bnbt: { chainId: 97, name: "bnbt" }
};
function getNetwork(network) {
  if (network == null) {
    return null;
  }
  if (typeof network === "number") {
    for (const name2 in networks) {
      const standard2 = networks[name2];
      if (standard2.chainId === network) {
        return {
          name: standard2.name,
          chainId: standard2.chainId,
          ensAddress: standard2.ensAddress || null,
          _defaultProvider: standard2._defaultProvider || null
        };
      }
    }
    return {
      chainId: network,
      name: "unknown"
    };
  }
  if (typeof network === "string") {
    const standard2 = networks[network];
    if (standard2 == null) {
      return null;
    }
    return {
      name: standard2.name,
      chainId: standard2.chainId,
      ensAddress: standard2.ensAddress,
      _defaultProvider: standard2._defaultProvider || null
    };
  }
  const standard = networks[network.name];
  if (!standard) {
    if (typeof network.chainId !== "number") {
      logger27.throwArgumentError("invalid network chainId", "network", network);
    }
    return network;
  }
  if (network.chainId !== 0 && network.chainId !== standard.chainId) {
    logger27.throwArgumentError("network chainId mismatch", "network", network);
  }
  let defaultProvider = network._defaultProvider || null;
  if (defaultProvider == null && standard._defaultProvider) {
    if (isRenetworkable(standard._defaultProvider)) {
      defaultProvider = standard._defaultProvider.renetwork(network);
    } else {
      defaultProvider = standard._defaultProvider;
    }
  }
  return {
    name: network.name,
    chainId: standard.chainId,
    ensAddress: network.ensAddress || standard.ensAddress || null,
    _defaultProvider: defaultProvider
  };
}

// node_modules/@ethersproject/providers/lib.esm/base-provider.js
init_define_process();
init_lib12();
init_lib16();
init_lib3();
init_lib2();
init_lib8();
init_lib10();
init_lib4();
init_lib17();
init_lib9();
init_lib25();
var import_bech32 = __toModule(require_bech32());
init_lib();

// node_modules/@ethersproject/providers/lib.esm/_version.js
init_define_process();
var version23 = "providers/5.6.2";

// node_modules/@ethersproject/providers/lib.esm/formatter.js
init_define_process();
init_lib7();
init_lib3();
init_lib2();
init_lib8();
init_lib4();
init_lib15();
init_lib();
"use strict";
var logger29 = new Logger(version23);
var Formatter = class {
  constructor() {
    logger29.checkNew(new.target, Formatter);
    this.formats = this.getDefaultFormats();
  }
  getDefaultFormats() {
    const formats = {};
    const address = this.address.bind(this);
    const bigNumber = this.bigNumber.bind(this);
    const blockTag = this.blockTag.bind(this);
    const data = this.data.bind(this);
    const hash3 = this.hash.bind(this);
    const hex = this.hex.bind(this);
    const number = this.number.bind(this);
    const type = this.type.bind(this);
    const strictData = (v7) => {
      return this.data(v7, true);
    };
    formats.transaction = {
      hash: hash3,
      type,
      accessList: Formatter.allowNull(this.accessList.bind(this), null),
      blockHash: Formatter.allowNull(hash3, null),
      blockNumber: Formatter.allowNull(number, null),
      transactionIndex: Formatter.allowNull(number, null),
      confirmations: Formatter.allowNull(number, null),
      from: address,
      gasPrice: Formatter.allowNull(bigNumber),
      maxPriorityFeePerGas: Formatter.allowNull(bigNumber),
      maxFeePerGas: Formatter.allowNull(bigNumber),
      gasLimit: bigNumber,
      to: Formatter.allowNull(address, null),
      value: bigNumber,
      nonce: number,
      data,
      r: Formatter.allowNull(this.uint256),
      s: Formatter.allowNull(this.uint256),
      v: Formatter.allowNull(number),
      creates: Formatter.allowNull(address, null),
      raw: Formatter.allowNull(data)
    };
    formats.transactionRequest = {
      from: Formatter.allowNull(address),
      nonce: Formatter.allowNull(number),
      gasLimit: Formatter.allowNull(bigNumber),
      gasPrice: Formatter.allowNull(bigNumber),
      maxPriorityFeePerGas: Formatter.allowNull(bigNumber),
      maxFeePerGas: Formatter.allowNull(bigNumber),
      to: Formatter.allowNull(address),
      value: Formatter.allowNull(bigNumber),
      data: Formatter.allowNull(strictData),
      type: Formatter.allowNull(number),
      accessList: Formatter.allowNull(this.accessList.bind(this), null)
    };
    formats.receiptLog = {
      transactionIndex: number,
      blockNumber: number,
      transactionHash: hash3,
      address,
      topics: Formatter.arrayOf(hash3),
      data,
      logIndex: number,
      blockHash: hash3
    };
    formats.receipt = {
      to: Formatter.allowNull(this.address, null),
      from: Formatter.allowNull(this.address, null),
      contractAddress: Formatter.allowNull(address, null),
      transactionIndex: number,
      root: Formatter.allowNull(hex),
      gasUsed: bigNumber,
      logsBloom: Formatter.allowNull(data),
      blockHash: hash3,
      transactionHash: hash3,
      logs: Formatter.arrayOf(this.receiptLog.bind(this)),
      blockNumber: number,
      confirmations: Formatter.allowNull(number, null),
      cumulativeGasUsed: bigNumber,
      effectiveGasPrice: Formatter.allowNull(bigNumber),
      status: Formatter.allowNull(number),
      type
    };
    formats.block = {
      hash: Formatter.allowNull(hash3),
      parentHash: hash3,
      number,
      timestamp: number,
      nonce: Formatter.allowNull(hex),
      difficulty: this.difficulty.bind(this),
      gasLimit: bigNumber,
      gasUsed: bigNumber,
      miner: Formatter.allowNull(address),
      extraData: data,
      transactions: Formatter.allowNull(Formatter.arrayOf(hash3)),
      baseFeePerGas: Formatter.allowNull(bigNumber)
    };
    formats.blockWithTransactions = shallowCopy(formats.block);
    formats.blockWithTransactions.transactions = Formatter.allowNull(Formatter.arrayOf(this.transactionResponse.bind(this)));
    formats.filter = {
      fromBlock: Formatter.allowNull(blockTag, void 0),
      toBlock: Formatter.allowNull(blockTag, void 0),
      blockHash: Formatter.allowNull(hash3, void 0),
      address: Formatter.allowNull(address, void 0),
      topics: Formatter.allowNull(this.topics.bind(this), void 0)
    };
    formats.filterLog = {
      blockNumber: Formatter.allowNull(number),
      blockHash: Formatter.allowNull(hash3),
      transactionIndex: number,
      removed: Formatter.allowNull(this.boolean.bind(this)),
      address,
      data: Formatter.allowFalsish(data, "0x"),
      topics: Formatter.arrayOf(hash3),
      transactionHash: hash3,
      logIndex: number
    };
    return formats;
  }
  accessList(accessList) {
    return accessListify(accessList || []);
  }
  number(number) {
    if (number === "0x") {
      return 0;
    }
    return BigNumber.from(number).toNumber();
  }
  type(number) {
    if (number === "0x" || number == null) {
      return 0;
    }
    return BigNumber.from(number).toNumber();
  }
  bigNumber(value2) {
    return BigNumber.from(value2);
  }
  boolean(value2) {
    if (typeof value2 === "boolean") {
      return value2;
    }
    if (typeof value2 === "string") {
      value2 = value2.toLowerCase();
      if (value2 === "true") {
        return true;
      }
      if (value2 === "false") {
        return false;
      }
    }
    throw new Error("invalid boolean - " + value2);
  }
  hex(value2, strict) {
    if (typeof value2 === "string") {
      if (!strict && value2.substring(0, 2) !== "0x") {
        value2 = "0x" + value2;
      }
      if (isHexString(value2)) {
        return value2.toLowerCase();
      }
    }
    return logger29.throwArgumentError("invalid hash", "value", value2);
  }
  data(value2, strict) {
    const result = this.hex(value2, strict);
    if (result.length % 2 !== 0) {
      throw new Error("invalid data; odd-length - " + value2);
    }
    return result;
  }
  address(value2) {
    return getAddress(value2);
  }
  callAddress(value2) {
    if (!isHexString(value2, 32)) {
      return null;
    }
    const address = getAddress(hexDataSlice(value2, 12));
    return address === AddressZero ? null : address;
  }
  contractAddress(value2) {
    return getContractAddress(value2);
  }
  blockTag(blockTag) {
    if (blockTag == null) {
      return "latest";
    }
    if (blockTag === "earliest") {
      return "0x0";
    }
    if (blockTag === "latest" || blockTag === "pending") {
      return blockTag;
    }
    if (typeof blockTag === "number" || isHexString(blockTag)) {
      return hexValue(blockTag);
    }
    throw new Error("invalid blockTag");
  }
  hash(value2, strict) {
    const result = this.hex(value2, strict);
    if (hexDataLength(result) !== 32) {
      return logger29.throwArgumentError("invalid hash", "value", value2);
    }
    return result;
  }
  difficulty(value2) {
    if (value2 == null) {
      return null;
    }
    const v7 = BigNumber.from(value2);
    try {
      return v7.toNumber();
    } catch (error) {
    }
    return null;
  }
  uint256(value2) {
    if (!isHexString(value2)) {
      throw new Error("invalid uint256");
    }
    return hexZeroPad(value2, 32);
  }
  _block(value2, format) {
    if (value2.author != null && value2.miner == null) {
      value2.miner = value2.author;
    }
    const difficulty = value2._difficulty != null ? value2._difficulty : value2.difficulty;
    const result = Formatter.check(format, value2);
    result._difficulty = difficulty == null ? null : BigNumber.from(difficulty);
    return result;
  }
  block(value2) {
    return this._block(value2, this.formats.block);
  }
  blockWithTransactions(value2) {
    return this._block(value2, this.formats.blockWithTransactions);
  }
  transactionRequest(value2) {
    return Formatter.check(this.formats.transactionRequest, value2);
  }
  transactionResponse(transaction) {
    if (transaction.gas != null && transaction.gasLimit == null) {
      transaction.gasLimit = transaction.gas;
    }
    if (transaction.to && BigNumber.from(transaction.to).isZero()) {
      transaction.to = "0x0000000000000000000000000000000000000000";
    }
    if (transaction.input != null && transaction.data == null) {
      transaction.data = transaction.input;
    }
    if (transaction.to == null && transaction.creates == null) {
      transaction.creates = this.contractAddress(transaction);
    }
    if ((transaction.type === 1 || transaction.type === 2) && transaction.accessList == null) {
      transaction.accessList = [];
    }
    const result = Formatter.check(this.formats.transaction, transaction);
    if (transaction.chainId != null) {
      let chainId = transaction.chainId;
      if (isHexString(chainId)) {
        chainId = BigNumber.from(chainId).toNumber();
      }
      result.chainId = chainId;
    } else {
      let chainId = transaction.networkId;
      if (chainId == null && result.v == null) {
        chainId = transaction.chainId;
      }
      if (isHexString(chainId)) {
        chainId = BigNumber.from(chainId).toNumber();
      }
      if (typeof chainId !== "number" && result.v != null) {
        chainId = (result.v - 35) / 2;
        if (chainId < 0) {
          chainId = 0;
        }
        chainId = parseInt(chainId);
      }
      if (typeof chainId !== "number") {
        chainId = 0;
      }
      result.chainId = chainId;
    }
    if (result.blockHash && result.blockHash.replace(/0/g, "") === "x") {
      result.blockHash = null;
    }
    return result;
  }
  transaction(value2) {
    return parse(value2);
  }
  receiptLog(value2) {
    return Formatter.check(this.formats.receiptLog, value2);
  }
  receipt(value2) {
    const result = Formatter.check(this.formats.receipt, value2);
    if (result.root != null) {
      if (result.root.length <= 4) {
        const value3 = BigNumber.from(result.root).toNumber();
        if (value3 === 0 || value3 === 1) {
          if (result.status != null && result.status !== value3) {
            logger29.throwArgumentError("alt-root-status/status mismatch", "value", { root: result.root, status: result.status });
          }
          result.status = value3;
          delete result.root;
        } else {
          logger29.throwArgumentError("invalid alt-root-status", "value.root", result.root);
        }
      } else if (result.root.length !== 66) {
        logger29.throwArgumentError("invalid root hash", "value.root", result.root);
      }
    }
    if (result.status != null) {
      result.byzantium = true;
    }
    return result;
  }
  topics(value2) {
    if (Array.isArray(value2)) {
      return value2.map((v7) => this.topics(v7));
    } else if (value2 != null) {
      return this.hash(value2, true);
    }
    return null;
  }
  filter(value2) {
    return Formatter.check(this.formats.filter, value2);
  }
  filterLog(value2) {
    return Formatter.check(this.formats.filterLog, value2);
  }
  static check(format, object) {
    const result = {};
    for (const key2 in format) {
      try {
        const value2 = format[key2](object[key2]);
        if (value2 !== void 0) {
          result[key2] = value2;
        }
      } catch (error) {
        error.checkKey = key2;
        error.checkValue = object[key2];
        throw error;
      }
    }
    return result;
  }
  static allowNull(format, nullValue) {
    return function(value2) {
      if (value2 == null) {
        return nullValue;
      }
      return format(value2);
    };
  }
  static allowFalsish(format, replaceValue) {
    return function(value2) {
      if (!value2) {
        return replaceValue;
      }
      return format(value2);
    };
  }
  static arrayOf(format) {
    return function(array) {
      if (!Array.isArray(array)) {
        throw new Error("not an array");
      }
      const result = [];
      array.forEach(function(value2) {
        result.push(format(value2));
      });
      return result;
    };
  }
};
function isCommunityResourcable(value2) {
  return value2 && typeof value2.isCommunityResource === "function";
}
function isCommunityResource(value2) {
  return isCommunityResourcable(value2) && value2.isCommunityResource();
}
var throttleMessage = false;
function showThrottleMessage() {
  if (throttleMessage) {
    return;
  }
  throttleMessage = true;
  console.log("========= NOTICE =========");
  console.log("Request-Rate Exceeded  (this message will not be repeated)");
  console.log("");
  console.log("The default API keys for each service are provided as a highly-throttled,");
  console.log("community resource for low-traffic projects and early prototyping.");
  console.log("");
  console.log("While your application will continue to function, we highly recommended");
  console.log("signing up for your own API keys to improve performance, increase your");
  console.log("request rate/limit and enable other perks, such as metrics and advanced APIs.");
  console.log("");
  console.log("For more details: https://docs.ethers.io/api-keys/");
  console.log("==========================");
}

// node_modules/@ethersproject/providers/lib.esm/base-provider.js
"use strict";
var __awaiter10 = function(thisArg, _arguments, P3, generator) {
  function adopt(value2) {
    return value2 instanceof P3 ? value2 : new P3(function(resolve) {
      resolve(value2);
    });
  }
  return new (P3 || (P3 = Promise))(function(resolve, reject) {
    function fulfilled(value2) {
      try {
        step(generator.next(value2));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value2) {
      try {
        step(generator["throw"](value2));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var logger30 = new Logger(version23);
var MAX_CCIP_REDIRECTS = 10;
function checkTopic(topic) {
  if (topic == null) {
    return "null";
  }
  if (hexDataLength(topic) !== 32) {
    logger30.throwArgumentError("invalid topic", "topic", topic);
  }
  return topic.toLowerCase();
}
function serializeTopics(topics) {
  topics = topics.slice();
  while (topics.length > 0 && topics[topics.length - 1] == null) {
    topics.pop();
  }
  return topics.map((topic) => {
    if (Array.isArray(topic)) {
      const unique = {};
      topic.forEach((topic2) => {
        unique[checkTopic(topic2)] = true;
      });
      const sorted = Object.keys(unique);
      sorted.sort();
      return sorted.join("|");
    } else {
      return checkTopic(topic);
    }
  }).join("&");
}
function deserializeTopics(data) {
  if (data === "") {
    return [];
  }
  return data.split(/&/g).map((topic) => {
    if (topic === "") {
      return [];
    }
    const comps = topic.split("|").map((topic2) => {
      return topic2 === "null" ? null : topic2;
    });
    return comps.length === 1 ? comps[0] : comps;
  });
}
function getEventTag2(eventName) {
  if (typeof eventName === "string") {
    eventName = eventName.toLowerCase();
    if (hexDataLength(eventName) === 32) {
      return "tx:" + eventName;
    }
    if (eventName.indexOf(":") === -1) {
      return eventName;
    }
  } else if (Array.isArray(eventName)) {
    return "filter:*:" + serializeTopics(eventName);
  } else if (ForkEvent.isForkEvent(eventName)) {
    logger30.warn("not implemented");
    throw new Error("not implemented");
  } else if (eventName && typeof eventName === "object") {
    return "filter:" + (eventName.address || "*") + ":" + serializeTopics(eventName.topics || []);
  }
  throw new Error("invalid event - " + eventName);
}
function getTime() {
  return new Date().getTime();
}
function stall(duration) {
  return new Promise((resolve) => {
    setTimeout(resolve, duration);
  });
}
var PollableEvents = ["block", "network", "pending", "poll"];
var Event = class {
  constructor(tag, listener, once) {
    defineReadOnly(this, "tag", tag);
    defineReadOnly(this, "listener", listener);
    defineReadOnly(this, "once", once);
    this._lastBlockNumber = -2;
    this._inflight = false;
  }
  get event() {
    switch (this.type) {
      case "tx":
        return this.hash;
      case "filter":
        return this.filter;
    }
    return this.tag;
  }
  get type() {
    return this.tag.split(":")[0];
  }
  get hash() {
    const comps = this.tag.split(":");
    if (comps[0] !== "tx") {
      return null;
    }
    return comps[1];
  }
  get filter() {
    const comps = this.tag.split(":");
    if (comps[0] !== "filter") {
      return null;
    }
    const address = comps[1];
    const topics = deserializeTopics(comps[2]);
    const filter = {};
    if (topics.length > 0) {
      filter.topics = topics;
    }
    if (address && address !== "*") {
      filter.address = address;
    }
    return filter;
  }
  pollable() {
    return this.tag.indexOf(":") >= 0 || PollableEvents.indexOf(this.tag) >= 0;
  }
};
var coinInfos = {
  "0": { symbol: "btc", p2pkh: 0, p2sh: 5, prefix: "bc" },
  "2": { symbol: "ltc", p2pkh: 48, p2sh: 50, prefix: "ltc" },
  "3": { symbol: "doge", p2pkh: 30, p2sh: 22 },
  "60": { symbol: "eth", ilk: "eth" },
  "61": { symbol: "etc", ilk: "eth" },
  "700": { symbol: "xdai", ilk: "eth" }
};
function bytes32ify(value2) {
  return hexZeroPad(BigNumber.from(value2).toHexString(), 32);
}
function base58Encode(data) {
  return Base58.encode(concat([data, hexDataSlice(sha256(sha256(data)), 0, 4)]));
}
var matcherIpfs = new RegExp("^(ipfs)://(.*)$", "i");
var matchers = [
  new RegExp("^(https)://(.*)$", "i"),
  new RegExp("^(data):(.*)$", "i"),
  matcherIpfs,
  new RegExp("^eip155:[0-9]+/(erc[0-9]+):(.*)$", "i")
];
function _parseString(result, start) {
  try {
    return toUtf8String(_parseBytes(result, start));
  } catch (error) {
  }
  return null;
}
function _parseBytes(result, start) {
  if (result === "0x") {
    return null;
  }
  const offset = BigNumber.from(hexDataSlice(result, start, start + 32)).toNumber();
  const length = BigNumber.from(hexDataSlice(result, offset, offset + 32)).toNumber();
  return hexDataSlice(result, offset + 32, offset + 32 + length);
}
function getIpfsLink(link) {
  if (link.match(/^ipfs:\/\/ipfs\//i)) {
    link = link.substring(12);
  } else if (link.match(/^ipfs:\/\//i)) {
    link = link.substring(7);
  } else {
    logger30.throwArgumentError("unsupported IPFS format", "link", link);
  }
  return `https://gateway.ipfs.io/ipfs/${link}`;
}
function numPad(value2) {
  const result = arrayify(value2);
  if (result.length > 32) {
    throw new Error("internal; should not happen");
  }
  const padded = new Uint8Array(32);
  padded.set(result, 32 - result.length);
  return padded;
}
function bytesPad(value2) {
  if (value2.length % 32 === 0) {
    return value2;
  }
  const result = new Uint8Array(Math.ceil(value2.length / 32) * 32);
  result.set(value2);
  return result;
}
function encodeBytes(datas) {
  const result = [];
  let byteCount = 0;
  for (let i2 = 0; i2 < datas.length; i2++) {
    result.push(null);
    byteCount += 32;
  }
  for (let i2 = 0; i2 < datas.length; i2++) {
    const data = arrayify(datas[i2]);
    result[i2] = numPad(byteCount);
    result.push(numPad(data.length));
    result.push(bytesPad(data));
    byteCount += 32 + Math.ceil(data.length / 32) * 32;
  }
  return hexConcat(result);
}
var Resolver = class {
  constructor(provider, address, name2, resolvedAddress) {
    defineReadOnly(this, "provider", provider);
    defineReadOnly(this, "name", name2);
    defineReadOnly(this, "address", provider.formatter.address(address));
    defineReadOnly(this, "_resolvedAddress", resolvedAddress);
  }
  supportsWildcard() {
    if (!this._supportsEip2544) {
      this._supportsEip2544 = this.provider.call({
        to: this.address,
        data: "0x01ffc9a79061b92300000000000000000000000000000000000000000000000000000000"
      }).then((result) => {
        return BigNumber.from(result).eq(1);
      }).catch((error) => {
        if (error.code === Logger.errors.CALL_EXCEPTION) {
          return false;
        }
        this._supportsEip2544 = null;
        throw error;
      });
    }
    return this._supportsEip2544;
  }
  _fetch(selector, parameters) {
    return __awaiter10(this, void 0, void 0, function* () {
      const tx = {
        to: this.address,
        ccipReadEnabled: true,
        data: hexConcat([selector, namehash(this.name), parameters || "0x"])
      };
      let parseBytes = false;
      if (yield this.supportsWildcard()) {
        parseBytes = true;
        tx.data = hexConcat(["0x9061b923", encodeBytes([dnsEncode(this.name), tx.data])]);
      }
      try {
        let result = yield this.provider.call(tx);
        if (arrayify(result).length % 32 === 4) {
          logger30.throwError("resolver threw error", Logger.errors.CALL_EXCEPTION, {
            transaction: tx,
            data: result
          });
        }
        if (parseBytes) {
          result = _parseBytes(result, 0);
        }
        return result;
      } catch (error) {
        if (error.code === Logger.errors.CALL_EXCEPTION) {
          return null;
        }
        throw error;
      }
    });
  }
  _fetchBytes(selector, parameters) {
    return __awaiter10(this, void 0, void 0, function* () {
      const result = yield this._fetch(selector, parameters);
      if (result != null) {
        return _parseBytes(result, 0);
      }
      return null;
    });
  }
  _getAddress(coinType, hexBytes) {
    const coinInfo = coinInfos[String(coinType)];
    if (coinInfo == null) {
      logger30.throwError(`unsupported coin type: ${coinType}`, Logger.errors.UNSUPPORTED_OPERATION, {
        operation: `getAddress(${coinType})`
      });
    }
    if (coinInfo.ilk === "eth") {
      return this.provider.formatter.address(hexBytes);
    }
    const bytes = arrayify(hexBytes);
    if (coinInfo.p2pkh != null) {
      const p2pkh = hexBytes.match(/^0x76a9([0-9a-f][0-9a-f])([0-9a-f]*)88ac$/);
      if (p2pkh) {
        const length = parseInt(p2pkh[1], 16);
        if (p2pkh[2].length === length * 2 && length >= 1 && length <= 75) {
          return base58Encode(concat([[coinInfo.p2pkh], "0x" + p2pkh[2]]));
        }
      }
    }
    if (coinInfo.p2sh != null) {
      const p2sh = hexBytes.match(/^0xa9([0-9a-f][0-9a-f])([0-9a-f]*)87$/);
      if (p2sh) {
        const length = parseInt(p2sh[1], 16);
        if (p2sh[2].length === length * 2 && length >= 1 && length <= 75) {
          return base58Encode(concat([[coinInfo.p2sh], "0x" + p2sh[2]]));
        }
      }
    }
    if (coinInfo.prefix != null) {
      const length = bytes[1];
      let version27 = bytes[0];
      if (version27 === 0) {
        if (length !== 20 && length !== 32) {
          version27 = -1;
        }
      } else {
        version27 = -1;
      }
      if (version27 >= 0 && bytes.length === 2 + length && length >= 1 && length <= 75) {
        const words2 = import_bech32.default.toWords(bytes.slice(2));
        words2.unshift(version27);
        return import_bech32.default.encode(coinInfo.prefix, words2);
      }
    }
    return null;
  }
  getAddress(coinType) {
    return __awaiter10(this, void 0, void 0, function* () {
      if (coinType == null) {
        coinType = 60;
      }
      if (coinType === 60) {
        try {
          const result = yield this._fetch("0x3b3b57de");
          if (result === "0x" || result === HashZero) {
            return null;
          }
          return this.provider.formatter.callAddress(result);
        } catch (error) {
          if (error.code === Logger.errors.CALL_EXCEPTION) {
            return null;
          }
          throw error;
        }
      }
      const hexBytes = yield this._fetchBytes("0xf1cb7e06", bytes32ify(coinType));
      if (hexBytes == null || hexBytes === "0x") {
        return null;
      }
      const address = this._getAddress(coinType, hexBytes);
      if (address == null) {
        logger30.throwError(`invalid or unsupported coin data`, Logger.errors.UNSUPPORTED_OPERATION, {
          operation: `getAddress(${coinType})`,
          coinType,
          data: hexBytes
        });
      }
      return address;
    });
  }
  getAvatar() {
    return __awaiter10(this, void 0, void 0, function* () {
      const linkage = [{ type: "name", content: this.name }];
      try {
        const avatar = yield this.getText("avatar");
        if (avatar == null) {
          return null;
        }
        for (let i2 = 0; i2 < matchers.length; i2++) {
          const match = avatar.match(matchers[i2]);
          if (match == null) {
            continue;
          }
          const scheme = match[1].toLowerCase();
          switch (scheme) {
            case "https":
              linkage.push({ type: "url", content: avatar });
              return { linkage, url: avatar };
            case "data":
              linkage.push({ type: "data", content: avatar });
              return { linkage, url: avatar };
            case "ipfs":
              linkage.push({ type: "ipfs", content: avatar });
              return { linkage, url: getIpfsLink(avatar) };
            case "erc721":
            case "erc1155": {
              const selector = scheme === "erc721" ? "0xc87b56dd" : "0x0e89341c";
              linkage.push({ type: scheme, content: avatar });
              const owner = this._resolvedAddress || (yield this.getAddress());
              const comps = (match[2] || "").split("/");
              if (comps.length !== 2) {
                return null;
              }
              const addr = yield this.provider.formatter.address(comps[0]);
              const tokenId = hexZeroPad(BigNumber.from(comps[1]).toHexString(), 32);
              if (scheme === "erc721") {
                const tokenOwner = this.provider.formatter.callAddress(yield this.provider.call({
                  to: addr,
                  data: hexConcat(["0x6352211e", tokenId])
                }));
                if (owner !== tokenOwner) {
                  return null;
                }
                linkage.push({ type: "owner", content: tokenOwner });
              } else if (scheme === "erc1155") {
                const balance = BigNumber.from(yield this.provider.call({
                  to: addr,
                  data: hexConcat(["0x00fdd58e", hexZeroPad(owner, 32), tokenId])
                }));
                if (balance.isZero()) {
                  return null;
                }
                linkage.push({ type: "balance", content: balance.toString() });
              }
              const tx = {
                to: this.provider.formatter.address(comps[0]),
                data: hexConcat([selector, tokenId])
              };
              let metadataUrl = _parseString(yield this.provider.call(tx), 0);
              if (metadataUrl == null) {
                return null;
              }
              linkage.push({ type: "metadata-url-base", content: metadataUrl });
              if (scheme === "erc1155") {
                metadataUrl = metadataUrl.replace("{id}", tokenId.substring(2));
                linkage.push({ type: "metadata-url-expanded", content: metadataUrl });
              }
              if (metadataUrl.match(/^ipfs:/i)) {
                metadataUrl = getIpfsLink(metadataUrl);
              }
              linkage.push({ type: "metadata-url", content: metadataUrl });
              const metadata = yield fetchJson(metadataUrl);
              if (!metadata) {
                return null;
              }
              linkage.push({ type: "metadata", content: JSON.stringify(metadata) });
              let imageUrl = metadata.image;
              if (typeof imageUrl !== "string") {
                return null;
              }
              if (imageUrl.match(/^(https:\/\/|data:)/i)) {
              } else {
                const ipfs = imageUrl.match(matcherIpfs);
                if (ipfs == null) {
                  return null;
                }
                linkage.push({ type: "url-ipfs", content: imageUrl });
                imageUrl = getIpfsLink(imageUrl);
              }
              linkage.push({ type: "url", content: imageUrl });
              return { linkage, url: imageUrl };
            }
          }
        }
      } catch (error) {
      }
      return null;
    });
  }
  getContentHash() {
    return __awaiter10(this, void 0, void 0, function* () {
      const hexBytes = yield this._fetchBytes("0xbc1c58d1");
      if (hexBytes == null || hexBytes === "0x") {
        return null;
      }
      const ipfs = hexBytes.match(/^0xe3010170(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);
      if (ipfs) {
        const length = parseInt(ipfs[3], 16);
        if (ipfs[4].length === length * 2) {
          return "ipfs://" + Base58.encode("0x" + ipfs[1]);
        }
      }
      const ipns = hexBytes.match(/^0xe5010172(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);
      if (ipns) {
        const length = parseInt(ipns[3], 16);
        if (ipns[4].length === length * 2) {
          return "ipns://" + Base58.encode("0x" + ipns[1]);
        }
      }
      const swarm = hexBytes.match(/^0xe40101fa011b20([0-9a-f]*)$/);
      if (swarm) {
        if (swarm[1].length === 32 * 2) {
          return "bzz://" + swarm[1];
        }
      }
      return logger30.throwError(`invalid or unsupported content hash data`, Logger.errors.UNSUPPORTED_OPERATION, {
        operation: "getContentHash()",
        data: hexBytes
      });
    });
  }
  getText(key2) {
    return __awaiter10(this, void 0, void 0, function* () {
      let keyBytes = toUtf8Bytes(key2);
      keyBytes = concat([bytes32ify(64), bytes32ify(keyBytes.length), keyBytes]);
      if (keyBytes.length % 32 !== 0) {
        keyBytes = concat([keyBytes, hexZeroPad("0x", 32 - key2.length % 32)]);
      }
      const hexBytes = yield this._fetchBytes("0x59d1d43c", hexlify(keyBytes));
      if (hexBytes == null || hexBytes === "0x") {
        return null;
      }
      return toUtf8String(hexBytes);
    });
  }
};
var defaultFormatter = null;
var nextPollId = 1;
var BaseProvider = class extends Provider {
  constructor(network) {
    logger30.checkNew(new.target, Provider);
    super();
    this._events = [];
    this._emitted = { block: -2 };
    this.disableCcipRead = false;
    this.formatter = new.target.getFormatter();
    defineReadOnly(this, "anyNetwork", network === "any");
    if (this.anyNetwork) {
      network = this.detectNetwork();
    }
    if (network instanceof Promise) {
      this._networkPromise = network;
      network.catch((error) => {
      });
      this._ready().catch((error) => {
      });
    } else {
      const knownNetwork = getStatic(new.target, "getNetwork")(network);
      if (knownNetwork) {
        defineReadOnly(this, "_network", knownNetwork);
        this.emit("network", knownNetwork, null);
      } else {
        logger30.throwArgumentError("invalid network", "network", network);
      }
    }
    this._maxInternalBlockNumber = -1024;
    this._lastBlockNumber = -2;
    this._maxFilterBlockRange = 10;
    this._pollingInterval = 4e3;
    this._fastQueryDate = 0;
  }
  _ready() {
    return __awaiter10(this, void 0, void 0, function* () {
      if (this._network == null) {
        let network = null;
        if (this._networkPromise) {
          try {
            network = yield this._networkPromise;
          } catch (error) {
          }
        }
        if (network == null) {
          network = yield this.detectNetwork();
        }
        if (!network) {
          logger30.throwError("no network detected", Logger.errors.UNKNOWN_ERROR, {});
        }
        if (this._network == null) {
          if (this.anyNetwork) {
            this._network = network;
          } else {
            defineReadOnly(this, "_network", network);
          }
          this.emit("network", network, null);
        }
      }
      return this._network;
    });
  }
  get ready() {
    return poll(() => {
      return this._ready().then((network) => {
        return network;
      }, (error) => {
        if (error.code === Logger.errors.NETWORK_ERROR && error.event === "noNetwork") {
          return void 0;
        }
        throw error;
      });
    });
  }
  static getFormatter() {
    if (defaultFormatter == null) {
      defaultFormatter = new Formatter();
    }
    return defaultFormatter;
  }
  static getNetwork(network) {
    return getNetwork(network == null ? "homestead" : network);
  }
  ccipReadFetch(tx, calldata, urls) {
    return __awaiter10(this, void 0, void 0, function* () {
      if (this.disableCcipRead || urls.length === 0) {
        return null;
      }
      const sender = tx.to.toLowerCase();
      const data = calldata.toLowerCase();
      const errorMessages = [];
      for (let i2 = 0; i2 < urls.length; i2++) {
        const url = urls[i2];
        const href = url.replace("{sender}", sender).replace("{data}", data);
        const json = url.indexOf("{data}") >= 0 ? null : JSON.stringify({ data, sender });
        const result = yield fetchJson({ url: href, errorPassThrough: true }, json, (value2, response) => {
          value2.status = response.statusCode;
          return value2;
        });
        if (result.data) {
          return result.data;
        }
        const errorMessage = result.message || "unknown error";
        if (result.status >= 400 && result.status < 500) {
          return logger30.throwError(`response not found during CCIP fetch: ${errorMessage}`, Logger.errors.SERVER_ERROR, { url, errorMessage });
        }
        errorMessages.push(errorMessage);
      }
      return logger30.throwError(`error encountered during CCIP fetch: ${errorMessages.map((m3) => JSON.stringify(m3)).join(", ")}`, Logger.errors.SERVER_ERROR, {
        urls,
        errorMessages
      });
    });
  }
  _getInternalBlockNumber(maxAge) {
    return __awaiter10(this, void 0, void 0, function* () {
      yield this._ready();
      if (maxAge > 0) {
        while (this._internalBlockNumber) {
          const internalBlockNumber = this._internalBlockNumber;
          try {
            const result = yield internalBlockNumber;
            if (getTime() - result.respTime <= maxAge) {
              return result.blockNumber;
            }
            break;
          } catch (error) {
            if (this._internalBlockNumber === internalBlockNumber) {
              break;
            }
          }
        }
      }
      const reqTime = getTime();
      const checkInternalBlockNumber = resolveProperties({
        blockNumber: this.perform("getBlockNumber", {}),
        networkError: this.getNetwork().then((network) => null, (error) => error)
      }).then(({ blockNumber, networkError }) => {
        if (networkError) {
          if (this._internalBlockNumber === checkInternalBlockNumber) {
            this._internalBlockNumber = null;
          }
          throw networkError;
        }
        const respTime = getTime();
        blockNumber = BigNumber.from(blockNumber).toNumber();
        if (blockNumber < this._maxInternalBlockNumber) {
          blockNumber = this._maxInternalBlockNumber;
        }
        this._maxInternalBlockNumber = blockNumber;
        this._setFastBlockNumber(blockNumber);
        return { blockNumber, reqTime, respTime };
      });
      this._internalBlockNumber = checkInternalBlockNumber;
      checkInternalBlockNumber.catch((error) => {
        if (this._internalBlockNumber === checkInternalBlockNumber) {
          this._internalBlockNumber = null;
        }
      });
      return (yield checkInternalBlockNumber).blockNumber;
    });
  }
  poll() {
    return __awaiter10(this, void 0, void 0, function* () {
      const pollId = nextPollId++;
      const runners = [];
      let blockNumber = null;
      try {
        blockNumber = yield this._getInternalBlockNumber(100 + this.pollingInterval / 2);
      } catch (error) {
        this.emit("error", error);
        return;
      }
      this._setFastBlockNumber(blockNumber);
      this.emit("poll", pollId, blockNumber);
      if (blockNumber === this._lastBlockNumber) {
        this.emit("didPoll", pollId);
        return;
      }
      if (this._emitted.block === -2) {
        this._emitted.block = blockNumber - 1;
      }
      if (Math.abs(this._emitted.block - blockNumber) > 1e3) {
        logger30.warn(`network block skew detected; skipping block events (emitted=${this._emitted.block} blockNumber${blockNumber})`);
        this.emit("error", logger30.makeError("network block skew detected", Logger.errors.NETWORK_ERROR, {
          blockNumber,
          event: "blockSkew",
          previousBlockNumber: this._emitted.block
        }));
        this.emit("block", blockNumber);
      } else {
        for (let i2 = this._emitted.block + 1; i2 <= blockNumber; i2++) {
          this.emit("block", i2);
        }
      }
      if (this._emitted.block !== blockNumber) {
        this._emitted.block = blockNumber;
        Object.keys(this._emitted).forEach((key2) => {
          if (key2 === "block") {
            return;
          }
          const eventBlockNumber = this._emitted[key2];
          if (eventBlockNumber === "pending") {
            return;
          }
          if (blockNumber - eventBlockNumber > 12) {
            delete this._emitted[key2];
          }
        });
      }
      if (this._lastBlockNumber === -2) {
        this._lastBlockNumber = blockNumber - 1;
      }
      this._events.forEach((event) => {
        switch (event.type) {
          case "tx": {
            const hash3 = event.hash;
            let runner = this.getTransactionReceipt(hash3).then((receipt) => {
              if (!receipt || receipt.blockNumber == null) {
                return null;
              }
              this._emitted["t:" + hash3] = receipt.blockNumber;
              this.emit(hash3, receipt);
              return null;
            }).catch((error) => {
              this.emit("error", error);
            });
            runners.push(runner);
            break;
          }
          case "filter": {
            if (!event._inflight) {
              event._inflight = true;
              const filter = event.filter;
              filter.fromBlock = event._lastBlockNumber + 1;
              filter.toBlock = blockNumber;
              if (filter.toBlock - this._maxFilterBlockRange > filter.fromBlock) {
                filter.fromBlock = filter.toBlock - this._maxFilterBlockRange;
              }
              const runner = this.getLogs(filter).then((logs) => {
                event._inflight = false;
                if (logs.length === 0) {
                  return;
                }
                logs.forEach((log) => {
                  if (log.blockNumber > event._lastBlockNumber) {
                    event._lastBlockNumber = log.blockNumber;
                  }
                  this._emitted["b:" + log.blockHash] = log.blockNumber;
                  this._emitted["t:" + log.transactionHash] = log.blockNumber;
                  this.emit(filter, log);
                });
              }).catch((error) => {
                this.emit("error", error);
                event._inflight = false;
              });
              runners.push(runner);
            }
            break;
          }
        }
      });
      this._lastBlockNumber = blockNumber;
      Promise.all(runners).then(() => {
        this.emit("didPoll", pollId);
      }).catch((error) => {
        this.emit("error", error);
      });
      return;
    });
  }
  resetEventsBlock(blockNumber) {
    this._lastBlockNumber = blockNumber - 1;
    if (this.polling) {
      this.poll();
    }
  }
  get network() {
    return this._network;
  }
  detectNetwork() {
    return __awaiter10(this, void 0, void 0, function* () {
      return logger30.throwError("provider does not support network detection", Logger.errors.UNSUPPORTED_OPERATION, {
        operation: "provider.detectNetwork"
      });
    });
  }
  getNetwork() {
    return __awaiter10(this, void 0, void 0, function* () {
      const network = yield this._ready();
      const currentNetwork = yield this.detectNetwork();
      if (network.chainId !== currentNetwork.chainId) {
        if (this.anyNetwork) {
          this._network = currentNetwork;
          this._lastBlockNumber = -2;
          this._fastBlockNumber = null;
          this._fastBlockNumberPromise = null;
          this._fastQueryDate = 0;
          this._emitted.block = -2;
          this._maxInternalBlockNumber = -1024;
          this._internalBlockNumber = null;
          this.emit("network", currentNetwork, network);
          yield stall(0);
          return this._network;
        }
        const error = logger30.makeError("underlying network changed", Logger.errors.NETWORK_ERROR, {
          event: "changed",
          network,
          detectedNetwork: currentNetwork
        });
        this.emit("error", error);
        throw error;
      }
      return network;
    });
  }
  get blockNumber() {
    this._getInternalBlockNumber(100 + this.pollingInterval / 2).then((blockNumber) => {
      this._setFastBlockNumber(blockNumber);
    }, (error) => {
    });
    return this._fastBlockNumber != null ? this._fastBlockNumber : -1;
  }
  get polling() {
    return this._poller != null;
  }
  set polling(value2) {
    if (value2 && !this._poller) {
      this._poller = setInterval(() => {
        this.poll();
      }, this.pollingInterval);
      if (!this._bootstrapPoll) {
        this._bootstrapPoll = setTimeout(() => {
          this.poll();
          this._bootstrapPoll = setTimeout(() => {
            if (!this._poller) {
              this.poll();
            }
            this._bootstrapPoll = null;
          }, this.pollingInterval);
        }, 0);
      }
    } else if (!value2 && this._poller) {
      clearInterval(this._poller);
      this._poller = null;
    }
  }
  get pollingInterval() {
    return this._pollingInterval;
  }
  set pollingInterval(value2) {
    if (typeof value2 !== "number" || value2 <= 0 || parseInt(String(value2)) != value2) {
      throw new Error("invalid polling interval");
    }
    this._pollingInterval = value2;
    if (this._poller) {
      clearInterval(this._poller);
      this._poller = setInterval(() => {
        this.poll();
      }, this._pollingInterval);
    }
  }
  _getFastBlockNumber() {
    const now2 = getTime();
    if (now2 - this._fastQueryDate > 2 * this._pollingInterval) {
      this._fastQueryDate = now2;
      this._fastBlockNumberPromise = this.getBlockNumber().then((blockNumber) => {
        if (this._fastBlockNumber == null || blockNumber > this._fastBlockNumber) {
          this._fastBlockNumber = blockNumber;
        }
        return this._fastBlockNumber;
      });
    }
    return this._fastBlockNumberPromise;
  }
  _setFastBlockNumber(blockNumber) {
    if (this._fastBlockNumber != null && blockNumber < this._fastBlockNumber) {
      return;
    }
    this._fastQueryDate = getTime();
    if (this._fastBlockNumber == null || blockNumber > this._fastBlockNumber) {
      this._fastBlockNumber = blockNumber;
      this._fastBlockNumberPromise = Promise.resolve(blockNumber);
    }
  }
  waitForTransaction(transactionHash, confirmations, timeout) {
    return __awaiter10(this, void 0, void 0, function* () {
      return this._waitForTransaction(transactionHash, confirmations == null ? 1 : confirmations, timeout || 0, null);
    });
  }
  _waitForTransaction(transactionHash, confirmations, timeout, replaceable) {
    return __awaiter10(this, void 0, void 0, function* () {
      const receipt = yield this.getTransactionReceipt(transactionHash);
      if ((receipt ? receipt.confirmations : 0) >= confirmations) {
        return receipt;
      }
      return new Promise((resolve, reject) => {
        const cancelFuncs = [];
        let done = false;
        const alreadyDone = function() {
          if (done) {
            return true;
          }
          done = true;
          cancelFuncs.forEach((func) => {
            func();
          });
          return false;
        };
        const minedHandler = (receipt2) => {
          if (receipt2.confirmations < confirmations) {
            return;
          }
          if (alreadyDone()) {
            return;
          }
          resolve(receipt2);
        };
        this.on(transactionHash, minedHandler);
        cancelFuncs.push(() => {
          this.removeListener(transactionHash, minedHandler);
        });
        if (replaceable) {
          let lastBlockNumber = replaceable.startBlock;
          let scannedBlock = null;
          const replaceHandler = (blockNumber) => __awaiter10(this, void 0, void 0, function* () {
            if (done) {
              return;
            }
            yield stall(1e3);
            this.getTransactionCount(replaceable.from).then((nonce) => __awaiter10(this, void 0, void 0, function* () {
              if (done) {
                return;
              }
              if (nonce <= replaceable.nonce) {
                lastBlockNumber = blockNumber;
              } else {
                {
                  const mined = yield this.getTransaction(transactionHash);
                  if (mined && mined.blockNumber != null) {
                    return;
                  }
                }
                if (scannedBlock == null) {
                  scannedBlock = lastBlockNumber - 3;
                  if (scannedBlock < replaceable.startBlock) {
                    scannedBlock = replaceable.startBlock;
                  }
                }
                while (scannedBlock <= blockNumber) {
                  if (done) {
                    return;
                  }
                  const block = yield this.getBlockWithTransactions(scannedBlock);
                  for (let ti = 0; ti < block.transactions.length; ti++) {
                    const tx = block.transactions[ti];
                    if (tx.hash === transactionHash) {
                      return;
                    }
                    if (tx.from === replaceable.from && tx.nonce === replaceable.nonce) {
                      if (done) {
                        return;
                      }
                      const receipt2 = yield this.waitForTransaction(tx.hash, confirmations);
                      if (alreadyDone()) {
                        return;
                      }
                      let reason = "replaced";
                      if (tx.data === replaceable.data && tx.to === replaceable.to && tx.value.eq(replaceable.value)) {
                        reason = "repriced";
                      } else if (tx.data === "0x" && tx.from === tx.to && tx.value.isZero()) {
                        reason = "cancelled";
                      }
                      reject(logger30.makeError("transaction was replaced", Logger.errors.TRANSACTION_REPLACED, {
                        cancelled: reason === "replaced" || reason === "cancelled",
                        reason,
                        replacement: this._wrapTransaction(tx),
                        hash: transactionHash,
                        receipt: receipt2
                      }));
                      return;
                    }
                  }
                  scannedBlock++;
                }
              }
              if (done) {
                return;
              }
              this.once("block", replaceHandler);
            }), (error) => {
              if (done) {
                return;
              }
              this.once("block", replaceHandler);
            });
          });
          if (done) {
            return;
          }
          this.once("block", replaceHandler);
          cancelFuncs.push(() => {
            this.removeListener("block", replaceHandler);
          });
        }
        if (typeof timeout === "number" && timeout > 0) {
          const timer2 = setTimeout(() => {
            if (alreadyDone()) {
              return;
            }
            reject(logger30.makeError("timeout exceeded", Logger.errors.TIMEOUT, { timeout }));
          }, timeout);
          if (timer2.unref) {
            timer2.unref();
          }
          cancelFuncs.push(() => {
            clearTimeout(timer2);
          });
        }
      });
    });
  }
  getBlockNumber() {
    return __awaiter10(this, void 0, void 0, function* () {
      return this._getInternalBlockNumber(0);
    });
  }
  getGasPrice() {
    return __awaiter10(this, void 0, void 0, function* () {
      yield this.getNetwork();
      const result = yield this.perform("getGasPrice", {});
      try {
        return BigNumber.from(result);
      } catch (error) {
        return logger30.throwError("bad result from backend", Logger.errors.SERVER_ERROR, {
          method: "getGasPrice",
          result,
          error
        });
      }
    });
  }
  getBalance(addressOrName, blockTag) {
    return __awaiter10(this, void 0, void 0, function* () {
      yield this.getNetwork();
      const params = yield resolveProperties({
        address: this._getAddress(addressOrName),
        blockTag: this._getBlockTag(blockTag)
      });
      const result = yield this.perform("getBalance", params);
      try {
        return BigNumber.from(result);
      } catch (error) {
        return logger30.throwError("bad result from backend", Logger.errors.SERVER_ERROR, {
          method: "getBalance",
          params,
          result,
          error
        });
      }
    });
  }
  getTransactionCount(addressOrName, blockTag) {
    return __awaiter10(this, void 0, void 0, function* () {
      yield this.getNetwork();
      const params = yield resolveProperties({
        address: this._getAddress(addressOrName),
        blockTag: this._getBlockTag(blockTag)
      });
      const result = yield this.perform("getTransactionCount", params);
      try {
        return BigNumber.from(result).toNumber();
      } catch (error) {
        return logger30.throwError("bad result from backend", Logger.errors.SERVER_ERROR, {
          method: "getTransactionCount",
          params,
          result,
          error
        });
      }
    });
  }
  getCode(addressOrName, blockTag) {
    return __awaiter10(this, void 0, void 0, function* () {
      yield this.getNetwork();
      const params = yield resolveProperties({
        address: this._getAddress(addressOrName),
        blockTag: this._getBlockTag(blockTag)
      });
      const result = yield this.perform("getCode", params);
      try {
        return hexlify(result);
      } catch (error) {
        return logger30.throwError("bad result from backend", Logger.errors.SERVER_ERROR, {
          method: "getCode",
          params,
          result,
          error
        });
      }
    });
  }
  getStorageAt(addressOrName, position, blockTag) {
    return __awaiter10(this, void 0, void 0, function* () {
      yield this.getNetwork();
      const params = yield resolveProperties({
        address: this._getAddress(addressOrName),
        blockTag: this._getBlockTag(blockTag),
        position: Promise.resolve(position).then((p3) => hexValue(p3))
      });
      const result = yield this.perform("getStorageAt", params);
      try {
        return hexlify(result);
      } catch (error) {
        return logger30.throwError("bad result from backend", Logger.errors.SERVER_ERROR, {
          method: "getStorageAt",
          params,
          result,
          error
        });
      }
    });
  }
  _wrapTransaction(tx, hash3, startBlock) {
    if (hash3 != null && hexDataLength(hash3) !== 32) {
      throw new Error("invalid response - sendTransaction");
    }
    const result = tx;
    if (hash3 != null && tx.hash !== hash3) {
      logger30.throwError("Transaction hash mismatch from Provider.sendTransaction.", Logger.errors.UNKNOWN_ERROR, { expectedHash: tx.hash, returnedHash: hash3 });
    }
    result.wait = (confirms, timeout) => __awaiter10(this, void 0, void 0, function* () {
      if (confirms == null) {
        confirms = 1;
      }
      if (timeout == null) {
        timeout = 0;
      }
      let replacement = void 0;
      if (confirms !== 0 && startBlock != null) {
        replacement = {
          data: tx.data,
          from: tx.from,
          nonce: tx.nonce,
          to: tx.to,
          value: tx.value,
          startBlock
        };
      }
      const receipt = yield this._waitForTransaction(tx.hash, confirms, timeout, replacement);
      if (receipt == null && confirms === 0) {
        return null;
      }
      this._emitted["t:" + tx.hash] = receipt.blockNumber;
      if (receipt.status === 0) {
        logger30.throwError("transaction failed", Logger.errors.CALL_EXCEPTION, {
          transactionHash: tx.hash,
          transaction: tx,
          receipt
        });
      }
      return receipt;
    });
    return result;
  }
  sendTransaction(signedTransaction) {
    return __awaiter10(this, void 0, void 0, function* () {
      yield this.getNetwork();
      const hexTx = yield Promise.resolve(signedTransaction).then((t) => hexlify(t));
      const tx = this.formatter.transaction(signedTransaction);
      if (tx.confirmations == null) {
        tx.confirmations = 0;
      }
      const blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);
      try {
        const hash3 = yield this.perform("sendTransaction", { signedTransaction: hexTx });
        return this._wrapTransaction(tx, hash3, blockNumber);
      } catch (error) {
        error.transaction = tx;
        error.transactionHash = tx.hash;
        throw error;
      }
    });
  }
  _getTransactionRequest(transaction) {
    return __awaiter10(this, void 0, void 0, function* () {
      const values = yield transaction;
      const tx = {};
      ["from", "to"].forEach((key2) => {
        if (values[key2] == null) {
          return;
        }
        tx[key2] = Promise.resolve(values[key2]).then((v7) => v7 ? this._getAddress(v7) : null);
      });
      ["gasLimit", "gasPrice", "maxFeePerGas", "maxPriorityFeePerGas", "value"].forEach((key2) => {
        if (values[key2] == null) {
          return;
        }
        tx[key2] = Promise.resolve(values[key2]).then((v7) => v7 ? BigNumber.from(v7) : null);
      });
      ["type"].forEach((key2) => {
        if (values[key2] == null) {
          return;
        }
        tx[key2] = Promise.resolve(values[key2]).then((v7) => v7 != null ? v7 : null);
      });
      if (values.accessList) {
        tx.accessList = this.formatter.accessList(values.accessList);
      }
      ["data"].forEach((key2) => {
        if (values[key2] == null) {
          return;
        }
        tx[key2] = Promise.resolve(values[key2]).then((v7) => v7 ? hexlify(v7) : null);
      });
      return this.formatter.transactionRequest(yield resolveProperties(tx));
    });
  }
  _getFilter(filter) {
    return __awaiter10(this, void 0, void 0, function* () {
      filter = yield filter;
      const result = {};
      if (filter.address != null) {
        result.address = this._getAddress(filter.address);
      }
      ["blockHash", "topics"].forEach((key2) => {
        if (filter[key2] == null) {
          return;
        }
        result[key2] = filter[key2];
      });
      ["fromBlock", "toBlock"].forEach((key2) => {
        if (filter[key2] == null) {
          return;
        }
        result[key2] = this._getBlockTag(filter[key2]);
      });
      return this.formatter.filter(yield resolveProperties(result));
    });
  }
  _call(transaction, blockTag, attempt) {
    return __awaiter10(this, void 0, void 0, function* () {
      if (attempt >= MAX_CCIP_REDIRECTS) {
        logger30.throwError("CCIP read exceeded maximum redirections", Logger.errors.SERVER_ERROR, {
          redirects: attempt,
          transaction
        });
      }
      const txSender = transaction.to;
      const result = yield this.perform("call", { transaction, blockTag });
      if (attempt >= 0 && blockTag === "latest" && txSender != null && result.substring(0, 10) === "0x556f1830" && hexDataLength(result) % 32 === 4) {
        try {
          const data = hexDataSlice(result, 4);
          const sender = hexDataSlice(data, 0, 32);
          if (!BigNumber.from(sender).eq(txSender)) {
            logger30.throwError("CCIP Read sender did not match", Logger.errors.CALL_EXCEPTION, {
              name: "OffchainLookup",
              signature: "OffchainLookup(address,string[],bytes,bytes4,bytes)",
              transaction,
              data: result
            });
          }
          const urls = [];
          const urlsOffset = BigNumber.from(hexDataSlice(data, 32, 64)).toNumber();
          const urlsLength = BigNumber.from(hexDataSlice(data, urlsOffset, urlsOffset + 32)).toNumber();
          const urlsData = hexDataSlice(data, urlsOffset + 32);
          for (let u2 = 0; u2 < urlsLength; u2++) {
            const url = _parseString(urlsData, u2 * 32);
            if (url == null) {
              logger30.throwError("CCIP Read contained corrupt URL string", Logger.errors.CALL_EXCEPTION, {
                name: "OffchainLookup",
                signature: "OffchainLookup(address,string[],bytes,bytes4,bytes)",
                transaction,
                data: result
              });
            }
            urls.push(url);
          }
          const calldata = _parseBytes(data, 64);
          if (!BigNumber.from(hexDataSlice(data, 100, 128)).isZero()) {
            logger30.throwError("CCIP Read callback selector included junk", Logger.errors.CALL_EXCEPTION, {
              name: "OffchainLookup",
              signature: "OffchainLookup(address,string[],bytes,bytes4,bytes)",
              transaction,
              data: result
            });
          }
          const callbackSelector = hexDataSlice(data, 96, 100);
          const extraData = _parseBytes(data, 128);
          const ccipResult = yield this.ccipReadFetch(transaction, calldata, urls);
          if (ccipResult == null) {
            logger30.throwError("CCIP Read disabled or provided no URLs", Logger.errors.CALL_EXCEPTION, {
              name: "OffchainLookup",
              signature: "OffchainLookup(address,string[],bytes,bytes4,bytes)",
              transaction,
              data: result
            });
          }
          const tx = {
            to: txSender,
            data: hexConcat([callbackSelector, encodeBytes([ccipResult, extraData])])
          };
          return this._call(tx, blockTag, attempt + 1);
        } catch (error) {
          if (error.code === Logger.errors.SERVER_ERROR) {
            throw error;
          }
        }
      }
      try {
        return hexlify(result);
      } catch (error) {
        return logger30.throwError("bad result from backend", Logger.errors.SERVER_ERROR, {
          method: "call",
          params: { transaction, blockTag },
          result,
          error
        });
      }
    });
  }
  call(transaction, blockTag) {
    return __awaiter10(this, void 0, void 0, function* () {
      yield this.getNetwork();
      const resolved = yield resolveProperties({
        transaction: this._getTransactionRequest(transaction),
        blockTag: this._getBlockTag(blockTag),
        ccipReadEnabled: Promise.resolve(transaction.ccipReadEnabled)
      });
      return this._call(resolved.transaction, resolved.blockTag, resolved.ccipReadEnabled ? 0 : -1);
    });
  }
  estimateGas(transaction) {
    return __awaiter10(this, void 0, void 0, function* () {
      yield this.getNetwork();
      const params = yield resolveProperties({
        transaction: this._getTransactionRequest(transaction)
      });
      const result = yield this.perform("estimateGas", params);
      try {
        return BigNumber.from(result);
      } catch (error) {
        return logger30.throwError("bad result from backend", Logger.errors.SERVER_ERROR, {
          method: "estimateGas",
          params,
          result,
          error
        });
      }
    });
  }
  _getAddress(addressOrName) {
    return __awaiter10(this, void 0, void 0, function* () {
      addressOrName = yield addressOrName;
      if (typeof addressOrName !== "string") {
        logger30.throwArgumentError("invalid address or ENS name", "name", addressOrName);
      }
      const address = yield this.resolveName(addressOrName);
      if (address == null) {
        logger30.throwError("ENS name not configured", Logger.errors.UNSUPPORTED_OPERATION, {
          operation: `resolveName(${JSON.stringify(addressOrName)})`
        });
      }
      return address;
    });
  }
  _getBlock(blockHashOrBlockTag, includeTransactions) {
    return __awaiter10(this, void 0, void 0, function* () {
      yield this.getNetwork();
      blockHashOrBlockTag = yield blockHashOrBlockTag;
      let blockNumber = -128;
      const params = {
        includeTransactions: !!includeTransactions
      };
      if (isHexString(blockHashOrBlockTag, 32)) {
        params.blockHash = blockHashOrBlockTag;
      } else {
        try {
          params.blockTag = yield this._getBlockTag(blockHashOrBlockTag);
          if (isHexString(params.blockTag)) {
            blockNumber = parseInt(params.blockTag.substring(2), 16);
          }
        } catch (error) {
          logger30.throwArgumentError("invalid block hash or block tag", "blockHashOrBlockTag", blockHashOrBlockTag);
        }
      }
      return poll(() => __awaiter10(this, void 0, void 0, function* () {
        const block = yield this.perform("getBlock", params);
        if (block == null) {
          if (params.blockHash != null) {
            if (this._emitted["b:" + params.blockHash] == null) {
              return null;
            }
          }
          if (params.blockTag != null) {
            if (blockNumber > this._emitted.block) {
              return null;
            }
          }
          return void 0;
        }
        if (includeTransactions) {
          let blockNumber2 = null;
          for (let i2 = 0; i2 < block.transactions.length; i2++) {
            const tx = block.transactions[i2];
            if (tx.blockNumber == null) {
              tx.confirmations = 0;
            } else if (tx.confirmations == null) {
              if (blockNumber2 == null) {
                blockNumber2 = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);
              }
              let confirmations = blockNumber2 - tx.blockNumber + 1;
              if (confirmations <= 0) {
                confirmations = 1;
              }
              tx.confirmations = confirmations;
            }
          }
          const blockWithTxs = this.formatter.blockWithTransactions(block);
          blockWithTxs.transactions = blockWithTxs.transactions.map((tx) => this._wrapTransaction(tx));
          return blockWithTxs;
        }
        return this.formatter.block(block);
      }), { oncePoll: this });
    });
  }
  getBlock(blockHashOrBlockTag) {
    return this._getBlock(blockHashOrBlockTag, false);
  }
  getBlockWithTransactions(blockHashOrBlockTag) {
    return this._getBlock(blockHashOrBlockTag, true);
  }
  getTransaction(transactionHash) {
    return __awaiter10(this, void 0, void 0, function* () {
      yield this.getNetwork();
      transactionHash = yield transactionHash;
      const params = { transactionHash: this.formatter.hash(transactionHash, true) };
      return poll(() => __awaiter10(this, void 0, void 0, function* () {
        const result = yield this.perform("getTransaction", params);
        if (result == null) {
          if (this._emitted["t:" + transactionHash] == null) {
            return null;
          }
          return void 0;
        }
        const tx = this.formatter.transactionResponse(result);
        if (tx.blockNumber == null) {
          tx.confirmations = 0;
        } else if (tx.confirmations == null) {
          const blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);
          let confirmations = blockNumber - tx.blockNumber + 1;
          if (confirmations <= 0) {
            confirmations = 1;
          }
          tx.confirmations = confirmations;
        }
        return this._wrapTransaction(tx);
      }), { oncePoll: this });
    });
  }
  getTransactionReceipt(transactionHash) {
    return __awaiter10(this, void 0, void 0, function* () {
      yield this.getNetwork();
      transactionHash = yield transactionHash;
      const params = { transactionHash: this.formatter.hash(transactionHash, true) };
      return poll(() => __awaiter10(this, void 0, void 0, function* () {
        const result = yield this.perform("getTransactionReceipt", params);
        if (result == null) {
          if (this._emitted["t:" + transactionHash] == null) {
            return null;
          }
          return void 0;
        }
        if (result.blockHash == null) {
          return void 0;
        }
        const receipt = this.formatter.receipt(result);
        if (receipt.blockNumber == null) {
          receipt.confirmations = 0;
        } else if (receipt.confirmations == null) {
          const blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);
          let confirmations = blockNumber - receipt.blockNumber + 1;
          if (confirmations <= 0) {
            confirmations = 1;
          }
          receipt.confirmations = confirmations;
        }
        return receipt;
      }), { oncePoll: this });
    });
  }
  getLogs(filter) {
    return __awaiter10(this, void 0, void 0, function* () {
      yield this.getNetwork();
      const params = yield resolveProperties({ filter: this._getFilter(filter) });
      const logs = yield this.perform("getLogs", params);
      logs.forEach((log) => {
        if (log.removed == null) {
          log.removed = false;
        }
      });
      return Formatter.arrayOf(this.formatter.filterLog.bind(this.formatter))(logs);
    });
  }
  getEtherPrice() {
    return __awaiter10(this, void 0, void 0, function* () {
      yield this.getNetwork();
      return this.perform("getEtherPrice", {});
    });
  }
  _getBlockTag(blockTag) {
    return __awaiter10(this, void 0, void 0, function* () {
      blockTag = yield blockTag;
      if (typeof blockTag === "number" && blockTag < 0) {
        if (blockTag % 1) {
          logger30.throwArgumentError("invalid BlockTag", "blockTag", blockTag);
        }
        let blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);
        blockNumber += blockTag;
        if (blockNumber < 0) {
          blockNumber = 0;
        }
        return this.formatter.blockTag(blockNumber);
      }
      return this.formatter.blockTag(blockTag);
    });
  }
  getResolver(name2) {
    return __awaiter10(this, void 0, void 0, function* () {
      let currentName = name2;
      while (true) {
        if (currentName === "" || currentName === ".") {
          return null;
        }
        if (name2 !== "eth" && currentName === "eth") {
          return null;
        }
        const addr = yield this._getResolver(currentName, "getResolver");
        if (addr != null) {
          const resolver = new Resolver(this, addr, name2);
          if (currentName !== name2 && !(yield resolver.supportsWildcard())) {
            return null;
          }
          return resolver;
        }
        currentName = currentName.split(".").slice(1).join(".");
      }
    });
  }
  _getResolver(name2, operation) {
    return __awaiter10(this, void 0, void 0, function* () {
      if (operation == null) {
        operation = "ENS";
      }
      const network = yield this.getNetwork();
      if (!network.ensAddress) {
        logger30.throwError("network does not support ENS", Logger.errors.UNSUPPORTED_OPERATION, { operation, network: network.name });
      }
      try {
        const addrData = yield this.call({
          to: network.ensAddress,
          data: "0x0178b8bf" + namehash(name2).substring(2)
        });
        return this.formatter.callAddress(addrData);
      } catch (error) {
      }
      return null;
    });
  }
  resolveName(name2) {
    return __awaiter10(this, void 0, void 0, function* () {
      name2 = yield name2;
      try {
        return Promise.resolve(this.formatter.address(name2));
      } catch (error) {
        if (isHexString(name2)) {
          throw error;
        }
      }
      if (typeof name2 !== "string") {
        logger30.throwArgumentError("invalid ENS name", "name", name2);
      }
      const resolver = yield this.getResolver(name2);
      if (!resolver) {
        return null;
      }
      return yield resolver.getAddress();
    });
  }
  lookupAddress(address) {
    return __awaiter10(this, void 0, void 0, function* () {
      address = yield address;
      address = this.formatter.address(address);
      const node = address.substring(2).toLowerCase() + ".addr.reverse";
      const resolverAddr = yield this._getResolver(node, "lookupAddress");
      if (resolverAddr == null) {
        return null;
      }
      const name2 = _parseString(yield this.call({
        to: resolverAddr,
        data: "0x691f3431" + namehash(node).substring(2)
      }), 0);
      const addr = yield this.resolveName(name2);
      if (addr != address) {
        return null;
      }
      return name2;
    });
  }
  getAvatar(nameOrAddress) {
    return __awaiter10(this, void 0, void 0, function* () {
      let resolver = null;
      if (isHexString(nameOrAddress)) {
        const address = this.formatter.address(nameOrAddress);
        const node = address.substring(2).toLowerCase() + ".addr.reverse";
        const resolverAddress = yield this._getResolver(node, "getAvatar");
        if (!resolverAddress) {
          return null;
        }
        resolver = new Resolver(this, resolverAddress, node);
        try {
          const avatar2 = yield resolver.getAvatar();
          if (avatar2) {
            return avatar2.url;
          }
        } catch (error) {
          if (error.code !== Logger.errors.CALL_EXCEPTION) {
            throw error;
          }
        }
        try {
          const name2 = _parseString(yield this.call({
            to: resolverAddress,
            data: "0x691f3431" + namehash(node).substring(2)
          }), 0);
          resolver = yield this.getResolver(name2);
        } catch (error) {
          if (error.code !== Logger.errors.CALL_EXCEPTION) {
            throw error;
          }
          return null;
        }
      } else {
        resolver = yield this.getResolver(nameOrAddress);
        if (!resolver) {
          return null;
        }
      }
      const avatar = yield resolver.getAvatar();
      if (avatar == null) {
        return null;
      }
      return avatar.url;
    });
  }
  perform(method, params) {
    return logger30.throwError(method + " not implemented", Logger.errors.NOT_IMPLEMENTED, { operation: method });
  }
  _startEvent(event) {
    this.polling = this._events.filter((e) => e.pollable()).length > 0;
  }
  _stopEvent(event) {
    this.polling = this._events.filter((e) => e.pollable()).length > 0;
  }
  _addEventListener(eventName, listener, once) {
    const event = new Event(getEventTag2(eventName), listener, once);
    this._events.push(event);
    this._startEvent(event);
    return this;
  }
  on(eventName, listener) {
    return this._addEventListener(eventName, listener, false);
  }
  once(eventName, listener) {
    return this._addEventListener(eventName, listener, true);
  }
  emit(eventName, ...args) {
    let result = false;
    let stopped = [];
    let eventTag = getEventTag2(eventName);
    this._events = this._events.filter((event) => {
      if (event.tag !== eventTag) {
        return true;
      }
      setTimeout(() => {
        event.listener.apply(this, args);
      }, 0);
      result = true;
      if (event.once) {
        stopped.push(event);
        return false;
      }
      return true;
    });
    stopped.forEach((event) => {
      this._stopEvent(event);
    });
    return result;
  }
  listenerCount(eventName) {
    if (!eventName) {
      return this._events.length;
    }
    let eventTag = getEventTag2(eventName);
    return this._events.filter((event) => {
      return event.tag === eventTag;
    }).length;
  }
  listeners(eventName) {
    if (eventName == null) {
      return this._events.map((event) => event.listener);
    }
    let eventTag = getEventTag2(eventName);
    return this._events.filter((event) => event.tag === eventTag).map((event) => event.listener);
  }
  off(eventName, listener) {
    if (listener == null) {
      return this.removeAllListeners(eventName);
    }
    const stopped = [];
    let found = false;
    let eventTag = getEventTag2(eventName);
    this._events = this._events.filter((event) => {
      if (event.tag !== eventTag || event.listener != listener) {
        return true;
      }
      if (found) {
        return true;
      }
      found = true;
      stopped.push(event);
      return false;
    });
    stopped.forEach((event) => {
      this._stopEvent(event);
    });
    return this;
  }
  removeAllListeners(eventName) {
    let stopped = [];
    if (eventName == null) {
      stopped = this._events;
      this._events = [];
    } else {
      const eventTag = getEventTag2(eventName);
      this._events = this._events.filter((event) => {
        if (event.tag !== eventTag) {
          return true;
        }
        stopped.push(event);
        return false;
      });
    }
    stopped.forEach((event) => {
      this._stopEvent(event);
    });
    return this;
  }
};

// node_modules/@ethersproject/providers/lib.esm/alchemy-provider.js
init_define_process();
init_lib4();

// node_modules/@ethersproject/providers/lib.esm/websocket-provider.js
init_define_process();
init_lib3();
init_lib4();

// node_modules/@ethersproject/providers/lib.esm/json-rpc-provider.js
init_define_process();
init_lib13();
init_lib3();
init_lib2();
init_lib10();
init_lib4();
init_lib9();
init_lib15();
init_lib25();
init_lib();
"use strict";
var __awaiter11 = function(thisArg, _arguments, P3, generator) {
  function adopt(value2) {
    return value2 instanceof P3 ? value2 : new P3(function(resolve) {
      resolve(value2);
    });
  }
  return new (P3 || (P3 = Promise))(function(resolve, reject) {
    function fulfilled(value2) {
      try {
        step(generator.next(value2));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value2) {
      try {
        step(generator["throw"](value2));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var logger31 = new Logger(version23);
var errorGas = ["call", "estimateGas"];
function spelunk(value2) {
  if (value2 == null) {
    return null;
  }
  if (typeof value2.message === "string" && value2.message.match("reverted") && isHexString(value2.data)) {
    return { message: value2.message, data: value2.data };
  }
  if (typeof value2 === "object") {
    for (const key2 in value2) {
      const result = spelunk(value2[key2]);
      if (result) {
        return result;
      }
    }
    return null;
  }
  if (typeof value2 === "string") {
    try {
      return spelunk(JSON.parse(value2));
    } catch (error) {
    }
  }
  return null;
}
function checkError(method, error, params) {
  if (method === "call") {
    const result = spelunk(error);
    if (result) {
      return result.data;
    }
    logger31.throwError("missing revert data in call exception", Logger.errors.CALL_EXCEPTION, {
      error,
      data: "0x"
    });
  }
  let message = error.message;
  if (error.code === Logger.errors.SERVER_ERROR && error.error && typeof error.error.message === "string") {
    message = error.error.message;
  } else if (typeof error.body === "string") {
    message = error.body;
  } else if (typeof error.responseText === "string") {
    message = error.responseText;
  }
  message = (message || "").toLowerCase();
  const transaction = params.transaction || params.signedTransaction;
  if (message.match(/insufficient funds|base fee exceeds gas limit/)) {
    logger31.throwError("insufficient funds for intrinsic transaction cost", Logger.errors.INSUFFICIENT_FUNDS, {
      error,
      method,
      transaction
    });
  }
  if (message.match(/nonce too low/)) {
    logger31.throwError("nonce has already been used", Logger.errors.NONCE_EXPIRED, {
      error,
      method,
      transaction
    });
  }
  if (message.match(/replacement transaction underpriced/)) {
    logger31.throwError("replacement fee too low", Logger.errors.REPLACEMENT_UNDERPRICED, {
      error,
      method,
      transaction
    });
  }
  if (message.match(/only replay-protected/)) {
    logger31.throwError("legacy pre-eip-155 transactions not supported", Logger.errors.UNSUPPORTED_OPERATION, {
      error,
      method,
      transaction
    });
  }
  if (errorGas.indexOf(method) >= 0 && message.match(/gas required exceeds allowance|always failing transaction|execution reverted/)) {
    logger31.throwError("cannot estimate gas; transaction may fail or may require manual gas limit", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {
      error,
      method,
      transaction
    });
  }
  throw error;
}
function timer(timeout) {
  return new Promise(function(resolve) {
    setTimeout(resolve, timeout);
  });
}
function getResult(payload) {
  if (payload.error) {
    const error = new Error(payload.error.message);
    error.code = payload.error.code;
    error.data = payload.error.data;
    throw error;
  }
  return payload.result;
}
function getLowerCase(value2) {
  if (value2) {
    return value2.toLowerCase();
  }
  return value2;
}
var _constructorGuard5 = {};
var JsonRpcSigner = class extends Signer {
  constructor(constructorGuard, provider, addressOrIndex) {
    logger31.checkNew(new.target, JsonRpcSigner);
    super();
    if (constructorGuard !== _constructorGuard5) {
      throw new Error("do not call the JsonRpcSigner constructor directly; use provider.getSigner");
    }
    defineReadOnly(this, "provider", provider);
    if (addressOrIndex == null) {
      addressOrIndex = 0;
    }
    if (typeof addressOrIndex === "string") {
      defineReadOnly(this, "_address", this.provider.formatter.address(addressOrIndex));
      defineReadOnly(this, "_index", null);
    } else if (typeof addressOrIndex === "number") {
      defineReadOnly(this, "_index", addressOrIndex);
      defineReadOnly(this, "_address", null);
    } else {
      logger31.throwArgumentError("invalid address or index", "addressOrIndex", addressOrIndex);
    }
  }
  connect(provider) {
    return logger31.throwError("cannot alter JSON-RPC Signer connection", Logger.errors.UNSUPPORTED_OPERATION, {
      operation: "connect"
    });
  }
  connectUnchecked() {
    return new UncheckedJsonRpcSigner(_constructorGuard5, this.provider, this._address || this._index);
  }
  getAddress() {
    if (this._address) {
      return Promise.resolve(this._address);
    }
    return this.provider.send("eth_accounts", []).then((accounts) => {
      if (accounts.length <= this._index) {
        logger31.throwError("unknown account #" + this._index, Logger.errors.UNSUPPORTED_OPERATION, {
          operation: "getAddress"
        });
      }
      return this.provider.formatter.address(accounts[this._index]);
    });
  }
  sendUncheckedTransaction(transaction) {
    transaction = shallowCopy(transaction);
    const fromAddress = this.getAddress().then((address) => {
      if (address) {
        address = address.toLowerCase();
      }
      return address;
    });
    if (transaction.gasLimit == null) {
      const estimate = shallowCopy(transaction);
      estimate.from = fromAddress;
      transaction.gasLimit = this.provider.estimateGas(estimate);
    }
    if (transaction.to != null) {
      transaction.to = Promise.resolve(transaction.to).then((to2) => __awaiter11(this, void 0, void 0, function* () {
        if (to2 == null) {
          return null;
        }
        const address = yield this.provider.resolveName(to2);
        if (address == null) {
          logger31.throwArgumentError("provided ENS name resolves to null", "tx.to", to2);
        }
        return address;
      }));
    }
    return resolveProperties({
      tx: resolveProperties(transaction),
      sender: fromAddress
    }).then(({ tx, sender }) => {
      if (tx.from != null) {
        if (tx.from.toLowerCase() !== sender) {
          logger31.throwArgumentError("from address mismatch", "transaction", transaction);
        }
      } else {
        tx.from = sender;
      }
      const hexTx = this.provider.constructor.hexlifyTransaction(tx, { from: true });
      return this.provider.send("eth_sendTransaction", [hexTx]).then((hash3) => {
        return hash3;
      }, (error) => {
        return checkError("sendTransaction", error, hexTx);
      });
    });
  }
  signTransaction(transaction) {
    return logger31.throwError("signing transactions is unsupported", Logger.errors.UNSUPPORTED_OPERATION, {
      operation: "signTransaction"
    });
  }
  sendTransaction(transaction) {
    return __awaiter11(this, void 0, void 0, function* () {
      const blockNumber = yield this.provider._getInternalBlockNumber(100 + 2 * this.provider.pollingInterval);
      const hash3 = yield this.sendUncheckedTransaction(transaction);
      try {
        return yield poll(() => __awaiter11(this, void 0, void 0, function* () {
          const tx = yield this.provider.getTransaction(hash3);
          if (tx === null) {
            return void 0;
          }
          return this.provider._wrapTransaction(tx, hash3, blockNumber);
        }), { oncePoll: this.provider });
      } catch (error) {
        error.transactionHash = hash3;
        throw error;
      }
    });
  }
  signMessage(message) {
    return __awaiter11(this, void 0, void 0, function* () {
      const data = typeof message === "string" ? toUtf8Bytes(message) : message;
      const address = yield this.getAddress();
      return yield this.provider.send("personal_sign", [hexlify(data), address.toLowerCase()]);
    });
  }
  _legacySignMessage(message) {
    return __awaiter11(this, void 0, void 0, function* () {
      const data = typeof message === "string" ? toUtf8Bytes(message) : message;
      const address = yield this.getAddress();
      return yield this.provider.send("eth_sign", [address.toLowerCase(), hexlify(data)]);
    });
  }
  _signTypedData(domain, types, value2) {
    return __awaiter11(this, void 0, void 0, function* () {
      const populated = yield TypedDataEncoder.resolveNames(domain, types, value2, (name2) => {
        return this.provider.resolveName(name2);
      });
      const address = yield this.getAddress();
      return yield this.provider.send("eth_signTypedData_v4", [
        address.toLowerCase(),
        JSON.stringify(TypedDataEncoder.getPayload(populated.domain, types, populated.value))
      ]);
    });
  }
  unlock(password) {
    return __awaiter11(this, void 0, void 0, function* () {
      const provider = this.provider;
      const address = yield this.getAddress();
      return provider.send("personal_unlockAccount", [address.toLowerCase(), password, null]);
    });
  }
};
var UncheckedJsonRpcSigner = class extends JsonRpcSigner {
  sendTransaction(transaction) {
    return this.sendUncheckedTransaction(transaction).then((hash3) => {
      return {
        hash: hash3,
        nonce: null,
        gasLimit: null,
        gasPrice: null,
        data: null,
        value: null,
        chainId: null,
        confirmations: 0,
        from: null,
        wait: (confirmations) => {
          return this.provider.waitForTransaction(hash3, confirmations);
        }
      };
    });
  }
};
var allowedTransactionKeys4 = {
  chainId: true,
  data: true,
  gasLimit: true,
  gasPrice: true,
  nonce: true,
  to: true,
  value: true,
  type: true,
  accessList: true,
  maxFeePerGas: true,
  maxPriorityFeePerGas: true
};
var JsonRpcProvider = class extends BaseProvider {
  constructor(url, network) {
    logger31.checkNew(new.target, JsonRpcProvider);
    let networkOrReady = network;
    if (networkOrReady == null) {
      networkOrReady = new Promise((resolve, reject) => {
        setTimeout(() => {
          this.detectNetwork().then((network2) => {
            resolve(network2);
          }, (error) => {
            reject(error);
          });
        }, 0);
      });
    }
    super(networkOrReady);
    if (!url) {
      url = getStatic(this.constructor, "defaultUrl")();
    }
    if (typeof url === "string") {
      defineReadOnly(this, "connection", Object.freeze({
        url
      }));
    } else {
      defineReadOnly(this, "connection", Object.freeze(shallowCopy(url)));
    }
    this._nextId = 42;
  }
  get _cache() {
    if (this._eventLoopCache == null) {
      this._eventLoopCache = {};
    }
    return this._eventLoopCache;
  }
  static defaultUrl() {
    return "http://localhost:8545";
  }
  detectNetwork() {
    if (!this._cache["detectNetwork"]) {
      this._cache["detectNetwork"] = this._uncachedDetectNetwork();
      setTimeout(() => {
        this._cache["detectNetwork"] = null;
      }, 0);
    }
    return this._cache["detectNetwork"];
  }
  _uncachedDetectNetwork() {
    return __awaiter11(this, void 0, void 0, function* () {
      yield timer(0);
      let chainId = null;
      try {
        chainId = yield this.send("eth_chainId", []);
      } catch (error) {
        try {
          chainId = yield this.send("net_version", []);
        } catch (error2) {
        }
      }
      if (chainId != null) {
        const getNetwork2 = getStatic(this.constructor, "getNetwork");
        try {
          return getNetwork2(BigNumber.from(chainId).toNumber());
        } catch (error) {
          return logger31.throwError("could not detect network", Logger.errors.NETWORK_ERROR, {
            chainId,
            event: "invalidNetwork",
            serverError: error
          });
        }
      }
      return logger31.throwError("could not detect network", Logger.errors.NETWORK_ERROR, {
        event: "noNetwork"
      });
    });
  }
  getSigner(addressOrIndex) {
    return new JsonRpcSigner(_constructorGuard5, this, addressOrIndex);
  }
  getUncheckedSigner(addressOrIndex) {
    return this.getSigner(addressOrIndex).connectUnchecked();
  }
  listAccounts() {
    return this.send("eth_accounts", []).then((accounts) => {
      return accounts.map((a) => this.formatter.address(a));
    });
  }
  send(method, params) {
    const request = {
      method,
      params,
      id: this._nextId++,
      jsonrpc: "2.0"
    };
    this.emit("debug", {
      action: "request",
      request: deepCopy(request),
      provider: this
    });
    const cache = ["eth_chainId", "eth_blockNumber"].indexOf(method) >= 0;
    if (cache && this._cache[method]) {
      return this._cache[method];
    }
    const result = fetchJson(this.connection, JSON.stringify(request), getResult).then((result2) => {
      this.emit("debug", {
        action: "response",
        request,
        response: result2,
        provider: this
      });
      return result2;
    }, (error) => {
      this.emit("debug", {
        action: "response",
        error,
        request,
        provider: this
      });
      throw error;
    });
    if (cache) {
      this._cache[method] = result;
      setTimeout(() => {
        this._cache[method] = null;
      }, 0);
    }
    return result;
  }
  prepareRequest(method, params) {
    switch (method) {
      case "getBlockNumber":
        return ["eth_blockNumber", []];
      case "getGasPrice":
        return ["eth_gasPrice", []];
      case "getBalance":
        return ["eth_getBalance", [getLowerCase(params.address), params.blockTag]];
      case "getTransactionCount":
        return ["eth_getTransactionCount", [getLowerCase(params.address), params.blockTag]];
      case "getCode":
        return ["eth_getCode", [getLowerCase(params.address), params.blockTag]];
      case "getStorageAt":
        return ["eth_getStorageAt", [getLowerCase(params.address), params.position, params.blockTag]];
      case "sendTransaction":
        return ["eth_sendRawTransaction", [params.signedTransaction]];
      case "getBlock":
        if (params.blockTag) {
          return ["eth_getBlockByNumber", [params.blockTag, !!params.includeTransactions]];
        } else if (params.blockHash) {
          return ["eth_getBlockByHash", [params.blockHash, !!params.includeTransactions]];
        }
        return null;
      case "getTransaction":
        return ["eth_getTransactionByHash", [params.transactionHash]];
      case "getTransactionReceipt":
        return ["eth_getTransactionReceipt", [params.transactionHash]];
      case "call": {
        const hexlifyTransaction = getStatic(this.constructor, "hexlifyTransaction");
        return ["eth_call", [hexlifyTransaction(params.transaction, { from: true }), params.blockTag]];
      }
      case "estimateGas": {
        const hexlifyTransaction = getStatic(this.constructor, "hexlifyTransaction");
        return ["eth_estimateGas", [hexlifyTransaction(params.transaction, { from: true })]];
      }
      case "getLogs":
        if (params.filter && params.filter.address != null) {
          params.filter.address = getLowerCase(params.filter.address);
        }
        return ["eth_getLogs", [params.filter]];
      default:
        break;
    }
    return null;
  }
  perform(method, params) {
    return __awaiter11(this, void 0, void 0, function* () {
      if (method === "call" || method === "estimateGas") {
        const tx = params.transaction;
        if (tx && tx.type != null && BigNumber.from(tx.type).isZero()) {
          if (tx.maxFeePerGas == null && tx.maxPriorityFeePerGas == null) {
            const feeData = yield this.getFeeData();
            if (feeData.maxFeePerGas == null && feeData.maxPriorityFeePerGas == null) {
              params = shallowCopy(params);
              params.transaction = shallowCopy(tx);
              delete params.transaction.type;
            }
          }
        }
      }
      const args = this.prepareRequest(method, params);
      if (args == null) {
        logger31.throwError(method + " not implemented", Logger.errors.NOT_IMPLEMENTED, { operation: method });
      }
      try {
        return yield this.send(args[0], args[1]);
      } catch (error) {
        return checkError(method, error, params);
      }
    });
  }
  _startEvent(event) {
    if (event.tag === "pending") {
      this._startPending();
    }
    super._startEvent(event);
  }
  _startPending() {
    if (this._pendingFilter != null) {
      return;
    }
    const self2 = this;
    const pendingFilter = this.send("eth_newPendingTransactionFilter", []);
    this._pendingFilter = pendingFilter;
    pendingFilter.then(function(filterId) {
      function poll2() {
        self2.send("eth_getFilterChanges", [filterId]).then(function(hashes) {
          if (self2._pendingFilter != pendingFilter) {
            return null;
          }
          let seq = Promise.resolve();
          hashes.forEach(function(hash3) {
            self2._emitted["t:" + hash3.toLowerCase()] = "pending";
            seq = seq.then(function() {
              return self2.getTransaction(hash3).then(function(tx) {
                self2.emit("pending", tx);
                return null;
              });
            });
          });
          return seq.then(function() {
            return timer(1e3);
          });
        }).then(function() {
          if (self2._pendingFilter != pendingFilter) {
            self2.send("eth_uninstallFilter", [filterId]);
            return;
          }
          setTimeout(function() {
            poll2();
          }, 0);
          return null;
        }).catch((error) => {
        });
      }
      poll2();
      return filterId;
    }).catch((error) => {
    });
  }
  _stopEvent(event) {
    if (event.tag === "pending" && this.listenerCount("pending") === 0) {
      this._pendingFilter = null;
    }
    super._stopEvent(event);
  }
  static hexlifyTransaction(transaction, allowExtra) {
    const allowed = shallowCopy(allowedTransactionKeys4);
    if (allowExtra) {
      for (const key2 in allowExtra) {
        if (allowExtra[key2]) {
          allowed[key2] = true;
        }
      }
    }
    checkProperties(transaction, allowed);
    const result = {};
    ["chainId", "gasLimit", "gasPrice", "type", "maxFeePerGas", "maxPriorityFeePerGas", "nonce", "value"].forEach(function(key2) {
      if (transaction[key2] == null) {
        return;
      }
      const value2 = hexValue(transaction[key2]);
      if (key2 === "gasLimit") {
        key2 = "gas";
      }
      result[key2] = value2;
    });
    ["from", "to", "data"].forEach(function(key2) {
      if (transaction[key2] == null) {
        return;
      }
      result[key2] = hexlify(transaction[key2]);
    });
    if (transaction.accessList) {
      result["accessList"] = accessListify(transaction.accessList);
    }
    return result;
  }
};

// node_modules/@ethersproject/providers/lib.esm/ws.js
init_define_process();
init_lib();
"use strict";
var WS = null;
try {
  WS = WebSocket;
  if (WS == null) {
    throw new Error("inject please");
  }
} catch (error) {
  const logger47 = new Logger(version23);
  WS = function() {
    logger47.throwError("WebSockets not supported in this environment", Logger.errors.UNSUPPORTED_OPERATION, {
      operation: "new WebSocket()"
    });
  };
}

// node_modules/@ethersproject/providers/lib.esm/websocket-provider.js
init_lib();
"use strict";
var __awaiter12 = function(thisArg, _arguments, P3, generator) {
  function adopt(value2) {
    return value2 instanceof P3 ? value2 : new P3(function(resolve) {
      resolve(value2);
    });
  }
  return new (P3 || (P3 = Promise))(function(resolve, reject) {
    function fulfilled(value2) {
      try {
        step(generator.next(value2));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value2) {
      try {
        step(generator["throw"](value2));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var logger32 = new Logger(version23);
var NextId = 1;
var WebSocketProvider = class extends JsonRpcProvider {
  constructor(url, network) {
    if (network === "any") {
      logger32.throwError("WebSocketProvider does not support 'any' network yet", Logger.errors.UNSUPPORTED_OPERATION, {
        operation: "network:any"
      });
    }
    if (typeof url === "string") {
      super(url, network);
    } else {
      super("_websocket", network);
    }
    this._pollingInterval = -1;
    this._wsReady = false;
    if (typeof url === "string") {
      defineReadOnly(this, "_websocket", new WS(this.connection.url));
    } else {
      defineReadOnly(this, "_websocket", url);
    }
    defineReadOnly(this, "_requests", {});
    defineReadOnly(this, "_subs", {});
    defineReadOnly(this, "_subIds", {});
    defineReadOnly(this, "_detectNetwork", super.detectNetwork());
    this.websocket.onopen = () => {
      this._wsReady = true;
      Object.keys(this._requests).forEach((id2) => {
        this.websocket.send(this._requests[id2].payload);
      });
    };
    this.websocket.onmessage = (messageEvent) => {
      const data = messageEvent.data;
      const result = JSON.parse(data);
      if (result.id != null) {
        const id2 = String(result.id);
        const request = this._requests[id2];
        delete this._requests[id2];
        if (result.result !== void 0) {
          request.callback(null, result.result);
          this.emit("debug", {
            action: "response",
            request: JSON.parse(request.payload),
            response: result.result,
            provider: this
          });
        } else {
          let error = null;
          if (result.error) {
            error = new Error(result.error.message || "unknown error");
            defineReadOnly(error, "code", result.error.code || null);
            defineReadOnly(error, "response", data);
          } else {
            error = new Error("unknown error");
          }
          request.callback(error, void 0);
          this.emit("debug", {
            action: "response",
            error,
            request: JSON.parse(request.payload),
            provider: this
          });
        }
      } else if (result.method === "eth_subscription") {
        const sub = this._subs[result.params.subscription];
        if (sub) {
          sub.processFunc(result.params.result);
        }
      } else {
        console.warn("this should not happen");
      }
    };
    const fauxPoll = setInterval(() => {
      this.emit("poll");
    }, 1e3);
    if (fauxPoll.unref) {
      fauxPoll.unref();
    }
  }
  get websocket() {
    return this._websocket;
  }
  detectNetwork() {
    return this._detectNetwork;
  }
  get pollingInterval() {
    return 0;
  }
  resetEventsBlock(blockNumber) {
    logger32.throwError("cannot reset events block on WebSocketProvider", Logger.errors.UNSUPPORTED_OPERATION, {
      operation: "resetEventBlock"
    });
  }
  set pollingInterval(value2) {
    logger32.throwError("cannot set polling interval on WebSocketProvider", Logger.errors.UNSUPPORTED_OPERATION, {
      operation: "setPollingInterval"
    });
  }
  poll() {
    return __awaiter12(this, void 0, void 0, function* () {
      return null;
    });
  }
  set polling(value2) {
    if (!value2) {
      return;
    }
    logger32.throwError("cannot set polling on WebSocketProvider", Logger.errors.UNSUPPORTED_OPERATION, {
      operation: "setPolling"
    });
  }
  send(method, params) {
    const rid = NextId++;
    return new Promise((resolve, reject) => {
      function callback(error, result) {
        if (error) {
          return reject(error);
        }
        return resolve(result);
      }
      const payload = JSON.stringify({
        method,
        params,
        id: rid,
        jsonrpc: "2.0"
      });
      this.emit("debug", {
        action: "request",
        request: JSON.parse(payload),
        provider: this
      });
      this._requests[String(rid)] = { callback, payload };
      if (this._wsReady) {
        this.websocket.send(payload);
      }
    });
  }
  static defaultUrl() {
    return "ws://localhost:8546";
  }
  _subscribe(tag, param, processFunc) {
    return __awaiter12(this, void 0, void 0, function* () {
      let subIdPromise = this._subIds[tag];
      if (subIdPromise == null) {
        subIdPromise = Promise.all(param).then((param2) => {
          return this.send("eth_subscribe", param2);
        });
        this._subIds[tag] = subIdPromise;
      }
      const subId = yield subIdPromise;
      this._subs[subId] = { tag, processFunc };
    });
  }
  _startEvent(event) {
    switch (event.type) {
      case "block":
        this._subscribe("block", ["newHeads"], (result) => {
          const blockNumber = BigNumber.from(result.number).toNumber();
          this._emitted.block = blockNumber;
          this.emit("block", blockNumber);
        });
        break;
      case "pending":
        this._subscribe("pending", ["newPendingTransactions"], (result) => {
          this.emit("pending", result);
        });
        break;
      case "filter":
        this._subscribe(event.tag, ["logs", this._getFilter(event.filter)], (result) => {
          if (result.removed == null) {
            result.removed = false;
          }
          this.emit(event.filter, this.formatter.filterLog(result));
        });
        break;
      case "tx": {
        const emitReceipt = (event2) => {
          const hash3 = event2.hash;
          this.getTransactionReceipt(hash3).then((receipt) => {
            if (!receipt) {
              return;
            }
            this.emit(hash3, receipt);
          });
        };
        emitReceipt(event);
        this._subscribe("tx", ["newHeads"], (result) => {
          this._events.filter((e) => e.type === "tx").forEach(emitReceipt);
        });
        break;
      }
      case "debug":
      case "poll":
      case "willPoll":
      case "didPoll":
      case "error":
        break;
      default:
        console.log("unhandled:", event);
        break;
    }
  }
  _stopEvent(event) {
    let tag = event.tag;
    if (event.type === "tx") {
      if (this._events.filter((e) => e.type === "tx").length) {
        return;
      }
      tag = "tx";
    } else if (this.listenerCount(event.event)) {
      return;
    }
    const subId = this._subIds[tag];
    if (!subId) {
      return;
    }
    delete this._subIds[tag];
    subId.then((subId2) => {
      if (!this._subs[subId2]) {
        return;
      }
      delete this._subs[subId2];
      this.send("eth_unsubscribe", [subId2]);
    });
  }
  destroy() {
    return __awaiter12(this, void 0, void 0, function* () {
      if (this.websocket.readyState === WS.CONNECTING) {
        yield new Promise((resolve) => {
          this.websocket.onopen = function() {
            resolve(true);
          };
          this.websocket.onerror = function() {
            resolve(false);
          };
        });
      }
      this.websocket.close(1e3);
    });
  }
};

// node_modules/@ethersproject/providers/lib.esm/alchemy-provider.js
init_lib();

// node_modules/@ethersproject/providers/lib.esm/url-json-rpc-provider.js
init_define_process();
init_lib4();
init_lib();
"use strict";
var __awaiter13 = function(thisArg, _arguments, P3, generator) {
  function adopt(value2) {
    return value2 instanceof P3 ? value2 : new P3(function(resolve) {
      resolve(value2);
    });
  }
  return new (P3 || (P3 = Promise))(function(resolve, reject) {
    function fulfilled(value2) {
      try {
        step(generator.next(value2));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value2) {
      try {
        step(generator["throw"](value2));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var logger33 = new Logger(version23);
var StaticJsonRpcProvider = class extends JsonRpcProvider {
  detectNetwork() {
    const _super = Object.create(null, {
      detectNetwork: { get: () => super.detectNetwork }
    });
    return __awaiter13(this, void 0, void 0, function* () {
      let network = this.network;
      if (network == null) {
        network = yield _super.detectNetwork.call(this);
        if (!network) {
          logger33.throwError("no network detected", Logger.errors.UNKNOWN_ERROR, {});
        }
        if (this._network == null) {
          defineReadOnly(this, "_network", network);
          this.emit("network", network, null);
        }
      }
      return network;
    });
  }
};
var UrlJsonRpcProvider = class extends StaticJsonRpcProvider {
  constructor(network, apiKey) {
    logger33.checkAbstract(new.target, UrlJsonRpcProvider);
    network = getStatic(new.target, "getNetwork")(network);
    apiKey = getStatic(new.target, "getApiKey")(apiKey);
    const connection = getStatic(new.target, "getUrl")(network, apiKey);
    super(connection, network);
    if (typeof apiKey === "string") {
      defineReadOnly(this, "apiKey", apiKey);
    } else if (apiKey != null) {
      Object.keys(apiKey).forEach((key2) => {
        defineReadOnly(this, key2, apiKey[key2]);
      });
    }
  }
  _startPending() {
    logger33.warn("WARNING: API provider does not support pending filters");
  }
  isCommunityResource() {
    return false;
  }
  getSigner(address) {
    return logger33.throwError("API provider does not support signing", Logger.errors.UNSUPPORTED_OPERATION, { operation: "getSigner" });
  }
  listAccounts() {
    return Promise.resolve([]);
  }
  static getApiKey(apiKey) {
    return apiKey;
  }
  static getUrl(network, apiKey) {
    return logger33.throwError("not implemented; sub-classes must override getUrl", Logger.errors.NOT_IMPLEMENTED, {
      operation: "getUrl"
    });
  }
};

// node_modules/@ethersproject/providers/lib.esm/alchemy-provider.js
"use strict";
var logger34 = new Logger(version23);
var defaultApiKey = "_gg7wSSi0KMBsdKnGVfHDueq6xMB9EkC";
var AlchemyWebSocketProvider = class extends WebSocketProvider {
  constructor(network, apiKey) {
    const provider = new AlchemyProvider(network, apiKey);
    const url = provider.connection.url.replace(/^http/i, "ws").replace(".alchemyapi.", ".ws.alchemyapi.");
    super(url, provider.network);
    defineReadOnly(this, "apiKey", provider.apiKey);
  }
  isCommunityResource() {
    return this.apiKey === defaultApiKey;
  }
};
var AlchemyProvider = class extends UrlJsonRpcProvider {
  static getWebSocketProvider(network, apiKey) {
    return new AlchemyWebSocketProvider(network, apiKey);
  }
  static getApiKey(apiKey) {
    if (apiKey == null) {
      return defaultApiKey;
    }
    if (apiKey && typeof apiKey !== "string") {
      logger34.throwArgumentError("invalid apiKey", "apiKey", apiKey);
    }
    return apiKey;
  }
  static getUrl(network, apiKey) {
    let host = null;
    switch (network.name) {
      case "homestead":
        host = "eth-mainnet.alchemyapi.io/v2/";
        break;
      case "ropsten":
        host = "eth-ropsten.alchemyapi.io/v2/";
        break;
      case "rinkeby":
        host = "eth-rinkeby.alchemyapi.io/v2/";
        break;
      case "goerli":
        host = "eth-goerli.alchemyapi.io/v2/";
        break;
      case "kovan":
        host = "eth-kovan.alchemyapi.io/v2/";
        break;
      case "matic":
        host = "polygon-mainnet.g.alchemy.com/v2/";
        break;
      case "maticmum":
        host = "polygon-mumbai.g.alchemy.com/v2/";
        break;
      case "arbitrum":
        host = "arb-mainnet.g.alchemy.com/v2/";
        break;
      case "arbitrum-rinkeby":
        host = "arb-rinkeby.g.alchemy.com/v2/";
        break;
      case "optimism":
        host = "opt-mainnet.g.alchemy.com/v2/";
        break;
      case "optimism-kovan":
        host = "opt-kovan.g.alchemy.com/v2/";
        break;
      default:
        logger34.throwArgumentError("unsupported network", "network", arguments[0]);
    }
    return {
      allowGzip: true,
      url: "https://" + host + apiKey,
      throttleCallback: (attempt, url) => {
        if (apiKey === defaultApiKey) {
          showThrottleMessage();
        }
        return Promise.resolve(true);
      }
    };
  }
  isCommunityResource() {
    return this.apiKey === defaultApiKey;
  }
};

// node_modules/@ethersproject/providers/lib.esm/ankr-provider.js
init_define_process();
init_lib();
var logger35 = new Logger(version23);
var defaultApiKey2 = "9f7d929b018cdffb338517efa06f58359e86ff1ffd350bc889738523659e7972";
function getHost(name2) {
  switch (name2) {
    case "homestead":
      return "rpc.ankr.com/eth/";
    case "matic":
      return "rpc.ankr.com/polygon/";
    case "arbitrum":
      return "rpc.ankr.com/arbitrum/";
  }
  return logger35.throwArgumentError("unsupported network", "name", name2);
}
var AnkrProvider = class extends UrlJsonRpcProvider {
  isCommunityResource() {
    return this.apiKey === defaultApiKey2;
  }
  static getApiKey(apiKey) {
    if (apiKey == null) {
      return defaultApiKey2;
    }
    return apiKey;
  }
  static getUrl(network, apiKey) {
    if (apiKey == null) {
      apiKey = defaultApiKey2;
    }
    const connection = {
      allowGzip: true,
      url: "https://" + getHost(network.name) + apiKey,
      throttleCallback: (attempt, url) => {
        if (apiKey.apiKey === defaultApiKey2) {
          showThrottleMessage();
        }
        return Promise.resolve(true);
      }
    };
    if (apiKey.projectSecret != null) {
      connection.user = "";
      connection.password = apiKey.projectSecret;
    }
    return connection;
  }
};

// node_modules/@ethersproject/providers/lib.esm/cloudflare-provider.js
init_define_process();
init_lib();
"use strict";
var __awaiter14 = function(thisArg, _arguments, P3, generator) {
  function adopt(value2) {
    return value2 instanceof P3 ? value2 : new P3(function(resolve) {
      resolve(value2);
    });
  }
  return new (P3 || (P3 = Promise))(function(resolve, reject) {
    function fulfilled(value2) {
      try {
        step(generator.next(value2));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value2) {
      try {
        step(generator["throw"](value2));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var logger36 = new Logger(version23);
var CloudflareProvider = class extends UrlJsonRpcProvider {
  static getApiKey(apiKey) {
    if (apiKey != null) {
      logger36.throwArgumentError("apiKey not supported for cloudflare", "apiKey", apiKey);
    }
    return null;
  }
  static getUrl(network, apiKey) {
    let host = null;
    switch (network.name) {
      case "homestead":
        host = "https://cloudflare-eth.com/";
        break;
      default:
        logger36.throwArgumentError("unsupported network", "network", arguments[0]);
    }
    return host;
  }
  perform(method, params) {
    const _super = Object.create(null, {
      perform: { get: () => super.perform }
    });
    return __awaiter14(this, void 0, void 0, function* () {
      if (method === "getBlockNumber") {
        const block = yield _super.perform.call(this, "getBlock", { blockTag: "latest" });
        return block.number;
      }
      return _super.perform.call(this, method, params);
    });
  }
};

// node_modules/@ethersproject/providers/lib.esm/etherscan-provider.js
init_define_process();
init_lib2();
init_lib4();
init_lib15();
init_lib25();
init_lib();
"use strict";
var __awaiter15 = function(thisArg, _arguments, P3, generator) {
  function adopt(value2) {
    return value2 instanceof P3 ? value2 : new P3(function(resolve) {
      resolve(value2);
    });
  }
  return new (P3 || (P3 = Promise))(function(resolve, reject) {
    function fulfilled(value2) {
      try {
        step(generator.next(value2));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value2) {
      try {
        step(generator["throw"](value2));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var logger37 = new Logger(version23);
function getTransactionPostData(transaction) {
  const result = {};
  for (let key2 in transaction) {
    if (transaction[key2] == null) {
      continue;
    }
    let value2 = transaction[key2];
    if (key2 === "type" && value2 === 0) {
      continue;
    }
    if ({ type: true, gasLimit: true, gasPrice: true, maxFeePerGs: true, maxPriorityFeePerGas: true, nonce: true, value: true }[key2]) {
      value2 = hexValue(hexlify(value2));
    } else if (key2 === "accessList") {
      value2 = "[" + accessListify(value2).map((set) => {
        return `{address:"${set.address}",storageKeys:["${set.storageKeys.join('","')}"]}`;
      }).join(",") + "]";
    } else {
      value2 = hexlify(value2);
    }
    result[key2] = value2;
  }
  return result;
}
function getResult2(result) {
  if (result.status == 0 && (result.message === "No records found" || result.message === "No transactions found")) {
    return result.result;
  }
  if (result.status != 1 || result.message != "OK") {
    const error = new Error("invalid response");
    error.result = JSON.stringify(result);
    if ((result.result || "").toLowerCase().indexOf("rate limit") >= 0) {
      error.throttleRetry = true;
    }
    throw error;
  }
  return result.result;
}
function getJsonResult(result) {
  if (result && result.status == 0 && result.message == "NOTOK" && (result.result || "").toLowerCase().indexOf("rate limit") >= 0) {
    const error = new Error("throttled response");
    error.result = JSON.stringify(result);
    error.throttleRetry = true;
    throw error;
  }
  if (result.jsonrpc != "2.0") {
    const error = new Error("invalid response");
    error.result = JSON.stringify(result);
    throw error;
  }
  if (result.error) {
    const error = new Error(result.error.message || "unknown error");
    if (result.error.code) {
      error.code = result.error.code;
    }
    if (result.error.data) {
      error.data = result.error.data;
    }
    throw error;
  }
  return result.result;
}
function checkLogTag(blockTag) {
  if (blockTag === "pending") {
    throw new Error("pending not supported");
  }
  if (blockTag === "latest") {
    return blockTag;
  }
  return parseInt(blockTag.substring(2), 16);
}
var defaultApiKey3 = "9D13ZE7XSBTJ94N9BNJ2MA33VMAY2YPIRB";
function checkError2(method, error, transaction) {
  if (method === "call" && error.code === Logger.errors.SERVER_ERROR) {
    const e = error.error;
    if (e && (e.message.match(/reverted/i) || e.message.match(/VM execution error/i))) {
      let data = e.data;
      if (data) {
        data = "0x" + data.replace(/^.*0x/i, "");
      }
      if (isHexString(data)) {
        return data;
      }
      logger37.throwError("missing revert data in call exception", Logger.errors.CALL_EXCEPTION, {
        error,
        data: "0x"
      });
    }
  }
  let message = error.message;
  if (error.code === Logger.errors.SERVER_ERROR) {
    if (error.error && typeof error.error.message === "string") {
      message = error.error.message;
    } else if (typeof error.body === "string") {
      message = error.body;
    } else if (typeof error.responseText === "string") {
      message = error.responseText;
    }
  }
  message = (message || "").toLowerCase();
  if (message.match(/insufficient funds/)) {
    logger37.throwError("insufficient funds for intrinsic transaction cost", Logger.errors.INSUFFICIENT_FUNDS, {
      error,
      method,
      transaction
    });
  }
  if (message.match(/same hash was already imported|transaction nonce is too low|nonce too low/)) {
    logger37.throwError("nonce has already been used", Logger.errors.NONCE_EXPIRED, {
      error,
      method,
      transaction
    });
  }
  if (message.match(/another transaction with same nonce/)) {
    logger37.throwError("replacement fee too low", Logger.errors.REPLACEMENT_UNDERPRICED, {
      error,
      method,
      transaction
    });
  }
  if (message.match(/execution failed due to an exception|execution reverted/)) {
    logger37.throwError("cannot estimate gas; transaction may fail or may require manual gas limit", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {
      error,
      method,
      transaction
    });
  }
  throw error;
}
var EtherscanProvider = class extends BaseProvider {
  constructor(network, apiKey) {
    logger37.checkNew(new.target, EtherscanProvider);
    super(network);
    defineReadOnly(this, "baseUrl", this.getBaseUrl());
    defineReadOnly(this, "apiKey", apiKey || defaultApiKey3);
  }
  getBaseUrl() {
    switch (this.network ? this.network.name : "invalid") {
      case "homestead":
        return "https://api.etherscan.io";
      case "ropsten":
        return "https://api-ropsten.etherscan.io";
      case "rinkeby":
        return "https://api-rinkeby.etherscan.io";
      case "kovan":
        return "https://api-kovan.etherscan.io";
      case "goerli":
        return "https://api-goerli.etherscan.io";
      default:
    }
    return logger37.throwArgumentError("unsupported network", "network", name);
  }
  getUrl(module, params) {
    const query = Object.keys(params).reduce((accum, key2) => {
      const value2 = params[key2];
      if (value2 != null) {
        accum += `&${key2}=${value2}`;
      }
      return accum;
    }, "");
    const apiKey = this.apiKey ? `&apikey=${this.apiKey}` : "";
    return `${this.baseUrl}/api?module=${module}${query}${apiKey}`;
  }
  getPostUrl() {
    return `${this.baseUrl}/api`;
  }
  getPostData(module, params) {
    params.module = module;
    params.apikey = this.apiKey;
    return params;
  }
  fetch(module, params, post) {
    return __awaiter15(this, void 0, void 0, function* () {
      const url = post ? this.getPostUrl() : this.getUrl(module, params);
      const payload = post ? this.getPostData(module, params) : null;
      const procFunc = module === "proxy" ? getJsonResult : getResult2;
      this.emit("debug", {
        action: "request",
        request: url,
        provider: this
      });
      const connection = {
        url,
        throttleSlotInterval: 1e3,
        throttleCallback: (attempt, url2) => {
          if (this.isCommunityResource()) {
            showThrottleMessage();
          }
          return Promise.resolve(true);
        }
      };
      let payloadStr = null;
      if (payload) {
        connection.headers = { "content-type": "application/x-www-form-urlencoded; charset=UTF-8" };
        payloadStr = Object.keys(payload).map((key2) => {
          return `${key2}=${payload[key2]}`;
        }).join("&");
      }
      const result = yield fetchJson(connection, payloadStr, procFunc || getJsonResult);
      this.emit("debug", {
        action: "response",
        request: url,
        response: deepCopy(result),
        provider: this
      });
      return result;
    });
  }
  detectNetwork() {
    return __awaiter15(this, void 0, void 0, function* () {
      return this.network;
    });
  }
  perform(method, params) {
    const _super = Object.create(null, {
      perform: { get: () => super.perform }
    });
    return __awaiter15(this, void 0, void 0, function* () {
      switch (method) {
        case "getBlockNumber":
          return this.fetch("proxy", { action: "eth_blockNumber" });
        case "getGasPrice":
          return this.fetch("proxy", { action: "eth_gasPrice" });
        case "getBalance":
          return this.fetch("account", {
            action: "balance",
            address: params.address,
            tag: params.blockTag
          });
        case "getTransactionCount":
          return this.fetch("proxy", {
            action: "eth_getTransactionCount",
            address: params.address,
            tag: params.blockTag
          });
        case "getCode":
          return this.fetch("proxy", {
            action: "eth_getCode",
            address: params.address,
            tag: params.blockTag
          });
        case "getStorageAt":
          return this.fetch("proxy", {
            action: "eth_getStorageAt",
            address: params.address,
            position: params.position,
            tag: params.blockTag
          });
        case "sendTransaction":
          return this.fetch("proxy", {
            action: "eth_sendRawTransaction",
            hex: params.signedTransaction
          }, true).catch((error) => {
            return checkError2("sendTransaction", error, params.signedTransaction);
          });
        case "getBlock":
          if (params.blockTag) {
            return this.fetch("proxy", {
              action: "eth_getBlockByNumber",
              tag: params.blockTag,
              boolean: params.includeTransactions ? "true" : "false"
            });
          }
          throw new Error("getBlock by blockHash not implemented");
        case "getTransaction":
          return this.fetch("proxy", {
            action: "eth_getTransactionByHash",
            txhash: params.transactionHash
          });
        case "getTransactionReceipt":
          return this.fetch("proxy", {
            action: "eth_getTransactionReceipt",
            txhash: params.transactionHash
          });
        case "call": {
          if (params.blockTag !== "latest") {
            throw new Error("EtherscanProvider does not support blockTag for call");
          }
          const postData = getTransactionPostData(params.transaction);
          postData.module = "proxy";
          postData.action = "eth_call";
          try {
            return yield this.fetch("proxy", postData, true);
          } catch (error) {
            return checkError2("call", error, params.transaction);
          }
        }
        case "estimateGas": {
          const postData = getTransactionPostData(params.transaction);
          postData.module = "proxy";
          postData.action = "eth_estimateGas";
          try {
            return yield this.fetch("proxy", postData, true);
          } catch (error) {
            return checkError2("estimateGas", error, params.transaction);
          }
        }
        case "getLogs": {
          const args = { action: "getLogs" };
          if (params.filter.fromBlock) {
            args.fromBlock = checkLogTag(params.filter.fromBlock);
          }
          if (params.filter.toBlock) {
            args.toBlock = checkLogTag(params.filter.toBlock);
          }
          if (params.filter.address) {
            args.address = params.filter.address;
          }
          if (params.filter.topics && params.filter.topics.length > 0) {
            if (params.filter.topics.length > 1) {
              logger37.throwError("unsupported topic count", Logger.errors.UNSUPPORTED_OPERATION, { topics: params.filter.topics });
            }
            if (params.filter.topics.length === 1) {
              const topic0 = params.filter.topics[0];
              if (typeof topic0 !== "string" || topic0.length !== 66) {
                logger37.throwError("unsupported topic format", Logger.errors.UNSUPPORTED_OPERATION, { topic0 });
              }
              args.topic0 = topic0;
            }
          }
          const logs = yield this.fetch("logs", args);
          let blocks = {};
          for (let i2 = 0; i2 < logs.length; i2++) {
            const log = logs[i2];
            if (log.blockHash != null) {
              continue;
            }
            if (blocks[log.blockNumber] == null) {
              const block = yield this.getBlock(log.blockNumber);
              if (block) {
                blocks[log.blockNumber] = block.hash;
              }
            }
            log.blockHash = blocks[log.blockNumber];
          }
          return logs;
        }
        case "getEtherPrice":
          if (this.network.name !== "homestead") {
            return 0;
          }
          return parseFloat((yield this.fetch("stats", { action: "ethprice" })).ethusd);
        default:
          break;
      }
      return _super.perform.call(this, method, params);
    });
  }
  getHistory(addressOrName, startBlock, endBlock) {
    return __awaiter15(this, void 0, void 0, function* () {
      const params = {
        action: "txlist",
        address: yield this.resolveName(addressOrName),
        startblock: startBlock == null ? 0 : startBlock,
        endblock: endBlock == null ? 99999999 : endBlock,
        sort: "asc"
      };
      const result = yield this.fetch("account", params);
      return result.map((tx) => {
        ["contractAddress", "to"].forEach(function(key2) {
          if (tx[key2] == "") {
            delete tx[key2];
          }
        });
        if (tx.creates == null && tx.contractAddress != null) {
          tx.creates = tx.contractAddress;
        }
        const item = this.formatter.transactionResponse(tx);
        if (tx.timeStamp) {
          item.timestamp = parseInt(tx.timeStamp);
        }
        return item;
      });
    });
  }
  isCommunityResource() {
    return this.apiKey === defaultApiKey3;
  }
};

// node_modules/@ethersproject/providers/lib.esm/fallback-provider.js
init_define_process();
init_lib12();
init_lib3();
init_lib2();
init_lib4();
init_lib21();
init_lib25();
init_lib();
"use strict";
var __awaiter16 = function(thisArg, _arguments, P3, generator) {
  function adopt(value2) {
    return value2 instanceof P3 ? value2 : new P3(function(resolve) {
      resolve(value2);
    });
  }
  return new (P3 || (P3 = Promise))(function(resolve, reject) {
    function fulfilled(value2) {
      try {
        step(generator.next(value2));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value2) {
      try {
        step(generator["throw"](value2));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var logger38 = new Logger(version23);
function now() {
  return new Date().getTime();
}
function checkNetworks(networks2) {
  let result = null;
  for (let i2 = 0; i2 < networks2.length; i2++) {
    const network = networks2[i2];
    if (network == null) {
      return null;
    }
    if (result) {
      if (!(result.name === network.name && result.chainId === network.chainId && (result.ensAddress === network.ensAddress || result.ensAddress == null && network.ensAddress == null))) {
        logger38.throwArgumentError("provider mismatch", "networks", networks2);
      }
    } else {
      result = network;
    }
  }
  return result;
}
function median(values, maxDelta) {
  values = values.slice().sort();
  const middle = Math.floor(values.length / 2);
  if (values.length % 2) {
    return values[middle];
  }
  const a = values[middle - 1], b2 = values[middle];
  if (maxDelta != null && Math.abs(a - b2) > maxDelta) {
    return null;
  }
  return (a + b2) / 2;
}
function serialize2(value2) {
  if (value2 === null) {
    return "null";
  } else if (typeof value2 === "number" || typeof value2 === "boolean") {
    return JSON.stringify(value2);
  } else if (typeof value2 === "string") {
    return value2;
  } else if (BigNumber.isBigNumber(value2)) {
    return value2.toString();
  } else if (Array.isArray(value2)) {
    return JSON.stringify(value2.map((i2) => serialize2(i2)));
  } else if (typeof value2 === "object") {
    const keys = Object.keys(value2);
    keys.sort();
    return "{" + keys.map((key2) => {
      let v7 = value2[key2];
      if (typeof v7 === "function") {
        v7 = "[function]";
      } else {
        v7 = serialize2(v7);
      }
      return JSON.stringify(key2) + ":" + v7;
    }).join(",") + "}";
  }
  throw new Error("unknown value type: " + typeof value2);
}
var nextRid = 1;
function stall2(duration) {
  let cancel = null;
  let timer2 = null;
  let promise = new Promise((resolve) => {
    cancel = function() {
      if (timer2) {
        clearTimeout(timer2);
        timer2 = null;
      }
      resolve();
    };
    timer2 = setTimeout(cancel, duration);
  });
  const wait = (func) => {
    promise = promise.then(func);
    return promise;
  };
  function getPromise() {
    return promise;
  }
  return { cancel, getPromise, wait };
}
var ForwardErrors = [
  Logger.errors.CALL_EXCEPTION,
  Logger.errors.INSUFFICIENT_FUNDS,
  Logger.errors.NONCE_EXPIRED,
  Logger.errors.REPLACEMENT_UNDERPRICED,
  Logger.errors.UNPREDICTABLE_GAS_LIMIT
];
var ForwardProperties = [
  "address",
  "args",
  "errorArgs",
  "errorSignature",
  "method",
  "transaction"
];
function exposeDebugConfig(config, now2) {
  const result = {
    weight: config.weight
  };
  Object.defineProperty(result, "provider", { get: () => config.provider });
  if (config.start) {
    result.start = config.start;
  }
  if (now2) {
    result.duration = now2 - config.start;
  }
  if (config.done) {
    if (config.error) {
      result.error = config.error;
    } else {
      result.result = config.result || null;
    }
  }
  return result;
}
function normalizedTally(normalize, quorum) {
  return function(configs) {
    const tally = {};
    configs.forEach((c2) => {
      const value2 = normalize(c2.result);
      if (!tally[value2]) {
        tally[value2] = { count: 0, result: c2.result };
      }
      tally[value2].count++;
    });
    const keys = Object.keys(tally);
    for (let i2 = 0; i2 < keys.length; i2++) {
      const check = tally[keys[i2]];
      if (check.count >= quorum) {
        return check.result;
      }
    }
    return void 0;
  };
}
function getProcessFunc(provider, method, params) {
  let normalize = serialize2;
  switch (method) {
    case "getBlockNumber":
      return function(configs) {
        const values = configs.map((c2) => c2.result);
        let blockNumber = median(configs.map((c2) => c2.result), 2);
        if (blockNumber == null) {
          return void 0;
        }
        blockNumber = Math.ceil(blockNumber);
        if (values.indexOf(blockNumber + 1) >= 0) {
          blockNumber++;
        }
        if (blockNumber >= provider._highestBlockNumber) {
          provider._highestBlockNumber = blockNumber;
        }
        return provider._highestBlockNumber;
      };
    case "getGasPrice":
      return function(configs) {
        const values = configs.map((c2) => c2.result);
        values.sort();
        return values[Math.floor(values.length / 2)];
      };
    case "getEtherPrice":
      return function(configs) {
        return median(configs.map((c2) => c2.result));
      };
    case "getBalance":
    case "getTransactionCount":
    case "getCode":
    case "getStorageAt":
    case "call":
    case "estimateGas":
    case "getLogs":
      break;
    case "getTransaction":
    case "getTransactionReceipt":
      normalize = function(tx) {
        if (tx == null) {
          return null;
        }
        tx = shallowCopy(tx);
        tx.confirmations = -1;
        return serialize2(tx);
      };
      break;
    case "getBlock":
      if (params.includeTransactions) {
        normalize = function(block) {
          if (block == null) {
            return null;
          }
          block = shallowCopy(block);
          block.transactions = block.transactions.map((tx) => {
            tx = shallowCopy(tx);
            tx.confirmations = -1;
            return tx;
          });
          return serialize2(block);
        };
      } else {
        normalize = function(block) {
          if (block == null) {
            return null;
          }
          return serialize2(block);
        };
      }
      break;
    default:
      throw new Error("unknown method: " + method);
  }
  return normalizedTally(normalize, provider.quorum);
}
function waitForSync(config, blockNumber) {
  return __awaiter16(this, void 0, void 0, function* () {
    const provider = config.provider;
    if (provider.blockNumber != null && provider.blockNumber >= blockNumber || blockNumber === -1) {
      return provider;
    }
    return poll(() => {
      return new Promise((resolve, reject) => {
        setTimeout(function() {
          if (provider.blockNumber >= blockNumber) {
            return resolve(provider);
          }
          if (config.cancelled) {
            return resolve(null);
          }
          return resolve(void 0);
        }, 0);
      });
    }, { oncePoll: provider });
  });
}
function getRunner(config, currentBlockNumber, method, params) {
  return __awaiter16(this, void 0, void 0, function* () {
    let provider = config.provider;
    switch (method) {
      case "getBlockNumber":
      case "getGasPrice":
        return provider[method]();
      case "getEtherPrice":
        if (provider.getEtherPrice) {
          return provider.getEtherPrice();
        }
        break;
      case "getBalance":
      case "getTransactionCount":
      case "getCode":
        if (params.blockTag && isHexString(params.blockTag)) {
          provider = yield waitForSync(config, currentBlockNumber);
        }
        return provider[method](params.address, params.blockTag || "latest");
      case "getStorageAt":
        if (params.blockTag && isHexString(params.blockTag)) {
          provider = yield waitForSync(config, currentBlockNumber);
        }
        return provider.getStorageAt(params.address, params.position, params.blockTag || "latest");
      case "getBlock":
        if (params.blockTag && isHexString(params.blockTag)) {
          provider = yield waitForSync(config, currentBlockNumber);
        }
        return provider[params.includeTransactions ? "getBlockWithTransactions" : "getBlock"](params.blockTag || params.blockHash);
      case "call":
      case "estimateGas":
        if (params.blockTag && isHexString(params.blockTag)) {
          provider = yield waitForSync(config, currentBlockNumber);
        }
        return provider[method](params.transaction);
      case "getTransaction":
      case "getTransactionReceipt":
        return provider[method](params.transactionHash);
      case "getLogs": {
        let filter = params.filter;
        if (filter.fromBlock && isHexString(filter.fromBlock) || filter.toBlock && isHexString(filter.toBlock)) {
          provider = yield waitForSync(config, currentBlockNumber);
        }
        return provider.getLogs(filter);
      }
    }
    return logger38.throwError("unknown method error", Logger.errors.UNKNOWN_ERROR, {
      method,
      params
    });
  });
}
var FallbackProvider = class extends BaseProvider {
  constructor(providers, quorum) {
    logger38.checkNew(new.target, FallbackProvider);
    if (providers.length === 0) {
      logger38.throwArgumentError("missing providers", "providers", providers);
    }
    const providerConfigs = providers.map((configOrProvider, index) => {
      if (Provider.isProvider(configOrProvider)) {
        const stallTimeout = isCommunityResource(configOrProvider) ? 2e3 : 750;
        const priority = 1;
        return Object.freeze({ provider: configOrProvider, weight: 1, stallTimeout, priority });
      }
      const config = shallowCopy(configOrProvider);
      if (config.priority == null) {
        config.priority = 1;
      }
      if (config.stallTimeout == null) {
        config.stallTimeout = isCommunityResource(configOrProvider) ? 2e3 : 750;
      }
      if (config.weight == null) {
        config.weight = 1;
      }
      const weight = config.weight;
      if (weight % 1 || weight > 512 || weight < 1) {
        logger38.throwArgumentError("invalid weight; must be integer in [1, 512]", `providers[${index}].weight`, weight);
      }
      return Object.freeze(config);
    });
    const total = providerConfigs.reduce((accum, c2) => accum + c2.weight, 0);
    if (quorum == null) {
      quorum = total / 2;
    } else if (quorum > total) {
      logger38.throwArgumentError("quorum will always fail; larger than total weight", "quorum", quorum);
    }
    let networkOrReady = checkNetworks(providerConfigs.map((c2) => c2.provider.network));
    if (networkOrReady == null) {
      networkOrReady = new Promise((resolve, reject) => {
        setTimeout(() => {
          this.detectNetwork().then(resolve, reject);
        }, 0);
      });
    }
    super(networkOrReady);
    defineReadOnly(this, "providerConfigs", Object.freeze(providerConfigs));
    defineReadOnly(this, "quorum", quorum);
    this._highestBlockNumber = -1;
  }
  detectNetwork() {
    return __awaiter16(this, void 0, void 0, function* () {
      const networks2 = yield Promise.all(this.providerConfigs.map((c2) => c2.provider.getNetwork()));
      return checkNetworks(networks2);
    });
  }
  perform(method, params) {
    return __awaiter16(this, void 0, void 0, function* () {
      if (method === "sendTransaction") {
        const results = yield Promise.all(this.providerConfigs.map((c2) => {
          return c2.provider.sendTransaction(params.signedTransaction).then((result) => {
            return result.hash;
          }, (error) => {
            return error;
          });
        }));
        for (let i3 = 0; i3 < results.length; i3++) {
          const result = results[i3];
          if (typeof result === "string") {
            return result;
          }
        }
        throw results[0];
      }
      if (this._highestBlockNumber === -1 && method !== "getBlockNumber") {
        yield this.getBlockNumber();
      }
      const processFunc = getProcessFunc(this, method, params);
      const configs = shuffled(this.providerConfigs.map(shallowCopy));
      configs.sort((a, b2) => a.priority - b2.priority);
      const currentBlockNumber = this._highestBlockNumber;
      let i2 = 0;
      let first = true;
      while (true) {
        const t02 = now();
        let inflightWeight = configs.filter((c2) => c2.runner && t02 - c2.start < c2.stallTimeout).reduce((accum, c2) => accum + c2.weight, 0);
        while (inflightWeight < this.quorum && i2 < configs.length) {
          const config = configs[i2++];
          const rid = nextRid++;
          config.start = now();
          config.staller = stall2(config.stallTimeout);
          config.staller.wait(() => {
            config.staller = null;
          });
          config.runner = getRunner(config, currentBlockNumber, method, params).then((result) => {
            config.done = true;
            config.result = result;
            if (this.listenerCount("debug")) {
              this.emit("debug", {
                action: "request",
                rid,
                backend: exposeDebugConfig(config, now()),
                request: { method, params: deepCopy(params) },
                provider: this
              });
            }
          }, (error) => {
            config.done = true;
            config.error = error;
            if (this.listenerCount("debug")) {
              this.emit("debug", {
                action: "request",
                rid,
                backend: exposeDebugConfig(config, now()),
                request: { method, params: deepCopy(params) },
                provider: this
              });
            }
          });
          if (this.listenerCount("debug")) {
            this.emit("debug", {
              action: "request",
              rid,
              backend: exposeDebugConfig(config, null),
              request: { method, params: deepCopy(params) },
              provider: this
            });
          }
          inflightWeight += config.weight;
        }
        const waiting = [];
        configs.forEach((c2) => {
          if (c2.done || !c2.runner) {
            return;
          }
          waiting.push(c2.runner);
          if (c2.staller) {
            waiting.push(c2.staller.getPromise());
          }
        });
        if (waiting.length) {
          yield Promise.race(waiting);
        }
        const results = configs.filter((c2) => c2.done && c2.error == null);
        if (results.length >= this.quorum) {
          const result = processFunc(results);
          if (result !== void 0) {
            configs.forEach((c2) => {
              if (c2.staller) {
                c2.staller.cancel();
              }
              c2.cancelled = true;
            });
            return result;
          }
          if (!first) {
            yield stall2(100).getPromise();
          }
          first = false;
        }
        const errors = configs.reduce((accum, c2) => {
          if (!c2.done || c2.error == null) {
            return accum;
          }
          const code = c2.error.code;
          if (ForwardErrors.indexOf(code) >= 0) {
            if (!accum[code]) {
              accum[code] = { error: c2.error, weight: 0 };
            }
            accum[code].weight += c2.weight;
          }
          return accum;
        }, {});
        Object.keys(errors).forEach((errorCode) => {
          const tally = errors[errorCode];
          if (tally.weight < this.quorum) {
            return;
          }
          configs.forEach((c2) => {
            if (c2.staller) {
              c2.staller.cancel();
            }
            c2.cancelled = true;
          });
          const e = tally.error;
          const props = {};
          ForwardProperties.forEach((name2) => {
            if (e[name2] == null) {
              return;
            }
            props[name2] = e[name2];
          });
          logger38.throwError(e.reason || e.message, errorCode, props);
        });
        if (configs.filter((c2) => !c2.done).length === 0) {
          break;
        }
      }
      configs.forEach((c2) => {
        if (c2.staller) {
          c2.staller.cancel();
        }
        c2.cancelled = true;
      });
      return logger38.throwError("failed to meet quorum", Logger.errors.SERVER_ERROR, {
        method,
        params,
        results: configs.map((c2) => exposeDebugConfig(c2)),
        provider: this
      });
    });
  }
};

// node_modules/@ethersproject/providers/lib.esm/ipc-provider.js
init_define_process();
"use strict";
var IpcProvider = null;

// node_modules/@ethersproject/providers/lib.esm/infura-provider.js
init_define_process();
init_lib4();
init_lib();
"use strict";
var logger39 = new Logger(version23);
var defaultProjectId = "84842078b09946638c03157f83405213";
var InfuraWebSocketProvider = class extends WebSocketProvider {
  constructor(network, apiKey) {
    const provider = new InfuraProvider(network, apiKey);
    const connection = provider.connection;
    if (connection.password) {
      logger39.throwError("INFURA WebSocket project secrets unsupported", Logger.errors.UNSUPPORTED_OPERATION, {
        operation: "InfuraProvider.getWebSocketProvider()"
      });
    }
    const url = connection.url.replace(/^http/i, "ws").replace("/v3/", "/ws/v3/");
    super(url, network);
    defineReadOnly(this, "apiKey", provider.projectId);
    defineReadOnly(this, "projectId", provider.projectId);
    defineReadOnly(this, "projectSecret", provider.projectSecret);
  }
  isCommunityResource() {
    return this.projectId === defaultProjectId;
  }
};
var InfuraProvider = class extends UrlJsonRpcProvider {
  static getWebSocketProvider(network, apiKey) {
    return new InfuraWebSocketProvider(network, apiKey);
  }
  static getApiKey(apiKey) {
    const apiKeyObj = {
      apiKey: defaultProjectId,
      projectId: defaultProjectId,
      projectSecret: null
    };
    if (apiKey == null) {
      return apiKeyObj;
    }
    if (typeof apiKey === "string") {
      apiKeyObj.projectId = apiKey;
    } else if (apiKey.projectSecret != null) {
      logger39.assertArgument(typeof apiKey.projectId === "string", "projectSecret requires a projectId", "projectId", apiKey.projectId);
      logger39.assertArgument(typeof apiKey.projectSecret === "string", "invalid projectSecret", "projectSecret", "[REDACTED]");
      apiKeyObj.projectId = apiKey.projectId;
      apiKeyObj.projectSecret = apiKey.projectSecret;
    } else if (apiKey.projectId) {
      apiKeyObj.projectId = apiKey.projectId;
    }
    apiKeyObj.apiKey = apiKeyObj.projectId;
    return apiKeyObj;
  }
  static getUrl(network, apiKey) {
    let host = null;
    switch (network ? network.name : "unknown") {
      case "homestead":
        host = "mainnet.infura.io";
        break;
      case "ropsten":
        host = "ropsten.infura.io";
        break;
      case "rinkeby":
        host = "rinkeby.infura.io";
        break;
      case "kovan":
        host = "kovan.infura.io";
        break;
      case "goerli":
        host = "goerli.infura.io";
        break;
      case "matic":
        host = "polygon-mainnet.infura.io";
        break;
      case "maticmum":
        host = "polygon-mumbai.infura.io";
        break;
      case "optimism":
        host = "optimism-mainnet.infura.io";
        break;
      case "optimism-kovan":
        host = "optimism-kovan.infura.io";
        break;
      case "arbitrum":
        host = "arbitrum-mainnet.infura.io";
        break;
      case "arbitrum-rinkeby":
        host = "arbitrum-rinkeby.infura.io";
        break;
      default:
        logger39.throwError("unsupported network", Logger.errors.INVALID_ARGUMENT, {
          argument: "network",
          value: network
        });
    }
    const connection = {
      allowGzip: true,
      url: "https://" + host + "/v3/" + apiKey.projectId,
      throttleCallback: (attempt, url) => {
        if (apiKey.projectId === defaultProjectId) {
          showThrottleMessage();
        }
        return Promise.resolve(true);
      }
    };
    if (apiKey.projectSecret != null) {
      connection.user = "";
      connection.password = apiKey.projectSecret;
    }
    return connection;
  }
  isCommunityResource() {
    return this.projectId === defaultProjectId;
  }
};

// node_modules/@ethersproject/providers/lib.esm/json-rpc-batch-provider.js
init_define_process();
init_lib4();
init_lib25();
var JsonRpcBatchProvider = class extends JsonRpcProvider {
  send(method, params) {
    const request = {
      method,
      params,
      id: this._nextId++,
      jsonrpc: "2.0"
    };
    if (this._pendingBatch == null) {
      this._pendingBatch = [];
    }
    const inflightRequest = { request, resolve: null, reject: null };
    const promise = new Promise((resolve, reject) => {
      inflightRequest.resolve = resolve;
      inflightRequest.reject = reject;
    });
    this._pendingBatch.push(inflightRequest);
    if (!this._pendingBatchAggregator) {
      this._pendingBatchAggregator = setTimeout(() => {
        const batch = this._pendingBatch;
        this._pendingBatch = null;
        this._pendingBatchAggregator = null;
        const request2 = batch.map((inflight) => inflight.request);
        this.emit("debug", {
          action: "requestBatch",
          request: deepCopy(request2),
          provider: this
        });
        return fetchJson(this.connection, JSON.stringify(request2)).then((result) => {
          this.emit("debug", {
            action: "response",
            request: request2,
            response: result,
            provider: this
          });
          batch.forEach((inflightRequest2, index) => {
            const payload = result[index];
            if (payload.error) {
              const error = new Error(payload.error.message);
              error.code = payload.error.code;
              error.data = payload.error.data;
              inflightRequest2.reject(error);
            } else {
              inflightRequest2.resolve(payload.result);
            }
          });
        }, (error) => {
          this.emit("debug", {
            action: "response",
            error,
            request: request2,
            provider: this
          });
          batch.forEach((inflightRequest2) => {
            inflightRequest2.reject(error);
          });
        });
      }, 10);
    }
    return promise;
  }
};

// node_modules/@ethersproject/providers/lib.esm/nodesmith-provider.js
init_define_process();
init_lib();
"use strict";
var logger40 = new Logger(version23);
var defaultApiKey4 = "ETHERS_JS_SHARED";
var NodesmithProvider = class extends UrlJsonRpcProvider {
  static getApiKey(apiKey) {
    if (apiKey && typeof apiKey !== "string") {
      logger40.throwArgumentError("invalid apiKey", "apiKey", apiKey);
    }
    return apiKey || defaultApiKey4;
  }
  static getUrl(network, apiKey) {
    logger40.warn("NodeSmith will be discontinued on 2019-12-20; please migrate to another platform.");
    let host = null;
    switch (network.name) {
      case "homestead":
        host = "https://ethereum.api.nodesmith.io/v1/mainnet/jsonrpc";
        break;
      case "ropsten":
        host = "https://ethereum.api.nodesmith.io/v1/ropsten/jsonrpc";
        break;
      case "rinkeby":
        host = "https://ethereum.api.nodesmith.io/v1/rinkeby/jsonrpc";
        break;
      case "goerli":
        host = "https://ethereum.api.nodesmith.io/v1/goerli/jsonrpc";
        break;
      case "kovan":
        host = "https://ethereum.api.nodesmith.io/v1/kovan/jsonrpc";
        break;
      default:
        logger40.throwArgumentError("unsupported network", "network", arguments[0]);
    }
    return host + "?apiKey=" + apiKey;
  }
};

// node_modules/@ethersproject/providers/lib.esm/pocket-provider.js
init_define_process();
init_lib4();
init_lib();
"use strict";
var logger41 = new Logger(version23);
var defaultApplicationIds = {
  homestead: "6004bcd10040261633ade990",
  ropsten: "6004bd4d0040261633ade991",
  rinkeby: "6004bda20040261633ade994",
  goerli: "6004bd860040261633ade992"
};
var PocketProvider = class extends UrlJsonRpcProvider {
  constructor(network, apiKey) {
    if (apiKey == null) {
      const n = getStatic(new.target, "getNetwork")(network);
      if (n) {
        const applicationId = defaultApplicationIds[n.name];
        if (applicationId) {
          apiKey = {
            applicationId,
            loadBalancer: true
          };
        }
      }
      if (apiKey == null) {
        logger41.throwError("unsupported network", Logger.errors.INVALID_ARGUMENT, {
          argument: "network",
          value: network
        });
      }
    }
    super(network, apiKey);
  }
  static getApiKey(apiKey) {
    if (apiKey == null) {
      logger41.throwArgumentError("PocketProvider.getApiKey does not support null apiKey", "apiKey", apiKey);
    }
    const apiKeyObj = {
      applicationId: null,
      loadBalancer: false,
      applicationSecretKey: null
    };
    if (typeof apiKey === "string") {
      apiKeyObj.applicationId = apiKey;
    } else if (apiKey.applicationSecretKey != null) {
      logger41.assertArgument(typeof apiKey.applicationId === "string", "applicationSecretKey requires an applicationId", "applicationId", apiKey.applicationId);
      logger41.assertArgument(typeof apiKey.applicationSecretKey === "string", "invalid applicationSecretKey", "applicationSecretKey", "[REDACTED]");
      apiKeyObj.applicationId = apiKey.applicationId;
      apiKeyObj.applicationSecretKey = apiKey.applicationSecretKey;
      apiKeyObj.loadBalancer = !!apiKey.loadBalancer;
    } else if (apiKey.applicationId) {
      logger41.assertArgument(typeof apiKey.applicationId === "string", "apiKey.applicationId must be a string", "apiKey.applicationId", apiKey.applicationId);
      apiKeyObj.applicationId = apiKey.applicationId;
      apiKeyObj.loadBalancer = !!apiKey.loadBalancer;
    } else {
      logger41.throwArgumentError("unsupported PocketProvider apiKey", "apiKey", apiKey);
    }
    return apiKeyObj;
  }
  static getUrl(network, apiKey) {
    let host = null;
    switch (network ? network.name : "unknown") {
      case "homestead":
        host = "eth-mainnet.gateway.pokt.network";
        break;
      case "ropsten":
        host = "eth-ropsten.gateway.pokt.network";
        break;
      case "rinkeby":
        host = "eth-rinkeby.gateway.pokt.network";
        break;
      case "goerli":
        host = "eth-goerli.gateway.pokt.network";
        break;
      default:
        logger41.throwError("unsupported network", Logger.errors.INVALID_ARGUMENT, {
          argument: "network",
          value: network
        });
    }
    let url = null;
    if (apiKey.loadBalancer) {
      url = `https://${host}/v1/lb/${apiKey.applicationId}`;
    } else {
      url = `https://${host}/v1/${apiKey.applicationId}`;
    }
    const connection = { url };
    connection.headers = {};
    if (apiKey.applicationSecretKey != null) {
      connection.user = "";
      connection.password = apiKey.applicationSecretKey;
    }
    return connection;
  }
  isCommunityResource() {
    return this.applicationId === defaultApplicationIds[this.network.name];
  }
};

// node_modules/@ethersproject/providers/lib.esm/web3-provider.js
init_define_process();
init_lib4();
init_lib();
"use strict";
var logger42 = new Logger(version23);
var _nextId = 1;
function buildWeb3LegacyFetcher(provider, sendFunc) {
  const fetcher = "Web3LegacyFetcher";
  return function(method, params) {
    const request = {
      method,
      params,
      id: _nextId++,
      jsonrpc: "2.0"
    };
    return new Promise((resolve, reject) => {
      this.emit("debug", {
        action: "request",
        fetcher,
        request: deepCopy(request),
        provider: this
      });
      sendFunc(request, (error, response) => {
        if (error) {
          this.emit("debug", {
            action: "response",
            fetcher,
            error,
            request,
            provider: this
          });
          return reject(error);
        }
        this.emit("debug", {
          action: "response",
          fetcher,
          request,
          response,
          provider: this
        });
        if (response.error) {
          const error2 = new Error(response.error.message);
          error2.code = response.error.code;
          error2.data = response.error.data;
          return reject(error2);
        }
        resolve(response.result);
      });
    });
  };
}
function buildEip1193Fetcher(provider) {
  return function(method, params) {
    if (params == null) {
      params = [];
    }
    const request = { method, params };
    this.emit("debug", {
      action: "request",
      fetcher: "Eip1193Fetcher",
      request: deepCopy(request),
      provider: this
    });
    return provider.request(request).then((response) => {
      this.emit("debug", {
        action: "response",
        fetcher: "Eip1193Fetcher",
        request,
        response,
        provider: this
      });
      return response;
    }, (error) => {
      this.emit("debug", {
        action: "response",
        fetcher: "Eip1193Fetcher",
        request,
        error,
        provider: this
      });
      throw error;
    });
  };
}
var Web3Provider = class extends JsonRpcProvider {
  constructor(provider, network) {
    logger42.checkNew(new.target, Web3Provider);
    if (provider == null) {
      logger42.throwArgumentError("missing provider", "provider", provider);
    }
    let path = null;
    let jsonRpcFetchFunc = null;
    let subprovider = null;
    if (typeof provider === "function") {
      path = "unknown:";
      jsonRpcFetchFunc = provider;
    } else {
      path = provider.host || provider.path || "";
      if (!path && provider.isMetaMask) {
        path = "metamask";
      }
      subprovider = provider;
      if (provider.request) {
        if (path === "") {
          path = "eip-1193:";
        }
        jsonRpcFetchFunc = buildEip1193Fetcher(provider);
      } else if (provider.sendAsync) {
        jsonRpcFetchFunc = buildWeb3LegacyFetcher(provider, provider.sendAsync.bind(provider));
      } else if (provider.send) {
        jsonRpcFetchFunc = buildWeb3LegacyFetcher(provider, provider.send.bind(provider));
      } else {
        logger42.throwArgumentError("unsupported provider", "provider", provider);
      }
      if (!path) {
        path = "unknown:";
      }
    }
    super(path, network);
    defineReadOnly(this, "jsonRpcFetchFunc", jsonRpcFetchFunc);
    defineReadOnly(this, "provider", subprovider);
  }
  send(method, params) {
    return this.jsonRpcFetchFunc(method, params);
  }
};

// node_modules/@ethersproject/providers/lib.esm/index.js
init_lib();
"use strict";
var logger43 = new Logger(version23);
function getDefaultProvider(network, options) {
  if (network == null) {
    network = "homestead";
  }
  if (typeof network === "string") {
    const match = network.match(/^(ws|http)s?:/i);
    if (match) {
      switch (match[1]) {
        case "http":
          return new JsonRpcProvider(network);
        case "ws":
          return new WebSocketProvider(network);
        default:
          logger43.throwArgumentError("unsupported URL scheme", "network", network);
      }
    }
  }
  const n = getNetwork(network);
  if (!n || !n._defaultProvider) {
    logger43.throwError("unsupported getDefaultProvider network", Logger.errors.NETWORK_ERROR, {
      operation: "getDefaultProvider",
      network
    });
  }
  return n._defaultProvider({
    FallbackProvider,
    AlchemyProvider,
    AnkrProvider,
    CloudflareProvider,
    EtherscanProvider,
    InfuraProvider,
    JsonRpcProvider,
    NodesmithProvider,
    PocketProvider,
    Web3Provider,
    IpcProvider
  }, options);
}

// node_modules/ethers/lib.esm/ethers.js
init_lib19();

// node_modules/ethers/lib.esm/utils.js
var utils_exports = {};
__export(utils_exports, {
  AbiCoder: () => AbiCoder,
  ConstructorFragment: () => ConstructorFragment,
  ErrorFragment: () => ErrorFragment,
  EventFragment: () => EventFragment,
  FormatTypes: () => FormatTypes,
  Fragment: () => Fragment,
  FunctionFragment: () => FunctionFragment,
  HDNode: () => HDNode,
  Indexed: () => Indexed,
  Interface: () => Interface,
  LogDescription: () => LogDescription,
  Logger: () => Logger,
  ParamType: () => ParamType,
  RLP: () => lib_exports5,
  SigningKey: () => SigningKey,
  SupportedAlgorithm: () => SupportedAlgorithm,
  TransactionDescription: () => TransactionDescription,
  TransactionTypes: () => TransactionTypes,
  UnicodeNormalizationForm: () => UnicodeNormalizationForm,
  Utf8ErrorFuncs: () => Utf8ErrorFuncs,
  Utf8ErrorReason: () => Utf8ErrorReason,
  _TypedDataEncoder: () => TypedDataEncoder,
  _fetchData: () => _fetchData,
  _toEscapedUtf8String: () => _toEscapedUtf8String,
  accessListify: () => accessListify,
  arrayify: () => arrayify,
  base58: () => Base58,
  base64: () => lib_exports19,
  checkProperties: () => checkProperties,
  checkResultErrors: () => checkResultErrors,
  commify: () => commify,
  computeAddress: () => computeAddress,
  computeHmac: () => computeHmac,
  computePublicKey: () => computePublicKey,
  concat: () => concat,
  deepCopy: () => deepCopy,
  defaultAbiCoder: () => defaultAbiCoder,
  defaultPath: () => defaultPath,
  defineReadOnly: () => defineReadOnly,
  dnsEncode: () => dnsEncode,
  entropyToMnemonic: () => entropyToMnemonic,
  fetchJson: () => fetchJson,
  formatBytes32String: () => formatBytes32String,
  formatEther: () => formatEther,
  formatUnits: () => formatUnits,
  getAccountPath: () => getAccountPath,
  getAddress: () => getAddress,
  getContractAddress: () => getContractAddress,
  getCreate2Address: () => getCreate2Address,
  getIcapAddress: () => getIcapAddress,
  getJsonWalletAddress: () => getJsonWalletAddress,
  getStatic: () => getStatic,
  hashMessage: () => hashMessage,
  hexConcat: () => hexConcat,
  hexDataLength: () => hexDataLength,
  hexDataSlice: () => hexDataSlice,
  hexStripZeros: () => hexStripZeros,
  hexValue: () => hexValue,
  hexZeroPad: () => hexZeroPad,
  hexlify: () => hexlify,
  id: () => id,
  isAddress: () => isAddress,
  isBytes: () => isBytes,
  isBytesLike: () => isBytesLike,
  isHexString: () => isHexString,
  isValidMnemonic: () => isValidMnemonic,
  isValidName: () => isValidName,
  joinSignature: () => joinSignature,
  keccak256: () => keccak256,
  mnemonicToEntropy: () => mnemonicToEntropy,
  mnemonicToSeed: () => mnemonicToSeed,
  namehash: () => namehash,
  nameprep: () => nameprep,
  parseBytes32String: () => parseBytes32String,
  parseEther: () => parseEther,
  parseTransaction: () => parse,
  parseUnits: () => parseUnits,
  poll: () => poll,
  randomBytes: () => randomBytes,
  recoverAddress: () => recoverAddress,
  recoverPublicKey: () => recoverPublicKey,
  resolveProperties: () => resolveProperties,
  ripemd160: () => ripemd160,
  serializeTransaction: () => serialize,
  sha256: () => sha256,
  sha512: () => sha512,
  shallowCopy: () => shallowCopy,
  shuffled: () => shuffled,
  solidityKeccak256: () => keccak2562,
  solidityPack: () => pack2,
  soliditySha256: () => sha2562,
  splitSignature: () => splitSignature,
  stripZeros: () => stripZeros,
  toUtf8Bytes: () => toUtf8Bytes,
  toUtf8CodePoints: () => toUtf8CodePoints,
  toUtf8String: () => toUtf8String,
  verifyMessage: () => verifyMessage,
  verifyTypedData: () => verifyTypedData,
  zeroPad: () => zeroPad
});
init_define_process();
init_lib11();
init_lib7();
init_lib24();
init_lib16();
init_lib2();
init_lib10();
init_lib20();
init_lib22();
init_lib5();
init_lib();
init_lib17();
init_lib26();
init_lib21();
init_lib4();
init_lib6();
init_lib14();
init_lib9();
init_lib15();
init_lib27();
init_lib23();
init_lib25();
init_lib17();
init_lib9();
"use strict";

// node_modules/ethers/lib.esm/ethers.js
init_lib();

// node_modules/ethers/lib.esm/_version.js
init_define_process();
var version26 = "ethers/5.6.2";

// node_modules/ethers/lib.esm/ethers.js
"use strict";
var logger46 = new Logger(version26);

// node_modules/ethers/lib.esm/index.js
"use strict";
try {
  const anyGlobal2 = window;
  if (anyGlobal2._ethers == null) {
    anyGlobal2._ethers = ethers_exports;
  }
} catch (error) {
}

// node_modules/tiny-invariant/dist/tiny-invariant.esm.js
init_define_process();
var isProduction = false;
var prefix = "Invariant failed";
function invariant(condition, message) {
  if (condition) {
    return;
  }
  if (isProduction) {
    throw new Error(prefix);
  }
  var provided = typeof message === "function" ? message() : message;
  var value2 = provided ? prefix + ": " + provided : prefix;
  throw new Error(value2);
}

// node_modules/@thirdweb-dev/sdk/dist/index.mjs
var import_utils3 = __toModule(require_utils2());

// node_modules/zod/lib/index.mjs
init_define_process();
var util;
(function(util2) {
  function assertNever(_x) {
    throw new Error();
  }
  util2.assertNever = assertNever;
  util2.arrayToEnum = (items) => {
    const obj = {};
    for (const item of items) {
      obj[item] = item;
    }
    return obj;
  };
  util2.getValidEnumValues = (obj) => {
    const validKeys = util2.objectKeys(obj).filter((k4) => typeof obj[obj[k4]] !== "number");
    const filtered = {};
    for (const k4 of validKeys) {
      filtered[k4] = obj[k4];
    }
    return util2.objectValues(filtered);
  };
  util2.objectValues = (obj) => {
    return util2.objectKeys(obj).map(function(e) {
      return obj[e];
    });
  };
  util2.objectKeys = typeof Object.keys === "function" ? (obj) => Object.keys(obj) : (object) => {
    const keys = [];
    for (const key2 in object) {
      if (Object.prototype.hasOwnProperty.call(object, key2)) {
        keys.push(key2);
      }
    }
    return keys;
  };
  util2.find = (arr, checker) => {
    for (const item of arr) {
      if (checker(item))
        return item;
    }
    return void 0;
  };
  util2.isInteger = typeof Number.isInteger === "function" ? (val) => Number.isInteger(val) : (val) => typeof val === "number" && isFinite(val) && Math.floor(val) === val;
})(util || (util = {}));
var ZodIssueCode = util.arrayToEnum([
  "invalid_type",
  "custom",
  "invalid_union",
  "invalid_union_discriminator",
  "invalid_enum_value",
  "unrecognized_keys",
  "invalid_arguments",
  "invalid_return_type",
  "invalid_date",
  "invalid_string",
  "too_small",
  "too_big",
  "invalid_intersection_types",
  "not_multiple_of"
]);
var quotelessJson = (obj) => {
  const json = JSON.stringify(obj, null, 2);
  return json.replace(/"([^"]+)":/g, "$1:");
};
var ZodError = class extends Error {
  constructor(issues) {
    super();
    this.issues = [];
    this.format = () => {
      const fieldErrors = { _errors: [] };
      const processError = (error) => {
        for (const issue of error.issues) {
          if (issue.code === "invalid_union") {
            issue.unionErrors.map(processError);
          } else if (issue.code === "invalid_return_type") {
            processError(issue.returnTypeError);
          } else if (issue.code === "invalid_arguments") {
            processError(issue.argumentsError);
          } else if (issue.path.length === 0) {
            fieldErrors._errors.push(issue.message);
          } else {
            let curr = fieldErrors;
            let i2 = 0;
            while (i2 < issue.path.length) {
              const el = issue.path[i2];
              const terminal = i2 === issue.path.length - 1;
              if (!terminal) {
                if (typeof el === "string") {
                  curr[el] = curr[el] || { _errors: [] };
                } else if (typeof el === "number") {
                  const errorArray = [];
                  errorArray._errors = [];
                  curr[el] = curr[el] || errorArray;
                }
              } else {
                curr[el] = curr[el] || { _errors: [] };
                curr[el]._errors.push(issue.message);
              }
              curr = curr[el];
              i2++;
            }
          }
        }
      };
      processError(this);
      return fieldErrors;
    };
    this.addIssue = (sub) => {
      this.issues = [...this.issues, sub];
    };
    this.addIssues = (subs = []) => {
      this.issues = [...this.issues, ...subs];
    };
    const actualProto = new.target.prototype;
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(this, actualProto);
    } else {
      this.__proto__ = actualProto;
    }
    this.name = "ZodError";
    this.issues = issues;
  }
  get errors() {
    return this.issues;
  }
  toString() {
    return this.message;
  }
  get message() {
    return JSON.stringify(this.issues, null, 2);
  }
  get isEmpty() {
    return this.issues.length === 0;
  }
  flatten(mapper = (issue) => issue.message) {
    const fieldErrors = {};
    const formErrors = [];
    for (const sub of this.issues) {
      if (sub.path.length > 0) {
        fieldErrors[sub.path[0]] = fieldErrors[sub.path[0]] || [];
        fieldErrors[sub.path[0]].push(mapper(sub));
      } else {
        formErrors.push(mapper(sub));
      }
    }
    return { formErrors, fieldErrors };
  }
  get formErrors() {
    return this.flatten();
  }
};
ZodError.create = (issues) => {
  const error = new ZodError(issues);
  return error;
};
var defaultErrorMap = (issue, _ctx) => {
  let message;
  switch (issue.code) {
    case ZodIssueCode.invalid_type:
      if (issue.received === "undefined") {
        message = "Required";
      } else {
        message = `Expected ${issue.expected}, received ${issue.received}`;
      }
      break;
    case ZodIssueCode.unrecognized_keys:
      message = `Unrecognized key(s) in object: ${issue.keys.map((k4) => `'${k4}'`).join(", ")}`;
      break;
    case ZodIssueCode.invalid_union:
      message = `Invalid input`;
      break;
    case ZodIssueCode.invalid_union_discriminator:
      message = `Invalid discriminator value. Expected ${issue.options.map((val) => typeof val === "string" ? `'${val}'` : val).join(" | ")}`;
      break;
    case ZodIssueCode.invalid_enum_value:
      message = `Invalid enum value. Expected ${issue.options.map((val) => typeof val === "string" ? `'${val}'` : val).join(" | ")}`;
      break;
    case ZodIssueCode.invalid_arguments:
      message = `Invalid function arguments`;
      break;
    case ZodIssueCode.invalid_return_type:
      message = `Invalid function return type`;
      break;
    case ZodIssueCode.invalid_date:
      message = `Invalid date`;
      break;
    case ZodIssueCode.invalid_string:
      if (issue.validation !== "regex")
        message = `Invalid ${issue.validation}`;
      else
        message = "Invalid";
      break;
    case ZodIssueCode.too_small:
      if (issue.type === "array")
        message = `Array must contain ${issue.inclusive ? `at least` : `more than`} ${issue.minimum} element(s)`;
      else if (issue.type === "string")
        message = `String must contain ${issue.inclusive ? `at least` : `over`} ${issue.minimum} character(s)`;
      else if (issue.type === "number")
        message = `Number must be greater than ${issue.inclusive ? `or equal to ` : ``}${issue.minimum}`;
      else
        message = "Invalid input";
      break;
    case ZodIssueCode.too_big:
      if (issue.type === "array")
        message = `Array must contain ${issue.inclusive ? `at most` : `less than`} ${issue.maximum} element(s)`;
      else if (issue.type === "string")
        message = `String must contain ${issue.inclusive ? `at most` : `under`} ${issue.maximum} character(s)`;
      else if (issue.type === "number")
        message = `Number must be less than ${issue.inclusive ? `or equal to ` : ``}${issue.maximum}`;
      else
        message = "Invalid input";
      break;
    case ZodIssueCode.custom:
      message = `Invalid input`;
      break;
    case ZodIssueCode.invalid_intersection_types:
      message = `Intersection results could not be merged`;
      break;
    case ZodIssueCode.not_multiple_of:
      message = `Number must be a multiple of ${issue.multipleOf}`;
      break;
    default:
      message = _ctx.defaultError;
      util.assertNever(issue);
  }
  return { message };
};
var overrideErrorMap = defaultErrorMap;
var setErrorMap = (map) => {
  overrideErrorMap = map;
};
var ZodParsedType = util.arrayToEnum([
  "string",
  "nan",
  "number",
  "integer",
  "float",
  "boolean",
  "date",
  "bigint",
  "symbol",
  "function",
  "undefined",
  "null",
  "array",
  "object",
  "unknown",
  "promise",
  "void",
  "never",
  "map",
  "set"
]);
var getParsedType = (data) => {
  const t = typeof data;
  switch (t) {
    case "undefined":
      return ZodParsedType.undefined;
    case "string":
      return ZodParsedType.string;
    case "number":
      return isNaN(data) ? ZodParsedType.nan : ZodParsedType.number;
    case "boolean":
      return ZodParsedType.boolean;
    case "function":
      return ZodParsedType.function;
    case "bigint":
      return ZodParsedType.bigint;
    case "object":
      if (Array.isArray(data)) {
        return ZodParsedType.array;
      }
      if (data === null) {
        return ZodParsedType.null;
      }
      if (data.then && typeof data.then === "function" && data.catch && typeof data.catch === "function") {
        return ZodParsedType.promise;
      }
      if (typeof Map !== "undefined" && data instanceof Map) {
        return ZodParsedType.map;
      }
      if (typeof Set !== "undefined" && data instanceof Set) {
        return ZodParsedType.set;
      }
      if (typeof Date !== "undefined" && data instanceof Date) {
        return ZodParsedType.date;
      }
      return ZodParsedType.object;
    default:
      return ZodParsedType.unknown;
  }
};
var makeIssue = (params) => {
  const { data, path, errorMaps, issueData } = params;
  const fullPath = [...path, ...issueData.path || []];
  const fullIssue = {
    ...issueData,
    path: fullPath
  };
  let errorMessage = "";
  const maps = errorMaps.filter((m3) => !!m3).slice().reverse();
  for (const map of maps) {
    errorMessage = map(fullIssue, { data, defaultError: errorMessage }).message;
  }
  return {
    ...issueData,
    path: fullPath,
    message: issueData.message || errorMessage
  };
};
var EMPTY_PATH = [];
function addIssueToContext(ctx, issueData) {
  const issue = makeIssue({
    issueData,
    data: ctx.data,
    path: ctx.path,
    errorMaps: [
      ctx.common.contextualErrorMap,
      ctx.schemaErrorMap,
      overrideErrorMap,
      defaultErrorMap
    ].filter((x4) => !!x4)
  });
  ctx.common.issues.push(issue);
}
var ParseStatus = class {
  constructor() {
    this.value = "valid";
  }
  dirty() {
    if (this.value === "valid")
      this.value = "dirty";
  }
  abort() {
    if (this.value !== "aborted")
      this.value = "aborted";
  }
  static mergeArray(status, results) {
    const arrayValue = [];
    for (const s2 of results) {
      if (s2.status === "aborted")
        return INVALID;
      if (s2.status === "dirty")
        status.dirty();
      arrayValue.push(s2.value);
    }
    return { status: status.value, value: arrayValue };
  }
  static async mergeObjectAsync(status, pairs) {
    const syncPairs = [];
    for (const pair of pairs) {
      syncPairs.push({
        key: await pair.key,
        value: await pair.value
      });
    }
    return ParseStatus.mergeObjectSync(status, syncPairs);
  }
  static mergeObjectSync(status, pairs) {
    const finalObject = {};
    for (const pair of pairs) {
      const { key: key2, value: value2 } = pair;
      if (key2.status === "aborted")
        return INVALID;
      if (value2.status === "aborted")
        return INVALID;
      if (key2.status === "dirty")
        status.dirty();
      if (value2.status === "dirty")
        status.dirty();
      if (typeof value2.value !== "undefined" || pair.alwaysSet) {
        finalObject[key2.value] = value2.value;
      }
    }
    return { status: status.value, value: finalObject };
  }
};
var INVALID = Object.freeze({
  status: "aborted"
});
var DIRTY = (value2) => ({ status: "dirty", value: value2 });
var OK = (value2) => ({ status: "valid", value: value2 });
var isAborted = (x4) => x4.status === "aborted";
var isDirty = (x4) => x4.status === "dirty";
var isValid = (x4) => x4.status === "valid";
var isAsync = (x4) => typeof Promise !== void 0 && x4 instanceof Promise;
var errorUtil;
(function(errorUtil2) {
  errorUtil2.errToObj = (message) => typeof message === "string" ? { message } : message || {};
  errorUtil2.toString = (message) => typeof message === "string" ? message : message === null || message === void 0 ? void 0 : message.message;
})(errorUtil || (errorUtil = {}));
var ParseInputLazyPath = class {
  constructor(parent, value2, path, key2) {
    this.parent = parent;
    this.data = value2;
    this._path = path;
    this._key = key2;
  }
  get path() {
    return this._path.concat(this._key);
  }
};
var handleResult = (ctx, result) => {
  if (isValid(result)) {
    return { success: true, data: result.value };
  } else {
    if (!ctx.common.issues.length) {
      throw new Error("Validation failed but no issues detected.");
    }
    const error = new ZodError(ctx.common.issues);
    return { success: false, error };
  }
};
function processCreateParams(params) {
  if (!params)
    return {};
  const { errorMap, invalid_type_error, required_error, description } = params;
  if (errorMap && (invalid_type_error || required_error)) {
    throw new Error(`Can't use "invalid" or "required" in conjunction with custom error map.`);
  }
  if (errorMap)
    return { errorMap, description };
  const customMap = (iss, ctx) => {
    if (iss.code !== "invalid_type")
      return { message: ctx.defaultError };
    if (typeof ctx.data === "undefined" && required_error)
      return { message: required_error };
    if (params.invalid_type_error)
      return { message: params.invalid_type_error };
    return { message: ctx.defaultError };
  };
  return { errorMap: customMap, description };
}
var ZodType = class {
  constructor(def) {
    this.spa = this.safeParseAsync;
    this.superRefine = this._refinement;
    this._def = def;
    this.parse = this.parse.bind(this);
    this.safeParse = this.safeParse.bind(this);
    this.parseAsync = this.parseAsync.bind(this);
    this.safeParseAsync = this.safeParseAsync.bind(this);
    this.spa = this.spa.bind(this);
    this.refine = this.refine.bind(this);
    this.refinement = this.refinement.bind(this);
    this.superRefine = this.superRefine.bind(this);
    this.optional = this.optional.bind(this);
    this.nullable = this.nullable.bind(this);
    this.nullish = this.nullish.bind(this);
    this.array = this.array.bind(this);
    this.promise = this.promise.bind(this);
    this.or = this.or.bind(this);
    this.and = this.and.bind(this);
    this.transform = this.transform.bind(this);
    this.default = this.default.bind(this);
    this.describe = this.describe.bind(this);
    this.isNullable = this.isNullable.bind(this);
    this.isOptional = this.isOptional.bind(this);
  }
  get description() {
    return this._def.description;
  }
  _getType(input) {
    return getParsedType(input.data);
  }
  _getOrReturnCtx(input, ctx) {
    return ctx || {
      common: input.parent.common,
      data: input.data,
      parsedType: getParsedType(input.data),
      schemaErrorMap: this._def.errorMap,
      path: input.path,
      parent: input.parent
    };
  }
  _processInputParams(input) {
    return {
      status: new ParseStatus(),
      ctx: {
        common: input.parent.common,
        data: input.data,
        parsedType: getParsedType(input.data),
        schemaErrorMap: this._def.errorMap,
        path: input.path,
        parent: input.parent
      }
    };
  }
  _parseSync(input) {
    const result = this._parse(input);
    if (isAsync(result)) {
      throw new Error("Synchronous parse encountered promise.");
    }
    return result;
  }
  _parseAsync(input) {
    const result = this._parse(input);
    return Promise.resolve(result);
  }
  parse(data, params) {
    const result = this.safeParse(data, params);
    if (result.success)
      return result.data;
    throw result.error;
  }
  safeParse(data, params) {
    var _a;
    const ctx = {
      common: {
        issues: [],
        async: (_a = params === null || params === void 0 ? void 0 : params.async) !== null && _a !== void 0 ? _a : false,
        typeCache: typeof Map !== "undefined" ? new Map() : void 0,
        contextualErrorMap: params === null || params === void 0 ? void 0 : params.errorMap
      },
      path: (params === null || params === void 0 ? void 0 : params.path) || [],
      schemaErrorMap: this._def.errorMap,
      parent: null,
      data,
      parsedType: getParsedType(data)
    };
    const result = this._parseSync({ data, path: ctx.path, parent: ctx });
    return handleResult(ctx, result);
  }
  async parseAsync(data, params) {
    const result = await this.safeParseAsync(data, params);
    if (result.success)
      return result.data;
    throw result.error;
  }
  async safeParseAsync(data, params) {
    const ctx = {
      common: {
        issues: [],
        contextualErrorMap: params === null || params === void 0 ? void 0 : params.errorMap,
        async: true,
        typeCache: typeof Map !== "undefined" ? new Map() : void 0
      },
      path: (params === null || params === void 0 ? void 0 : params.path) || [],
      schemaErrorMap: this._def.errorMap,
      parent: null,
      data,
      parsedType: getParsedType(data)
    };
    const maybeAsyncResult = this._parse({ data, path: [], parent: ctx });
    const result = await (isAsync(maybeAsyncResult) ? maybeAsyncResult : Promise.resolve(maybeAsyncResult));
    return handleResult(ctx, result);
  }
  refine(check, message) {
    const getIssueProperties = (val) => {
      if (typeof message === "string" || typeof message === "undefined") {
        return { message };
      } else if (typeof message === "function") {
        return message(val);
      } else {
        return message;
      }
    };
    return this._refinement((val, ctx) => {
      const result = check(val);
      const setError = () => ctx.addIssue({
        code: ZodIssueCode.custom,
        ...getIssueProperties(val)
      });
      if (typeof Promise !== "undefined" && result instanceof Promise) {
        return result.then((data) => {
          if (!data) {
            setError();
            return false;
          } else {
            return true;
          }
        });
      }
      if (!result) {
        setError();
        return false;
      } else {
        return true;
      }
    });
  }
  refinement(check, refinementData) {
    return this._refinement((val, ctx) => {
      if (!check(val)) {
        ctx.addIssue(typeof refinementData === "function" ? refinementData(val, ctx) : refinementData);
        return false;
      } else {
        return true;
      }
    });
  }
  _refinement(refinement) {
    return new ZodEffects({
      schema: this,
      typeName: ZodFirstPartyTypeKind.ZodEffects,
      effect: { type: "refinement", refinement }
    });
  }
  optional() {
    return ZodOptional.create(this);
  }
  nullable() {
    return ZodNullable.create(this);
  }
  nullish() {
    return this.optional().nullable();
  }
  array() {
    return ZodArray.create(this);
  }
  promise() {
    return ZodPromise.create(this);
  }
  or(option) {
    return ZodUnion.create([this, option]);
  }
  and(incoming) {
    return ZodIntersection.create(this, incoming);
  }
  transform(transform) {
    return new ZodEffects({
      schema: this,
      typeName: ZodFirstPartyTypeKind.ZodEffects,
      effect: { type: "transform", transform }
    });
  }
  default(def) {
    const defaultValueFunc = typeof def === "function" ? def : () => def;
    return new ZodDefault({
      innerType: this,
      defaultValue: defaultValueFunc,
      typeName: ZodFirstPartyTypeKind.ZodDefault
    });
  }
  describe(description) {
    const This = this.constructor;
    return new This({
      ...this._def,
      description
    });
  }
  isOptional() {
    return this.safeParse(void 0).success;
  }
  isNullable() {
    return this.safeParse(null).success;
  }
};
var cuidRegex = /^c[^\s-]{8,}$/i;
var uuidRegex = /^([a-f0-9]{8}-[a-f0-9]{4}-[1-5][a-f0-9]{3}-[a-f0-9]{4}-[a-f0-9]{12}|00000000-0000-0000-0000-000000000000)$/i;
var emailRegex = /^(([^<>()[\]\.,;:\s@\"]+(\.[^<>()[\]\.,;:\s@\"]+)*)|(\".+\"))@(([^<>()[\]\.,;:\s@\"]+\.)+[^<>()[\]\.,;:\s@\"]{2,})$/i;
var ZodString = class extends ZodType {
  constructor() {
    super(...arguments);
    this._regex = (regex, validation, message) => this.refinement((data) => regex.test(data), {
      validation,
      code: ZodIssueCode.invalid_string,
      ...errorUtil.errToObj(message)
    });
    this.nonempty = (message) => this.min(1, errorUtil.errToObj(message));
  }
  _parse(input) {
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.string) {
      const ctx2 = this._getOrReturnCtx(input);
      addIssueToContext(ctx2, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.string,
        received: ctx2.parsedType
      });
      return INVALID;
    }
    const status = new ParseStatus();
    let ctx = void 0;
    for (const check of this._def.checks) {
      if (check.kind === "min") {
        if (input.data.length < check.value) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_small,
            minimum: check.value,
            type: "string",
            inclusive: true,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "max") {
        if (input.data.length > check.value) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_big,
            maximum: check.value,
            type: "string",
            inclusive: true,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "email") {
        if (!emailRegex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "email",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "uuid") {
        if (!uuidRegex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "uuid",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "cuid") {
        if (!cuidRegex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "cuid",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "url") {
        try {
          new URL(input.data);
        } catch (_a) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "url",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "regex") {
        check.regex.lastIndex = 0;
        const testResult = check.regex.test(input.data);
        if (!testResult) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "regex",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      }
    }
    return { status: status.value, value: input.data };
  }
  _addCheck(check) {
    return new ZodString({
      ...this._def,
      checks: [...this._def.checks, check]
    });
  }
  email(message) {
    return this._addCheck({ kind: "email", ...errorUtil.errToObj(message) });
  }
  url(message) {
    return this._addCheck({ kind: "url", ...errorUtil.errToObj(message) });
  }
  uuid(message) {
    return this._addCheck({ kind: "uuid", ...errorUtil.errToObj(message) });
  }
  cuid(message) {
    return this._addCheck({ kind: "cuid", ...errorUtil.errToObj(message) });
  }
  regex(regex, message) {
    return this._addCheck({
      kind: "regex",
      regex,
      ...errorUtil.errToObj(message)
    });
  }
  min(minLength, message) {
    return this._addCheck({
      kind: "min",
      value: minLength,
      ...errorUtil.errToObj(message)
    });
  }
  max(maxLength, message) {
    return this._addCheck({
      kind: "max",
      value: maxLength,
      ...errorUtil.errToObj(message)
    });
  }
  length(len, message) {
    return this.min(len, message).max(len, message);
  }
  get isEmail() {
    return !!this._def.checks.find((ch) => ch.kind === "email");
  }
  get isURL() {
    return !!this._def.checks.find((ch) => ch.kind === "url");
  }
  get isUUID() {
    return !!this._def.checks.find((ch) => ch.kind === "uuid");
  }
  get isCUID() {
    return !!this._def.checks.find((ch) => ch.kind === "cuid");
  }
  get minLength() {
    let min = -Infinity;
    this._def.checks.map((ch) => {
      if (ch.kind === "min") {
        if (min === null || ch.value > min) {
          min = ch.value;
        }
      }
    });
    return min;
  }
  get maxLength() {
    let max = null;
    this._def.checks.map((ch) => {
      if (ch.kind === "max") {
        if (max === null || ch.value < max) {
          max = ch.value;
        }
      }
    });
    return max;
  }
};
ZodString.create = (params) => {
  return new ZodString({
    checks: [],
    typeName: ZodFirstPartyTypeKind.ZodString,
    ...processCreateParams(params)
  });
};
function floatSafeRemainder(val, step) {
  const valDecCount = (val.toString().split(".")[1] || "").length;
  const stepDecCount = (step.toString().split(".")[1] || "").length;
  const decCount = valDecCount > stepDecCount ? valDecCount : stepDecCount;
  const valInt = parseInt(val.toFixed(decCount).replace(".", ""));
  const stepInt = parseInt(step.toFixed(decCount).replace(".", ""));
  return valInt % stepInt / Math.pow(10, decCount);
}
var ZodNumber = class extends ZodType {
  constructor() {
    super(...arguments);
    this.min = this.gte;
    this.max = this.lte;
    this.step = this.multipleOf;
  }
  _parse(input) {
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.number) {
      const ctx2 = this._getOrReturnCtx(input);
      addIssueToContext(ctx2, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.number,
        received: ctx2.parsedType
      });
      return INVALID;
    }
    let ctx = void 0;
    const status = new ParseStatus();
    for (const check of this._def.checks) {
      if (check.kind === "int") {
        if (!util.isInteger(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_type,
            expected: "integer",
            received: "float",
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "min") {
        const tooSmall = check.inclusive ? input.data < check.value : input.data <= check.value;
        if (tooSmall) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_small,
            minimum: check.value,
            type: "number",
            inclusive: check.inclusive,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "max") {
        const tooBig = check.inclusive ? input.data > check.value : input.data >= check.value;
        if (tooBig) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_big,
            maximum: check.value,
            type: "number",
            inclusive: check.inclusive,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "multipleOf") {
        if (floatSafeRemainder(input.data, check.value) !== 0) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.not_multiple_of,
            multipleOf: check.value,
            message: check.message
          });
          status.dirty();
        }
      } else {
        util.assertNever(check);
      }
    }
    return { status: status.value, value: input.data };
  }
  gte(value2, message) {
    return this.setLimit("min", value2, true, errorUtil.toString(message));
  }
  gt(value2, message) {
    return this.setLimit("min", value2, false, errorUtil.toString(message));
  }
  lte(value2, message) {
    return this.setLimit("max", value2, true, errorUtil.toString(message));
  }
  lt(value2, message) {
    return this.setLimit("max", value2, false, errorUtil.toString(message));
  }
  setLimit(kind, value2, inclusive, message) {
    return new ZodNumber({
      ...this._def,
      checks: [
        ...this._def.checks,
        {
          kind,
          value: value2,
          inclusive,
          message: errorUtil.toString(message)
        }
      ]
    });
  }
  _addCheck(check) {
    return new ZodNumber({
      ...this._def,
      checks: [...this._def.checks, check]
    });
  }
  int(message) {
    return this._addCheck({
      kind: "int",
      message: errorUtil.toString(message)
    });
  }
  positive(message) {
    return this._addCheck({
      kind: "min",
      value: 0,
      inclusive: false,
      message: errorUtil.toString(message)
    });
  }
  negative(message) {
    return this._addCheck({
      kind: "max",
      value: 0,
      inclusive: false,
      message: errorUtil.toString(message)
    });
  }
  nonpositive(message) {
    return this._addCheck({
      kind: "max",
      value: 0,
      inclusive: true,
      message: errorUtil.toString(message)
    });
  }
  nonnegative(message) {
    return this._addCheck({
      kind: "min",
      value: 0,
      inclusive: true,
      message: errorUtil.toString(message)
    });
  }
  multipleOf(value2, message) {
    return this._addCheck({
      kind: "multipleOf",
      value: value2,
      message: errorUtil.toString(message)
    });
  }
  get minValue() {
    let min = null;
    for (const ch of this._def.checks) {
      if (ch.kind === "min") {
        if (min === null || ch.value > min)
          min = ch.value;
      }
    }
    return min;
  }
  get maxValue() {
    let max = null;
    for (const ch of this._def.checks) {
      if (ch.kind === "max") {
        if (max === null || ch.value < max)
          max = ch.value;
      }
    }
    return max;
  }
  get isInt() {
    return !!this._def.checks.find((ch) => ch.kind === "int");
  }
};
ZodNumber.create = (params) => {
  return new ZodNumber({
    checks: [],
    typeName: ZodFirstPartyTypeKind.ZodNumber,
    ...processCreateParams(params)
  });
};
var ZodBigInt = class extends ZodType {
  _parse(input) {
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.bigint) {
      const ctx = this._getOrReturnCtx(input);
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.bigint,
        received: ctx.parsedType
      });
      return INVALID;
    }
    return OK(input.data);
  }
};
ZodBigInt.create = (params) => {
  return new ZodBigInt({
    typeName: ZodFirstPartyTypeKind.ZodBigInt,
    ...processCreateParams(params)
  });
};
var ZodBoolean = class extends ZodType {
  _parse(input) {
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.boolean) {
      const ctx = this._getOrReturnCtx(input);
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.boolean,
        received: ctx.parsedType
      });
      return INVALID;
    }
    return OK(input.data);
  }
};
ZodBoolean.create = (params) => {
  return new ZodBoolean({
    typeName: ZodFirstPartyTypeKind.ZodBoolean,
    ...processCreateParams(params)
  });
};
var ZodDate = class extends ZodType {
  _parse(input) {
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.date) {
      const ctx = this._getOrReturnCtx(input);
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.date,
        received: ctx.parsedType
      });
      return INVALID;
    }
    if (isNaN(input.data.getTime())) {
      const ctx = this._getOrReturnCtx(input);
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_date
      });
      return INVALID;
    }
    return {
      status: "valid",
      value: new Date(input.data.getTime())
    };
  }
};
ZodDate.create = (params) => {
  return new ZodDate({
    typeName: ZodFirstPartyTypeKind.ZodDate,
    ...processCreateParams(params)
  });
};
var ZodUndefined = class extends ZodType {
  _parse(input) {
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.undefined) {
      const ctx = this._getOrReturnCtx(input);
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.undefined,
        received: ctx.parsedType
      });
      return INVALID;
    }
    return OK(input.data);
  }
};
ZodUndefined.create = (params) => {
  return new ZodUndefined({
    typeName: ZodFirstPartyTypeKind.ZodUndefined,
    ...processCreateParams(params)
  });
};
var ZodNull = class extends ZodType {
  _parse(input) {
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.null) {
      const ctx = this._getOrReturnCtx(input);
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.null,
        received: ctx.parsedType
      });
      return INVALID;
    }
    return OK(input.data);
  }
};
ZodNull.create = (params) => {
  return new ZodNull({
    typeName: ZodFirstPartyTypeKind.ZodNull,
    ...processCreateParams(params)
  });
};
var ZodAny = class extends ZodType {
  constructor() {
    super(...arguments);
    this._any = true;
  }
  _parse(input) {
    return OK(input.data);
  }
};
ZodAny.create = (params) => {
  return new ZodAny({
    typeName: ZodFirstPartyTypeKind.ZodAny,
    ...processCreateParams(params)
  });
};
var ZodUnknown = class extends ZodType {
  constructor() {
    super(...arguments);
    this._unknown = true;
  }
  _parse(input) {
    return OK(input.data);
  }
};
ZodUnknown.create = (params) => {
  return new ZodUnknown({
    typeName: ZodFirstPartyTypeKind.ZodUnknown,
    ...processCreateParams(params)
  });
};
var ZodNever = class extends ZodType {
  _parse(input) {
    const ctx = this._getOrReturnCtx(input);
    addIssueToContext(ctx, {
      code: ZodIssueCode.invalid_type,
      expected: ZodParsedType.never,
      received: ctx.parsedType
    });
    return INVALID;
  }
};
ZodNever.create = (params) => {
  return new ZodNever({
    typeName: ZodFirstPartyTypeKind.ZodNever,
    ...processCreateParams(params)
  });
};
var ZodVoid = class extends ZodType {
  _parse(input) {
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.undefined) {
      const ctx = this._getOrReturnCtx(input);
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.void,
        received: ctx.parsedType
      });
      return INVALID;
    }
    return OK(input.data);
  }
};
ZodVoid.create = (params) => {
  return new ZodVoid({
    typeName: ZodFirstPartyTypeKind.ZodVoid,
    ...processCreateParams(params)
  });
};
var ZodArray = class extends ZodType {
  _parse(input) {
    const { ctx, status } = this._processInputParams(input);
    const def = this._def;
    if (ctx.parsedType !== ZodParsedType.array) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.array,
        received: ctx.parsedType
      });
      return INVALID;
    }
    if (def.minLength !== null) {
      if (ctx.data.length < def.minLength.value) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.too_small,
          minimum: def.minLength.value,
          type: "array",
          inclusive: true,
          message: def.minLength.message
        });
        status.dirty();
      }
    }
    if (def.maxLength !== null) {
      if (ctx.data.length > def.maxLength.value) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.too_big,
          maximum: def.maxLength.value,
          type: "array",
          inclusive: true,
          message: def.maxLength.message
        });
        status.dirty();
      }
    }
    if (ctx.common.async) {
      return Promise.all(ctx.data.map((item, i2) => {
        return def.type._parseAsync(new ParseInputLazyPath(ctx, item, ctx.path, i2));
      })).then((result2) => {
        return ParseStatus.mergeArray(status, result2);
      });
    }
    const result = ctx.data.map((item, i2) => {
      return def.type._parseSync(new ParseInputLazyPath(ctx, item, ctx.path, i2));
    });
    return ParseStatus.mergeArray(status, result);
  }
  get element() {
    return this._def.type;
  }
  min(minLength, message) {
    return new ZodArray({
      ...this._def,
      minLength: { value: minLength, message: errorUtil.toString(message) }
    });
  }
  max(maxLength, message) {
    return new ZodArray({
      ...this._def,
      maxLength: { value: maxLength, message: errorUtil.toString(message) }
    });
  }
  length(len, message) {
    return this.min(len, message).max(len, message);
  }
  nonempty(message) {
    return this.min(1, message);
  }
};
ZodArray.create = (schema, params) => {
  return new ZodArray({
    type: schema,
    minLength: null,
    maxLength: null,
    typeName: ZodFirstPartyTypeKind.ZodArray,
    ...processCreateParams(params)
  });
};
var objectUtil;
(function(objectUtil2) {
  objectUtil2.mergeShapes = (first, second) => {
    return {
      ...first,
      ...second
    };
  };
})(objectUtil || (objectUtil = {}));
var AugmentFactory = (def) => (augmentation) => {
  return new ZodObject({
    ...def,
    shape: () => ({
      ...def.shape(),
      ...augmentation
    })
  });
};
function deepPartialify(schema) {
  if (schema instanceof ZodObject) {
    const newShape = {};
    for (const key2 in schema.shape) {
      const fieldSchema = schema.shape[key2];
      newShape[key2] = ZodOptional.create(deepPartialify(fieldSchema));
    }
    return new ZodObject({
      ...schema._def,
      shape: () => newShape
    });
  } else if (schema instanceof ZodArray) {
    return ZodArray.create(deepPartialify(schema.element));
  } else if (schema instanceof ZodOptional) {
    return ZodOptional.create(deepPartialify(schema.unwrap()));
  } else if (schema instanceof ZodNullable) {
    return ZodNullable.create(deepPartialify(schema.unwrap()));
  } else if (schema instanceof ZodTuple) {
    return ZodTuple.create(schema.items.map((item) => deepPartialify(item)));
  } else {
    return schema;
  }
}
var ZodObject = class extends ZodType {
  constructor() {
    super(...arguments);
    this._cached = null;
    this.nonstrict = this.passthrough;
    this.augment = AugmentFactory(this._def);
    this.extend = AugmentFactory(this._def);
  }
  _getCached() {
    if (this._cached !== null)
      return this._cached;
    const shape = this._def.shape();
    const keys = util.objectKeys(shape);
    return this._cached = { shape, keys };
  }
  _parse(input) {
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.object) {
      const ctx2 = this._getOrReturnCtx(input);
      addIssueToContext(ctx2, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.object,
        received: ctx2.parsedType
      });
      return INVALID;
    }
    const { status, ctx } = this._processInputParams(input);
    const { shape, keys: shapeKeys } = this._getCached();
    const dataKeys = util.objectKeys(ctx.data);
    const extraKeys = dataKeys.filter((k4) => !shapeKeys.includes(k4));
    const pairs = [];
    for (const key2 of shapeKeys) {
      const keyValidator = shape[key2];
      const value2 = ctx.data[key2];
      pairs.push({
        key: { status: "valid", value: key2 },
        value: keyValidator._parse(new ParseInputLazyPath(ctx, value2, ctx.path, key2)),
        alwaysSet: key2 in ctx.data
      });
    }
    if (this._def.catchall instanceof ZodNever) {
      const unknownKeys = this._def.unknownKeys;
      if (unknownKeys === "passthrough") {
        for (const key2 of extraKeys) {
          pairs.push({
            key: { status: "valid", value: key2 },
            value: { status: "valid", value: ctx.data[key2] }
          });
        }
      } else if (unknownKeys === "strict") {
        if (extraKeys.length > 0) {
          addIssueToContext(ctx, {
            code: ZodIssueCode.unrecognized_keys,
            keys: extraKeys
          });
          status.dirty();
        }
      } else if (unknownKeys === "strip")
        ;
      else {
        throw new Error(`Internal ZodObject error: invalid unknownKeys value.`);
      }
    } else {
      const catchall = this._def.catchall;
      for (const key2 of extraKeys) {
        const value2 = ctx.data[key2];
        pairs.push({
          key: { status: "valid", value: key2 },
          value: catchall._parse(new ParseInputLazyPath(ctx, value2, ctx.path, key2)),
          alwaysSet: key2 in ctx.data
        });
      }
    }
    if (ctx.common.async) {
      return Promise.resolve().then(async () => {
        const syncPairs = [];
        for (const pair of pairs) {
          const key2 = await pair.key;
          syncPairs.push({
            key: key2,
            value: await pair.value,
            alwaysSet: pair.alwaysSet
          });
        }
        return syncPairs;
      }).then((syncPairs) => {
        return ParseStatus.mergeObjectSync(status, syncPairs);
      });
    } else {
      return ParseStatus.mergeObjectSync(status, pairs);
    }
  }
  get shape() {
    return this._def.shape();
  }
  strict(message) {
    errorUtil.errToObj;
    return new ZodObject({
      ...this._def,
      unknownKeys: "strict",
      ...message !== void 0 ? {
        errorMap: (issue, ctx) => {
          var _a, _b, _c, _d;
          const defaultError = (_c = (_b = (_a = this._def).errorMap) === null || _b === void 0 ? void 0 : _b.call(_a, issue, ctx).message) !== null && _c !== void 0 ? _c : ctx.defaultError;
          if (issue.code === "unrecognized_keys")
            return {
              message: (_d = errorUtil.errToObj(message).message) !== null && _d !== void 0 ? _d : defaultError
            };
          return {
            message: defaultError
          };
        }
      } : {}
    });
  }
  strip() {
    return new ZodObject({
      ...this._def,
      unknownKeys: "strip"
    });
  }
  passthrough() {
    return new ZodObject({
      ...this._def,
      unknownKeys: "passthrough"
    });
  }
  setKey(key2, schema) {
    return this.augment({ [key2]: schema });
  }
  merge(merging) {
    const merged = new ZodObject({
      unknownKeys: merging._def.unknownKeys,
      catchall: merging._def.catchall,
      shape: () => objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),
      typeName: ZodFirstPartyTypeKind.ZodObject
    });
    return merged;
  }
  catchall(index) {
    return new ZodObject({
      ...this._def,
      catchall: index
    });
  }
  pick(mask) {
    const shape = {};
    util.objectKeys(mask).map((key2) => {
      shape[key2] = this.shape[key2];
    });
    return new ZodObject({
      ...this._def,
      shape: () => shape
    });
  }
  omit(mask) {
    const shape = {};
    util.objectKeys(this.shape).map((key2) => {
      if (util.objectKeys(mask).indexOf(key2) === -1) {
        shape[key2] = this.shape[key2];
      }
    });
    return new ZodObject({
      ...this._def,
      shape: () => shape
    });
  }
  deepPartial() {
    return deepPartialify(this);
  }
  partial(mask) {
    const newShape = {};
    if (mask) {
      util.objectKeys(this.shape).map((key2) => {
        if (util.objectKeys(mask).indexOf(key2) === -1) {
          newShape[key2] = this.shape[key2];
        } else {
          newShape[key2] = this.shape[key2].optional();
        }
      });
      return new ZodObject({
        ...this._def,
        shape: () => newShape
      });
    } else {
      for (const key2 in this.shape) {
        const fieldSchema = this.shape[key2];
        newShape[key2] = fieldSchema.optional();
      }
    }
    return new ZodObject({
      ...this._def,
      shape: () => newShape
    });
  }
  required() {
    const newShape = {};
    for (const key2 in this.shape) {
      const fieldSchema = this.shape[key2];
      let newField = fieldSchema;
      while (newField instanceof ZodOptional) {
        newField = newField._def.innerType;
      }
      newShape[key2] = newField;
    }
    return new ZodObject({
      ...this._def,
      shape: () => newShape
    });
  }
};
ZodObject.create = (shape, params) => {
  return new ZodObject({
    shape: () => shape,
    unknownKeys: "strip",
    catchall: ZodNever.create(),
    typeName: ZodFirstPartyTypeKind.ZodObject,
    ...processCreateParams(params)
  });
};
ZodObject.strictCreate = (shape, params) => {
  return new ZodObject({
    shape: () => shape,
    unknownKeys: "strict",
    catchall: ZodNever.create(),
    typeName: ZodFirstPartyTypeKind.ZodObject,
    ...processCreateParams(params)
  });
};
ZodObject.lazycreate = (shape, params) => {
  return new ZodObject({
    shape,
    unknownKeys: "strip",
    catchall: ZodNever.create(),
    typeName: ZodFirstPartyTypeKind.ZodObject,
    ...processCreateParams(params)
  });
};
var ZodUnion = class extends ZodType {
  _parse(input) {
    const { ctx } = this._processInputParams(input);
    const options = this._def.options;
    function handleResults(results) {
      for (const result of results) {
        if (result.result.status === "valid") {
          return result.result;
        }
      }
      for (const result of results) {
        if (result.result.status === "dirty") {
          ctx.common.issues.push(...result.ctx.common.issues);
          return result.result;
        }
      }
      const unionErrors = results.map((result) => new ZodError(result.ctx.common.issues));
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_union,
        unionErrors
      });
      return INVALID;
    }
    if (ctx.common.async) {
      return Promise.all(options.map(async (option) => {
        const childCtx = {
          ...ctx,
          common: {
            ...ctx.common,
            issues: []
          },
          parent: null
        };
        return {
          result: await option._parseAsync({
            data: ctx.data,
            path: ctx.path,
            parent: childCtx
          }),
          ctx: childCtx
        };
      })).then(handleResults);
    } else {
      let dirty = void 0;
      const issues = [];
      for (const option of options) {
        const childCtx = {
          ...ctx,
          common: {
            ...ctx.common,
            issues: []
          },
          parent: null
        };
        const result = option._parseSync({
          data: ctx.data,
          path: ctx.path,
          parent: childCtx
        });
        if (result.status === "valid") {
          return result;
        } else if (result.status === "dirty" && !dirty) {
          dirty = { result, ctx: childCtx };
        }
        if (childCtx.common.issues.length) {
          issues.push(childCtx.common.issues);
        }
      }
      if (dirty) {
        ctx.common.issues.push(...dirty.ctx.common.issues);
        return dirty.result;
      }
      const unionErrors = issues.map((issues2) => new ZodError(issues2));
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_union,
        unionErrors
      });
      return INVALID;
    }
  }
  get options() {
    return this._def.options;
  }
};
ZodUnion.create = (types, params) => {
  return new ZodUnion({
    options: types,
    typeName: ZodFirstPartyTypeKind.ZodUnion,
    ...processCreateParams(params)
  });
};
var ZodDiscriminatedUnion = class extends ZodType {
  _parse(input) {
    const { ctx } = this._processInputParams(input);
    if (ctx.parsedType !== ZodParsedType.object) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.object,
        received: ctx.parsedType
      });
      return INVALID;
    }
    const discriminator = this.discriminator;
    const discriminatorValue = ctx.data[discriminator];
    const option = this.options.get(discriminatorValue);
    if (!option) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_union_discriminator,
        options: this.validDiscriminatorValues,
        path: [discriminator]
      });
      return INVALID;
    }
    if (ctx.common.async) {
      return option._parseAsync({
        data: ctx.data,
        path: ctx.path,
        parent: ctx
      });
    } else {
      return option._parseSync({
        data: ctx.data,
        path: ctx.path,
        parent: ctx
      });
    }
  }
  get discriminator() {
    return this._def.discriminator;
  }
  get validDiscriminatorValues() {
    return Array.from(this.options.keys());
  }
  get options() {
    return this._def.options;
  }
  static create(discriminator, types, params) {
    const options = new Map();
    try {
      types.forEach((type) => {
        const discriminatorValue = type.shape[discriminator].value;
        options.set(discriminatorValue, type);
      });
    } catch (e) {
      throw new Error("The discriminator value could not be extracted from all the provided schemas");
    }
    if (options.size !== types.length) {
      throw new Error("Some of the discriminator values are not unique");
    }
    return new ZodDiscriminatedUnion({
      typeName: ZodFirstPartyTypeKind.ZodDiscriminatedUnion,
      discriminator,
      options,
      ...processCreateParams(params)
    });
  }
};
function mergeValues(a, b2) {
  const aType = getParsedType(a);
  const bType = getParsedType(b2);
  if (a === b2) {
    return { valid: true, data: a };
  } else if (aType === ZodParsedType.object && bType === ZodParsedType.object) {
    const bKeys = util.objectKeys(b2);
    const sharedKeys = util.objectKeys(a).filter((key2) => bKeys.indexOf(key2) !== -1);
    const newObj = { ...a, ...b2 };
    for (const key2 of sharedKeys) {
      const sharedValue = mergeValues(a[key2], b2[key2]);
      if (!sharedValue.valid) {
        return { valid: false };
      }
      newObj[key2] = sharedValue.data;
    }
    return { valid: true, data: newObj };
  } else if (aType === ZodParsedType.array && bType === ZodParsedType.array) {
    if (a.length !== b2.length) {
      return { valid: false };
    }
    const newArray = [];
    for (let index = 0; index < a.length; index++) {
      const itemA = a[index];
      const itemB = b2[index];
      const sharedValue = mergeValues(itemA, itemB);
      if (!sharedValue.valid) {
        return { valid: false };
      }
      newArray.push(sharedValue.data);
    }
    return { valid: true, data: newArray };
  } else if (aType === ZodParsedType.date && bType === ZodParsedType.date && +a === +b2) {
    return { valid: true, data: a };
  } else {
    return { valid: false };
  }
}
var ZodIntersection = class extends ZodType {
  _parse(input) {
    const { status, ctx } = this._processInputParams(input);
    const handleParsed = (parsedLeft, parsedRight) => {
      if (isAborted(parsedLeft) || isAborted(parsedRight)) {
        return INVALID;
      }
      const merged = mergeValues(parsedLeft.value, parsedRight.value);
      if (!merged.valid) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.invalid_intersection_types
        });
        return INVALID;
      }
      if (isDirty(parsedLeft) || isDirty(parsedRight)) {
        status.dirty();
      }
      return { status: status.value, value: merged.data };
    };
    if (ctx.common.async) {
      return Promise.all([
        this._def.left._parseAsync({
          data: ctx.data,
          path: ctx.path,
          parent: ctx
        }),
        this._def.right._parseAsync({
          data: ctx.data,
          path: ctx.path,
          parent: ctx
        })
      ]).then(([left, right]) => handleParsed(left, right));
    } else {
      return handleParsed(this._def.left._parseSync({
        data: ctx.data,
        path: ctx.path,
        parent: ctx
      }), this._def.right._parseSync({
        data: ctx.data,
        path: ctx.path,
        parent: ctx
      }));
    }
  }
};
ZodIntersection.create = (left, right, params) => {
  return new ZodIntersection({
    left,
    right,
    typeName: ZodFirstPartyTypeKind.ZodIntersection,
    ...processCreateParams(params)
  });
};
var ZodTuple = class extends ZodType {
  _parse(input) {
    const { status, ctx } = this._processInputParams(input);
    if (ctx.parsedType !== ZodParsedType.array) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.array,
        received: ctx.parsedType
      });
      return INVALID;
    }
    if (ctx.data.length < this._def.items.length) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.too_small,
        minimum: this._def.items.length,
        inclusive: true,
        type: "array"
      });
      return INVALID;
    }
    const rest = this._def.rest;
    if (!rest && ctx.data.length > this._def.items.length) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.too_big,
        maximum: this._def.items.length,
        inclusive: true,
        type: "array"
      });
      status.dirty();
    }
    const items = ctx.data.map((item, itemIndex) => {
      const schema = this._def.items[itemIndex] || this._def.rest;
      if (!schema)
        return null;
      return schema._parse(new ParseInputLazyPath(ctx, item, ctx.path, itemIndex));
    }).filter((x4) => !!x4);
    if (ctx.common.async) {
      return Promise.all(items).then((results) => {
        return ParseStatus.mergeArray(status, results);
      });
    } else {
      return ParseStatus.mergeArray(status, items);
    }
  }
  get items() {
    return this._def.items;
  }
  rest(rest) {
    return new ZodTuple({
      ...this._def,
      rest
    });
  }
};
ZodTuple.create = (schemas, params) => {
  return new ZodTuple({
    items: schemas,
    typeName: ZodFirstPartyTypeKind.ZodTuple,
    rest: null,
    ...processCreateParams(params)
  });
};
var ZodRecord = class extends ZodType {
  get keySchema() {
    return this._def.keyType;
  }
  get valueSchema() {
    return this._def.valueType;
  }
  _parse(input) {
    const { status, ctx } = this._processInputParams(input);
    if (ctx.parsedType !== ZodParsedType.object) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.object,
        received: ctx.parsedType
      });
      return INVALID;
    }
    const pairs = [];
    const keyType = this._def.keyType;
    const valueType = this._def.valueType;
    for (const key2 in ctx.data) {
      pairs.push({
        key: keyType._parse(new ParseInputLazyPath(ctx, key2, ctx.path, key2)),
        value: valueType._parse(new ParseInputLazyPath(ctx, ctx.data[key2], ctx.path, key2))
      });
    }
    if (ctx.common.async) {
      return ParseStatus.mergeObjectAsync(status, pairs);
    } else {
      return ParseStatus.mergeObjectSync(status, pairs);
    }
  }
  get element() {
    return this._def.valueType;
  }
  static create(first, second, third) {
    if (second instanceof ZodType) {
      return new ZodRecord({
        keyType: first,
        valueType: second,
        typeName: ZodFirstPartyTypeKind.ZodRecord,
        ...processCreateParams(third)
      });
    }
    return new ZodRecord({
      keyType: ZodString.create(),
      valueType: first,
      typeName: ZodFirstPartyTypeKind.ZodRecord,
      ...processCreateParams(second)
    });
  }
};
var ZodMap = class extends ZodType {
  _parse(input) {
    const { status, ctx } = this._processInputParams(input);
    if (ctx.parsedType !== ZodParsedType.map) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.map,
        received: ctx.parsedType
      });
      return INVALID;
    }
    const keyType = this._def.keyType;
    const valueType = this._def.valueType;
    const pairs = [...ctx.data.entries()].map(([key2, value2], index) => {
      return {
        key: keyType._parse(new ParseInputLazyPath(ctx, key2, ctx.path, [index, "key"])),
        value: valueType._parse(new ParseInputLazyPath(ctx, value2, ctx.path, [index, "value"]))
      };
    });
    if (ctx.common.async) {
      const finalMap = new Map();
      return Promise.resolve().then(async () => {
        for (const pair of pairs) {
          const key2 = await pair.key;
          const value2 = await pair.value;
          if (key2.status === "aborted" || value2.status === "aborted") {
            return INVALID;
          }
          if (key2.status === "dirty" || value2.status === "dirty") {
            status.dirty();
          }
          finalMap.set(key2.value, value2.value);
        }
        return { status: status.value, value: finalMap };
      });
    } else {
      const finalMap = new Map();
      for (const pair of pairs) {
        const key2 = pair.key;
        const value2 = pair.value;
        if (key2.status === "aborted" || value2.status === "aborted") {
          return INVALID;
        }
        if (key2.status === "dirty" || value2.status === "dirty") {
          status.dirty();
        }
        finalMap.set(key2.value, value2.value);
      }
      return { status: status.value, value: finalMap };
    }
  }
};
ZodMap.create = (keyType, valueType, params) => {
  return new ZodMap({
    valueType,
    keyType,
    typeName: ZodFirstPartyTypeKind.ZodMap,
    ...processCreateParams(params)
  });
};
var ZodSet = class extends ZodType {
  _parse(input) {
    const { status, ctx } = this._processInputParams(input);
    if (ctx.parsedType !== ZodParsedType.set) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.set,
        received: ctx.parsedType
      });
      return INVALID;
    }
    const def = this._def;
    if (def.minSize !== null) {
      if (ctx.data.size < def.minSize.value) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.too_small,
          minimum: def.minSize.value,
          type: "set",
          inclusive: true,
          message: def.minSize.message
        });
        status.dirty();
      }
    }
    if (def.maxSize !== null) {
      if (ctx.data.size > def.maxSize.value) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.too_big,
          maximum: def.maxSize.value,
          type: "set",
          inclusive: true,
          message: def.maxSize.message
        });
        status.dirty();
      }
    }
    const valueType = this._def.valueType;
    function finalizeSet(elements2) {
      const parsedSet = new Set();
      for (const element of elements2) {
        if (element.status === "aborted")
          return INVALID;
        if (element.status === "dirty")
          status.dirty();
        parsedSet.add(element.value);
      }
      return { status: status.value, value: parsedSet };
    }
    const elements = [...ctx.data.values()].map((item, i2) => valueType._parse(new ParseInputLazyPath(ctx, item, ctx.path, i2)));
    if (ctx.common.async) {
      return Promise.all(elements).then((elements2) => finalizeSet(elements2));
    } else {
      return finalizeSet(elements);
    }
  }
  min(minSize, message) {
    return new ZodSet({
      ...this._def,
      minSize: { value: minSize, message: errorUtil.toString(message) }
    });
  }
  max(maxSize, message) {
    return new ZodSet({
      ...this._def,
      maxSize: { value: maxSize, message: errorUtil.toString(message) }
    });
  }
  size(size, message) {
    return this.min(size, message).max(size, message);
  }
  nonempty(message) {
    return this.min(1, message);
  }
};
ZodSet.create = (valueType, params) => {
  return new ZodSet({
    valueType,
    minSize: null,
    maxSize: null,
    typeName: ZodFirstPartyTypeKind.ZodSet,
    ...processCreateParams(params)
  });
};
var ZodFunction = class extends ZodType {
  constructor() {
    super(...arguments);
    this.validate = this.implement;
  }
  _parse(input) {
    const { ctx } = this._processInputParams(input);
    if (ctx.parsedType !== ZodParsedType.function) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.function,
        received: ctx.parsedType
      });
      return INVALID;
    }
    function makeArgsIssue(args, error) {
      return makeIssue({
        data: args,
        path: ctx.path,
        errorMaps: [
          ctx.common.contextualErrorMap,
          ctx.schemaErrorMap,
          overrideErrorMap,
          defaultErrorMap
        ].filter((x4) => !!x4),
        issueData: {
          code: ZodIssueCode.invalid_arguments,
          argumentsError: error
        }
      });
    }
    function makeReturnsIssue(returns, error) {
      return makeIssue({
        data: returns,
        path: ctx.path,
        errorMaps: [
          ctx.common.contextualErrorMap,
          ctx.schemaErrorMap,
          overrideErrorMap,
          defaultErrorMap
        ].filter((x4) => !!x4),
        issueData: {
          code: ZodIssueCode.invalid_return_type,
          returnTypeError: error
        }
      });
    }
    const params = { errorMap: ctx.common.contextualErrorMap };
    const fn = ctx.data;
    if (this._def.returns instanceof ZodPromise) {
      return OK(async (...args) => {
        const error = new ZodError([]);
        const parsedArgs = await this._def.args.parseAsync(args, params).catch((e) => {
          error.addIssue(makeArgsIssue(args, e));
          throw error;
        });
        const result = await fn(...parsedArgs);
        const parsedReturns = await this._def.returns._def.type.parseAsync(result, params).catch((e) => {
          error.addIssue(makeReturnsIssue(result, e));
          throw error;
        });
        return parsedReturns;
      });
    } else {
      return OK((...args) => {
        const parsedArgs = this._def.args.safeParse(args, params);
        if (!parsedArgs.success) {
          throw new ZodError([makeArgsIssue(args, parsedArgs.error)]);
        }
        const result = fn(...parsedArgs.data);
        const parsedReturns = this._def.returns.safeParse(result, params);
        if (!parsedReturns.success) {
          throw new ZodError([makeReturnsIssue(result, parsedReturns.error)]);
        }
        return parsedReturns.data;
      });
    }
  }
  parameters() {
    return this._def.args;
  }
  returnType() {
    return this._def.returns;
  }
  args(...items) {
    return new ZodFunction({
      ...this._def,
      args: ZodTuple.create(items).rest(ZodUnknown.create())
    });
  }
  returns(returnType) {
    return new ZodFunction({
      ...this._def,
      returns: returnType
    });
  }
  implement(func) {
    const validatedFunc = this.parse(func);
    return validatedFunc;
  }
  strictImplement(func) {
    const validatedFunc = this.parse(func);
    return validatedFunc;
  }
};
ZodFunction.create = (args, returns, params) => {
  return new ZodFunction({
    args: args ? args.rest(ZodUnknown.create()) : ZodTuple.create([]).rest(ZodUnknown.create()),
    returns: returns || ZodUnknown.create(),
    typeName: ZodFirstPartyTypeKind.ZodFunction,
    ...processCreateParams(params)
  });
};
var ZodLazy = class extends ZodType {
  get schema() {
    return this._def.getter();
  }
  _parse(input) {
    const { ctx } = this._processInputParams(input);
    const lazySchema = this._def.getter();
    return lazySchema._parse({ data: ctx.data, path: ctx.path, parent: ctx });
  }
};
ZodLazy.create = (getter, params) => {
  return new ZodLazy({
    getter,
    typeName: ZodFirstPartyTypeKind.ZodLazy,
    ...processCreateParams(params)
  });
};
var ZodLiteral = class extends ZodType {
  _parse(input) {
    if (input.data !== this._def.value) {
      const ctx = this._getOrReturnCtx(input);
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: getParsedType(this._def.value),
        received: ctx.parsedType
      });
      return INVALID;
    }
    return { status: "valid", value: input.data };
  }
  get value() {
    return this._def.value;
  }
};
ZodLiteral.create = (value2, params) => {
  return new ZodLiteral({
    value: value2,
    typeName: ZodFirstPartyTypeKind.ZodLiteral,
    ...processCreateParams(params)
  });
};
function createZodEnum(values) {
  return new ZodEnum({
    values,
    typeName: ZodFirstPartyTypeKind.ZodEnum
  });
}
var ZodEnum = class extends ZodType {
  _parse(input) {
    if (this._def.values.indexOf(input.data) === -1) {
      const ctx = this._getOrReturnCtx(input);
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_enum_value,
        options: this._def.values
      });
      return INVALID;
    }
    return OK(input.data);
  }
  get options() {
    return this._def.values;
  }
  get enum() {
    const enumValues = {};
    for (const val of this._def.values) {
      enumValues[val] = val;
    }
    return enumValues;
  }
  get Values() {
    const enumValues = {};
    for (const val of this._def.values) {
      enumValues[val] = val;
    }
    return enumValues;
  }
  get Enum() {
    const enumValues = {};
    for (const val of this._def.values) {
      enumValues[val] = val;
    }
    return enumValues;
  }
};
ZodEnum.create = createZodEnum;
var ZodNativeEnum = class extends ZodType {
  _parse(input) {
    const nativeEnumValues = util.getValidEnumValues(this._def.values);
    if (nativeEnumValues.indexOf(input.data) === -1) {
      const ctx = this._getOrReturnCtx(input);
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_enum_value,
        options: util.objectValues(nativeEnumValues)
      });
      return INVALID;
    }
    return OK(input.data);
  }
  get enum() {
    return this._def.values;
  }
};
ZodNativeEnum.create = (values, params) => {
  return new ZodNativeEnum({
    values,
    typeName: ZodFirstPartyTypeKind.ZodNativeEnum,
    ...processCreateParams(params)
  });
};
var ZodPromise = class extends ZodType {
  _parse(input) {
    const { ctx } = this._processInputParams(input);
    if (ctx.parsedType !== ZodParsedType.promise && ctx.common.async === false) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.promise,
        received: ctx.parsedType
      });
      return INVALID;
    }
    const promisified = ctx.parsedType === ZodParsedType.promise ? ctx.data : Promise.resolve(ctx.data);
    return OK(promisified.then((data) => {
      return this._def.type.parseAsync(data, {
        path: ctx.path,
        errorMap: ctx.common.contextualErrorMap
      });
    }));
  }
};
ZodPromise.create = (schema, params) => {
  return new ZodPromise({
    type: schema,
    typeName: ZodFirstPartyTypeKind.ZodPromise,
    ...processCreateParams(params)
  });
};
var ZodEffects = class extends ZodType {
  innerType() {
    return this._def.schema;
  }
  _parse(input) {
    const { status, ctx } = this._processInputParams(input);
    const effect = this._def.effect || null;
    if (effect.type === "preprocess") {
      const processed = effect.transform(ctx.data);
      if (ctx.common.async) {
        return Promise.resolve(processed).then((processed2) => {
          return this._def.schema._parseAsync({
            data: processed2,
            path: ctx.path,
            parent: ctx
          });
        });
      } else {
        return this._def.schema._parseSync({
          data: processed,
          path: ctx.path,
          parent: ctx
        });
      }
    }
    if (effect.type === "refinement") {
      const checkCtx = {
        addIssue: (arg) => {
          addIssueToContext(ctx, arg);
          if (arg.fatal) {
            status.abort();
          } else {
            status.dirty();
          }
        },
        get path() {
          return ctx.path;
        }
      };
      checkCtx.addIssue = checkCtx.addIssue.bind(checkCtx);
      const executeRefinement = (acc) => {
        const result = effect.refinement(acc, checkCtx);
        if (ctx.common.async) {
          return Promise.resolve(result);
        }
        if (result instanceof Promise) {
          throw new Error("Async refinement encountered during synchronous parse operation. Use .parseAsync instead.");
        }
        return acc;
      };
      if (ctx.common.async === false) {
        const inner = this._def.schema._parseSync({
          data: ctx.data,
          path: ctx.path,
          parent: ctx
        });
        if (inner.status === "aborted")
          return INVALID;
        if (inner.status === "dirty")
          status.dirty();
        executeRefinement(inner.value);
        return { status: status.value, value: inner.value };
      } else {
        return this._def.schema._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx }).then((inner) => {
          if (inner.status === "aborted")
            return INVALID;
          if (inner.status === "dirty")
            status.dirty();
          return executeRefinement(inner.value).then(() => {
            return { status: status.value, value: inner.value };
          });
        });
      }
    }
    if (effect.type === "transform") {
      if (ctx.common.async === false) {
        const base2 = this._def.schema._parseSync({
          data: ctx.data,
          path: ctx.path,
          parent: ctx
        });
        if (!isValid(base2))
          return base2;
        const result = effect.transform(base2.value);
        if (result instanceof Promise) {
          throw new Error(`Asynchronous transform encountered during synchronous parse operation. Use .parseAsync instead.`);
        }
        return OK(result);
      } else {
        return this._def.schema._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx }).then((base2) => {
          if (!isValid(base2))
            return base2;
          return Promise.resolve(effect.transform(base2.value)).then(OK);
        });
      }
    }
    util.assertNever(effect);
  }
};
ZodEffects.create = (schema, effect, params) => {
  return new ZodEffects({
    schema,
    typeName: ZodFirstPartyTypeKind.ZodEffects,
    effect,
    ...processCreateParams(params)
  });
};
ZodEffects.createWithPreprocess = (preprocess, schema, params) => {
  return new ZodEffects({
    schema,
    effect: { type: "preprocess", transform: preprocess },
    typeName: ZodFirstPartyTypeKind.ZodEffects,
    ...processCreateParams(params)
  });
};
var ZodOptional = class extends ZodType {
  _parse(input) {
    const parsedType = this._getType(input);
    if (parsedType === ZodParsedType.undefined) {
      return OK(void 0);
    }
    return this._def.innerType._parse(input);
  }
  unwrap() {
    return this._def.innerType;
  }
};
ZodOptional.create = (type, params) => {
  return new ZodOptional({
    innerType: type,
    typeName: ZodFirstPartyTypeKind.ZodOptional,
    ...processCreateParams(params)
  });
};
var ZodNullable = class extends ZodType {
  _parse(input) {
    const parsedType = this._getType(input);
    if (parsedType === ZodParsedType.null) {
      return OK(null);
    }
    return this._def.innerType._parse(input);
  }
  unwrap() {
    return this._def.innerType;
  }
};
ZodNullable.create = (type, params) => {
  return new ZodNullable({
    innerType: type,
    typeName: ZodFirstPartyTypeKind.ZodNullable,
    ...processCreateParams(params)
  });
};
var ZodDefault = class extends ZodType {
  _parse(input) {
    const { ctx } = this._processInputParams(input);
    let data = ctx.data;
    if (ctx.parsedType === ZodParsedType.undefined) {
      data = this._def.defaultValue();
    }
    return this._def.innerType._parse({
      data,
      path: ctx.path,
      parent: ctx
    });
  }
  removeDefault() {
    return this._def.innerType;
  }
};
ZodDefault.create = (type, params) => {
  return new ZodOptional({
    innerType: type,
    typeName: ZodFirstPartyTypeKind.ZodOptional,
    ...processCreateParams(params)
  });
};
var ZodNaN = class extends ZodType {
  _parse(input) {
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.nan) {
      const ctx = this._getOrReturnCtx(input);
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.nan,
        received: ctx.parsedType
      });
      return INVALID;
    }
    return { status: "valid", value: input.data };
  }
};
ZodNaN.create = (params) => {
  return new ZodNaN({
    typeName: ZodFirstPartyTypeKind.ZodNaN,
    ...processCreateParams(params)
  });
};
var custom = (check, params) => {
  if (check)
    return ZodAny.create().refine(check, params);
  return ZodAny.create();
};
var late = {
  object: ZodObject.lazycreate
};
var ZodFirstPartyTypeKind;
(function(ZodFirstPartyTypeKind2) {
  ZodFirstPartyTypeKind2["ZodString"] = "ZodString";
  ZodFirstPartyTypeKind2["ZodNumber"] = "ZodNumber";
  ZodFirstPartyTypeKind2["ZodNaN"] = "ZodNaN";
  ZodFirstPartyTypeKind2["ZodBigInt"] = "ZodBigInt";
  ZodFirstPartyTypeKind2["ZodBoolean"] = "ZodBoolean";
  ZodFirstPartyTypeKind2["ZodDate"] = "ZodDate";
  ZodFirstPartyTypeKind2["ZodUndefined"] = "ZodUndefined";
  ZodFirstPartyTypeKind2["ZodNull"] = "ZodNull";
  ZodFirstPartyTypeKind2["ZodAny"] = "ZodAny";
  ZodFirstPartyTypeKind2["ZodUnknown"] = "ZodUnknown";
  ZodFirstPartyTypeKind2["ZodNever"] = "ZodNever";
  ZodFirstPartyTypeKind2["ZodVoid"] = "ZodVoid";
  ZodFirstPartyTypeKind2["ZodArray"] = "ZodArray";
  ZodFirstPartyTypeKind2["ZodObject"] = "ZodObject";
  ZodFirstPartyTypeKind2["ZodUnion"] = "ZodUnion";
  ZodFirstPartyTypeKind2["ZodDiscriminatedUnion"] = "ZodDiscriminatedUnion";
  ZodFirstPartyTypeKind2["ZodIntersection"] = "ZodIntersection";
  ZodFirstPartyTypeKind2["ZodTuple"] = "ZodTuple";
  ZodFirstPartyTypeKind2["ZodRecord"] = "ZodRecord";
  ZodFirstPartyTypeKind2["ZodMap"] = "ZodMap";
  ZodFirstPartyTypeKind2["ZodSet"] = "ZodSet";
  ZodFirstPartyTypeKind2["ZodFunction"] = "ZodFunction";
  ZodFirstPartyTypeKind2["ZodLazy"] = "ZodLazy";
  ZodFirstPartyTypeKind2["ZodLiteral"] = "ZodLiteral";
  ZodFirstPartyTypeKind2["ZodEnum"] = "ZodEnum";
  ZodFirstPartyTypeKind2["ZodEffects"] = "ZodEffects";
  ZodFirstPartyTypeKind2["ZodNativeEnum"] = "ZodNativeEnum";
  ZodFirstPartyTypeKind2["ZodOptional"] = "ZodOptional";
  ZodFirstPartyTypeKind2["ZodNullable"] = "ZodNullable";
  ZodFirstPartyTypeKind2["ZodDefault"] = "ZodDefault";
  ZodFirstPartyTypeKind2["ZodPromise"] = "ZodPromise";
})(ZodFirstPartyTypeKind || (ZodFirstPartyTypeKind = {}));
var instanceOfType = (cls, params = {
  message: `Input not instance of ${cls.name}`
}) => custom((data) => data instanceof cls, params);
var stringType = ZodString.create;
var numberType = ZodNumber.create;
var nanType = ZodNaN.create;
var bigIntType = ZodBigInt.create;
var booleanType = ZodBoolean.create;
var dateType = ZodDate.create;
var undefinedType = ZodUndefined.create;
var nullType = ZodNull.create;
var anyType = ZodAny.create;
var unknownType = ZodUnknown.create;
var neverType = ZodNever.create;
var voidType = ZodVoid.create;
var arrayType = ZodArray.create;
var objectType = ZodObject.create;
var strictObjectType = ZodObject.strictCreate;
var unionType = ZodUnion.create;
var discriminatedUnionType = ZodDiscriminatedUnion.create;
var intersectionType = ZodIntersection.create;
var tupleType = ZodTuple.create;
var recordType = ZodRecord.create;
var mapType = ZodMap.create;
var setType = ZodSet.create;
var functionType = ZodFunction.create;
var lazyType = ZodLazy.create;
var literalType = ZodLiteral.create;
var enumType = ZodEnum.create;
var nativeEnumType = ZodNativeEnum.create;
var promiseType = ZodPromise.create;
var effectsType = ZodEffects.create;
var optionalType = ZodOptional.create;
var nullableType = ZodNullable.create;
var preprocessType = ZodEffects.createWithPreprocess;
var ostring = () => stringType().optional();
var onumber = () => numberType().optional();
var oboolean = () => booleanType().optional();
var mod = Object.freeze({
  __proto__: null,
  ZodParsedType,
  getParsedType,
  makeIssue,
  EMPTY_PATH,
  addIssueToContext,
  ParseStatus,
  INVALID,
  DIRTY,
  OK,
  isAborted,
  isDirty,
  isValid,
  isAsync,
  ZodType,
  ZodString,
  ZodNumber,
  ZodBigInt,
  ZodBoolean,
  ZodDate,
  ZodUndefined,
  ZodNull,
  ZodAny,
  ZodUnknown,
  ZodNever,
  ZodVoid,
  ZodArray,
  get objectUtil() {
    return objectUtil;
  },
  ZodObject,
  ZodUnion,
  ZodDiscriminatedUnion,
  ZodIntersection,
  ZodTuple,
  ZodRecord,
  ZodMap,
  ZodSet,
  ZodFunction,
  ZodLazy,
  ZodLiteral,
  ZodEnum,
  ZodNativeEnum,
  ZodPromise,
  ZodEffects,
  ZodTransformer: ZodEffects,
  ZodOptional,
  ZodNullable,
  ZodDefault,
  ZodNaN,
  custom,
  Schema: ZodType,
  ZodSchema: ZodType,
  late,
  get ZodFirstPartyTypeKind() {
    return ZodFirstPartyTypeKind;
  },
  any: anyType,
  array: arrayType,
  bigint: bigIntType,
  boolean: booleanType,
  date: dateType,
  discriminatedUnion: discriminatedUnionType,
  effect: effectsType,
  "enum": enumType,
  "function": functionType,
  "instanceof": instanceOfType,
  intersection: intersectionType,
  lazy: lazyType,
  literal: literalType,
  map: mapType,
  nan: nanType,
  nativeEnum: nativeEnumType,
  never: neverType,
  "null": nullType,
  nullable: nullableType,
  number: numberType,
  object: objectType,
  oboolean,
  onumber,
  optional: optionalType,
  ostring,
  preprocess: preprocessType,
  promise: promiseType,
  record: recordType,
  set: setType,
  strictObject: strictObjectType,
  string: stringType,
  transformer: effectsType,
  tuple: tupleType,
  "undefined": undefinedType,
  union: unionType,
  unknown: unknownType,
  "void": voidType,
  ZodIssueCode,
  quotelessJson,
  ZodError,
  defaultErrorMap,
  get overrideErrorMap() {
    return overrideErrorMap;
  },
  setErrorMap
});

// node_modules/@thirdweb-dev/sdk/dist/index.mjs
init_lib8();
var import_utils4 = __toModule(require_utils2());
init_lib8();

// node_modules/uuid/dist/esm-browser/index.js
init_define_process();

// node_modules/uuid/dist/esm-browser/v1.js
init_define_process();

// node_modules/uuid/dist/esm-browser/rng.js
init_define_process();
var getRandomValues;
var rnds8 = new Uint8Array(16);
function rng() {
  if (!getRandomValues) {
    getRandomValues = typeof crypto !== "undefined" && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== "undefined" && typeof msCrypto.getRandomValues === "function" && msCrypto.getRandomValues.bind(msCrypto);
    if (!getRandomValues) {
      throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");
    }
  }
  return getRandomValues(rnds8);
}

// node_modules/uuid/dist/esm-browser/stringify.js
init_define_process();

// node_modules/uuid/dist/esm-browser/validate.js
init_define_process();

// node_modules/uuid/dist/esm-browser/regex.js
init_define_process();
var regex_default = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;

// node_modules/uuid/dist/esm-browser/validate.js
function validate5(uuid) {
  return typeof uuid === "string" && regex_default.test(uuid);
}
var validate_default = validate5;

// node_modules/uuid/dist/esm-browser/stringify.js
var byteToHex = [];
for (var i2 = 0; i2 < 256; ++i2) {
  byteToHex.push((i2 + 256).toString(16).substr(1));
}
function stringify(arr) {
  var offset = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
  var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + "-" + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + "-" + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + "-" + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + "-" + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase();
  if (!validate_default(uuid)) {
    throw TypeError("Stringified UUID is invalid");
  }
  return uuid;
}
var stringify_default = stringify;

// node_modules/uuid/dist/esm-browser/v3.js
init_define_process();

// node_modules/uuid/dist/esm-browser/v35.js
init_define_process();

// node_modules/uuid/dist/esm-browser/parse.js
init_define_process();
function parse2(uuid) {
  if (!validate_default(uuid)) {
    throw TypeError("Invalid UUID");
  }
  var v7;
  var arr = new Uint8Array(16);
  arr[0] = (v7 = parseInt(uuid.slice(0, 8), 16)) >>> 24;
  arr[1] = v7 >>> 16 & 255;
  arr[2] = v7 >>> 8 & 255;
  arr[3] = v7 & 255;
  arr[4] = (v7 = parseInt(uuid.slice(9, 13), 16)) >>> 8;
  arr[5] = v7 & 255;
  arr[6] = (v7 = parseInt(uuid.slice(14, 18), 16)) >>> 8;
  arr[7] = v7 & 255;
  arr[8] = (v7 = parseInt(uuid.slice(19, 23), 16)) >>> 8;
  arr[9] = v7 & 255;
  arr[10] = (v7 = parseInt(uuid.slice(24, 36), 16)) / 1099511627776 & 255;
  arr[11] = v7 / 4294967296 & 255;
  arr[12] = v7 >>> 24 & 255;
  arr[13] = v7 >>> 16 & 255;
  arr[14] = v7 >>> 8 & 255;
  arr[15] = v7 & 255;
  return arr;
}
var parse_default = parse2;

// node_modules/uuid/dist/esm-browser/v35.js
function stringToBytes(str) {
  str = unescape(encodeURIComponent(str));
  var bytes = [];
  for (var i2 = 0; i2 < str.length; ++i2) {
    bytes.push(str.charCodeAt(i2));
  }
  return bytes;
}
var DNS = "6ba7b810-9dad-11d1-80b4-00c04fd430c8";
var URL2 = "6ba7b811-9dad-11d1-80b4-00c04fd430c8";
function v35_default(name2, version27, hashfunc) {
  function generateUUID(value2, namespace, buf, offset) {
    if (typeof value2 === "string") {
      value2 = stringToBytes(value2);
    }
    if (typeof namespace === "string") {
      namespace = parse_default(namespace);
    }
    if (namespace.length !== 16) {
      throw TypeError("Namespace must be array-like (16 iterable integer values, 0-255)");
    }
    var bytes = new Uint8Array(16 + value2.length);
    bytes.set(namespace);
    bytes.set(value2, namespace.length);
    bytes = hashfunc(bytes);
    bytes[6] = bytes[6] & 15 | version27;
    bytes[8] = bytes[8] & 63 | 128;
    if (buf) {
      offset = offset || 0;
      for (var i2 = 0; i2 < 16; ++i2) {
        buf[offset + i2] = bytes[i2];
      }
      return buf;
    }
    return stringify_default(bytes);
  }
  try {
    generateUUID.name = name2;
  } catch (err) {
  }
  generateUUID.DNS = DNS;
  generateUUID.URL = URL2;
  return generateUUID;
}

// node_modules/uuid/dist/esm-browser/md5.js
init_define_process();
function md5(bytes) {
  if (typeof bytes === "string") {
    var msg = unescape(encodeURIComponent(bytes));
    bytes = new Uint8Array(msg.length);
    for (var i2 = 0; i2 < msg.length; ++i2) {
      bytes[i2] = msg.charCodeAt(i2);
    }
  }
  return md5ToHexEncodedArray(wordsToMd5(bytesToWords(bytes), bytes.length * 8));
}
function md5ToHexEncodedArray(input) {
  var output = [];
  var length32 = input.length * 32;
  var hexTab = "0123456789abcdef";
  for (var i2 = 0; i2 < length32; i2 += 8) {
    var x4 = input[i2 >> 5] >>> i2 % 32 & 255;
    var hex = parseInt(hexTab.charAt(x4 >>> 4 & 15) + hexTab.charAt(x4 & 15), 16);
    output.push(hex);
  }
  return output;
}
function getOutputLength(inputLength8) {
  return (inputLength8 + 64 >>> 9 << 4) + 14 + 1;
}
function wordsToMd5(x4, len) {
  x4[len >> 5] |= 128 << len % 32;
  x4[getOutputLength(len) - 1] = len;
  var a = 1732584193;
  var b2 = -271733879;
  var c2 = -1732584194;
  var d2 = 271733878;
  for (var i2 = 0; i2 < x4.length; i2 += 16) {
    var olda = a;
    var oldb = b2;
    var oldc = c2;
    var oldd = d2;
    a = md5ff(a, b2, c2, d2, x4[i2], 7, -680876936);
    d2 = md5ff(d2, a, b2, c2, x4[i2 + 1], 12, -389564586);
    c2 = md5ff(c2, d2, a, b2, x4[i2 + 2], 17, 606105819);
    b2 = md5ff(b2, c2, d2, a, x4[i2 + 3], 22, -1044525330);
    a = md5ff(a, b2, c2, d2, x4[i2 + 4], 7, -176418897);
    d2 = md5ff(d2, a, b2, c2, x4[i2 + 5], 12, 1200080426);
    c2 = md5ff(c2, d2, a, b2, x4[i2 + 6], 17, -1473231341);
    b2 = md5ff(b2, c2, d2, a, x4[i2 + 7], 22, -45705983);
    a = md5ff(a, b2, c2, d2, x4[i2 + 8], 7, 1770035416);
    d2 = md5ff(d2, a, b2, c2, x4[i2 + 9], 12, -1958414417);
    c2 = md5ff(c2, d2, a, b2, x4[i2 + 10], 17, -42063);
    b2 = md5ff(b2, c2, d2, a, x4[i2 + 11], 22, -1990404162);
    a = md5ff(a, b2, c2, d2, x4[i2 + 12], 7, 1804603682);
    d2 = md5ff(d2, a, b2, c2, x4[i2 + 13], 12, -40341101);
    c2 = md5ff(c2, d2, a, b2, x4[i2 + 14], 17, -1502002290);
    b2 = md5ff(b2, c2, d2, a, x4[i2 + 15], 22, 1236535329);
    a = md5gg(a, b2, c2, d2, x4[i2 + 1], 5, -165796510);
    d2 = md5gg(d2, a, b2, c2, x4[i2 + 6], 9, -1069501632);
    c2 = md5gg(c2, d2, a, b2, x4[i2 + 11], 14, 643717713);
    b2 = md5gg(b2, c2, d2, a, x4[i2], 20, -373897302);
    a = md5gg(a, b2, c2, d2, x4[i2 + 5], 5, -701558691);
    d2 = md5gg(d2, a, b2, c2, x4[i2 + 10], 9, 38016083);
    c2 = md5gg(c2, d2, a, b2, x4[i2 + 15], 14, -660478335);
    b2 = md5gg(b2, c2, d2, a, x4[i2 + 4], 20, -405537848);
    a = md5gg(a, b2, c2, d2, x4[i2 + 9], 5, 568446438);
    d2 = md5gg(d2, a, b2, c2, x4[i2 + 14], 9, -1019803690);
    c2 = md5gg(c2, d2, a, b2, x4[i2 + 3], 14, -187363961);
    b2 = md5gg(b2, c2, d2, a, x4[i2 + 8], 20, 1163531501);
    a = md5gg(a, b2, c2, d2, x4[i2 + 13], 5, -1444681467);
    d2 = md5gg(d2, a, b2, c2, x4[i2 + 2], 9, -51403784);
    c2 = md5gg(c2, d2, a, b2, x4[i2 + 7], 14, 1735328473);
    b2 = md5gg(b2, c2, d2, a, x4[i2 + 12], 20, -1926607734);
    a = md5hh(a, b2, c2, d2, x4[i2 + 5], 4, -378558);
    d2 = md5hh(d2, a, b2, c2, x4[i2 + 8], 11, -2022574463);
    c2 = md5hh(c2, d2, a, b2, x4[i2 + 11], 16, 1839030562);
    b2 = md5hh(b2, c2, d2, a, x4[i2 + 14], 23, -35309556);
    a = md5hh(a, b2, c2, d2, x4[i2 + 1], 4, -1530992060);
    d2 = md5hh(d2, a, b2, c2, x4[i2 + 4], 11, 1272893353);
    c2 = md5hh(c2, d2, a, b2, x4[i2 + 7], 16, -155497632);
    b2 = md5hh(b2, c2, d2, a, x4[i2 + 10], 23, -1094730640);
    a = md5hh(a, b2, c2, d2, x4[i2 + 13], 4, 681279174);
    d2 = md5hh(d2, a, b2, c2, x4[i2], 11, -358537222);
    c2 = md5hh(c2, d2, a, b2, x4[i2 + 3], 16, -722521979);
    b2 = md5hh(b2, c2, d2, a, x4[i2 + 6], 23, 76029189);
    a = md5hh(a, b2, c2, d2, x4[i2 + 9], 4, -640364487);
    d2 = md5hh(d2, a, b2, c2, x4[i2 + 12], 11, -421815835);
    c2 = md5hh(c2, d2, a, b2, x4[i2 + 15], 16, 530742520);
    b2 = md5hh(b2, c2, d2, a, x4[i2 + 2], 23, -995338651);
    a = md5ii(a, b2, c2, d2, x4[i2], 6, -198630844);
    d2 = md5ii(d2, a, b2, c2, x4[i2 + 7], 10, 1126891415);
    c2 = md5ii(c2, d2, a, b2, x4[i2 + 14], 15, -1416354905);
    b2 = md5ii(b2, c2, d2, a, x4[i2 + 5], 21, -57434055);
    a = md5ii(a, b2, c2, d2, x4[i2 + 12], 6, 1700485571);
    d2 = md5ii(d2, a, b2, c2, x4[i2 + 3], 10, -1894986606);
    c2 = md5ii(c2, d2, a, b2, x4[i2 + 10], 15, -1051523);
    b2 = md5ii(b2, c2, d2, a, x4[i2 + 1], 21, -2054922799);
    a = md5ii(a, b2, c2, d2, x4[i2 + 8], 6, 1873313359);
    d2 = md5ii(d2, a, b2, c2, x4[i2 + 15], 10, -30611744);
    c2 = md5ii(c2, d2, a, b2, x4[i2 + 6], 15, -1560198380);
    b2 = md5ii(b2, c2, d2, a, x4[i2 + 13], 21, 1309151649);
    a = md5ii(a, b2, c2, d2, x4[i2 + 4], 6, -145523070);
    d2 = md5ii(d2, a, b2, c2, x4[i2 + 11], 10, -1120210379);
    c2 = md5ii(c2, d2, a, b2, x4[i2 + 2], 15, 718787259);
    b2 = md5ii(b2, c2, d2, a, x4[i2 + 9], 21, -343485551);
    a = safeAdd(a, olda);
    b2 = safeAdd(b2, oldb);
    c2 = safeAdd(c2, oldc);
    d2 = safeAdd(d2, oldd);
  }
  return [a, b2, c2, d2];
}
function bytesToWords(input) {
  if (input.length === 0) {
    return [];
  }
  var length8 = input.length * 8;
  var output = new Uint32Array(getOutputLength(length8));
  for (var i2 = 0; i2 < length8; i2 += 8) {
    output[i2 >> 5] |= (input[i2 / 8] & 255) << i2 % 32;
  }
  return output;
}
function safeAdd(x4, y2) {
  var lsw = (x4 & 65535) + (y2 & 65535);
  var msw = (x4 >> 16) + (y2 >> 16) + (lsw >> 16);
  return msw << 16 | lsw & 65535;
}
function bitRotateLeft(num, cnt) {
  return num << cnt | num >>> 32 - cnt;
}
function md5cmn(q3, a, b2, x4, s2, t) {
  return safeAdd(bitRotateLeft(safeAdd(safeAdd(a, q3), safeAdd(x4, t)), s2), b2);
}
function md5ff(a, b2, c2, d2, x4, s2, t) {
  return md5cmn(b2 & c2 | ~b2 & d2, a, b2, x4, s2, t);
}
function md5gg(a, b2, c2, d2, x4, s2, t) {
  return md5cmn(b2 & d2 | c2 & ~d2, a, b2, x4, s2, t);
}
function md5hh(a, b2, c2, d2, x4, s2, t) {
  return md5cmn(b2 ^ c2 ^ d2, a, b2, x4, s2, t);
}
function md5ii(a, b2, c2, d2, x4, s2, t) {
  return md5cmn(c2 ^ (b2 | ~d2), a, b2, x4, s2, t);
}
var md5_default = md5;

// node_modules/uuid/dist/esm-browser/v3.js
var v3 = v35_default("v3", 48, md5_default);

// node_modules/uuid/dist/esm-browser/v4.js
init_define_process();
function v4(options, buf, offset) {
  options = options || {};
  var rnds = options.random || (options.rng || rng)();
  rnds[6] = rnds[6] & 15 | 64;
  rnds[8] = rnds[8] & 63 | 128;
  if (buf) {
    offset = offset || 0;
    for (var i2 = 0; i2 < 16; ++i2) {
      buf[offset + i2] = rnds[i2];
    }
    return buf;
  }
  return stringify_default(rnds);
}
var v4_default = v4;

// node_modules/uuid/dist/esm-browser/v5.js
init_define_process();

// node_modules/uuid/dist/esm-browser/sha1.js
init_define_process();
function f(s2, x4, y2, z3) {
  switch (s2) {
    case 0:
      return x4 & y2 ^ ~x4 & z3;
    case 1:
      return x4 ^ y2 ^ z3;
    case 2:
      return x4 & y2 ^ x4 & z3 ^ y2 & z3;
    case 3:
      return x4 ^ y2 ^ z3;
  }
}
function ROTL(x4, n) {
  return x4 << n | x4 >>> 32 - n;
}
function sha1(bytes) {
  var K3 = [1518500249, 1859775393, 2400959708, 3395469782];
  var H3 = [1732584193, 4023233417, 2562383102, 271733878, 3285377520];
  if (typeof bytes === "string") {
    var msg = unescape(encodeURIComponent(bytes));
    bytes = [];
    for (var i2 = 0; i2 < msg.length; ++i2) {
      bytes.push(msg.charCodeAt(i2));
    }
  } else if (!Array.isArray(bytes)) {
    bytes = Array.prototype.slice.call(bytes);
  }
  bytes.push(128);
  var l2 = bytes.length / 4 + 2;
  var N3 = Math.ceil(l2 / 16);
  var M3 = new Array(N3);
  for (var _i = 0; _i < N3; ++_i) {
    var arr = new Uint32Array(16);
    for (var j3 = 0; j3 < 16; ++j3) {
      arr[j3] = bytes[_i * 64 + j3 * 4] << 24 | bytes[_i * 64 + j3 * 4 + 1] << 16 | bytes[_i * 64 + j3 * 4 + 2] << 8 | bytes[_i * 64 + j3 * 4 + 3];
    }
    M3[_i] = arr;
  }
  M3[N3 - 1][14] = (bytes.length - 1) * 8 / Math.pow(2, 32);
  M3[N3 - 1][14] = Math.floor(M3[N3 - 1][14]);
  M3[N3 - 1][15] = (bytes.length - 1) * 8 & 4294967295;
  for (var _i2 = 0; _i2 < N3; ++_i2) {
    var W3 = new Uint32Array(80);
    for (var t = 0; t < 16; ++t) {
      W3[t] = M3[_i2][t];
    }
    for (var _t2 = 16; _t2 < 80; ++_t2) {
      W3[_t2] = ROTL(W3[_t2 - 3] ^ W3[_t2 - 8] ^ W3[_t2 - 14] ^ W3[_t2 - 16], 1);
    }
    var a = H3[0];
    var b2 = H3[1];
    var c2 = H3[2];
    var d2 = H3[3];
    var e = H3[4];
    for (var _t22 = 0; _t22 < 80; ++_t22) {
      var s2 = Math.floor(_t22 / 20);
      var T3 = ROTL(a, 5) + f(s2, b2, c2, d2) + e + K3[s2] + W3[_t22] >>> 0;
      e = d2;
      d2 = c2;
      c2 = ROTL(b2, 30) >>> 0;
      b2 = a;
      a = T3;
    }
    H3[0] = H3[0] + a >>> 0;
    H3[1] = H3[1] + b2 >>> 0;
    H3[2] = H3[2] + c2 >>> 0;
    H3[3] = H3[3] + d2 >>> 0;
    H3[4] = H3[4] + e >>> 0;
  }
  return [H3[0] >> 24 & 255, H3[0] >> 16 & 255, H3[0] >> 8 & 255, H3[0] & 255, H3[1] >> 24 & 255, H3[1] >> 16 & 255, H3[1] >> 8 & 255, H3[1] & 255, H3[2] >> 24 & 255, H3[2] >> 16 & 255, H3[2] >> 8 & 255, H3[2] & 255, H3[3] >> 24 & 255, H3[3] >> 16 & 255, H3[3] >> 8 & 255, H3[3] & 255, H3[4] >> 24 & 255, H3[4] >> 16 & 255, H3[4] >> 8 & 255, H3[4] & 255];
}
var sha1_default = sha1;

// node_modules/uuid/dist/esm-browser/v5.js
var v5 = v35_default("v5", 80, sha1_default);

// node_modules/uuid/dist/esm-browser/nil.js
init_define_process();

// node_modules/uuid/dist/esm-browser/version.js
init_define_process();

// node_modules/@thirdweb-dev/sdk/dist/index.mjs
var import_utils5 = __toModule(require_utils2());

// node_modules/@thirdweb-dev/contracts/dist/index.mjs
init_define_process();
var f0 = [{ inputs: [{ internalType: "address", name: "owner", type: "address" }, { internalType: "address", name: "spender", type: "address" }], name: "allowance", outputs: [{ internalType: "uint256", name: "remaining", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "spender", type: "address" }, { internalType: "uint256", name: "value", type: "uint256" }], name: "approve", outputs: [{ internalType: "bool", name: "success", type: "bool" }], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "owner", type: "address" }], name: "balanceOf", outputs: [{ internalType: "uint256", name: "balance", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [], name: "decimals", outputs: [{ internalType: "uint8", name: "decimalPlaces", type: "uint8" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "spender", type: "address" }, { internalType: "uint256", name: "addedValue", type: "uint256" }], name: "decreaseApproval", outputs: [{ internalType: "bool", name: "success", type: "bool" }], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "spender", type: "address" }, { internalType: "uint256", name: "subtractedValue", type: "uint256" }], name: "increaseApproval", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [], name: "name", outputs: [{ internalType: "string", name: "tokenName", type: "string" }], stateMutability: "view", type: "function" }, { inputs: [], name: "symbol", outputs: [{ internalType: "string", name: "tokenSymbol", type: "string" }], stateMutability: "view", type: "function" }, { inputs: [], name: "totalSupply", outputs: [{ internalType: "uint256", name: "totalTokensIssued", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "to", type: "address" }, { internalType: "uint256", name: "value", type: "uint256" }], name: "transfer", outputs: [{ internalType: "bool", name: "success", type: "bool" }], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "to", type: "address" }, { internalType: "uint256", name: "value", type: "uint256" }, { internalType: "bytes", name: "data", type: "bytes" }], name: "transferAndCall", outputs: [{ internalType: "bool", name: "success", type: "bool" }], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "from", type: "address" }, { internalType: "address", name: "to", type: "address" }, { internalType: "uint256", name: "value", type: "uint256" }], name: "transferFrom", outputs: [{ internalType: "bool", name: "success", type: "bool" }], stateMutability: "nonpayable", type: "function" }];
var i0 = class {
  static createInterface() {
    return new utils_exports.Interface(f0);
  }
  static connect(e, t) {
    return new Contract(e, f0, t);
  }
};
i0.abi = f0;
var d0 = [{ inputs: [{ internalType: "bytes32", name: "requestId", type: "bytes32" }, { internalType: "uint256", name: "randomness", type: "uint256" }], name: "rawFulfillRandomness", outputs: [], stateMutability: "nonpayable", type: "function" }];
var r0 = class {
  static createInterface() {
    return new utils_exports.Interface(d0);
  }
  static connect(e, t) {
    return new Contract(e, d0, t);
  }
};
r0.abi = d0;
var s0 = [{ anonymous: false, inputs: [{ indexed: true, internalType: "bytes32", name: "role", type: "bytes32" }, { indexed: true, internalType: "bytes32", name: "previousAdminRole", type: "bytes32" }, { indexed: true, internalType: "bytes32", name: "newAdminRole", type: "bytes32" }], name: "RoleAdminChanged", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "bytes32", name: "role", type: "bytes32" }, { indexed: true, internalType: "address", name: "account", type: "address" }, { indexed: true, internalType: "address", name: "sender", type: "address" }], name: "RoleGranted", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "bytes32", name: "role", type: "bytes32" }, { indexed: true, internalType: "address", name: "account", type: "address" }, { indexed: true, internalType: "address", name: "sender", type: "address" }], name: "RoleRevoked", type: "event" }, { inputs: [], name: "DEFAULT_ADMIN_ROLE", outputs: [{ internalType: "bytes32", name: "", type: "bytes32" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "bytes32", name: "role", type: "bytes32" }], name: "getRoleAdmin", outputs: [{ internalType: "bytes32", name: "", type: "bytes32" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "bytes32", name: "role", type: "bytes32" }, { internalType: "uint256", name: "index", type: "uint256" }], name: "getRoleMember", outputs: [{ internalType: "address", name: "", type: "address" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "bytes32", name: "role", type: "bytes32" }], name: "getRoleMemberCount", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "bytes32", name: "role", type: "bytes32" }, { internalType: "address", name: "account", type: "address" }], name: "grantRole", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "bytes32", name: "role", type: "bytes32" }, { internalType: "address", name: "account", type: "address" }], name: "hasRole", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "bytes32", name: "role", type: "bytes32" }, { internalType: "address", name: "account", type: "address" }], name: "renounceRole", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "bytes32", name: "role", type: "bytes32" }, { internalType: "address", name: "account", type: "address" }], name: "revokeRole", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "bytes4", name: "interfaceId", type: "bytes4" }], name: "supportsInterface", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "view", type: "function" }];
var p0 = class {
  static createInterface() {
    return new utils_exports.Interface(s0);
  }
  static connect(e, t) {
    return new Contract(e, s0, t);
  }
};
p0.abi = s0;
var y0 = [{ anonymous: false, inputs: [{ indexed: true, internalType: "bytes32", name: "role", type: "bytes32" }, { indexed: true, internalType: "bytes32", name: "previousAdminRole", type: "bytes32" }, { indexed: true, internalType: "bytes32", name: "newAdminRole", type: "bytes32" }], name: "RoleAdminChanged", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "bytes32", name: "role", type: "bytes32" }, { indexed: true, internalType: "address", name: "account", type: "address" }, { indexed: true, internalType: "address", name: "sender", type: "address" }], name: "RoleGranted", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "bytes32", name: "role", type: "bytes32" }, { indexed: true, internalType: "address", name: "account", type: "address" }, { indexed: true, internalType: "address", name: "sender", type: "address" }], name: "RoleRevoked", type: "event" }, { inputs: [], name: "DEFAULT_ADMIN_ROLE", outputs: [{ internalType: "bytes32", name: "", type: "bytes32" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "bytes32", name: "role", type: "bytes32" }], name: "getRoleAdmin", outputs: [{ internalType: "bytes32", name: "", type: "bytes32" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "bytes32", name: "role", type: "bytes32" }, { internalType: "address", name: "account", type: "address" }], name: "grantRole", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "bytes32", name: "role", type: "bytes32" }, { internalType: "address", name: "account", type: "address" }], name: "hasRole", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "bytes32", name: "role", type: "bytes32" }, { internalType: "address", name: "account", type: "address" }], name: "renounceRole", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "bytes32", name: "role", type: "bytes32" }, { internalType: "address", name: "account", type: "address" }], name: "revokeRole", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "bytes4", name: "interfaceId", type: "bytes4" }], name: "supportsInterface", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "view", type: "function" }];
var u0 = class {
  static createInterface() {
    return new utils_exports.Interface(y0);
  }
  static connect(e, t) {
    return new Contract(e, y0, t);
  }
};
u0.abi = y0;
var c0 = [{ anonymous: false, inputs: [{ indexed: true, internalType: "bytes32", name: "role", type: "bytes32" }, { indexed: true, internalType: "bytes32", name: "previousAdminRole", type: "bytes32" }, { indexed: true, internalType: "bytes32", name: "newAdminRole", type: "bytes32" }], name: "RoleAdminChanged", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "bytes32", name: "role", type: "bytes32" }, { indexed: true, internalType: "address", name: "account", type: "address" }, { indexed: true, internalType: "address", name: "sender", type: "address" }], name: "RoleGranted", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "bytes32", name: "role", type: "bytes32" }, { indexed: true, internalType: "address", name: "account", type: "address" }, { indexed: true, internalType: "address", name: "sender", type: "address" }], name: "RoleRevoked", type: "event" }, { inputs: [{ internalType: "bytes32", name: "role", type: "bytes32" }], name: "getRoleAdmin", outputs: [{ internalType: "bytes32", name: "", type: "bytes32" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "bytes32", name: "role", type: "bytes32" }, { internalType: "uint256", name: "index", type: "uint256" }], name: "getRoleMember", outputs: [{ internalType: "address", name: "", type: "address" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "bytes32", name: "role", type: "bytes32" }], name: "getRoleMemberCount", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "bytes32", name: "role", type: "bytes32" }, { internalType: "address", name: "account", type: "address" }], name: "grantRole", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "bytes32", name: "role", type: "bytes32" }, { internalType: "address", name: "account", type: "address" }], name: "hasRole", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "bytes32", name: "role", type: "bytes32" }, { internalType: "address", name: "account", type: "address" }], name: "renounceRole", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "bytes32", name: "role", type: "bytes32" }, { internalType: "address", name: "account", type: "address" }], name: "revokeRole", outputs: [], stateMutability: "nonpayable", type: "function" }];
var o0 = class {
  static createInterface() {
    return new utils_exports.Interface(c0);
  }
  static connect(e, t) {
    return new Contract(e, c0, t);
  }
};
o0.abi = c0;
var l0 = [{ anonymous: false, inputs: [{ indexed: true, internalType: "bytes32", name: "role", type: "bytes32" }, { indexed: true, internalType: "bytes32", name: "previousAdminRole", type: "bytes32" }, { indexed: true, internalType: "bytes32", name: "newAdminRole", type: "bytes32" }], name: "RoleAdminChanged", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "bytes32", name: "role", type: "bytes32" }, { indexed: true, internalType: "address", name: "account", type: "address" }, { indexed: true, internalType: "address", name: "sender", type: "address" }], name: "RoleGranted", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "bytes32", name: "role", type: "bytes32" }, { indexed: true, internalType: "address", name: "account", type: "address" }, { indexed: true, internalType: "address", name: "sender", type: "address" }], name: "RoleRevoked", type: "event" }, { inputs: [{ internalType: "bytes32", name: "role", type: "bytes32" }], name: "getRoleAdmin", outputs: [{ internalType: "bytes32", name: "", type: "bytes32" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "bytes32", name: "role", type: "bytes32" }, { internalType: "address", name: "account", type: "address" }], name: "grantRole", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "bytes32", name: "role", type: "bytes32" }, { internalType: "address", name: "account", type: "address" }], name: "hasRole", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "bytes32", name: "role", type: "bytes32" }, { internalType: "address", name: "account", type: "address" }], name: "renounceRole", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "bytes32", name: "role", type: "bytes32" }, { internalType: "address", name: "account", type: "address" }], name: "revokeRole", outputs: [], stateMutability: "nonpayable", type: "function" }];
var m0 = class {
  static createInterface() {
    return new utils_exports.Interface(l0);
  }
  static connect(e, t) {
    return new Contract(e, l0, t);
  }
};
m0.abi = l0;
var T0 = [{ anonymous: false, inputs: [{ indexed: false, internalType: "uint256", name: "proposalId", type: "uint256" }], name: "ProposalCanceled", type: "event" }, { anonymous: false, inputs: [{ indexed: false, internalType: "uint256", name: "proposalId", type: "uint256" }, { indexed: false, internalType: "address", name: "proposer", type: "address" }, { indexed: false, internalType: "address[]", name: "targets", type: "address[]" }, { indexed: false, internalType: "uint256[]", name: "values", type: "uint256[]" }, { indexed: false, internalType: "string[]", name: "signatures", type: "string[]" }, { indexed: false, internalType: "bytes[]", name: "calldatas", type: "bytes[]" }, { indexed: false, internalType: "uint256", name: "startBlock", type: "uint256" }, { indexed: false, internalType: "uint256", name: "endBlock", type: "uint256" }, { indexed: false, internalType: "string", name: "description", type: "string" }], name: "ProposalCreated", type: "event" }, { anonymous: false, inputs: [{ indexed: false, internalType: "uint256", name: "proposalId", type: "uint256" }], name: "ProposalExecuted", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "address", name: "voter", type: "address" }, { indexed: false, internalType: "uint256", name: "proposalId", type: "uint256" }, { indexed: false, internalType: "uint8", name: "support", type: "uint8" }, { indexed: false, internalType: "uint256", name: "weight", type: "uint256" }, { indexed: false, internalType: "string", name: "reason", type: "string" }], name: "VoteCast", type: "event" }, { inputs: [], name: "BALLOT_TYPEHASH", outputs: [{ internalType: "bytes32", name: "", type: "bytes32" }], stateMutability: "view", type: "function" }, { inputs: [], name: "COUNTING_MODE", outputs: [{ internalType: "string", name: "", type: "string" }], stateMutability: "pure", type: "function" }, { inputs: [{ internalType: "uint256", name: "proposalId", type: "uint256" }, { internalType: "uint8", name: "support", type: "uint8" }], name: "castVote", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "uint256", name: "proposalId", type: "uint256" }, { internalType: "uint8", name: "support", type: "uint8" }, { internalType: "uint8", name: "v", type: "uint8" }, { internalType: "bytes32", name: "r", type: "bytes32" }, { internalType: "bytes32", name: "s", type: "bytes32" }], name: "castVoteBySig", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "uint256", name: "proposalId", type: "uint256" }, { internalType: "uint8", name: "support", type: "uint8" }, { internalType: "string", name: "reason", type: "string" }], name: "castVoteWithReason", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address[]", name: "targets", type: "address[]" }, { internalType: "uint256[]", name: "values", type: "uint256[]" }, { internalType: "bytes[]", name: "calldatas", type: "bytes[]" }, { internalType: "bytes32", name: "descriptionHash", type: "bytes32" }], name: "execute", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "payable", type: "function" }, { inputs: [{ internalType: "address", name: "account", type: "address" }, { internalType: "uint256", name: "blockNumber", type: "uint256" }], name: "getVotes", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "uint256", name: "proposalId", type: "uint256" }, { internalType: "address", name: "account", type: "address" }], name: "hasVoted", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address[]", name: "targets", type: "address[]" }, { internalType: "uint256[]", name: "values", type: "uint256[]" }, { internalType: "bytes[]", name: "calldatas", type: "bytes[]" }, { internalType: "bytes32", name: "descriptionHash", type: "bytes32" }], name: "hashProposal", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "pure", type: "function" }, { inputs: [], name: "name", outputs: [{ internalType: "string", name: "", type: "string" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "uint256", name: "proposalId", type: "uint256" }], name: "proposalDeadline", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "uint256", name: "proposalId", type: "uint256" }], name: "proposalSnapshot", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [], name: "proposalThreshold", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "uint256", name: "proposalId", type: "uint256" }], name: "proposalVotes", outputs: [{ internalType: "uint256", name: "againstVotes", type: "uint256" }, { internalType: "uint256", name: "forVotes", type: "uint256" }, { internalType: "uint256", name: "abstainVotes", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address[]", name: "targets", type: "address[]" }, { internalType: "uint256[]", name: "values", type: "uint256[]" }, { internalType: "bytes[]", name: "calldatas", type: "bytes[]" }, { internalType: "string", name: "description", type: "string" }], name: "propose", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "uint256", name: "blockNumber", type: "uint256" }], name: "quorum", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "target", type: "address" }, { internalType: "uint256", name: "value", type: "uint256" }, { internalType: "bytes", name: "data", type: "bytes" }], name: "relay", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "uint256", name: "proposalId", type: "uint256" }], name: "state", outputs: [{ internalType: "enum IGovernorUpgradeable.ProposalState", name: "", type: "uint8" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "bytes4", name: "interfaceId", type: "bytes4" }], name: "supportsInterface", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "view", type: "function" }, { inputs: [], name: "version", outputs: [{ internalType: "string", name: "", type: "string" }], stateMutability: "view", type: "function" }, { inputs: [], name: "votingDelay", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [], name: "votingPeriod", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { stateMutability: "payable", type: "receive" }];
var v0 = class {
  static createInterface() {
    return new utils_exports.Interface(T0);
  }
  static connect(e, t) {
    return new Contract(e, T0, t);
  }
};
v0.abi = T0;
var g0 = [{ anonymous: false, inputs: [{ indexed: false, internalType: "uint256", name: "proposalId", type: "uint256" }], name: "ProposalCanceled", type: "event" }, { anonymous: false, inputs: [{ indexed: false, internalType: "uint256", name: "proposalId", type: "uint256" }, { indexed: false, internalType: "address", name: "proposer", type: "address" }, { indexed: false, internalType: "address[]", name: "targets", type: "address[]" }, { indexed: false, internalType: "uint256[]", name: "values", type: "uint256[]" }, { indexed: false, internalType: "string[]", name: "signatures", type: "string[]" }, { indexed: false, internalType: "bytes[]", name: "calldatas", type: "bytes[]" }, { indexed: false, internalType: "uint256", name: "startBlock", type: "uint256" }, { indexed: false, internalType: "uint256", name: "endBlock", type: "uint256" }, { indexed: false, internalType: "string", name: "description", type: "string" }], name: "ProposalCreated", type: "event" }, { anonymous: false, inputs: [{ indexed: false, internalType: "uint256", name: "proposalId", type: "uint256" }], name: "ProposalExecuted", type: "event" }, { anonymous: false, inputs: [{ indexed: false, internalType: "uint256", name: "oldProposalThreshold", type: "uint256" }, { indexed: false, internalType: "uint256", name: "newProposalThreshold", type: "uint256" }], name: "ProposalThresholdSet", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "address", name: "voter", type: "address" }, { indexed: false, internalType: "uint256", name: "proposalId", type: "uint256" }, { indexed: false, internalType: "uint8", name: "support", type: "uint8" }, { indexed: false, internalType: "uint256", name: "weight", type: "uint256" }, { indexed: false, internalType: "string", name: "reason", type: "string" }], name: "VoteCast", type: "event" }, { anonymous: false, inputs: [{ indexed: false, internalType: "uint256", name: "oldVotingDelay", type: "uint256" }, { indexed: false, internalType: "uint256", name: "newVotingDelay", type: "uint256" }], name: "VotingDelaySet", type: "event" }, { anonymous: false, inputs: [{ indexed: false, internalType: "uint256", name: "oldVotingPeriod", type: "uint256" }, { indexed: false, internalType: "uint256", name: "newVotingPeriod", type: "uint256" }], name: "VotingPeriodSet", type: "event" }, { inputs: [], name: "BALLOT_TYPEHASH", outputs: [{ internalType: "bytes32", name: "", type: "bytes32" }], stateMutability: "view", type: "function" }, { inputs: [], name: "COUNTING_MODE", outputs: [{ internalType: "string", name: "", type: "string" }], stateMutability: "pure", type: "function" }, { inputs: [{ internalType: "uint256", name: "proposalId", type: "uint256" }, { internalType: "uint8", name: "support", type: "uint8" }], name: "castVote", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "uint256", name: "proposalId", type: "uint256" }, { internalType: "uint8", name: "support", type: "uint8" }, { internalType: "uint8", name: "v", type: "uint8" }, { internalType: "bytes32", name: "r", type: "bytes32" }, { internalType: "bytes32", name: "s", type: "bytes32" }], name: "castVoteBySig", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "uint256", name: "proposalId", type: "uint256" }, { internalType: "uint8", name: "support", type: "uint8" }, { internalType: "string", name: "reason", type: "string" }], name: "castVoteWithReason", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address[]", name: "targets", type: "address[]" }, { internalType: "uint256[]", name: "values", type: "uint256[]" }, { internalType: "bytes[]", name: "calldatas", type: "bytes[]" }, { internalType: "bytes32", name: "descriptionHash", type: "bytes32" }], name: "execute", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "payable", type: "function" }, { inputs: [{ internalType: "address", name: "account", type: "address" }, { internalType: "uint256", name: "blockNumber", type: "uint256" }], name: "getVotes", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "uint256", name: "proposalId", type: "uint256" }, { internalType: "address", name: "account", type: "address" }], name: "hasVoted", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address[]", name: "targets", type: "address[]" }, { internalType: "uint256[]", name: "values", type: "uint256[]" }, { internalType: "bytes[]", name: "calldatas", type: "bytes[]" }, { internalType: "bytes32", name: "descriptionHash", type: "bytes32" }], name: "hashProposal", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "pure", type: "function" }, { inputs: [], name: "name", outputs: [{ internalType: "string", name: "", type: "string" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "uint256", name: "proposalId", type: "uint256" }], name: "proposalDeadline", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "uint256", name: "proposalId", type: "uint256" }], name: "proposalSnapshot", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [], name: "proposalThreshold", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address[]", name: "targets", type: "address[]" }, { internalType: "uint256[]", name: "values", type: "uint256[]" }, { internalType: "bytes[]", name: "calldatas", type: "bytes[]" }, { internalType: "string", name: "description", type: "string" }], name: "propose", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "uint256", name: "blockNumber", type: "uint256" }], name: "quorum", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "target", type: "address" }, { internalType: "uint256", name: "value", type: "uint256" }, { internalType: "bytes", name: "data", type: "bytes" }], name: "relay", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "uint256", name: "newProposalThreshold", type: "uint256" }], name: "setProposalThreshold", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "uint256", name: "newVotingDelay", type: "uint256" }], name: "setVotingDelay", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "uint256", name: "newVotingPeriod", type: "uint256" }], name: "setVotingPeriod", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "uint256", name: "proposalId", type: "uint256" }], name: "state", outputs: [{ internalType: "enum IGovernorUpgradeable.ProposalState", name: "", type: "uint8" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "bytes4", name: "interfaceId", type: "bytes4" }], name: "supportsInterface", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "view", type: "function" }, { inputs: [], name: "version", outputs: [{ internalType: "string", name: "", type: "string" }], stateMutability: "view", type: "function" }, { inputs: [], name: "votingDelay", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [], name: "votingPeriod", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { stateMutability: "payable", type: "receive" }];
var x0 = class {
  static createInterface() {
    return new utils_exports.Interface(g0);
  }
  static connect(e, t) {
    return new Contract(e, g0, t);
  }
};
x0.abi = g0;
var I0 = [{ anonymous: false, inputs: [{ indexed: false, internalType: "uint256", name: "proposalId", type: "uint256" }], name: "ProposalCanceled", type: "event" }, { anonymous: false, inputs: [{ indexed: false, internalType: "uint256", name: "proposalId", type: "uint256" }, { indexed: false, internalType: "address", name: "proposer", type: "address" }, { indexed: false, internalType: "address[]", name: "targets", type: "address[]" }, { indexed: false, internalType: "uint256[]", name: "values", type: "uint256[]" }, { indexed: false, internalType: "string[]", name: "signatures", type: "string[]" }, { indexed: false, internalType: "bytes[]", name: "calldatas", type: "bytes[]" }, { indexed: false, internalType: "uint256", name: "startBlock", type: "uint256" }, { indexed: false, internalType: "uint256", name: "endBlock", type: "uint256" }, { indexed: false, internalType: "string", name: "description", type: "string" }], name: "ProposalCreated", type: "event" }, { anonymous: false, inputs: [{ indexed: false, internalType: "uint256", name: "proposalId", type: "uint256" }], name: "ProposalExecuted", type: "event" }, { anonymous: false, inputs: [{ indexed: false, internalType: "uint256", name: "oldQuorumNumerator", type: "uint256" }, { indexed: false, internalType: "uint256", name: "newQuorumNumerator", type: "uint256" }], name: "QuorumNumeratorUpdated", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "address", name: "voter", type: "address" }, { indexed: false, internalType: "uint256", name: "proposalId", type: "uint256" }, { indexed: false, internalType: "uint8", name: "support", type: "uint8" }, { indexed: false, internalType: "uint256", name: "weight", type: "uint256" }, { indexed: false, internalType: "string", name: "reason", type: "string" }], name: "VoteCast", type: "event" }, { inputs: [], name: "BALLOT_TYPEHASH", outputs: [{ internalType: "bytes32", name: "", type: "bytes32" }], stateMutability: "view", type: "function" }, { inputs: [], name: "COUNTING_MODE", outputs: [{ internalType: "string", name: "", type: "string" }], stateMutability: "pure", type: "function" }, { inputs: [{ internalType: "uint256", name: "proposalId", type: "uint256" }, { internalType: "uint8", name: "support", type: "uint8" }], name: "castVote", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "uint256", name: "proposalId", type: "uint256" }, { internalType: "uint8", name: "support", type: "uint8" }, { internalType: "uint8", name: "v", type: "uint8" }, { internalType: "bytes32", name: "r", type: "bytes32" }, { internalType: "bytes32", name: "s", type: "bytes32" }], name: "castVoteBySig", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "uint256", name: "proposalId", type: "uint256" }, { internalType: "uint8", name: "support", type: "uint8" }, { internalType: "string", name: "reason", type: "string" }], name: "castVoteWithReason", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address[]", name: "targets", type: "address[]" }, { internalType: "uint256[]", name: "values", type: "uint256[]" }, { internalType: "bytes[]", name: "calldatas", type: "bytes[]" }, { internalType: "bytes32", name: "descriptionHash", type: "bytes32" }], name: "execute", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "payable", type: "function" }, { inputs: [{ internalType: "address", name: "account", type: "address" }, { internalType: "uint256", name: "blockNumber", type: "uint256" }], name: "getVotes", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "uint256", name: "proposalId", type: "uint256" }, { internalType: "address", name: "account", type: "address" }], name: "hasVoted", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address[]", name: "targets", type: "address[]" }, { internalType: "uint256[]", name: "values", type: "uint256[]" }, { internalType: "bytes[]", name: "calldatas", type: "bytes[]" }, { internalType: "bytes32", name: "descriptionHash", type: "bytes32" }], name: "hashProposal", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "pure", type: "function" }, { inputs: [], name: "name", outputs: [{ internalType: "string", name: "", type: "string" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "uint256", name: "proposalId", type: "uint256" }], name: "proposalDeadline", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "uint256", name: "proposalId", type: "uint256" }], name: "proposalSnapshot", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [], name: "proposalThreshold", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address[]", name: "targets", type: "address[]" }, { internalType: "uint256[]", name: "values", type: "uint256[]" }, { internalType: "bytes[]", name: "calldatas", type: "bytes[]" }, { internalType: "string", name: "description", type: "string" }], name: "propose", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "uint256", name: "blockNumber", type: "uint256" }], name: "quorum", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [], name: "quorumDenominator", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [], name: "quorumNumerator", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "target", type: "address" }, { internalType: "uint256", name: "value", type: "uint256" }, { internalType: "bytes", name: "data", type: "bytes" }], name: "relay", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "uint256", name: "proposalId", type: "uint256" }], name: "state", outputs: [{ internalType: "enum IGovernorUpgradeable.ProposalState", name: "", type: "uint8" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "bytes4", name: "interfaceId", type: "bytes4" }], name: "supportsInterface", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "view", type: "function" }, { inputs: [], name: "token", outputs: [{ internalType: "contract IVotesUpgradeable", name: "", type: "address" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "uint256", name: "newQuorumNumerator", type: "uint256" }], name: "updateQuorumNumerator", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [], name: "version", outputs: [{ internalType: "string", name: "", type: "string" }], stateMutability: "view", type: "function" }, { inputs: [], name: "votingDelay", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [], name: "votingPeriod", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { stateMutability: "payable", type: "receive" }];
var M0 = class {
  static createInterface() {
    return new utils_exports.Interface(I0);
  }
  static connect(e, t) {
    return new Contract(e, I0, t);
  }
};
M0.abi = I0;
var R0 = [{ anonymous: false, inputs: [{ indexed: false, internalType: "uint256", name: "proposalId", type: "uint256" }], name: "ProposalCanceled", type: "event" }, { anonymous: false, inputs: [{ indexed: false, internalType: "uint256", name: "proposalId", type: "uint256" }, { indexed: false, internalType: "address", name: "proposer", type: "address" }, { indexed: false, internalType: "address[]", name: "targets", type: "address[]" }, { indexed: false, internalType: "uint256[]", name: "values", type: "uint256[]" }, { indexed: false, internalType: "string[]", name: "signatures", type: "string[]" }, { indexed: false, internalType: "bytes[]", name: "calldatas", type: "bytes[]" }, { indexed: false, internalType: "uint256", name: "startBlock", type: "uint256" }, { indexed: false, internalType: "uint256", name: "endBlock", type: "uint256" }, { indexed: false, internalType: "string", name: "description", type: "string" }], name: "ProposalCreated", type: "event" }, { anonymous: false, inputs: [{ indexed: false, internalType: "uint256", name: "proposalId", type: "uint256" }], name: "ProposalExecuted", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "address", name: "voter", type: "address" }, { indexed: false, internalType: "uint256", name: "proposalId", type: "uint256" }, { indexed: false, internalType: "uint8", name: "support", type: "uint8" }, { indexed: false, internalType: "uint256", name: "weight", type: "uint256" }, { indexed: false, internalType: "string", name: "reason", type: "string" }], name: "VoteCast", type: "event" }, { inputs: [], name: "BALLOT_TYPEHASH", outputs: [{ internalType: "bytes32", name: "", type: "bytes32" }], stateMutability: "view", type: "function" }, { inputs: [], name: "COUNTING_MODE", outputs: [{ internalType: "string", name: "", type: "string" }], stateMutability: "pure", type: "function" }, { inputs: [{ internalType: "uint256", name: "proposalId", type: "uint256" }, { internalType: "uint8", name: "support", type: "uint8" }], name: "castVote", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "uint256", name: "proposalId", type: "uint256" }, { internalType: "uint8", name: "support", type: "uint8" }, { internalType: "uint8", name: "v", type: "uint8" }, { internalType: "bytes32", name: "r", type: "bytes32" }, { internalType: "bytes32", name: "s", type: "bytes32" }], name: "castVoteBySig", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "uint256", name: "proposalId", type: "uint256" }, { internalType: "uint8", name: "support", type: "uint8" }, { internalType: "string", name: "reason", type: "string" }], name: "castVoteWithReason", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address[]", name: "targets", type: "address[]" }, { internalType: "uint256[]", name: "values", type: "uint256[]" }, { internalType: "bytes[]", name: "calldatas", type: "bytes[]" }, { internalType: "bytes32", name: "descriptionHash", type: "bytes32" }], name: "execute", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "payable", type: "function" }, { inputs: [{ internalType: "address", name: "account", type: "address" }, { internalType: "uint256", name: "blockNumber", type: "uint256" }], name: "getVotes", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "uint256", name: "proposalId", type: "uint256" }, { internalType: "address", name: "account", type: "address" }], name: "hasVoted", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address[]", name: "targets", type: "address[]" }, { internalType: "uint256[]", name: "values", type: "uint256[]" }, { internalType: "bytes[]", name: "calldatas", type: "bytes[]" }, { internalType: "bytes32", name: "descriptionHash", type: "bytes32" }], name: "hashProposal", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "pure", type: "function" }, { inputs: [], name: "name", outputs: [{ internalType: "string", name: "", type: "string" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "uint256", name: "proposalId", type: "uint256" }], name: "proposalDeadline", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "uint256", name: "proposalId", type: "uint256" }], name: "proposalSnapshot", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [], name: "proposalThreshold", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address[]", name: "targets", type: "address[]" }, { internalType: "uint256[]", name: "values", type: "uint256[]" }, { internalType: "bytes[]", name: "calldatas", type: "bytes[]" }, { internalType: "string", name: "description", type: "string" }], name: "propose", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "uint256", name: "blockNumber", type: "uint256" }], name: "quorum", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "target", type: "address" }, { internalType: "uint256", name: "value", type: "uint256" }, { internalType: "bytes", name: "data", type: "bytes" }], name: "relay", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "uint256", name: "proposalId", type: "uint256" }], name: "state", outputs: [{ internalType: "enum IGovernorUpgradeable.ProposalState", name: "", type: "uint8" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "bytes4", name: "interfaceId", type: "bytes4" }], name: "supportsInterface", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "view", type: "function" }, { inputs: [], name: "token", outputs: [{ internalType: "contract IVotesUpgradeable", name: "", type: "address" }], stateMutability: "view", type: "function" }, { inputs: [], name: "version", outputs: [{ internalType: "string", name: "", type: "string" }], stateMutability: "view", type: "function" }, { inputs: [], name: "votingDelay", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [], name: "votingPeriod", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { stateMutability: "payable", type: "receive" }];
var w0 = class {
  static createInterface() {
    return new utils_exports.Interface(R0);
  }
  static connect(e, t) {
    return new Contract(e, R0, t);
  }
};
w0.abi = R0;
var C0 = [{ anonymous: false, inputs: [{ indexed: false, internalType: "uint256", name: "proposalId", type: "uint256" }], name: "ProposalCanceled", type: "event" }, { anonymous: false, inputs: [{ indexed: false, internalType: "uint256", name: "proposalId", type: "uint256" }, { indexed: false, internalType: "address", name: "proposer", type: "address" }, { indexed: false, internalType: "address[]", name: "targets", type: "address[]" }, { indexed: false, internalType: "uint256[]", name: "values", type: "uint256[]" }, { indexed: false, internalType: "string[]", name: "signatures", type: "string[]" }, { indexed: false, internalType: "bytes[]", name: "calldatas", type: "bytes[]" }, { indexed: false, internalType: "uint256", name: "startBlock", type: "uint256" }, { indexed: false, internalType: "uint256", name: "endBlock", type: "uint256" }, { indexed: false, internalType: "string", name: "description", type: "string" }], name: "ProposalCreated", type: "event" }, { anonymous: false, inputs: [{ indexed: false, internalType: "uint256", name: "proposalId", type: "uint256" }], name: "ProposalExecuted", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "address", name: "voter", type: "address" }, { indexed: false, internalType: "uint256", name: "proposalId", type: "uint256" }, { indexed: false, internalType: "uint8", name: "support", type: "uint8" }, { indexed: false, internalType: "uint256", name: "weight", type: "uint256" }, { indexed: false, internalType: "string", name: "reason", type: "string" }], name: "VoteCast", type: "event" }, { inputs: [], name: "BALLOT_TYPEHASH", outputs: [{ internalType: "bytes32", name: "", type: "bytes32" }], stateMutability: "view", type: "function" }, { inputs: [], name: "COUNTING_MODE", outputs: [{ internalType: "string", name: "", type: "string" }], stateMutability: "pure", type: "function" }, { inputs: [{ internalType: "uint256", name: "proposalId", type: "uint256" }, { internalType: "uint8", name: "support", type: "uint8" }], name: "castVote", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "uint256", name: "proposalId", type: "uint256" }, { internalType: "uint8", name: "support", type: "uint8" }, { internalType: "uint8", name: "v", type: "uint8" }, { internalType: "bytes32", name: "r", type: "bytes32" }, { internalType: "bytes32", name: "s", type: "bytes32" }], name: "castVoteBySig", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "uint256", name: "proposalId", type: "uint256" }, { internalType: "uint8", name: "support", type: "uint8" }, { internalType: "string", name: "reason", type: "string" }], name: "castVoteWithReason", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address[]", name: "targets", type: "address[]" }, { internalType: "uint256[]", name: "values", type: "uint256[]" }, { internalType: "bytes[]", name: "calldatas", type: "bytes[]" }, { internalType: "bytes32", name: "descriptionHash", type: "bytes32" }], name: "execute", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "payable", type: "function" }, { inputs: [{ internalType: "address", name: "account", type: "address" }, { internalType: "uint256", name: "blockNumber", type: "uint256" }], name: "getVotes", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "uint256", name: "proposalId", type: "uint256" }, { internalType: "address", name: "account", type: "address" }], name: "hasVoted", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address[]", name: "targets", type: "address[]" }, { internalType: "uint256[]", name: "values", type: "uint256[]" }, { internalType: "bytes[]", name: "calldatas", type: "bytes[]" }, { internalType: "bytes32", name: "descriptionHash", type: "bytes32" }], name: "hashProposal", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "pure", type: "function" }, { inputs: [], name: "name", outputs: [{ internalType: "string", name: "", type: "string" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "uint256", name: "proposalId", type: "uint256" }], name: "proposalDeadline", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "uint256", name: "proposalId", type: "uint256" }], name: "proposalSnapshot", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [], name: "proposalThreshold", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address[]", name: "targets", type: "address[]" }, { internalType: "uint256[]", name: "values", type: "uint256[]" }, { internalType: "bytes[]", name: "calldatas", type: "bytes[]" }, { internalType: "string", name: "description", type: "string" }], name: "propose", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "uint256", name: "blockNumber", type: "uint256" }], name: "quorum", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "target", type: "address" }, { internalType: "uint256", name: "value", type: "uint256" }, { internalType: "bytes", name: "data", type: "bytes" }], name: "relay", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "uint256", name: "proposalId", type: "uint256" }], name: "state", outputs: [{ internalType: "enum IGovernorUpgradeable.ProposalState", name: "", type: "uint8" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "bytes4", name: "interfaceId", type: "bytes4" }], name: "supportsInterface", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "view", type: "function" }, { inputs: [], name: "version", outputs: [{ internalType: "string", name: "", type: "string" }], stateMutability: "view", type: "function" }, { inputs: [], name: "votingDelay", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [], name: "votingPeriod", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { stateMutability: "payable", type: "receive" }];
var P0 = class {
  static createInterface() {
    return new utils_exports.Interface(C0);
  }
  static connect(e, t) {
    return new Contract(e, C0, t);
  }
};
P0.abi = C0;
var E0 = [{ anonymous: false, inputs: [{ indexed: false, internalType: "uint256", name: "proposalId", type: "uint256" }], name: "ProposalCanceled", type: "event" }, { anonymous: false, inputs: [{ indexed: false, internalType: "uint256", name: "proposalId", type: "uint256" }, { indexed: false, internalType: "address", name: "proposer", type: "address" }, { indexed: false, internalType: "address[]", name: "targets", type: "address[]" }, { indexed: false, internalType: "uint256[]", name: "values", type: "uint256[]" }, { indexed: false, internalType: "string[]", name: "signatures", type: "string[]" }, { indexed: false, internalType: "bytes[]", name: "calldatas", type: "bytes[]" }, { indexed: false, internalType: "uint256", name: "startBlock", type: "uint256" }, { indexed: false, internalType: "uint256", name: "endBlock", type: "uint256" }, { indexed: false, internalType: "string", name: "description", type: "string" }], name: "ProposalCreated", type: "event" }, { anonymous: false, inputs: [{ indexed: false, internalType: "uint256", name: "proposalId", type: "uint256" }], name: "ProposalExecuted", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "address", name: "voter", type: "address" }, { indexed: false, internalType: "uint256", name: "proposalId", type: "uint256" }, { indexed: false, internalType: "uint8", name: "support", type: "uint8" }, { indexed: false, internalType: "uint256", name: "weight", type: "uint256" }, { indexed: false, internalType: "string", name: "reason", type: "string" }], name: "VoteCast", type: "event" }, { inputs: [], name: "COUNTING_MODE", outputs: [{ internalType: "string", name: "", type: "string" }], stateMutability: "pure", type: "function" }, { inputs: [{ internalType: "uint256", name: "proposalId", type: "uint256" }, { internalType: "uint8", name: "support", type: "uint8" }], name: "castVote", outputs: [{ internalType: "uint256", name: "balance", type: "uint256" }], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "uint256", name: "proposalId", type: "uint256" }, { internalType: "uint8", name: "support", type: "uint8" }, { internalType: "uint8", name: "v", type: "uint8" }, { internalType: "bytes32", name: "r", type: "bytes32" }, { internalType: "bytes32", name: "s", type: "bytes32" }], name: "castVoteBySig", outputs: [{ internalType: "uint256", name: "balance", type: "uint256" }], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "uint256", name: "proposalId", type: "uint256" }, { internalType: "uint8", name: "support", type: "uint8" }, { internalType: "string", name: "reason", type: "string" }], name: "castVoteWithReason", outputs: [{ internalType: "uint256", name: "balance", type: "uint256" }], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address[]", name: "targets", type: "address[]" }, { internalType: "uint256[]", name: "values", type: "uint256[]" }, { internalType: "bytes[]", name: "calldatas", type: "bytes[]" }, { internalType: "bytes32", name: "descriptionHash", type: "bytes32" }], name: "execute", outputs: [{ internalType: "uint256", name: "proposalId", type: "uint256" }], stateMutability: "payable", type: "function" }, { inputs: [{ internalType: "address", name: "account", type: "address" }, { internalType: "uint256", name: "blockNumber", type: "uint256" }], name: "getVotes", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "uint256", name: "proposalId", type: "uint256" }, { internalType: "address", name: "account", type: "address" }], name: "hasVoted", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address[]", name: "targets", type: "address[]" }, { internalType: "uint256[]", name: "values", type: "uint256[]" }, { internalType: "bytes[]", name: "calldatas", type: "bytes[]" }, { internalType: "bytes32", name: "descriptionHash", type: "bytes32" }], name: "hashProposal", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "pure", type: "function" }, { inputs: [], name: "name", outputs: [{ internalType: "string", name: "", type: "string" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "uint256", name: "proposalId", type: "uint256" }], name: "proposalDeadline", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "uint256", name: "proposalId", type: "uint256" }], name: "proposalSnapshot", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address[]", name: "targets", type: "address[]" }, { internalType: "uint256[]", name: "values", type: "uint256[]" }, { internalType: "bytes[]", name: "calldatas", type: "bytes[]" }, { internalType: "string", name: "description", type: "string" }], name: "propose", outputs: [{ internalType: "uint256", name: "proposalId", type: "uint256" }], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "uint256", name: "blockNumber", type: "uint256" }], name: "quorum", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "uint256", name: "proposalId", type: "uint256" }], name: "state", outputs: [{ internalType: "enum IGovernorUpgradeable.ProposalState", name: "", type: "uint8" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "bytes4", name: "interfaceId", type: "bytes4" }], name: "supportsInterface", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "view", type: "function" }, { inputs: [], name: "version", outputs: [{ internalType: "string", name: "", type: "string" }], stateMutability: "view", type: "function" }, { inputs: [], name: "votingDelay", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [], name: "votingPeriod", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }];
var k0 = class {
  static createInterface() {
    return new utils_exports.Interface(E0);
  }
  static connect(e, t) {
    return new Contract(e, E0, t);
  }
};
k0.abi = E0;
var _0 = [{ anonymous: false, inputs: [{ indexed: true, internalType: "address", name: "delegator", type: "address" }, { indexed: true, internalType: "address", name: "fromDelegate", type: "address" }, { indexed: true, internalType: "address", name: "toDelegate", type: "address" }], name: "DelegateChanged", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "address", name: "delegate", type: "address" }, { indexed: false, internalType: "uint256", name: "previousBalance", type: "uint256" }, { indexed: false, internalType: "uint256", name: "newBalance", type: "uint256" }], name: "DelegateVotesChanged", type: "event" }, { inputs: [{ internalType: "address", name: "delegatee", type: "address" }], name: "delegate", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "delegatee", type: "address" }, { internalType: "uint256", name: "nonce", type: "uint256" }, { internalType: "uint256", name: "expiry", type: "uint256" }, { internalType: "uint8", name: "v", type: "uint8" }, { internalType: "bytes32", name: "r", type: "bytes32" }, { internalType: "bytes32", name: "s", type: "bytes32" }], name: "delegateBySig", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "account", type: "address" }], name: "delegates", outputs: [{ internalType: "address", name: "", type: "address" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "uint256", name: "blockNumber", type: "uint256" }], name: "getPastTotalSupply", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "account", type: "address" }, { internalType: "uint256", name: "blockNumber", type: "uint256" }], name: "getPastVotes", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "account", type: "address" }], name: "getVotes", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }];
var U0 = class {
  static createInterface() {
    return new utils_exports.Interface(_0);
  }
  static connect(e, t) {
    return new Contract(e, _0, t);
  }
};
U0.abi = _0;
var F0 = [{ inputs: [{ internalType: "uint256", name: "tokenId", type: "uint256" }, { internalType: "uint256", name: "salePrice", type: "uint256" }], name: "royaltyInfo", outputs: [{ internalType: "address", name: "receiver", type: "address" }, { internalType: "uint256", name: "royaltyAmount", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "bytes4", name: "interfaceId", type: "bytes4" }], name: "supportsInterface", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "view", type: "function" }];
var S0 = class {
  static createInterface() {
    return new utils_exports.Interface(F0);
  }
  static connect(e, t) {
    return new Contract(e, F0, t);
  }
};
S0.abi = F0;
var A0 = [{ anonymous: false, inputs: [{ indexed: false, internalType: "address", name: "account", type: "address" }], name: "Paused", type: "event" }, { anonymous: false, inputs: [{ indexed: false, internalType: "address", name: "account", type: "address" }], name: "Unpaused", type: "event" }, { inputs: [], name: "paused", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "view", type: "function" }];
var h0 = class {
  static createInterface() {
    return new utils_exports.Interface(A0);
  }
  static connect(e, t) {
    return new Contract(e, A0, t);
  }
};
h0.abi = A0;
var i = [{ anonymous: false, inputs: [{ indexed: true, internalType: "address", name: "account", type: "address" }, { indexed: true, internalType: "address", name: "operator", type: "address" }, { indexed: false, internalType: "bool", name: "approved", type: "bool" }], name: "ApprovalForAll", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "address", name: "operator", type: "address" }, { indexed: true, internalType: "address", name: "from", type: "address" }, { indexed: true, internalType: "address", name: "to", type: "address" }, { indexed: false, internalType: "uint256[]", name: "ids", type: "uint256[]" }, { indexed: false, internalType: "uint256[]", name: "values", type: "uint256[]" }], name: "TransferBatch", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "address", name: "operator", type: "address" }, { indexed: true, internalType: "address", name: "from", type: "address" }, { indexed: true, internalType: "address", name: "to", type: "address" }, { indexed: false, internalType: "uint256", name: "id", type: "uint256" }, { indexed: false, internalType: "uint256", name: "value", type: "uint256" }], name: "TransferSingle", type: "event" }, { anonymous: false, inputs: [{ indexed: false, internalType: "string", name: "value", type: "string" }, { indexed: true, internalType: "uint256", name: "id", type: "uint256" }], name: "URI", type: "event" }, { inputs: [{ internalType: "address", name: "account", type: "address" }, { internalType: "uint256", name: "id", type: "uint256" }], name: "balanceOf", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address[]", name: "accounts", type: "address[]" }, { internalType: "uint256[]", name: "ids", type: "uint256[]" }], name: "balanceOfBatch", outputs: [{ internalType: "uint256[]", name: "", type: "uint256[]" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "account", type: "address" }, { internalType: "address", name: "operator", type: "address" }], name: "isApprovedForAll", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "from", type: "address" }, { internalType: "address", name: "to", type: "address" }, { internalType: "uint256[]", name: "ids", type: "uint256[]" }, { internalType: "uint256[]", name: "amounts", type: "uint256[]" }, { internalType: "bytes", name: "data", type: "bytes" }], name: "safeBatchTransferFrom", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "from", type: "address" }, { internalType: "address", name: "to", type: "address" }, { internalType: "uint256", name: "id", type: "uint256" }, { internalType: "uint256", name: "amount", type: "uint256" }, { internalType: "bytes", name: "data", type: "bytes" }], name: "safeTransferFrom", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "operator", type: "address" }, { internalType: "bool", name: "approved", type: "bool" }], name: "setApprovalForAll", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "bytes4", name: "interfaceId", type: "bytes4" }], name: "supportsInterface", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "uint256", name: "", type: "uint256" }], name: "uri", outputs: [{ internalType: "string", name: "", type: "string" }], stateMutability: "view", type: "function" }];
var _1 = "0x608060405234801561001057600080fd5b506114c2806100206000396000f3fe608060405234801561001057600080fd5b50600436106100875760003560e01c80634e1273f41161005b5780634e1273f41461010a578063a22cb4651461012a578063e985e9c51461013d578063f242432a1461017957600080fd5b8062fdd58e1461008c57806301ffc9a7146100b25780630e89341c146100d55780632eb2c2d6146100f5575b600080fd5b61009f61009a366004610dc6565b61018c565b6040519081526020015b60405180910390f35b6100c56100c0366004610e09565b610237565b60405190151581526020016100a9565b6100e86100e3366004610e2d565b610289565b6040516100a99190610e93565b610108610103366004610ff2565b61031d565b005b61011d61011836600461109c565b6103bf565b6040516100a991906111a2565b6101086101383660046111b5565b6104fd565b6100c561014b3660046111f1565b6001600160a01b03918216600090815260666020908152604080832093909416825291909152205460ff1690565b610108610187366004611224565b61050c565b60006001600160a01b03831661020f5760405162461bcd60e51b815260206004820152602b60248201527f455243313135353a2062616c616e636520717565727920666f7220746865207a60448201527f65726f206164647265737300000000000000000000000000000000000000000060648201526084015b60405180910390fd5b5060009081526065602090815260408083206001600160a01b03949094168352929052205490565b60006001600160e01b03198216636cdb3d1360e11b148061026857506001600160e01b031982166303a24d0760e21b145b8061028357506301ffc9a760e01b6001600160e01b03198316145b92915050565b60606067805461029890611289565b80601f01602080910402602001604051908101604052809291908181526020018280546102c490611289565b80156103115780601f106102e657610100808354040283529160200191610311565b820191906000526020600020905b8154815290600101906020018083116102f457829003601f168201915b50505050509050919050565b6001600160a01b0385163314806103395750610339853361014b565b6103ab5760405162461bcd60e51b815260206004820152603260248201527f455243313135353a207472616e736665722063616c6c6572206973206e6f742060448201527f6f776e6572206e6f7220617070726f76656400000000000000000000000000006064820152608401610206565b6103b885858585856105a7565b5050505050565b606081518351146104385760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e67746860448201527f206d69736d6174636800000000000000000000000000000000000000000000006064820152608401610206565b6000835167ffffffffffffffff81111561045457610454610ea6565b60405190808252806020026020018201604052801561047d578160200160208202803683370190505b50905060005b84518110156104f5576104c88582815181106104a1576104a16112c4565b60200260200101518583815181106104bb576104bb6112c4565b602002602001015161018c565b8282815181106104da576104da6112c4565b60209081029190910101526104ee816112f0565b9050610483565b509392505050565b61050833838361081d565b5050565b6001600160a01b0385163314806105285750610528853361014b565b61059a5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260448201527f20617070726f76656400000000000000000000000000000000000000000000006064820152608401610206565b6103b88585858585610912565b815183511461061e5760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e6774682060448201527f6d69736d617463680000000000000000000000000000000000000000000000006064820152608401610206565b6001600160a01b0384166106825760405162461bcd60e51b815260206004820152602560248201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604482015264647265737360d81b6064820152608401610206565b3360005b84518110156107af5760008582815181106106a3576106a36112c4565b6020026020010151905060008583815181106106c1576106c16112c4565b60209081029190910181015160008481526065835260408082206001600160a01b038e1683529093529190912054909150818110156107555760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60448201526939103a3930b739b332b960b11b6064820152608401610206565b60008381526065602090815260408083206001600160a01b038e8116855292528083208585039055908b1682528120805484929061079490849061130b565b92505081905550505050806107a8906112f0565b9050610686565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516107ff929190611323565b60405180910390a4610815818787878787610abd565b505050505050565b816001600160a01b0316836001600160a01b031614156108a55760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c2073746174757360448201527f20666f722073656c6600000000000000000000000000000000000000000000006064820152608401610206565b6001600160a01b03838116600081815260666020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b0384166109765760405162461bcd60e51b815260206004820152602560248201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604482015264647265737360d81b6064820152608401610206565b3361098f81878761098688610c63565b6103b888610c63565b60008481526065602090815260408083206001600160a01b038a16845290915290205483811015610a155760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60448201526939103a3930b739b332b960b11b6064820152608401610206565b60008581526065602090815260408083206001600160a01b038b8116855292528083208785039055908816825281208054869290610a5490849061130b565b909155505060408051868152602081018690526001600160a01b03808916928a821692918616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4610ab4828888888888610cae565b50505050505050565b6001600160a01b0384163b156108155760405163bc197c8160e01b81526001600160a01b0385169063bc197c8190610b019089908990889088908890600401611351565b6020604051808303816000875af1925050508015610b3c575060408051601f3d908101601f19168201909252610b39918101906113af565b60015b610bf257610b486113cc565b806308c379a01415610b825750610b5d6113e8565b80610b685750610b84565b8060405162461bcd60e51b81526004016102069190610e93565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e204552433131353560448201527f526563656976657220696d706c656d656e7465720000000000000000000000006064820152608401610206565b6001600160e01b0319811663bc197c8160e01b14610ab45760405162461bcd60e51b815260206004820152602860248201527f455243313135353a204552433131353552656365697665722072656a656374656044820152676420746f6b656e7360c01b6064820152608401610206565b60408051600180825281830190925260609160009190602080830190803683370190505090508281600081518110610c9d57610c9d6112c4565b602090810291909101015292915050565b6001600160a01b0384163b156108155760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e6190610cf29089908990889088908890600401611472565b6020604051808303816000875af1925050508015610d2d575060408051601f3d908101601f19168201909252610d2a918101906113af565b60015b610d3957610b486113cc565b6001600160e01b0319811663f23a6e6160e01b14610ab45760405162461bcd60e51b815260206004820152602860248201527f455243313135353a204552433131353552656365697665722072656a656374656044820152676420746f6b656e7360c01b6064820152608401610206565b80356001600160a01b0381168114610dc157600080fd5b919050565b60008060408385031215610dd957600080fd5b610de283610daa565b946020939093013593505050565b6001600160e01b031981168114610e0657600080fd5b50565b600060208284031215610e1b57600080fd5b8135610e2681610df0565b9392505050565b600060208284031215610e3f57600080fd5b5035919050565b6000815180845260005b81811015610e6c57602081850181015186830182015201610e50565b81811115610e7e576000602083870101525b50601f01601f19169290920160200192915050565b602081526000610e266020830184610e46565b634e487b7160e01b600052604160045260246000fd5b601f8201601f1916810167ffffffffffffffff81118282101715610ee257610ee2610ea6565b6040525050565b600067ffffffffffffffff821115610f0357610f03610ea6565b5060051b60200190565b600082601f830112610f1e57600080fd5b81356020610f2b82610ee9565b604051610f388282610ebc565b83815260059390931b8501820192828101915086841115610f5857600080fd5b8286015b84811015610f735780358352918301918301610f5c565b509695505050505050565b600082601f830112610f8f57600080fd5b813567ffffffffffffffff811115610fa957610fa9610ea6565b604051610fc0601f8301601f191660200182610ebc565b818152846020838601011115610fd557600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a0868803121561100a57600080fd5b61101386610daa565b945061102160208701610daa565b9350604086013567ffffffffffffffff8082111561103e57600080fd5b61104a89838a01610f0d565b9450606088013591508082111561106057600080fd5b61106c89838a01610f0d565b9350608088013591508082111561108257600080fd5b5061108f88828901610f7e565b9150509295509295909350565b600080604083850312156110af57600080fd5b823567ffffffffffffffff808211156110c757600080fd5b818501915085601f8301126110db57600080fd5b813560206110e882610ee9565b6040516110f58282610ebc565b83815260059390931b850182019282810191508984111561111557600080fd5b948201945b8386101561113a5761112b86610daa565b8252948201949082019061111a565b9650508601359250508082111561115057600080fd5b5061115d85828601610f0d565b9150509250929050565b600081518084526020808501945080840160005b838110156111975781518752958201959082019060010161117b565b509495945050505050565b602081526000610e266020830184611167565b600080604083850312156111c857600080fd5b6111d183610daa565b9150602083013580151581146111e657600080fd5b809150509250929050565b6000806040838503121561120457600080fd5b61120d83610daa565b915061121b60208401610daa565b90509250929050565b600080600080600060a0868803121561123c57600080fd5b61124586610daa565b945061125360208701610daa565b93506040860135925060608601359150608086013567ffffffffffffffff81111561127d57600080fd5b61108f88828901610f7e565b600181811c9082168061129d57607f821691505b602082108114156112be57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600019821415611304576113046112da565b5060010190565b6000821982111561131e5761131e6112da565b500190565b6040815260006113366040830185611167565b82810360208401526113488185611167565b95945050505050565b60006001600160a01b03808816835280871660208401525060a0604083015261137d60a0830186611167565b828103606084015261138f8186611167565b905082810360808401526113a38185610e46565b98975050505050505050565b6000602082840312156113c157600080fd5b8151610e2681610df0565b600060033d11156113e55760046000803e5060005160e01c5b90565b600060443d10156113f65790565b6040516003193d81016004833e81513d67ffffffffffffffff816024840111818411171561142657505050505090565b828501915081518181111561143e5750505050505090565b843d87010160208285010111156114585750505050505090565b61146760208286010187610ebc565b509095945050505050565b60006001600160a01b03808816835280871660208401525084604083015283606083015260a060808301526114aa60a0830184610e46565b97965050505050505056fea164736f6c634300080c000a";
var h5 = (a) => a.length > 1;
var d = class extends ContractFactory {
  constructor(...e) {
    h5(e) ? super(...e) : super(i, _1, e[0]), this.contractName = "ERC1155Upgradeable";
  }
  deploy(e) {
    return super.deploy(e || {});
  }
  getDeployTransaction(e) {
    return super.getDeployTransaction(e || {});
  }
  attach(e) {
    return super.attach(e);
  }
  connect(e) {
    return super.connect(e);
  }
  static createInterface() {
    return new utils_exports.Interface(i);
  }
  static connect(e, t) {
    return new Contract(e, i, t);
  }
};
d.bytecode = _1, d.abi = i;
var D0 = [{ anonymous: false, inputs: [{ indexed: true, internalType: "address", name: "account", type: "address" }, { indexed: true, internalType: "address", name: "operator", type: "address" }, { indexed: false, internalType: "bool", name: "approved", type: "bool" }], name: "ApprovalForAll", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "address", name: "operator", type: "address" }, { indexed: true, internalType: "address", name: "from", type: "address" }, { indexed: true, internalType: "address", name: "to", type: "address" }, { indexed: false, internalType: "uint256[]", name: "ids", type: "uint256[]" }, { indexed: false, internalType: "uint256[]", name: "values", type: "uint256[]" }], name: "TransferBatch", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "address", name: "operator", type: "address" }, { indexed: true, internalType: "address", name: "from", type: "address" }, { indexed: true, internalType: "address", name: "to", type: "address" }, { indexed: false, internalType: "uint256", name: "id", type: "uint256" }, { indexed: false, internalType: "uint256", name: "value", type: "uint256" }], name: "TransferSingle", type: "event" }, { anonymous: false, inputs: [{ indexed: false, internalType: "string", name: "value", type: "string" }, { indexed: true, internalType: "uint256", name: "id", type: "uint256" }], name: "URI", type: "event" }, { inputs: [{ internalType: "address", name: "account", type: "address" }, { internalType: "uint256", name: "id", type: "uint256" }], name: "balanceOf", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address[]", name: "accounts", type: "address[]" }, { internalType: "uint256[]", name: "ids", type: "uint256[]" }], name: "balanceOfBatch", outputs: [{ internalType: "uint256[]", name: "", type: "uint256[]" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "account", type: "address" }, { internalType: "uint256", name: "id", type: "uint256" }, { internalType: "uint256", name: "value", type: "uint256" }], name: "burn", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "account", type: "address" }, { internalType: "uint256[]", name: "ids", type: "uint256[]" }, { internalType: "uint256[]", name: "values", type: "uint256[]" }], name: "burnBatch", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "account", type: "address" }, { internalType: "address", name: "operator", type: "address" }], name: "isApprovedForAll", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "from", type: "address" }, { internalType: "address", name: "to", type: "address" }, { internalType: "uint256[]", name: "ids", type: "uint256[]" }, { internalType: "uint256[]", name: "amounts", type: "uint256[]" }, { internalType: "bytes", name: "data", type: "bytes" }], name: "safeBatchTransferFrom", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "from", type: "address" }, { internalType: "address", name: "to", type: "address" }, { internalType: "uint256", name: "id", type: "uint256" }, { internalType: "uint256", name: "amount", type: "uint256" }, { internalType: "bytes", name: "data", type: "bytes" }], name: "safeTransferFrom", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "operator", type: "address" }, { internalType: "bool", name: "approved", type: "bool" }], name: "setApprovalForAll", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "bytes4", name: "interfaceId", type: "bytes4" }], name: "supportsInterface", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "uint256", name: "", type: "uint256" }], name: "uri", outputs: [{ internalType: "string", name: "", type: "string" }], stateMutability: "view", type: "function" }];
var B0 = class {
  static createInterface() {
    return new utils_exports.Interface(D0);
  }
  static connect(e, t) {
    return new Contract(e, D0, t);
  }
};
B0.abi = D0;
var O0 = [{ anonymous: false, inputs: [{ indexed: true, internalType: "address", name: "account", type: "address" }, { indexed: true, internalType: "address", name: "operator", type: "address" }, { indexed: false, internalType: "bool", name: "approved", type: "bool" }], name: "ApprovalForAll", type: "event" }, { anonymous: false, inputs: [{ indexed: false, internalType: "address", name: "account", type: "address" }], name: "Paused", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "address", name: "operator", type: "address" }, { indexed: true, internalType: "address", name: "from", type: "address" }, { indexed: true, internalType: "address", name: "to", type: "address" }, { indexed: false, internalType: "uint256[]", name: "ids", type: "uint256[]" }, { indexed: false, internalType: "uint256[]", name: "values", type: "uint256[]" }], name: "TransferBatch", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "address", name: "operator", type: "address" }, { indexed: true, internalType: "address", name: "from", type: "address" }, { indexed: true, internalType: "address", name: "to", type: "address" }, { indexed: false, internalType: "uint256", name: "id", type: "uint256" }, { indexed: false, internalType: "uint256", name: "value", type: "uint256" }], name: "TransferSingle", type: "event" }, { anonymous: false, inputs: [{ indexed: false, internalType: "string", name: "value", type: "string" }, { indexed: true, internalType: "uint256", name: "id", type: "uint256" }], name: "URI", type: "event" }, { anonymous: false, inputs: [{ indexed: false, internalType: "address", name: "account", type: "address" }], name: "Unpaused", type: "event" }, { inputs: [{ internalType: "address", name: "account", type: "address" }, { internalType: "uint256", name: "id", type: "uint256" }], name: "balanceOf", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address[]", name: "accounts", type: "address[]" }, { internalType: "uint256[]", name: "ids", type: "uint256[]" }], name: "balanceOfBatch", outputs: [{ internalType: "uint256[]", name: "", type: "uint256[]" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "account", type: "address" }, { internalType: "address", name: "operator", type: "address" }], name: "isApprovedForAll", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "view", type: "function" }, { inputs: [], name: "paused", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "from", type: "address" }, { internalType: "address", name: "to", type: "address" }, { internalType: "uint256[]", name: "ids", type: "uint256[]" }, { internalType: "uint256[]", name: "amounts", type: "uint256[]" }, { internalType: "bytes", name: "data", type: "bytes" }], name: "safeBatchTransferFrom", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "from", type: "address" }, { internalType: "address", name: "to", type: "address" }, { internalType: "uint256", name: "id", type: "uint256" }, { internalType: "uint256", name: "amount", type: "uint256" }, { internalType: "bytes", name: "data", type: "bytes" }], name: "safeTransferFrom", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "operator", type: "address" }, { internalType: "bool", name: "approved", type: "bool" }], name: "setApprovalForAll", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "bytes4", name: "interfaceId", type: "bytes4" }], name: "supportsInterface", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "uint256", name: "", type: "uint256" }], name: "uri", outputs: [{ internalType: "string", name: "", type: "string" }], stateMutability: "view", type: "function" }];
var V0 = class {
  static createInterface() {
    return new utils_exports.Interface(O0);
  }
  static connect(e, t) {
    return new Contract(e, O0, t);
  }
};
V0.abi = O0;
var W0 = [{ anonymous: false, inputs: [{ indexed: true, internalType: "address", name: "account", type: "address" }, { indexed: true, internalType: "address", name: "operator", type: "address" }, { indexed: false, internalType: "bool", name: "approved", type: "bool" }], name: "ApprovalForAll", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "address", name: "operator", type: "address" }, { indexed: true, internalType: "address", name: "from", type: "address" }, { indexed: true, internalType: "address", name: "to", type: "address" }, { indexed: false, internalType: "uint256[]", name: "ids", type: "uint256[]" }, { indexed: false, internalType: "uint256[]", name: "values", type: "uint256[]" }], name: "TransferBatch", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "address", name: "operator", type: "address" }, { indexed: true, internalType: "address", name: "from", type: "address" }, { indexed: true, internalType: "address", name: "to", type: "address" }, { indexed: false, internalType: "uint256", name: "id", type: "uint256" }, { indexed: false, internalType: "uint256", name: "value", type: "uint256" }], name: "TransferSingle", type: "event" }, { anonymous: false, inputs: [{ indexed: false, internalType: "string", name: "value", type: "string" }, { indexed: true, internalType: "uint256", name: "id", type: "uint256" }], name: "URI", type: "event" }, { inputs: [{ internalType: "address", name: "account", type: "address" }, { internalType: "uint256", name: "id", type: "uint256" }], name: "balanceOf", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address[]", name: "accounts", type: "address[]" }, { internalType: "uint256[]", name: "ids", type: "uint256[]" }], name: "balanceOfBatch", outputs: [{ internalType: "uint256[]", name: "", type: "uint256[]" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "account", type: "address" }, { internalType: "address", name: "operator", type: "address" }], name: "isApprovedForAll", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "from", type: "address" }, { internalType: "address", name: "to", type: "address" }, { internalType: "uint256[]", name: "ids", type: "uint256[]" }, { internalType: "uint256[]", name: "amounts", type: "uint256[]" }, { internalType: "bytes", name: "data", type: "bytes" }], name: "safeBatchTransferFrom", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "from", type: "address" }, { internalType: "address", name: "to", type: "address" }, { internalType: "uint256", name: "id", type: "uint256" }, { internalType: "uint256", name: "amount", type: "uint256" }, { internalType: "bytes", name: "data", type: "bytes" }], name: "safeTransferFrom", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "operator", type: "address" }, { internalType: "bool", name: "approved", type: "bool" }], name: "setApprovalForAll", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "bytes4", name: "interfaceId", type: "bytes4" }], name: "supportsInterface", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "uint256", name: "id", type: "uint256" }], name: "uri", outputs: [{ internalType: "string", name: "", type: "string" }], stateMutability: "view", type: "function" }];
var q0 = class {
  static createInterface() {
    return new utils_exports.Interface(W0);
  }
  static connect(e, t) {
    return new Contract(e, W0, t);
  }
};
q0.abi = W0;
var N0 = [{ inputs: [{ internalType: "address", name: "operator", type: "address" }, { internalType: "address", name: "from", type: "address" }, { internalType: "uint256[]", name: "ids", type: "uint256[]" }, { internalType: "uint256[]", name: "values", type: "uint256[]" }, { internalType: "bytes", name: "data", type: "bytes" }], name: "onERC1155BatchReceived", outputs: [{ internalType: "bytes4", name: "", type: "bytes4" }], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "operator", type: "address" }, { internalType: "address", name: "from", type: "address" }, { internalType: "uint256", name: "id", type: "uint256" }, { internalType: "uint256", name: "value", type: "uint256" }, { internalType: "bytes", name: "data", type: "bytes" }], name: "onERC1155Received", outputs: [{ internalType: "bytes4", name: "", type: "bytes4" }], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "bytes4", name: "interfaceId", type: "bytes4" }], name: "supportsInterface", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "view", type: "function" }];
var L0 = class {
  static createInterface() {
    return new utils_exports.Interface(N0);
  }
  static connect(e, t) {
    return new Contract(e, N0, t);
  }
};
L0.abi = N0;
var G0 = [{ anonymous: false, inputs: [{ indexed: true, internalType: "address", name: "account", type: "address" }, { indexed: true, internalType: "address", name: "operator", type: "address" }, { indexed: false, internalType: "bool", name: "approved", type: "bool" }], name: "ApprovalForAll", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "address", name: "operator", type: "address" }, { indexed: true, internalType: "address", name: "from", type: "address" }, { indexed: true, internalType: "address", name: "to", type: "address" }, { indexed: false, internalType: "uint256[]", name: "ids", type: "uint256[]" }, { indexed: false, internalType: "uint256[]", name: "values", type: "uint256[]" }], name: "TransferBatch", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "address", name: "operator", type: "address" }, { indexed: true, internalType: "address", name: "from", type: "address" }, { indexed: true, internalType: "address", name: "to", type: "address" }, { indexed: false, internalType: "uint256", name: "id", type: "uint256" }, { indexed: false, internalType: "uint256", name: "value", type: "uint256" }], name: "TransferSingle", type: "event" }, { anonymous: false, inputs: [{ indexed: false, internalType: "string", name: "value", type: "string" }, { indexed: true, internalType: "uint256", name: "id", type: "uint256" }], name: "URI", type: "event" }, { inputs: [{ internalType: "address", name: "account", type: "address" }, { internalType: "uint256", name: "id", type: "uint256" }], name: "balanceOf", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address[]", name: "accounts", type: "address[]" }, { internalType: "uint256[]", name: "ids", type: "uint256[]" }], name: "balanceOfBatch", outputs: [{ internalType: "uint256[]", name: "", type: "uint256[]" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "account", type: "address" }, { internalType: "address", name: "operator", type: "address" }], name: "isApprovedForAll", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "from", type: "address" }, { internalType: "address", name: "to", type: "address" }, { internalType: "uint256[]", name: "ids", type: "uint256[]" }, { internalType: "uint256[]", name: "amounts", type: "uint256[]" }, { internalType: "bytes", name: "data", type: "bytes" }], name: "safeBatchTransferFrom", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "from", type: "address" }, { internalType: "address", name: "to", type: "address" }, { internalType: "uint256", name: "id", type: "uint256" }, { internalType: "uint256", name: "amount", type: "uint256" }, { internalType: "bytes", name: "data", type: "bytes" }], name: "safeTransferFrom", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "operator", type: "address" }, { internalType: "bool", name: "approved", type: "bool" }], name: "setApprovalForAll", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "bytes4", name: "interfaceId", type: "bytes4" }], name: "supportsInterface", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "view", type: "function" }];
var H0 = class {
  static createInterface() {
    return new utils_exports.Interface(G0);
  }
  static connect(e, t) {
    return new Contract(e, G0, t);
  }
};
H0.abi = G0;
var r = [{ inputs: [{ internalType: "address", name: "", type: "address" }, { internalType: "address", name: "", type: "address" }, { internalType: "uint256[]", name: "", type: "uint256[]" }, { internalType: "uint256[]", name: "", type: "uint256[]" }, { internalType: "bytes", name: "", type: "bytes" }], name: "onERC1155BatchReceived", outputs: [{ internalType: "bytes4", name: "", type: "bytes4" }], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "", type: "address" }, { internalType: "address", name: "", type: "address" }, { internalType: "uint256", name: "", type: "uint256" }, { internalType: "uint256", name: "", type: "uint256" }, { internalType: "bytes", name: "", type: "bytes" }], name: "onERC1155Received", outputs: [{ internalType: "bytes4", name: "", type: "bytes4" }], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "bytes4", name: "interfaceId", type: "bytes4" }], name: "supportsInterface", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "view", type: "function" }];
var U1 = "0x608060405234801561001057600080fd5b506103a9806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806301ffc9a714610046578063bc197c811461006e578063f23a6e61146100a6575b600080fd5b6100596100543660046100fc565b6100c5565b60405190151581526020015b60405180910390f35b61008d61007c36600461028d565b63bc197c8160e01b95945050505050565b6040516001600160e01b03199091168152602001610065565b61008d6100b4366004610337565b63f23a6e6160e01b95945050505050565b60006001600160e01b03198216630271189760e51b14806100f657506301ffc9a760e01b6001600160e01b03198316145b92915050565b60006020828403121561010e57600080fd5b81356001600160e01b03198116811461012657600080fd5b9392505050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461015157600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561019557610195610156565b604052919050565b600082601f8301126101ae57600080fd5b8135602067ffffffffffffffff8211156101ca576101ca610156565b8160051b6101d982820161016c565b92835284810182019282810190878511156101f357600080fd5b83870192505b84831015610212578235825291830191908301906101f9565b979650505050505050565b600082601f83011261022e57600080fd5b813567ffffffffffffffff81111561024857610248610156565b61025b601f8201601f191660200161016c565b81815284602083860101111561027057600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a086880312156102a557600080fd5b6102ae8661012d565b94506102bc6020870161012d565b9350604086013567ffffffffffffffff808211156102d957600080fd5b6102e589838a0161019d565b945060608801359150808211156102fb57600080fd5b61030789838a0161019d565b9350608088013591508082111561031d57600080fd5b5061032a8882890161021d565b9150509295509295909350565b600080600080600060a0868803121561034f57600080fd5b6103588661012d565b94506103666020870161012d565b93506040860135925060608601359150608086013567ffffffffffffffff81111561039057600080fd5b61032a8882890161021d56fea164736f6c634300080c000a";
var X5 = (a) => a.length > 1;
var s = class extends ContractFactory {
  constructor(...e) {
    X5(e) ? super(...e) : super(r, U1, e[0]), this.contractName = "ERC1155HolderUpgradeable";
  }
  deploy(e) {
    return super.deploy(e || {});
  }
  getDeployTransaction(e) {
    return super.getDeployTransaction(e || {});
  }
  attach(e) {
    return super.attach(e);
  }
  connect(e) {
    return super.connect(e);
  }
  static createInterface() {
    return new utils_exports.Interface(r);
  }
  static connect(e, t) {
    return new Contract(e, r, t);
  }
};
s.bytecode = U1, s.abi = r;
var Q0 = [{ inputs: [{ internalType: "address", name: "operator", type: "address" }, { internalType: "address", name: "from", type: "address" }, { internalType: "uint256[]", name: "ids", type: "uint256[]" }, { internalType: "uint256[]", name: "values", type: "uint256[]" }, { internalType: "bytes", name: "data", type: "bytes" }], name: "onERC1155BatchReceived", outputs: [{ internalType: "bytes4", name: "", type: "bytes4" }], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "operator", type: "address" }, { internalType: "address", name: "from", type: "address" }, { internalType: "uint256", name: "id", type: "uint256" }, { internalType: "uint256", name: "value", type: "uint256" }, { internalType: "bytes", name: "data", type: "bytes" }], name: "onERC1155Received", outputs: [{ internalType: "bytes4", name: "", type: "bytes4" }], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "bytes4", name: "interfaceId", type: "bytes4" }], name: "supportsInterface", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "view", type: "function" }];
var z0 = class {
  static createInterface() {
    return new utils_exports.Interface(Q0);
  }
  static connect(e, t) {
    return new Contract(e, Q0, t);
  }
};
z0.abi = Q0;
var p = [{ anonymous: false, inputs: [{ indexed: true, internalType: "address", name: "owner", type: "address" }, { indexed: true, internalType: "address", name: "spender", type: "address" }, { indexed: false, internalType: "uint256", name: "value", type: "uint256" }], name: "Approval", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "address", name: "from", type: "address" }, { indexed: true, internalType: "address", name: "to", type: "address" }, { indexed: false, internalType: "uint256", name: "value", type: "uint256" }], name: "Transfer", type: "event" }, { inputs: [{ internalType: "address", name: "owner", type: "address" }, { internalType: "address", name: "spender", type: "address" }], name: "allowance", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "spender", type: "address" }, { internalType: "uint256", name: "amount", type: "uint256" }], name: "approve", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "account", type: "address" }], name: "balanceOf", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [], name: "decimals", outputs: [{ internalType: "uint8", name: "", type: "uint8" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "spender", type: "address" }, { internalType: "uint256", name: "subtractedValue", type: "uint256" }], name: "decreaseAllowance", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "spender", type: "address" }, { internalType: "uint256", name: "addedValue", type: "uint256" }], name: "increaseAllowance", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "nonpayable", type: "function" }, { inputs: [], name: "name", outputs: [{ internalType: "string", name: "", type: "string" }], stateMutability: "view", type: "function" }, { inputs: [], name: "symbol", outputs: [{ internalType: "string", name: "", type: "string" }], stateMutability: "view", type: "function" }, { inputs: [], name: "totalSupply", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "to", type: "address" }, { internalType: "uint256", name: "amount", type: "uint256" }], name: "transfer", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "from", type: "address" }, { internalType: "address", name: "to", type: "address" }, { internalType: "uint256", name: "amount", type: "uint256" }], name: "transferFrom", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "nonpayable", type: "function" }];
var F1 = "0x608060405234801561001057600080fd5b5061090c806100206000396000f3fe608060405234801561001057600080fd5b50600436106100c95760003560e01c80633950935111610081578063a457c2d71161005b578063a457c2d714610187578063a9059cbb1461019a578063dd62ed3e146101ad57600080fd5b8063395093511461014357806370a082311461015657806395d89b411461017f57600080fd5b806318160ddd116100b257806318160ddd1461010f57806323b872dd14610121578063313ce5671461013457600080fd5b806306fdde03146100ce578063095ea7b3146100ec575b600080fd5b6100d66101e6565b6040516100e39190610772565b60405180910390f35b6100ff6100fa3660046107e3565b610278565b60405190151581526020016100e3565b6035545b6040519081526020016100e3565b6100ff61012f36600461080d565b610290565b604051601281526020016100e3565b6100ff6101513660046107e3565b6102b4565b610113610164366004610849565b6001600160a01b031660009081526033602052604090205490565b6100d66102f3565b6100ff6101953660046107e3565b610302565b6100ff6101a83660046107e3565b6103b1565b6101136101bb36600461086b565b6001600160a01b03918216600090815260346020908152604080832093909416825291909152205490565b6060603680546101f59061089e565b80601f01602080910402602001604051908101604052809291908181526020018280546102219061089e565b801561026e5780601f106102435761010080835404028352916020019161026e565b820191906000526020600020905b81548152906001019060200180831161025157829003601f168201915b5050505050905090565b6000336102868185856103bf565b5060019392505050565b60003361029e8582856104e3565b6102a9858585610575565b506001949350505050565b3360008181526034602090815260408083206001600160a01b038716845290915281205490919061028690829086906102ee9087906108d9565b6103bf565b6060603780546101f59061089e565b3360008181526034602090815260408083206001600160a01b0387168452909152812054909190838110156103a45760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f00000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6102a982868684036103bf565b600033610286818585610575565b6001600160a01b0383166104215760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b606482015260840161039b565b6001600160a01b0382166104825760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b606482015260840161039b565b6001600160a01b0383811660008181526034602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b03838116600090815260346020908152604080832093861683529290522054600019811461056f57818110156105625760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000604482015260640161039b565b61056f84848484036103bf565b50505050565b6001600160a01b0383166105f15760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f6472657373000000000000000000000000000000000000000000000000000000606482015260840161039b565b6001600160a01b0382166106535760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b606482015260840161039b565b6001600160a01b038316600090815260336020526040902054818110156106e25760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e63650000000000000000000000000000000000000000000000000000606482015260840161039b565b6001600160a01b038085166000908152603360205260408082208585039055918516815290812080548492906107199084906108d9565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161076591815260200190565b60405180910390a361056f565b600060208083528351808285015260005b8181101561079f57858101830151858201604001528201610783565b818111156107b1576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b03811681146107de57600080fd5b919050565b600080604083850312156107f657600080fd5b6107ff836107c7565b946020939093013593505050565b60008060006060848603121561082257600080fd5b61082b846107c7565b9250610839602085016107c7565b9150604084013590509250925092565b60006020828403121561085b57600080fd5b610864826107c7565b9392505050565b6000806040838503121561087e57600080fd5b610887836107c7565b9150610895602084016107c7565b90509250929050565b600181811c908216806108b257607f821691505b602082108114156108d357634e487b7160e01b600052602260045260246000fd5b50919050565b600082198211156108fa57634e487b7160e01b600052601160045260246000fd5b50019056fea164736f6c634300080c000a";
var ee = (a) => a.length > 1;
var y = class extends ContractFactory {
  constructor(...e) {
    ee(e) ? super(...e) : super(p, F1, e[0]), this.contractName = "ERC20Upgradeable";
  }
  deploy(e) {
    return super.deploy(e || {});
  }
  getDeployTransaction(e) {
    return super.getDeployTransaction(e || {});
  }
  attach(e) {
    return super.attach(e);
  }
  connect(e) {
    return super.connect(e);
  }
  static createInterface() {
    return new utils_exports.Interface(p);
  }
  static connect(e, t) {
    return new Contract(e, p, t);
  }
};
y.bytecode = F1, y.abi = p;
var Y0 = [{ anonymous: false, inputs: [{ indexed: true, internalType: "address", name: "owner", type: "address" }, { indexed: true, internalType: "address", name: "spender", type: "address" }, { indexed: false, internalType: "uint256", name: "value", type: "uint256" }], name: "Approval", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "address", name: "from", type: "address" }, { indexed: true, internalType: "address", name: "to", type: "address" }, { indexed: false, internalType: "uint256", name: "value", type: "uint256" }], name: "Transfer", type: "event" }, { inputs: [], name: "DOMAIN_SEPARATOR", outputs: [{ internalType: "bytes32", name: "", type: "bytes32" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "owner", type: "address" }, { internalType: "address", name: "spender", type: "address" }], name: "allowance", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "spender", type: "address" }, { internalType: "uint256", name: "amount", type: "uint256" }], name: "approve", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "account", type: "address" }], name: "balanceOf", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [], name: "decimals", outputs: [{ internalType: "uint8", name: "", type: "uint8" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "spender", type: "address" }, { internalType: "uint256", name: "subtractedValue", type: "uint256" }], name: "decreaseAllowance", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "spender", type: "address" }, { internalType: "uint256", name: "addedValue", type: "uint256" }], name: "increaseAllowance", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "nonpayable", type: "function" }, { inputs: [], name: "name", outputs: [{ internalType: "string", name: "", type: "string" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "owner", type: "address" }], name: "nonces", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "owner", type: "address" }, { internalType: "address", name: "spender", type: "address" }, { internalType: "uint256", name: "value", type: "uint256" }, { internalType: "uint256", name: "deadline", type: "uint256" }, { internalType: "uint8", name: "v", type: "uint8" }, { internalType: "bytes32", name: "r", type: "bytes32" }, { internalType: "bytes32", name: "s", type: "bytes32" }], name: "permit", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [], name: "symbol", outputs: [{ internalType: "string", name: "", type: "string" }], stateMutability: "view", type: "function" }, { inputs: [], name: "totalSupply", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "to", type: "address" }, { internalType: "uint256", name: "amount", type: "uint256" }], name: "transfer", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "from", type: "address" }, { internalType: "address", name: "to", type: "address" }, { internalType: "uint256", name: "amount", type: "uint256" }], name: "transferFrom", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "nonpayable", type: "function" }];
var X0 = class {
  static createInterface() {
    return new utils_exports.Interface(Y0);
  }
  static connect(e, t) {
    return new Contract(e, Y0, t);
  }
};
X0.abi = Y0;
var K0 = [{ inputs: [], name: "DOMAIN_SEPARATOR", outputs: [{ internalType: "bytes32", name: "", type: "bytes32" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "owner", type: "address" }], name: "nonces", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "owner", type: "address" }, { internalType: "address", name: "spender", type: "address" }, { internalType: "uint256", name: "value", type: "uint256" }, { internalType: "uint256", name: "deadline", type: "uint256" }, { internalType: "uint8", name: "v", type: "uint8" }, { internalType: "bytes32", name: "r", type: "bytes32" }, { internalType: "bytes32", name: "s", type: "bytes32" }], name: "permit", outputs: [], stateMutability: "nonpayable", type: "function" }];
var j0 = class {
  static createInterface() {
    return new utils_exports.Interface(K0);
  }
  static connect(e, t) {
    return new Contract(e, K0, t);
  }
};
j0.abi = K0;
var J0 = [{ anonymous: false, inputs: [{ indexed: true, internalType: "address", name: "owner", type: "address" }, { indexed: true, internalType: "address", name: "spender", type: "address" }, { indexed: false, internalType: "uint256", name: "value", type: "uint256" }], name: "Approval", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "address", name: "from", type: "address" }, { indexed: true, internalType: "address", name: "to", type: "address" }, { indexed: false, internalType: "uint256", name: "value", type: "uint256" }], name: "Transfer", type: "event" }, { inputs: [{ internalType: "address", name: "owner", type: "address" }, { internalType: "address", name: "spender", type: "address" }], name: "allowance", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "spender", type: "address" }, { internalType: "uint256", name: "amount", type: "uint256" }], name: "approve", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "account", type: "address" }], name: "balanceOf", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "uint256", name: "amount", type: "uint256" }], name: "burn", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "account", type: "address" }, { internalType: "uint256", name: "amount", type: "uint256" }], name: "burnFrom", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [], name: "decimals", outputs: [{ internalType: "uint8", name: "", type: "uint8" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "spender", type: "address" }, { internalType: "uint256", name: "subtractedValue", type: "uint256" }], name: "decreaseAllowance", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "spender", type: "address" }, { internalType: "uint256", name: "addedValue", type: "uint256" }], name: "increaseAllowance", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "nonpayable", type: "function" }, { inputs: [], name: "name", outputs: [{ internalType: "string", name: "", type: "string" }], stateMutability: "view", type: "function" }, { inputs: [], name: "symbol", outputs: [{ internalType: "string", name: "", type: "string" }], stateMutability: "view", type: "function" }, { inputs: [], name: "totalSupply", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "to", type: "address" }, { internalType: "uint256", name: "amount", type: "uint256" }], name: "transfer", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "from", type: "address" }, { internalType: "address", name: "to", type: "address" }, { internalType: "uint256", name: "amount", type: "uint256" }], name: "transferFrom", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "nonpayable", type: "function" }];
var Z0 = class {
  static createInterface() {
    return new utils_exports.Interface(J0);
  }
  static connect(e, t) {
    return new Contract(e, J0, t);
  }
};
Z0.abi = J0;
var $0 = [{ anonymous: false, inputs: [{ indexed: true, internalType: "address", name: "owner", type: "address" }, { indexed: true, internalType: "address", name: "spender", type: "address" }, { indexed: false, internalType: "uint256", name: "value", type: "uint256" }], name: "Approval", type: "event" }, { anonymous: false, inputs: [{ indexed: false, internalType: "address", name: "account", type: "address" }], name: "Paused", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "address", name: "from", type: "address" }, { indexed: true, internalType: "address", name: "to", type: "address" }, { indexed: false, internalType: "uint256", name: "value", type: "uint256" }], name: "Transfer", type: "event" }, { anonymous: false, inputs: [{ indexed: false, internalType: "address", name: "account", type: "address" }], name: "Unpaused", type: "event" }, { inputs: [{ internalType: "address", name: "owner", type: "address" }, { internalType: "address", name: "spender", type: "address" }], name: "allowance", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "spender", type: "address" }, { internalType: "uint256", name: "amount", type: "uint256" }], name: "approve", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "account", type: "address" }], name: "balanceOf", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [], name: "decimals", outputs: [{ internalType: "uint8", name: "", type: "uint8" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "spender", type: "address" }, { internalType: "uint256", name: "subtractedValue", type: "uint256" }], name: "decreaseAllowance", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "spender", type: "address" }, { internalType: "uint256", name: "addedValue", type: "uint256" }], name: "increaseAllowance", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "nonpayable", type: "function" }, { inputs: [], name: "name", outputs: [{ internalType: "string", name: "", type: "string" }], stateMutability: "view", type: "function" }, { inputs: [], name: "paused", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "view", type: "function" }, { inputs: [], name: "symbol", outputs: [{ internalType: "string", name: "", type: "string" }], stateMutability: "view", type: "function" }, { inputs: [], name: "totalSupply", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "to", type: "address" }, { internalType: "uint256", name: "amount", type: "uint256" }], name: "transfer", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "from", type: "address" }, { internalType: "address", name: "to", type: "address" }, { internalType: "uint256", name: "amount", type: "uint256" }], name: "transferFrom", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "nonpayable", type: "function" }];
var e6 = class {
  static createInterface() {
    return new utils_exports.Interface($0);
  }
  static connect(e, t) {
    return new Contract(e, $0, t);
  }
};
e6.abi = $0;
var t6 = [{ anonymous: false, inputs: [{ indexed: true, internalType: "address", name: "owner", type: "address" }, { indexed: true, internalType: "address", name: "spender", type: "address" }, { indexed: false, internalType: "uint256", name: "value", type: "uint256" }], name: "Approval", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "address", name: "delegator", type: "address" }, { indexed: true, internalType: "address", name: "fromDelegate", type: "address" }, { indexed: true, internalType: "address", name: "toDelegate", type: "address" }], name: "DelegateChanged", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "address", name: "delegate", type: "address" }, { indexed: false, internalType: "uint256", name: "previousBalance", type: "uint256" }, { indexed: false, internalType: "uint256", name: "newBalance", type: "uint256" }], name: "DelegateVotesChanged", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "address", name: "from", type: "address" }, { indexed: true, internalType: "address", name: "to", type: "address" }, { indexed: false, internalType: "uint256", name: "value", type: "uint256" }], name: "Transfer", type: "event" }, { inputs: [], name: "DOMAIN_SEPARATOR", outputs: [{ internalType: "bytes32", name: "", type: "bytes32" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "owner", type: "address" }, { internalType: "address", name: "spender", type: "address" }], name: "allowance", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "spender", type: "address" }, { internalType: "uint256", name: "amount", type: "uint256" }], name: "approve", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "account", type: "address" }], name: "balanceOf", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "account", type: "address" }, { internalType: "uint32", name: "pos", type: "uint32" }], name: "checkpoints", outputs: [{ components: [{ internalType: "uint32", name: "fromBlock", type: "uint32" }, { internalType: "uint224", name: "votes", type: "uint224" }], internalType: "struct ERC20VotesUpgradeable.Checkpoint", name: "", type: "tuple" }], stateMutability: "view", type: "function" }, { inputs: [], name: "decimals", outputs: [{ internalType: "uint8", name: "", type: "uint8" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "spender", type: "address" }, { internalType: "uint256", name: "subtractedValue", type: "uint256" }], name: "decreaseAllowance", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "delegatee", type: "address" }], name: "delegate", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "delegatee", type: "address" }, { internalType: "uint256", name: "nonce", type: "uint256" }, { internalType: "uint256", name: "expiry", type: "uint256" }, { internalType: "uint8", name: "v", type: "uint8" }, { internalType: "bytes32", name: "r", type: "bytes32" }, { internalType: "bytes32", name: "s", type: "bytes32" }], name: "delegateBySig", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "account", type: "address" }], name: "delegates", outputs: [{ internalType: "address", name: "", type: "address" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "uint256", name: "blockNumber", type: "uint256" }], name: "getPastTotalSupply", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "account", type: "address" }, { internalType: "uint256", name: "blockNumber", type: "uint256" }], name: "getPastVotes", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "account", type: "address" }], name: "getVotes", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "spender", type: "address" }, { internalType: "uint256", name: "addedValue", type: "uint256" }], name: "increaseAllowance", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "nonpayable", type: "function" }, { inputs: [], name: "name", outputs: [{ internalType: "string", name: "", type: "string" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "owner", type: "address" }], name: "nonces", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "account", type: "address" }], name: "numCheckpoints", outputs: [{ internalType: "uint32", name: "", type: "uint32" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "owner", type: "address" }, { internalType: "address", name: "spender", type: "address" }, { internalType: "uint256", name: "value", type: "uint256" }, { internalType: "uint256", name: "deadline", type: "uint256" }, { internalType: "uint8", name: "v", type: "uint8" }, { internalType: "bytes32", name: "r", type: "bytes32" }, { internalType: "bytes32", name: "s", type: "bytes32" }], name: "permit", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [], name: "symbol", outputs: [{ internalType: "string", name: "", type: "string" }], stateMutability: "view", type: "function" }, { inputs: [], name: "totalSupply", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "to", type: "address" }, { internalType: "uint256", name: "amount", type: "uint256" }], name: "transfer", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "from", type: "address" }, { internalType: "address", name: "to", type: "address" }, { internalType: "uint256", name: "amount", type: "uint256" }], name: "transferFrom", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "nonpayable", type: "function" }];
var a6 = class {
  static createInterface() {
    return new utils_exports.Interface(t6);
  }
  static connect(e, t) {
    return new Contract(e, t6, t);
  }
};
a6.abi = t6;
var n6 = [{ anonymous: false, inputs: [{ indexed: true, internalType: "address", name: "owner", type: "address" }, { indexed: true, internalType: "address", name: "spender", type: "address" }, { indexed: false, internalType: "uint256", name: "value", type: "uint256" }], name: "Approval", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "address", name: "from", type: "address" }, { indexed: true, internalType: "address", name: "to", type: "address" }, { indexed: false, internalType: "uint256", name: "value", type: "uint256" }], name: "Transfer", type: "event" }, { inputs: [{ internalType: "address", name: "owner", type: "address" }, { internalType: "address", name: "spender", type: "address" }], name: "allowance", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "spender", type: "address" }, { internalType: "uint256", name: "amount", type: "uint256" }], name: "approve", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "account", type: "address" }], name: "balanceOf", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [], name: "decimals", outputs: [{ internalType: "uint8", name: "", type: "uint8" }], stateMutability: "view", type: "function" }, { inputs: [], name: "name", outputs: [{ internalType: "string", name: "", type: "string" }], stateMutability: "view", type: "function" }, { inputs: [], name: "symbol", outputs: [{ internalType: "string", name: "", type: "string" }], stateMutability: "view", type: "function" }, { inputs: [], name: "totalSupply", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "to", type: "address" }, { internalType: "uint256", name: "amount", type: "uint256" }], name: "transfer", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "from", type: "address" }, { internalType: "address", name: "to", type: "address" }, { internalType: "uint256", name: "amount", type: "uint256" }], name: "transferFrom", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "nonpayable", type: "function" }];
var b6 = class {
  static createInterface() {
    return new utils_exports.Interface(n6);
  }
  static connect(e, t) {
    return new Contract(e, n6, t);
  }
};
b6.abi = n6;
var f6 = [{ anonymous: false, inputs: [{ indexed: true, internalType: "address", name: "owner", type: "address" }, { indexed: true, internalType: "address", name: "spender", type: "address" }, { indexed: false, internalType: "uint256", name: "value", type: "uint256" }], name: "Approval", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "address", name: "from", type: "address" }, { indexed: true, internalType: "address", name: "to", type: "address" }, { indexed: false, internalType: "uint256", name: "value", type: "uint256" }], name: "Transfer", type: "event" }, { inputs: [{ internalType: "address", name: "owner", type: "address" }, { internalType: "address", name: "spender", type: "address" }], name: "allowance", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "spender", type: "address" }, { internalType: "uint256", name: "amount", type: "uint256" }], name: "approve", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "account", type: "address" }], name: "balanceOf", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [], name: "totalSupply", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "to", type: "address" }, { internalType: "uint256", name: "amount", type: "uint256" }], name: "transfer", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "from", type: "address" }, { internalType: "address", name: "to", type: "address" }, { internalType: "uint256", name: "amount", type: "uint256" }], name: "transferFrom", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "nonpayable", type: "function" }];
var i6 = class {
  static createInterface() {
    return new utils_exports.Interface(f6);
  }
  static connect(e, t) {
    return new Contract(e, f6, t);
  }
};
i6.abi = f6;
var u = [{ anonymous: false, inputs: [{ indexed: true, internalType: "address", name: "owner", type: "address" }, { indexed: true, internalType: "address", name: "approved", type: "address" }, { indexed: true, internalType: "uint256", name: "tokenId", type: "uint256" }], name: "Approval", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "address", name: "owner", type: "address" }, { indexed: true, internalType: "address", name: "operator", type: "address" }, { indexed: false, internalType: "bool", name: "approved", type: "bool" }], name: "ApprovalForAll", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "address", name: "from", type: "address" }, { indexed: true, internalType: "address", name: "to", type: "address" }, { indexed: true, internalType: "uint256", name: "tokenId", type: "uint256" }], name: "Transfer", type: "event" }, { inputs: [{ internalType: "address", name: "to", type: "address" }, { internalType: "uint256", name: "tokenId", type: "uint256" }], name: "approve", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "owner", type: "address" }], name: "balanceOf", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "uint256", name: "tokenId", type: "uint256" }], name: "getApproved", outputs: [{ internalType: "address", name: "", type: "address" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "owner", type: "address" }, { internalType: "address", name: "operator", type: "address" }], name: "isApprovedForAll", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "view", type: "function" }, { inputs: [], name: "name", outputs: [{ internalType: "string", name: "", type: "string" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "uint256", name: "tokenId", type: "uint256" }], name: "ownerOf", outputs: [{ internalType: "address", name: "", type: "address" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "from", type: "address" }, { internalType: "address", name: "to", type: "address" }, { internalType: "uint256", name: "tokenId", type: "uint256" }], name: "safeTransferFrom", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "from", type: "address" }, { internalType: "address", name: "to", type: "address" }, { internalType: "uint256", name: "tokenId", type: "uint256" }, { internalType: "bytes", name: "_data", type: "bytes" }], name: "safeTransferFrom", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "operator", type: "address" }, { internalType: "bool", name: "approved", type: "bool" }], name: "setApprovalForAll", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "bytes4", name: "interfaceId", type: "bytes4" }], name: "supportsInterface", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "view", type: "function" }, { inputs: [], name: "symbol", outputs: [{ internalType: "string", name: "", type: "string" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "uint256", name: "tokenId", type: "uint256" }], name: "tokenURI", outputs: [{ internalType: "string", name: "", type: "string" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "from", type: "address" }, { internalType: "address", name: "to", type: "address" }, { internalType: "uint256", name: "tokenId", type: "uint256" }], name: "transferFrom", outputs: [], stateMutability: "nonpayable", type: "function" }];
var S1 = "0x608060405234801561001057600080fd5b50611366806100206000396000f3fe608060405234801561001057600080fd5b50600436106100df5760003560e01c80636352211e1161008c578063a22cb46511610066578063a22cb465146101c3578063b88d4fde146101d6578063c87b56dd146101e9578063e985e9c5146101fc57600080fd5b80636352211e1461018757806370a082311461019a57806395d89b41146101bb57600080fd5b8063095ea7b3116100bd578063095ea7b31461014c57806323b872dd1461016157806342842e0e1461017457600080fd5b806301ffc9a7146100e457806306fdde031461010c578063081812fc14610121575b600080fd5b6100f76100f2366004610f43565b610238565b60405190151581526020015b60405180910390f35b61011461028a565b6040516101039190610fb8565b61013461012f366004610fcb565b61031c565b6040516001600160a01b039091168152602001610103565b61015f61015a366004611000565b6103b6565b005b61015f61016f36600461102a565b6104cc565b61015f61018236600461102a565b610553565b610134610195366004610fcb565b61056e565b6101ad6101a8366004611066565b6105f9565b604051908152602001610103565b610114610693565b61015f6101d1366004611081565b6106a2565b61015f6101e43660046110d3565b6106b1565b6101146101f7366004610fcb565b61073f565b6100f761020a3660046111af565b6001600160a01b039182166000908152606a6020908152604080832093909416825291909152205460ff1690565b60006001600160e01b031982166380ac58cd60e01b148061026957506001600160e01b03198216635b5e139f60e01b145b8061028457506301ffc9a760e01b6001600160e01b03198316145b92915050565b606060658054610299906111e2565b80601f01602080910402602001604051908101604052809291908181526020018280546102c5906111e2565b80156103125780601f106102e757610100808354040283529160200191610312565b820191906000526020600020905b8154815290600101906020018083116102f557829003601f168201915b5050505050905090565b6000818152606760205260408120546001600160a01b031661039a5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152606960205260409020546001600160a01b031690565b60006103c18261056e565b9050806001600160a01b0316836001600160a01b0316141561042f5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401610391565b336001600160a01b038216148061044b575061044b813361020a565b6104bd5760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610391565b6104c78383610835565b505050565b6104d633826108b0565b6105485760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f7665640000000000000000000000000000006064820152608401610391565b6104c78383836109a7565b6104c7838383604051806020016040528060008152506106b1565b6000818152606760205260408120546001600160a01b0316806102845760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201527f656e7420746f6b656e00000000000000000000000000000000000000000000006064820152608401610391565b60006001600160a01b0382166106775760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a6560448201527f726f2061646472657373000000000000000000000000000000000000000000006064820152608401610391565b506001600160a01b031660009081526068602052604090205490565b606060668054610299906111e2565b6106ad338383610b68565b5050565b6106bb33836108b0565b61072d5760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f7665640000000000000000000000000000006064820152608401610391565b61073984848484610c37565b50505050565b6000818152606760205260409020546060906001600160a01b03166107cc5760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201527f6e6578697374656e7420746f6b656e00000000000000000000000000000000006064820152608401610391565b60006107e360408051602081019091526000815290565b90506000815111610803576040518060200160405280600081525061082e565b8061080d84610cc0565b60405160200161081e92919061121d565b6040516020818303038152906040525b9392505050565b6000818152606960205260409020805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03841690811790915581906108778261056e565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000818152606760205260408120546001600160a01b03166109295760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610391565b60006109348361056e565b9050806001600160a01b0316846001600160a01b0316148061096f5750836001600160a01b03166109648461031c565b6001600160a01b0316145b8061099f57506001600160a01b038082166000908152606a602090815260408083209388168352929052205460ff165b949350505050565b826001600160a01b03166109ba8261056e565b6001600160a01b031614610a365760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201527f6f776e65720000000000000000000000000000000000000000000000000000006064820152608401610391565b6001600160a01b038216610a985760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610391565b610aa3600082610835565b6001600160a01b0383166000908152606860205260408120805460019290610acc908490611262565b90915550506001600160a01b0382166000908152606860205260408120805460019290610afa908490611279565b9091555050600081815260676020526040808220805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b816001600160a01b0316836001600160a01b03161415610bca5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610391565b6001600160a01b038381166000818152606a6020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b610c428484846109a7565b610c4e84848484610dd6565b6107395760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608401610391565b606081610ce45750506040805180820190915260018152600360fc1b602082015290565b8160005b8115610d0e5780610cf881611291565b9150610d079050600a836112c2565b9150610ce8565b60008167ffffffffffffffff811115610d2957610d296110bd565b6040519080825280601f01601f191660200182016040528015610d53576020820181803683370190505b5090505b841561099f57610d68600183611262565b9150610d75600a866112d6565b610d80906030611279565b60f81b818381518110610d9557610d956112ea565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350610dcf600a866112c2565b9450610d57565b60006001600160a01b0384163b15610f1f57604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290610e1a903390899088908890600401611300565b6020604051808303816000875af1925050508015610e55575060408051601f3d908101601f19168201909252610e529181019061133c565b60015b610f05573d808015610e83576040519150601f19603f3d011682016040523d82523d6000602084013e610e88565b606091505b508051610efd5760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608401610391565b805181602001fd5b6001600160e01b031916630a85bd0160e11b14905061099f565b506001949350505050565b6001600160e01b031981168114610f4057600080fd5b50565b600060208284031215610f5557600080fd5b813561082e81610f2a565b60005b83811015610f7b578181015183820152602001610f63565b838111156107395750506000910152565b60008151808452610fa4816020860160208601610f60565b601f01601f19169290920160200192915050565b60208152600061082e6020830184610f8c565b600060208284031215610fdd57600080fd5b5035919050565b80356001600160a01b0381168114610ffb57600080fd5b919050565b6000806040838503121561101357600080fd5b61101c83610fe4565b946020939093013593505050565b60008060006060848603121561103f57600080fd5b61104884610fe4565b925061105660208501610fe4565b9150604084013590509250925092565b60006020828403121561107857600080fd5b61082e82610fe4565b6000806040838503121561109457600080fd5b61109d83610fe4565b9150602083013580151581146110b257600080fd5b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b600080600080608085870312156110e957600080fd5b6110f285610fe4565b935061110060208601610fe4565b925060408501359150606085013567ffffffffffffffff8082111561112457600080fd5b818701915087601f83011261113857600080fd5b81358181111561114a5761114a6110bd565b604051601f8201601f19908116603f01168101908382118183101715611172576111726110bd565b816040528281528a602084870101111561118b57600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b600080604083850312156111c257600080fd5b6111cb83610fe4565b91506111d960208401610fe4565b90509250929050565b600181811c908216806111f657607f821691505b6020821081141561121757634e487b7160e01b600052602260045260246000fd5b50919050565b6000835161122f818460208801610f60565b835190830190611243818360208801610f60565b01949350505050565b634e487b7160e01b600052601160045260246000fd5b6000828210156112745761127461124c565b500390565b6000821982111561128c5761128c61124c565b500190565b60006000198214156112a5576112a561124c565b5060010190565b634e487b7160e01b600052601260045260246000fd5b6000826112d1576112d16112ac565b500490565b6000826112e5576112e56112ac565b500690565b634e487b7160e01b600052603260045260246000fd5b60006001600160a01b038087168352808616602084015250836040830152608060608301526113326080830184610f8c565b9695505050505050565b60006020828403121561134e57600080fd5b815161082e81610f2a56fea164736f6c634300080c000a";
var ve = (a) => a.length > 1;
var c = class extends ContractFactory {
  constructor(...e) {
    ve(e) ? super(...e) : super(u, S1, e[0]), this.contractName = "ERC721Upgradeable";
  }
  deploy(e) {
    return super.deploy(e || {});
  }
  getDeployTransaction(e) {
    return super.getDeployTransaction(e || {});
  }
  attach(e) {
    return super.attach(e);
  }
  connect(e) {
    return super.connect(e);
  }
  static createInterface() {
    return new utils_exports.Interface(u);
  }
  static connect(e, t) {
    return new Contract(e, u, t);
  }
};
c.bytecode = S1, c.abi = u;
var d6 = [{ anonymous: false, inputs: [{ indexed: true, internalType: "address", name: "owner", type: "address" }, { indexed: true, internalType: "address", name: "approved", type: "address" }, { indexed: true, internalType: "uint256", name: "tokenId", type: "uint256" }], name: "Approval", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "address", name: "owner", type: "address" }, { indexed: true, internalType: "address", name: "operator", type: "address" }, { indexed: false, internalType: "bool", name: "approved", type: "bool" }], name: "ApprovalForAll", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "address", name: "from", type: "address" }, { indexed: true, internalType: "address", name: "to", type: "address" }, { indexed: true, internalType: "uint256", name: "tokenId", type: "uint256" }], name: "Transfer", type: "event" }, { inputs: [{ internalType: "address", name: "to", type: "address" }, { internalType: "uint256", name: "tokenId", type: "uint256" }], name: "approve", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "owner", type: "address" }], name: "balanceOf", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "uint256", name: "tokenId", type: "uint256" }], name: "getApproved", outputs: [{ internalType: "address", name: "", type: "address" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "owner", type: "address" }, { internalType: "address", name: "operator", type: "address" }], name: "isApprovedForAll", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "view", type: "function" }, { inputs: [], name: "name", outputs: [{ internalType: "string", name: "", type: "string" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "uint256", name: "tokenId", type: "uint256" }], name: "ownerOf", outputs: [{ internalType: "address", name: "", type: "address" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "from", type: "address" }, { internalType: "address", name: "to", type: "address" }, { internalType: "uint256", name: "tokenId", type: "uint256" }], name: "safeTransferFrom", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "from", type: "address" }, { internalType: "address", name: "to", type: "address" }, { internalType: "uint256", name: "tokenId", type: "uint256" }, { internalType: "bytes", name: "_data", type: "bytes" }], name: "safeTransferFrom", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "operator", type: "address" }, { internalType: "bool", name: "approved", type: "bool" }], name: "setApprovalForAll", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "bytes4", name: "interfaceId", type: "bytes4" }], name: "supportsInterface", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "view", type: "function" }, { inputs: [], name: "symbol", outputs: [{ internalType: "string", name: "", type: "string" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "uint256", name: "index", type: "uint256" }], name: "tokenByIndex", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "owner", type: "address" }, { internalType: "uint256", name: "index", type: "uint256" }], name: "tokenOfOwnerByIndex", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "uint256", name: "tokenId", type: "uint256" }], name: "tokenURI", outputs: [{ internalType: "string", name: "", type: "string" }], stateMutability: "view", type: "function" }, { inputs: [], name: "totalSupply", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "from", type: "address" }, { internalType: "address", name: "to", type: "address" }, { internalType: "uint256", name: "tokenId", type: "uint256" }], name: "transferFrom", outputs: [], stateMutability: "nonpayable", type: "function" }];
var r6 = class {
  static createInterface() {
    return new utils_exports.Interface(d6);
  }
  static connect(e, t) {
    return new Contract(e, d6, t);
  }
};
r6.abi = d6;
var s6 = [{ anonymous: false, inputs: [{ indexed: true, internalType: "address", name: "owner", type: "address" }, { indexed: true, internalType: "address", name: "approved", type: "address" }, { indexed: true, internalType: "uint256", name: "tokenId", type: "uint256" }], name: "Approval", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "address", name: "owner", type: "address" }, { indexed: true, internalType: "address", name: "operator", type: "address" }, { indexed: false, internalType: "bool", name: "approved", type: "bool" }], name: "ApprovalForAll", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "address", name: "from", type: "address" }, { indexed: true, internalType: "address", name: "to", type: "address" }, { indexed: true, internalType: "uint256", name: "tokenId", type: "uint256" }], name: "Transfer", type: "event" }, { inputs: [{ internalType: "address", name: "to", type: "address" }, { internalType: "uint256", name: "tokenId", type: "uint256" }], name: "approve", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "owner", type: "address" }], name: "balanceOf", outputs: [{ internalType: "uint256", name: "balance", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "uint256", name: "tokenId", type: "uint256" }], name: "getApproved", outputs: [{ internalType: "address", name: "operator", type: "address" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "owner", type: "address" }, { internalType: "address", name: "operator", type: "address" }], name: "isApprovedForAll", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "uint256", name: "tokenId", type: "uint256" }], name: "ownerOf", outputs: [{ internalType: "address", name: "owner", type: "address" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "from", type: "address" }, { internalType: "address", name: "to", type: "address" }, { internalType: "uint256", name: "tokenId", type: "uint256" }], name: "safeTransferFrom", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "from", type: "address" }, { internalType: "address", name: "to", type: "address" }, { internalType: "uint256", name: "tokenId", type: "uint256" }, { internalType: "bytes", name: "data", type: "bytes" }], name: "safeTransferFrom", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "operator", type: "address" }, { internalType: "bool", name: "_approved", type: "bool" }], name: "setApprovalForAll", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "bytes4", name: "interfaceId", type: "bytes4" }], name: "supportsInterface", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "uint256", name: "index", type: "uint256" }], name: "tokenByIndex", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "owner", type: "address" }, { internalType: "uint256", name: "index", type: "uint256" }], name: "tokenOfOwnerByIndex", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [], name: "totalSupply", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "from", type: "address" }, { internalType: "address", name: "to", type: "address" }, { internalType: "uint256", name: "tokenId", type: "uint256" }], name: "transferFrom", outputs: [], stateMutability: "nonpayable", type: "function" }];
var p6 = class {
  static createInterface() {
    return new utils_exports.Interface(s6);
  }
  static connect(e, t) {
    return new Contract(e, s6, t);
  }
};
p6.abi = s6;
var y6 = [{ anonymous: false, inputs: [{ indexed: true, internalType: "address", name: "owner", type: "address" }, { indexed: true, internalType: "address", name: "approved", type: "address" }, { indexed: true, internalType: "uint256", name: "tokenId", type: "uint256" }], name: "Approval", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "address", name: "owner", type: "address" }, { indexed: true, internalType: "address", name: "operator", type: "address" }, { indexed: false, internalType: "bool", name: "approved", type: "bool" }], name: "ApprovalForAll", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "address", name: "from", type: "address" }, { indexed: true, internalType: "address", name: "to", type: "address" }, { indexed: true, internalType: "uint256", name: "tokenId", type: "uint256" }], name: "Transfer", type: "event" }, { inputs: [{ internalType: "address", name: "to", type: "address" }, { internalType: "uint256", name: "tokenId", type: "uint256" }], name: "approve", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "owner", type: "address" }], name: "balanceOf", outputs: [{ internalType: "uint256", name: "balance", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "uint256", name: "tokenId", type: "uint256" }], name: "getApproved", outputs: [{ internalType: "address", name: "operator", type: "address" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "owner", type: "address" }, { internalType: "address", name: "operator", type: "address" }], name: "isApprovedForAll", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "view", type: "function" }, { inputs: [], name: "name", outputs: [{ internalType: "string", name: "", type: "string" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "uint256", name: "tokenId", type: "uint256" }], name: "ownerOf", outputs: [{ internalType: "address", name: "owner", type: "address" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "from", type: "address" }, { internalType: "address", name: "to", type: "address" }, { internalType: "uint256", name: "tokenId", type: "uint256" }], name: "safeTransferFrom", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "from", type: "address" }, { internalType: "address", name: "to", type: "address" }, { internalType: "uint256", name: "tokenId", type: "uint256" }, { internalType: "bytes", name: "data", type: "bytes" }], name: "safeTransferFrom", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "operator", type: "address" }, { internalType: "bool", name: "_approved", type: "bool" }], name: "setApprovalForAll", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "bytes4", name: "interfaceId", type: "bytes4" }], name: "supportsInterface", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "view", type: "function" }, { inputs: [], name: "symbol", outputs: [{ internalType: "string", name: "", type: "string" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "uint256", name: "tokenId", type: "uint256" }], name: "tokenURI", outputs: [{ internalType: "string", name: "", type: "string" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "from", type: "address" }, { internalType: "address", name: "to", type: "address" }, { internalType: "uint256", name: "tokenId", type: "uint256" }], name: "transferFrom", outputs: [], stateMutability: "nonpayable", type: "function" }];
var u6 = class {
  static createInterface() {
    return new utils_exports.Interface(y6);
  }
  static connect(e, t) {
    return new Contract(e, y6, t);
  }
};
u6.abi = y6;
var c6 = [{ inputs: [{ internalType: "address", name: "operator", type: "address" }, { internalType: "address", name: "from", type: "address" }, { internalType: "uint256", name: "tokenId", type: "uint256" }, { internalType: "bytes", name: "data", type: "bytes" }], name: "onERC721Received", outputs: [{ internalType: "bytes4", name: "", type: "bytes4" }], stateMutability: "nonpayable", type: "function" }];
var o6 = class {
  static createInterface() {
    return new utils_exports.Interface(c6);
  }
  static connect(e, t) {
    return new Contract(e, c6, t);
  }
};
o6.abi = c6;
var l6 = [{ anonymous: false, inputs: [{ indexed: true, internalType: "address", name: "owner", type: "address" }, { indexed: true, internalType: "address", name: "approved", type: "address" }, { indexed: true, internalType: "uint256", name: "tokenId", type: "uint256" }], name: "Approval", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "address", name: "owner", type: "address" }, { indexed: true, internalType: "address", name: "operator", type: "address" }, { indexed: false, internalType: "bool", name: "approved", type: "bool" }], name: "ApprovalForAll", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "address", name: "from", type: "address" }, { indexed: true, internalType: "address", name: "to", type: "address" }, { indexed: true, internalType: "uint256", name: "tokenId", type: "uint256" }], name: "Transfer", type: "event" }, { inputs: [{ internalType: "address", name: "to", type: "address" }, { internalType: "uint256", name: "tokenId", type: "uint256" }], name: "approve", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "owner", type: "address" }], name: "balanceOf", outputs: [{ internalType: "uint256", name: "balance", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "uint256", name: "tokenId", type: "uint256" }], name: "getApproved", outputs: [{ internalType: "address", name: "operator", type: "address" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "owner", type: "address" }, { internalType: "address", name: "operator", type: "address" }], name: "isApprovedForAll", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "uint256", name: "tokenId", type: "uint256" }], name: "ownerOf", outputs: [{ internalType: "address", name: "owner", type: "address" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "from", type: "address" }, { internalType: "address", name: "to", type: "address" }, { internalType: "uint256", name: "tokenId", type: "uint256" }], name: "safeTransferFrom", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "from", type: "address" }, { internalType: "address", name: "to", type: "address" }, { internalType: "uint256", name: "tokenId", type: "uint256" }, { internalType: "bytes", name: "data", type: "bytes" }], name: "safeTransferFrom", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "operator", type: "address" }, { internalType: "bool", name: "_approved", type: "bool" }], name: "setApprovalForAll", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "bytes4", name: "interfaceId", type: "bytes4" }], name: "supportsInterface", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "from", type: "address" }, { internalType: "address", name: "to", type: "address" }, { internalType: "uint256", name: "tokenId", type: "uint256" }], name: "transferFrom", outputs: [], stateMutability: "nonpayable", type: "function" }];
var m6 = class {
  static createInterface() {
    return new utils_exports.Interface(l6);
  }
  static connect(e, t) {
    return new Contract(e, l6, t);
  }
};
m6.abi = l6;
var o = [{ inputs: [{ internalType: "address", name: "", type: "address" }, { internalType: "address", name: "", type: "address" }, { internalType: "uint256", name: "", type: "uint256" }, { internalType: "bytes", name: "", type: "bytes" }], name: "onERC721Received", outputs: [{ internalType: "bytes4", name: "", type: "bytes4" }], stateMutability: "nonpayable", type: "function" }];
var A1 = "0x608060405234801561001057600080fd5b506101ab806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063150b7a0214610030575b600080fd5b61004e61003e3660046100c2565b630a85bd0160e11b949350505050565b6040517fffffffff00000000000000000000000000000000000000000000000000000000909116815260200160405180910390f35b803573ffffffffffffffffffffffffffffffffffffffff811681146100a757600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b600080600080608085870312156100d857600080fd5b6100e185610083565b93506100ef60208601610083565b925060408501359150606085013567ffffffffffffffff8082111561011357600080fd5b818701915087601f83011261012757600080fd5b813581811115610139576101396100ac565b604051601f8201601f19908116603f01168101908382118183101715610161576101616100ac565b816040528281528a602084870101111561017a57600080fd5b8260208601602083013760006020848301015280955050505050509295919450925056fea164736f6c634300080c000a";
var Se = (a) => a.length > 1;
var l = class extends ContractFactory {
  constructor(...e) {
    Se(e) ? super(...e) : super(o, A1, e[0]), this.contractName = "ERC721HolderUpgradeable";
  }
  deploy(e) {
    return super.deploy(e || {});
  }
  getDeployTransaction(e) {
    return super.getDeployTransaction(e || {});
  }
  attach(e) {
    return super.attach(e);
  }
  connect(e) {
    return super.connect(e);
  }
  static createInterface() {
    return new utils_exports.Interface(o);
  }
  static connect(e, t) {
    return new Contract(e, o, t);
  }
};
l.bytecode = A1, l.abi = o;
var T6 = [{ inputs: [{ internalType: "bytes4", name: "interfaceId", type: "bytes4" }], name: "supportsInterface", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "view", type: "function" }];
var v6 = class {
  static createInterface() {
    return new utils_exports.Interface(T6);
  }
  static connect(e, t) {
    return new Contract(e, T6, t);
  }
};
v6.abi = T6;
var g6 = [{ inputs: [{ internalType: "bytes4", name: "interfaceId", type: "bytes4" }], name: "supportsInterface", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "view", type: "function" }];
var x6 = class {
  static createInterface() {
    return new utils_exports.Interface(g6);
  }
  static connect(e, t) {
    return new Contract(e, g6, t);
  }
};
x6.abi = g6;
var I6 = [{ inputs: [{ internalType: "bytes[]", name: "data", type: "bytes[]" }], name: "multicall", outputs: [{ internalType: "bytes[]", name: "results", type: "bytes[]" }], stateMutability: "nonpayable", type: "function" }];
var M6 = class {
  static createInterface() {
    return new utils_exports.Interface(I6);
  }
  static connect(e, t) {
    return new Contract(e, I6, t);
  }
};
M6.abi = I6;
var R6 = [{ anonymous: false, inputs: [{ indexed: true, internalType: "bytes32", name: "role", type: "bytes32" }, { indexed: true, internalType: "bytes32", name: "previousAdminRole", type: "bytes32" }, { indexed: true, internalType: "bytes32", name: "newAdminRole", type: "bytes32" }], name: "RoleAdminChanged", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "bytes32", name: "role", type: "bytes32" }, { indexed: true, internalType: "address", name: "account", type: "address" }, { indexed: true, internalType: "address", name: "sender", type: "address" }], name: "RoleGranted", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "bytes32", name: "role", type: "bytes32" }, { indexed: true, internalType: "address", name: "account", type: "address" }, { indexed: true, internalType: "address", name: "sender", type: "address" }], name: "RoleRevoked", type: "event" }, { inputs: [], name: "DEFAULT_ADMIN_ROLE", outputs: [{ internalType: "bytes32", name: "", type: "bytes32" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "bytes32", name: "role", type: "bytes32" }], name: "getRoleAdmin", outputs: [{ internalType: "bytes32", name: "", type: "bytes32" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "bytes32", name: "role", type: "bytes32" }, { internalType: "address", name: "account", type: "address" }], name: "grantRole", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "bytes32", name: "role", type: "bytes32" }, { internalType: "address", name: "account", type: "address" }], name: "hasRole", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "bytes32", name: "role", type: "bytes32" }, { internalType: "address", name: "account", type: "address" }], name: "renounceRole", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "bytes32", name: "role", type: "bytes32" }, { internalType: "address", name: "account", type: "address" }], name: "revokeRole", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "bytes4", name: "interfaceId", type: "bytes4" }], name: "supportsInterface", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "view", type: "function" }];
var w6 = class {
  static createInterface() {
    return new utils_exports.Interface(R6);
  }
  static connect(e, t) {
    return new Contract(e, R6, t);
  }
};
w6.abi = R6;
var C6 = [{ anonymous: false, inputs: [{ indexed: true, internalType: "bytes32", name: "role", type: "bytes32" }, { indexed: true, internalType: "bytes32", name: "previousAdminRole", type: "bytes32" }, { indexed: true, internalType: "bytes32", name: "newAdminRole", type: "bytes32" }], name: "RoleAdminChanged", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "bytes32", name: "role", type: "bytes32" }, { indexed: true, internalType: "address", name: "account", type: "address" }, { indexed: true, internalType: "address", name: "sender", type: "address" }], name: "RoleGranted", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "bytes32", name: "role", type: "bytes32" }, { indexed: true, internalType: "address", name: "account", type: "address" }, { indexed: true, internalType: "address", name: "sender", type: "address" }], name: "RoleRevoked", type: "event" }, { inputs: [], name: "DEFAULT_ADMIN_ROLE", outputs: [{ internalType: "bytes32", name: "", type: "bytes32" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "bytes32", name: "role", type: "bytes32" }], name: "getRoleAdmin", outputs: [{ internalType: "bytes32", name: "", type: "bytes32" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "bytes32", name: "role", type: "bytes32" }, { internalType: "uint256", name: "index", type: "uint256" }], name: "getRoleMember", outputs: [{ internalType: "address", name: "", type: "address" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "bytes32", name: "role", type: "bytes32" }], name: "getRoleMemberCount", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "bytes32", name: "role", type: "bytes32" }, { internalType: "address", name: "account", type: "address" }], name: "grantRole", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "bytes32", name: "role", type: "bytes32" }, { internalType: "address", name: "account", type: "address" }], name: "hasRole", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "bytes32", name: "role", type: "bytes32" }, { internalType: "address", name: "account", type: "address" }], name: "renounceRole", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "bytes32", name: "role", type: "bytes32" }, { internalType: "address", name: "account", type: "address" }], name: "revokeRole", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "bytes4", name: "interfaceId", type: "bytes4" }], name: "supportsInterface", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "view", type: "function" }];
var P6 = class {
  static createInterface() {
    return new utils_exports.Interface(C6);
  }
  static connect(e, t) {
    return new Contract(e, C6, t);
  }
};
P6.abi = C6;
var E6 = [{ anonymous: false, inputs: [{ indexed: true, internalType: "bytes32", name: "role", type: "bytes32" }, { indexed: true, internalType: "bytes32", name: "previousAdminRole", type: "bytes32" }, { indexed: true, internalType: "bytes32", name: "newAdminRole", type: "bytes32" }], name: "RoleAdminChanged", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "bytes32", name: "role", type: "bytes32" }, { indexed: true, internalType: "address", name: "account", type: "address" }, { indexed: true, internalType: "address", name: "sender", type: "address" }], name: "RoleGranted", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "bytes32", name: "role", type: "bytes32" }, { indexed: true, internalType: "address", name: "account", type: "address" }, { indexed: true, internalType: "address", name: "sender", type: "address" }], name: "RoleRevoked", type: "event" }, { inputs: [{ internalType: "bytes32", name: "role", type: "bytes32" }], name: "getRoleAdmin", outputs: [{ internalType: "bytes32", name: "", type: "bytes32" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "bytes32", name: "role", type: "bytes32" }, { internalType: "address", name: "account", type: "address" }], name: "grantRole", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "bytes32", name: "role", type: "bytes32" }, { internalType: "address", name: "account", type: "address" }], name: "hasRole", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "bytes32", name: "role", type: "bytes32" }, { internalType: "address", name: "account", type: "address" }], name: "renounceRole", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "bytes32", name: "role", type: "bytes32" }, { internalType: "address", name: "account", type: "address" }], name: "revokeRole", outputs: [], stateMutability: "nonpayable", type: "function" }];
var k6 = class {
  static createInterface() {
    return new utils_exports.Interface(E6);
  }
  static connect(e, t) {
    return new Contract(e, E6, t);
  }
};
k6.abi = E6;
var _6 = [{ anonymous: false, inputs: [{ indexed: true, internalType: "bytes32", name: "role", type: "bytes32" }, { indexed: true, internalType: "bytes32", name: "previousAdminRole", type: "bytes32" }, { indexed: true, internalType: "bytes32", name: "newAdminRole", type: "bytes32" }], name: "RoleAdminChanged", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "bytes32", name: "role", type: "bytes32" }, { indexed: true, internalType: "address", name: "account", type: "address" }, { indexed: true, internalType: "address", name: "sender", type: "address" }], name: "RoleGranted", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "bytes32", name: "role", type: "bytes32" }, { indexed: true, internalType: "address", name: "account", type: "address" }, { indexed: true, internalType: "address", name: "sender", type: "address" }], name: "RoleRevoked", type: "event" }, { inputs: [{ internalType: "bytes32", name: "role", type: "bytes32" }], name: "getRoleAdmin", outputs: [{ internalType: "bytes32", name: "", type: "bytes32" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "bytes32", name: "role", type: "bytes32" }, { internalType: "uint256", name: "index", type: "uint256" }], name: "getRoleMember", outputs: [{ internalType: "address", name: "", type: "address" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "bytes32", name: "role", type: "bytes32" }], name: "getRoleMemberCount", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "bytes32", name: "role", type: "bytes32" }, { internalType: "address", name: "account", type: "address" }], name: "grantRole", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "bytes32", name: "role", type: "bytes32" }, { internalType: "address", name: "account", type: "address" }], name: "hasRole", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "bytes32", name: "role", type: "bytes32" }, { internalType: "address", name: "account", type: "address" }], name: "renounceRole", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "bytes32", name: "role", type: "bytes32" }, { internalType: "address", name: "account", type: "address" }], name: "revokeRole", outputs: [], stateMutability: "nonpayable", type: "function" }];
var U6 = class {
  static createInterface() {
    return new utils_exports.Interface(_6);
  }
  static connect(e, t) {
    return new Contract(e, _6, t);
  }
};
U6.abi = _6;
var F6 = [{ inputs: [{ internalType: "address", name: "forwarder", type: "address" }], name: "isTrustedForwarder", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "view", type: "function" }];
var S6 = class {
  static createInterface() {
    return new utils_exports.Interface(F6);
  }
  static connect(e, t) {
    return new Contract(e, F6, t);
  }
};
S6.abi = F6;
var m = [{ inputs: [], stateMutability: "nonpayable", type: "constructor" }, { inputs: [{ components: [{ internalType: "address", name: "from", type: "address" }, { internalType: "address", name: "to", type: "address" }, { internalType: "uint256", name: "value", type: "uint256" }, { internalType: "uint256", name: "gas", type: "uint256" }, { internalType: "uint256", name: "nonce", type: "uint256" }, { internalType: "bytes", name: "data", type: "bytes" }], internalType: "struct MinimalForwarder.ForwardRequest", name: "req", type: "tuple" }, { internalType: "bytes", name: "signature", type: "bytes" }], name: "execute", outputs: [{ internalType: "bool", name: "", type: "bool" }, { internalType: "bytes", name: "", type: "bytes" }], stateMutability: "payable", type: "function" }, { inputs: [{ internalType: "address", name: "from", type: "address" }], name: "getNonce", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ components: [{ internalType: "address", name: "from", type: "address" }, { internalType: "address", name: "to", type: "address" }, { internalType: "uint256", name: "value", type: "uint256" }, { internalType: "uint256", name: "gas", type: "uint256" }, { internalType: "uint256", name: "nonce", type: "uint256" }, { internalType: "bytes", name: "data", type: "bytes" }], internalType: "struct MinimalForwarder.ForwardRequest", name: "req", type: "tuple" }, { internalType: "bytes", name: "signature", type: "bytes" }], name: "verify", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "view", type: "function" }];
var h1 = "0x61014060405234801561001157600080fd5b50604080518082018252601081526f26b4b734b6b0b62337b93bb0b93232b960811b602080830191825283518085019094526005845264302e302e3160d81b908401528151902060e08190527fae209a0b48f21c054280f2455d32cf309387644879d9acbd8ffc1991638118856101008190524660a0529192917f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f6100fb8184846040805160208101859052908101839052606081018290524660808201523060a082015260009060c0016040516020818303038152906040528051906020012090509392505050565b6080523060c052610120525061011092505050565b60805160a05160c05160e0516101005161012051610b4061015f60003960006104f701526000610546015260006105210152600061047a015260006104a4015260006104ce0152610b406000f3fe6080604052600436106100345760003560e01c80632d0335ab1461003957806347153f8214610082578063bf5d3bdb146100a3575b600080fd5b34801561004557600080fd5b5061006f610054366004610901565b6001600160a01b031660009081526020819052604090205490565b6040519081526020015b60405180910390f35b610095610090366004610931565b6100d3565b604051610079929190610a00565b3480156100af57600080fd5b506100c36100be366004610931565b610277565b6040519015158152602001610079565b600060606100e2858585610277565b6101595760405162461bcd60e51b815260206004820152603260248201527f4d696e696d616c466f727761726465723a207369676e617475726520646f657360448201527f206e6f74206d617463682072657175657374000000000000000000000000000060648201526084015b60405180910390fd5b61016860808601356001610a3c565b6000806101786020890189610901565b6001600160a01b03166001600160a01b03168152602001908152602001600020819055506000808660200160208101906101b29190610901565b6001600160a01b0316606088013560408901356101d260a08b018b610a62565b6101df60208d018d610901565b6040516020016101f193929190610aa9565b60408051601f198184030181529082905261020b91610acf565b600060405180830381858888f193505050503d8060008114610249576040519150601f19603f3d011682016040523d82523d6000602084013e61024e565b606091505b509092509050610263603f6060890135610aeb565b5a1161026b57fe5b90969095509350505050565b60008061038a84848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061038492507fdd8f4b70b0f4393e889bd39128a30628a78b61816a9eb8199759e7a349657e4891506102e7905060208a018a610901565b6102f760408b0160208c01610901565b60408b013560608c013560808d013561031360a08f018f610a62565b604051610321929190610b0d565b6040805191829003822060208301989098526001600160a01b0396871690820152949093166060850152608084019190915260a083015260c082015260e081019190915261010001604051602081830303815290604052805190602001206103f5565b90610449565b905060808501356000806103a16020890189610901565b6001600160a01b03166001600160a01b03168152602001908152602001600020541480156103ec57506103d76020860186610901565b6001600160a01b0316816001600160a01b0316145b95945050505050565b600061044361040261046d565b8360405161190160f01b6020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b92915050565b60008060006104588585610594565b9150915061046581610604565b509392505050565b6000306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161480156104c657507f000000000000000000000000000000000000000000000000000000000000000046145b156104f057507f000000000000000000000000000000000000000000000000000000000000000090565b50604080517f00000000000000000000000000000000000000000000000000000000000000006020808301919091527f0000000000000000000000000000000000000000000000000000000000000000828401527f000000000000000000000000000000000000000000000000000000000000000060608301524660808301523060a0808401919091528351808403909101815260c0909201909252805191012090565b6000808251604114156105cb5760208301516040840151606085015160001a6105bf878285856107c2565b945094505050506105fd565b8251604014156105f557602083015160408401516105ea8683836108af565b9350935050506105fd565b506000905060025b9250929050565b600081600481111561061857610618610b1d565b14156106215750565b600181600481111561063557610635610b1d565b14156106835760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610150565b600281600481111561069757610697610b1d565b14156106e55760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610150565b60038160048111156106f9576106f9610b1d565b14156107525760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610150565b600481600481111561076657610766610b1d565b14156107bf5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b6064820152608401610150565b50565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156107f957506000905060036108a6565b8460ff16601b1415801561081157508460ff16601c14155b1561082257506000905060046108a6565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015610876573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661089f576000600192509250506108a6565b9150600090505b94509492505050565b6000807f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8316816108e560ff86901c601b610a3c565b90506108f3878288856107c2565b935093505050935093915050565b60006020828403121561091357600080fd5b81356001600160a01b038116811461092a57600080fd5b9392505050565b60008060006040848603121561094657600080fd5b833567ffffffffffffffff8082111561095e57600080fd5b9085019060c0828803121561097257600080fd5b9093506020850135908082111561098857600080fd5b818601915086601f83011261099c57600080fd5b8135818111156109ab57600080fd5b8760208285010111156109bd57600080fd5b6020830194508093505050509250925092565b60005b838110156109eb5781810151838201526020016109d3565b838111156109fa576000848401525b50505050565b82151581526040602082015260008251806040840152610a278160608501602087016109d0565b601f01601f1916919091016060019392505050565b60008219821115610a5d57634e487b7160e01b600052601160045260246000fd5b500190565b6000808335601e19843603018112610a7957600080fd5b83018035915067ffffffffffffffff821115610a9457600080fd5b6020019150368190038213156105fd57600080fd5b8284823760609190911b6bffffffffffffffffffffffff19169101908152601401919050565b60008251610ae18184602087016109d0565b9190910192915050565b600082610b0857634e487b7160e01b600052601260045260246000fd5b500490565b8183823760009101908152919050565b634e487b7160e01b600052602160045260246000fdfea164736f6c634300080c000a";
var Ze = (a) => a.length > 1;
var T = class extends ContractFactory {
  constructor(...e) {
    Ze(e) ? super(...e) : super(m, h1, e[0]), this.contractName = "MinimalForwarder";
  }
  deploy(e) {
    return super.deploy(e || {});
  }
  getDeployTransaction(e) {
    return super.getDeployTransaction(e || {});
  }
  attach(e) {
    return super.attach(e);
  }
  connect(e) {
    return super.connect(e);
  }
  static createInterface() {
    return new utils_exports.Interface(m);
  }
  static connect(e, t) {
    return new Contract(e, m, t);
  }
};
T.bytecode = h1, T.abi = m;
var A6 = [{ stateMutability: "payable", type: "fallback" }, { stateMutability: "payable", type: "receive" }];
var h6 = class {
  static createInterface() {
    return new utils_exports.Interface(A6);
  }
  static connect(e, t) {
    return new Contract(e, A6, t);
  }
};
h6.abi = A6;
var D6 = [{ anonymous: false, inputs: [{ indexed: true, internalType: "address", name: "account", type: "address" }, { indexed: true, internalType: "address", name: "operator", type: "address" }, { indexed: false, internalType: "bool", name: "approved", type: "bool" }], name: "ApprovalForAll", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "address", name: "operator", type: "address" }, { indexed: true, internalType: "address", name: "from", type: "address" }, { indexed: true, internalType: "address", name: "to", type: "address" }, { indexed: false, internalType: "uint256[]", name: "ids", type: "uint256[]" }, { indexed: false, internalType: "uint256[]", name: "values", type: "uint256[]" }], name: "TransferBatch", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "address", name: "operator", type: "address" }, { indexed: true, internalType: "address", name: "from", type: "address" }, { indexed: true, internalType: "address", name: "to", type: "address" }, { indexed: false, internalType: "uint256", name: "id", type: "uint256" }, { indexed: false, internalType: "uint256", name: "value", type: "uint256" }], name: "TransferSingle", type: "event" }, { anonymous: false, inputs: [{ indexed: false, internalType: "string", name: "value", type: "string" }, { indexed: true, internalType: "uint256", name: "id", type: "uint256" }], name: "URI", type: "event" }, { inputs: [{ internalType: "address", name: "account", type: "address" }, { internalType: "uint256", name: "id", type: "uint256" }], name: "balanceOf", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address[]", name: "accounts", type: "address[]" }, { internalType: "uint256[]", name: "ids", type: "uint256[]" }], name: "balanceOfBatch", outputs: [{ internalType: "uint256[]", name: "", type: "uint256[]" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "account", type: "address" }, { internalType: "address", name: "operator", type: "address" }], name: "isApprovedForAll", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "from", type: "address" }, { internalType: "address", name: "to", type: "address" }, { internalType: "uint256[]", name: "ids", type: "uint256[]" }, { internalType: "uint256[]", name: "amounts", type: "uint256[]" }, { internalType: "bytes", name: "data", type: "bytes" }], name: "safeBatchTransferFrom", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "from", type: "address" }, { internalType: "address", name: "to", type: "address" }, { internalType: "uint256", name: "id", type: "uint256" }, { internalType: "uint256", name: "amount", type: "uint256" }, { internalType: "bytes", name: "data", type: "bytes" }], name: "safeTransferFrom", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "operator", type: "address" }, { internalType: "bool", name: "approved", type: "bool" }], name: "setApprovalForAll", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "bytes4", name: "interfaceId", type: "bytes4" }], name: "supportsInterface", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "view", type: "function" }];
var B6 = class {
  static createInterface() {
    return new utils_exports.Interface(D6);
  }
  static connect(e, t) {
    return new Contract(e, D6, t);
  }
};
B6.abi = D6;
var O6 = [{ anonymous: false, inputs: [{ indexed: true, internalType: "address", name: "owner", type: "address" }, { indexed: true, internalType: "address", name: "spender", type: "address" }, { indexed: false, internalType: "uint256", name: "value", type: "uint256" }], name: "Approval", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "address", name: "from", type: "address" }, { indexed: true, internalType: "address", name: "to", type: "address" }, { indexed: false, internalType: "uint256", name: "value", type: "uint256" }], name: "Transfer", type: "event" }, { inputs: [{ internalType: "address", name: "owner", type: "address" }, { internalType: "address", name: "spender", type: "address" }], name: "allowance", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "spender", type: "address" }, { internalType: "uint256", name: "amount", type: "uint256" }], name: "approve", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "account", type: "address" }], name: "balanceOf", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [], name: "totalSupply", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "to", type: "address" }, { internalType: "uint256", name: "amount", type: "uint256" }], name: "transfer", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "from", type: "address" }, { internalType: "address", name: "to", type: "address" }, { internalType: "uint256", name: "amount", type: "uint256" }], name: "transferFrom", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "nonpayable", type: "function" }];
var V6 = class {
  static createInterface() {
    return new utils_exports.Interface(O6);
  }
  static connect(e, t) {
    return new Contract(e, O6, t);
  }
};
V6.abi = O6;
var W6 = [{ anonymous: false, inputs: [{ indexed: true, internalType: "address", name: "owner", type: "address" }, { indexed: true, internalType: "address", name: "approved", type: "address" }, { indexed: true, internalType: "uint256", name: "tokenId", type: "uint256" }], name: "Approval", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "address", name: "owner", type: "address" }, { indexed: true, internalType: "address", name: "operator", type: "address" }, { indexed: false, internalType: "bool", name: "approved", type: "bool" }], name: "ApprovalForAll", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "address", name: "from", type: "address" }, { indexed: true, internalType: "address", name: "to", type: "address" }, { indexed: true, internalType: "uint256", name: "tokenId", type: "uint256" }], name: "Transfer", type: "event" }, { inputs: [{ internalType: "address", name: "to", type: "address" }, { internalType: "uint256", name: "tokenId", type: "uint256" }], name: "approve", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "owner", type: "address" }], name: "balanceOf", outputs: [{ internalType: "uint256", name: "balance", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "uint256", name: "tokenId", type: "uint256" }], name: "getApproved", outputs: [{ internalType: "address", name: "operator", type: "address" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "owner", type: "address" }, { internalType: "address", name: "operator", type: "address" }], name: "isApprovedForAll", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "uint256", name: "tokenId", type: "uint256" }], name: "ownerOf", outputs: [{ internalType: "address", name: "owner", type: "address" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "from", type: "address" }, { internalType: "address", name: "to", type: "address" }, { internalType: "uint256", name: "tokenId", type: "uint256" }], name: "safeTransferFrom", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "from", type: "address" }, { internalType: "address", name: "to", type: "address" }, { internalType: "uint256", name: "tokenId", type: "uint256" }, { internalType: "bytes", name: "data", type: "bytes" }], name: "safeTransferFrom", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "operator", type: "address" }, { internalType: "bool", name: "_approved", type: "bool" }], name: "setApprovalForAll", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "bytes4", name: "interfaceId", type: "bytes4" }], name: "supportsInterface", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "from", type: "address" }, { internalType: "address", name: "to", type: "address" }, { internalType: "uint256", name: "tokenId", type: "uint256" }], name: "transferFrom", outputs: [], stateMutability: "nonpayable", type: "function" }];
var q6 = class {
  static createInterface() {
    return new utils_exports.Interface(W6);
  }
  static connect(e, t) {
    return new Contract(e, W6, t);
  }
};
q6.abi = W6;
var N6 = [{ inputs: [{ internalType: "bytes4", name: "interfaceId", type: "bytes4" }], name: "supportsInterface", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "view", type: "function" }];
var L6 = class {
  static createInterface() {
    return new utils_exports.Interface(N6);
  }
  static connect(e, t) {
    return new Contract(e, N6, t);
  }
};
L6.abi = N6;
var G6 = [{ inputs: [{ internalType: "bytes4", name: "interfaceId", type: "bytes4" }], name: "supportsInterface", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "view", type: "function" }];
var H6 = class {
  static createInterface() {
    return new utils_exports.Interface(G6);
  }
  static connect(e, t) {
    return new Contract(e, G6, t);
  }
};
H6.abi = G6;
var Q6 = [{ inputs: [{ internalType: "bytes[]", name: "data", type: "bytes[]" }], name: "multicall", outputs: [{ internalType: "bytes[]", name: "results", type: "bytes[]" }], stateMutability: "nonpayable", type: "function" }];
var z6 = class {
  static createInterface() {
    return new utils_exports.Interface(Q6);
  }
  static connect(e, t) {
    return new Contract(e, Q6, t);
  }
};
z6.abi = Q6;
var v = [{ inputs: [{ internalType: "address", name: "_thirdwebFee", type: "address" }], stateMutability: "nonpayable", type: "constructor" }, { anonymous: false, inputs: [{ indexed: true, internalType: "address", name: "account", type: "address" }, { indexed: true, internalType: "address", name: "operator", type: "address" }, { indexed: false, internalType: "bool", name: "approved", type: "bool" }], name: "ApprovalForAll", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "uint256", name: "tokenId", type: "uint256" }, { components: [{ internalType: "uint256", name: "startTimestamp", type: "uint256" }, { internalType: "uint256", name: "maxClaimableSupply", type: "uint256" }, { internalType: "uint256", name: "supplyClaimed", type: "uint256" }, { internalType: "uint256", name: "quantityLimitPerTransaction", type: "uint256" }, { internalType: "uint256", name: "waitTimeInSecondsBetweenClaims", type: "uint256" }, { internalType: "bytes32", name: "merkleRoot", type: "bytes32" }, { internalType: "uint256", name: "pricePerToken", type: "uint256" }, { internalType: "address", name: "currency", type: "address" }], indexed: false, internalType: "struct IDropClaimCondition.ClaimCondition[]", name: "claimConditions", type: "tuple[]" }], name: "ClaimConditionsUpdated", type: "event" }, { anonymous: false, inputs: [{ indexed: false, internalType: "address", name: "newRoyaltyRecipient", type: "address" }, { indexed: false, internalType: "uint256", name: "newRoyaltyBps", type: "uint256" }], name: "DefaultRoyalty", type: "event" }, { anonymous: false, inputs: [{ indexed: false, internalType: "uint256", name: "tokenId", type: "uint256" }, { indexed: false, internalType: "uint256", name: "maxTotalSupply", type: "uint256" }], name: "MaxTotalSupplyUpdated", type: "event" }, { anonymous: false, inputs: [{ indexed: false, internalType: "uint256", name: "tokenId", type: "uint256" }, { indexed: false, internalType: "uint256", name: "count", type: "uint256" }], name: "MaxWalletClaimCountUpdated", type: "event" }, { anonymous: false, inputs: [{ indexed: false, internalType: "address", name: "prevOwner", type: "address" }, { indexed: false, internalType: "address", name: "newOwner", type: "address" }], name: "OwnerUpdated", type: "event" }, { anonymous: false, inputs: [{ indexed: false, internalType: "address", name: "platformFeeRecipient", type: "address" }, { indexed: false, internalType: "uint256", name: "platformFeeBps", type: "uint256" }], name: "PlatformFeeInfoUpdated", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "address", name: "recipient", type: "address" }], name: "PrimarySaleRecipientUpdated", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "bytes32", name: "role", type: "bytes32" }, { indexed: true, internalType: "bytes32", name: "previousAdminRole", type: "bytes32" }, { indexed: true, internalType: "bytes32", name: "newAdminRole", type: "bytes32" }], name: "RoleAdminChanged", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "bytes32", name: "role", type: "bytes32" }, { indexed: true, internalType: "address", name: "account", type: "address" }, { indexed: true, internalType: "address", name: "sender", type: "address" }], name: "RoleGranted", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "bytes32", name: "role", type: "bytes32" }, { indexed: true, internalType: "address", name: "account", type: "address" }, { indexed: true, internalType: "address", name: "sender", type: "address" }], name: "RoleRevoked", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "uint256", name: "tokenId", type: "uint256" }, { indexed: false, internalType: "address", name: "royaltyRecipient", type: "address" }, { indexed: false, internalType: "uint256", name: "royaltyBps", type: "uint256" }], name: "RoyaltyForToken", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "uint256", name: "claimConditionIndex", type: "uint256" }, { indexed: true, internalType: "uint256", name: "tokenId", type: "uint256" }, { indexed: true, internalType: "address", name: "claimer", type: "address" }, { indexed: false, internalType: "address", name: "receiver", type: "address" }, { indexed: false, internalType: "uint256", name: "quantityClaimed", type: "uint256" }], name: "TokensClaimed", type: "event" }, { anonymous: false, inputs: [{ indexed: false, internalType: "uint256", name: "startTokenId", type: "uint256" }, { indexed: false, internalType: "uint256", name: "endTokenId", type: "uint256" }, { indexed: false, internalType: "string", name: "baseURI", type: "string" }], name: "TokensLazyMinted", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "address", name: "operator", type: "address" }, { indexed: true, internalType: "address", name: "from", type: "address" }, { indexed: true, internalType: "address", name: "to", type: "address" }, { indexed: false, internalType: "uint256[]", name: "ids", type: "uint256[]" }, { indexed: false, internalType: "uint256[]", name: "values", type: "uint256[]" }], name: "TransferBatch", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "address", name: "operator", type: "address" }, { indexed: true, internalType: "address", name: "from", type: "address" }, { indexed: true, internalType: "address", name: "to", type: "address" }, { indexed: false, internalType: "uint256", name: "id", type: "uint256" }, { indexed: false, internalType: "uint256", name: "value", type: "uint256" }], name: "TransferSingle", type: "event" }, { anonymous: false, inputs: [{ indexed: false, internalType: "string", name: "value", type: "string" }, { indexed: true, internalType: "uint256", name: "id", type: "uint256" }], name: "URI", type: "event" }, { anonymous: false, inputs: [{ indexed: false, internalType: "uint256", name: "tokenId", type: "uint256" }, { indexed: true, internalType: "address", name: "wallet", type: "address" }, { indexed: false, internalType: "uint256", name: "count", type: "uint256" }], name: "WalletClaimCountUpdated", type: "event" }, { inputs: [], name: "DEFAULT_ADMIN_ROLE", outputs: [{ internalType: "bytes32", name: "", type: "bytes32" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "account", type: "address" }, { internalType: "uint256", name: "id", type: "uint256" }], name: "balanceOf", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address[]", name: "accounts", type: "address[]" }, { internalType: "uint256[]", name: "ids", type: "uint256[]" }], name: "balanceOfBatch", outputs: [{ internalType: "uint256[]", name: "", type: "uint256[]" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "account", type: "address" }, { internalType: "uint256", name: "id", type: "uint256" }, { internalType: "uint256", name: "value", type: "uint256" }], name: "burn", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "account", type: "address" }, { internalType: "uint256[]", name: "ids", type: "uint256[]" }, { internalType: "uint256[]", name: "values", type: "uint256[]" }], name: "burnBatch", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "_receiver", type: "address" }, { internalType: "uint256", name: "_tokenId", type: "uint256" }, { internalType: "uint256", name: "_quantity", type: "uint256" }, { internalType: "address", name: "_currency", type: "address" }, { internalType: "uint256", name: "_pricePerToken", type: "uint256" }, { internalType: "bytes32[]", name: "_proofs", type: "bytes32[]" }, { internalType: "uint256", name: "_proofMaxQuantityPerTransaction", type: "uint256" }], name: "claim", outputs: [], stateMutability: "payable", type: "function" }, { inputs: [{ internalType: "uint256", name: "", type: "uint256" }], name: "claimCondition", outputs: [{ internalType: "uint256", name: "currentStartId", type: "uint256" }, { internalType: "uint256", name: "count", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [], name: "contractType", outputs: [{ internalType: "bytes32", name: "", type: "bytes32" }], stateMutability: "pure", type: "function" }, { inputs: [], name: "contractURI", outputs: [{ internalType: "string", name: "", type: "string" }], stateMutability: "view", type: "function" }, { inputs: [], name: "contractVersion", outputs: [{ internalType: "uint8", name: "", type: "uint8" }], stateMutability: "pure", type: "function" }, { inputs: [{ internalType: "uint256", name: "_tokenId", type: "uint256" }], name: "getActiveClaimConditionId", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "uint256", name: "_tokenId", type: "uint256" }, { internalType: "uint256", name: "_conditionId", type: "uint256" }], name: "getClaimConditionById", outputs: [{ components: [{ internalType: "uint256", name: "startTimestamp", type: "uint256" }, { internalType: "uint256", name: "maxClaimableSupply", type: "uint256" }, { internalType: "uint256", name: "supplyClaimed", type: "uint256" }, { internalType: "uint256", name: "quantityLimitPerTransaction", type: "uint256" }, { internalType: "uint256", name: "waitTimeInSecondsBetweenClaims", type: "uint256" }, { internalType: "bytes32", name: "merkleRoot", type: "bytes32" }, { internalType: "uint256", name: "pricePerToken", type: "uint256" }, { internalType: "address", name: "currency", type: "address" }], internalType: "struct IDropClaimCondition.ClaimCondition", name: "condition", type: "tuple" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "uint256", name: "_tokenId", type: "uint256" }, { internalType: "uint256", name: "_conditionId", type: "uint256" }, { internalType: "address", name: "_claimer", type: "address" }], name: "getClaimTimestamp", outputs: [{ internalType: "uint256", name: "lastClaimTimestamp", type: "uint256" }, { internalType: "uint256", name: "nextValidClaimTimestamp", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [], name: "getDefaultRoyaltyInfo", outputs: [{ internalType: "address", name: "", type: "address" }, { internalType: "uint16", name: "", type: "uint16" }], stateMutability: "view", type: "function" }, { inputs: [], name: "getPlatformFeeInfo", outputs: [{ internalType: "address", name: "", type: "address" }, { internalType: "uint16", name: "", type: "uint16" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "bytes32", name: "role", type: "bytes32" }], name: "getRoleAdmin", outputs: [{ internalType: "bytes32", name: "", type: "bytes32" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "bytes32", name: "role", type: "bytes32" }, { internalType: "uint256", name: "index", type: "uint256" }], name: "getRoleMember", outputs: [{ internalType: "address", name: "", type: "address" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "bytes32", name: "role", type: "bytes32" }], name: "getRoleMemberCount", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "uint256", name: "_tokenId", type: "uint256" }], name: "getRoyaltyInfoForToken", outputs: [{ internalType: "address", name: "", type: "address" }, { internalType: "uint16", name: "", type: "uint16" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "bytes32", name: "role", type: "bytes32" }, { internalType: "address", name: "account", type: "address" }], name: "grantRole", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "bytes32", name: "role", type: "bytes32" }, { internalType: "address", name: "account", type: "address" }], name: "hasRole", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "_defaultAdmin", type: "address" }, { internalType: "string", name: "_name", type: "string" }, { internalType: "string", name: "_symbol", type: "string" }, { internalType: "string", name: "_contractURI", type: "string" }, { internalType: "address[]", name: "_trustedForwarders", type: "address[]" }, { internalType: "address", name: "_saleRecipient", type: "address" }, { internalType: "address", name: "_royaltyRecipient", type: "address" }, { internalType: "uint128", name: "_royaltyBps", type: "uint128" }, { internalType: "uint128", name: "_platformFeeBps", type: "uint128" }, { internalType: "address", name: "_platformFeeRecipient", type: "address" }], name: "initialize", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "account", type: "address" }, { internalType: "address", name: "operator", type: "address" }], name: "isApprovedForAll", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "forwarder", type: "address" }], name: "isTrustedForwarder", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "uint256", name: "_amount", type: "uint256" }, { internalType: "string", name: "_baseURIForTokens", type: "string" }], name: "lazyMint", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "uint256", name: "", type: "uint256" }], name: "maxTotalSupply", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "uint256", name: "", type: "uint256" }], name: "maxWalletClaimCount", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "bytes[]", name: "data", type: "bytes[]" }], name: "multicall", outputs: [{ internalType: "bytes[]", name: "results", type: "bytes[]" }], stateMutability: "nonpayable", type: "function" }, { inputs: [], name: "name", outputs: [{ internalType: "string", name: "", type: "string" }], stateMutability: "view", type: "function" }, { inputs: [], name: "nextTokenIdToMint", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [], name: "owner", outputs: [{ internalType: "address", name: "", type: "address" }], stateMutability: "view", type: "function" }, { inputs: [], name: "primarySaleRecipient", outputs: [{ internalType: "address", name: "", type: "address" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "bytes32", name: "role", type: "bytes32" }, { internalType: "address", name: "account", type: "address" }], name: "renounceRole", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "bytes32", name: "role", type: "bytes32" }, { internalType: "address", name: "account", type: "address" }], name: "revokeRole", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "uint256", name: "tokenId", type: "uint256" }, { internalType: "uint256", name: "salePrice", type: "uint256" }], name: "royaltyInfo", outputs: [{ internalType: "address", name: "receiver", type: "address" }, { internalType: "uint256", name: "royaltyAmount", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "from", type: "address" }, { internalType: "address", name: "to", type: "address" }, { internalType: "uint256[]", name: "ids", type: "uint256[]" }, { internalType: "uint256[]", name: "amounts", type: "uint256[]" }, { internalType: "bytes", name: "data", type: "bytes" }], name: "safeBatchTransferFrom", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "from", type: "address" }, { internalType: "address", name: "to", type: "address" }, { internalType: "uint256", name: "id", type: "uint256" }, { internalType: "uint256", name: "amount", type: "uint256" }, { internalType: "bytes", name: "data", type: "bytes" }], name: "safeTransferFrom", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "uint256", name: "", type: "uint256" }], name: "saleRecipient", outputs: [{ internalType: "address", name: "", type: "address" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "operator", type: "address" }, { internalType: "bool", name: "approved", type: "bool" }], name: "setApprovalForAll", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "uint256", name: "_tokenId", type: "uint256" }, { components: [{ internalType: "uint256", name: "startTimestamp", type: "uint256" }, { internalType: "uint256", name: "maxClaimableSupply", type: "uint256" }, { internalType: "uint256", name: "supplyClaimed", type: "uint256" }, { internalType: "uint256", name: "quantityLimitPerTransaction", type: "uint256" }, { internalType: "uint256", name: "waitTimeInSecondsBetweenClaims", type: "uint256" }, { internalType: "bytes32", name: "merkleRoot", type: "bytes32" }, { internalType: "uint256", name: "pricePerToken", type: "uint256" }, { internalType: "address", name: "currency", type: "address" }], internalType: "struct IDropClaimCondition.ClaimCondition[]", name: "_phases", type: "tuple[]" }, { internalType: "bool", name: "_resetLimitRestriction", type: "bool" }], name: "setClaimConditions", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "string", name: "_uri", type: "string" }], name: "setContractURI", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "_royaltyRecipient", type: "address" }, { internalType: "uint256", name: "_royaltyBps", type: "uint256" }], name: "setDefaultRoyaltyInfo", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "uint256", name: "_tokenId", type: "uint256" }, { internalType: "uint256", name: "_maxTotalSupply", type: "uint256" }], name: "setMaxTotalSupply", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "uint256", name: "_tokenId", type: "uint256" }, { internalType: "uint256", name: "_count", type: "uint256" }], name: "setMaxWalletClaimCount", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "_newOwner", type: "address" }], name: "setOwner", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "_platformFeeRecipient", type: "address" }, { internalType: "uint256", name: "_platformFeeBps", type: "uint256" }], name: "setPlatformFeeInfo", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "_saleRecipient", type: "address" }], name: "setPrimarySaleRecipient", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "uint256", name: "_tokenId", type: "uint256" }, { internalType: "address", name: "_recipient", type: "address" }, { internalType: "uint256", name: "_bps", type: "uint256" }], name: "setRoyaltyInfoForToken", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "uint256", name: "_tokenId", type: "uint256" }, { internalType: "address", name: "_claimer", type: "address" }, { internalType: "uint256", name: "_count", type: "uint256" }], name: "setWalletClaimCount", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "bytes4", name: "interfaceId", type: "bytes4" }], name: "supportsInterface", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "view", type: "function" }, { inputs: [], name: "symbol", outputs: [{ internalType: "string", name: "", type: "string" }], stateMutability: "view", type: "function" }, { inputs: [], name: "thirdwebFee", outputs: [{ internalType: "contract ITWFee", name: "", type: "address" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "uint256", name: "", type: "uint256" }], name: "totalSupply", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "uint256", name: "_tokenId", type: "uint256" }], name: "uri", outputs: [{ internalType: "string", name: "_tokenURI", type: "string" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "uint256", name: "_conditionId", type: "uint256" }, { internalType: "address", name: "_claimer", type: "address" }, { internalType: "uint256", name: "_tokenId", type: "uint256" }, { internalType: "uint256", name: "_quantity", type: "uint256" }, { internalType: "address", name: "_currency", type: "address" }, { internalType: "uint256", name: "_pricePerToken", type: "uint256" }], name: "verifyClaim", outputs: [], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "uint256", name: "_conditionId", type: "uint256" }, { internalType: "address", name: "_claimer", type: "address" }, { internalType: "uint256", name: "_tokenId", type: "uint256" }, { internalType: "uint256", name: "_quantity", type: "uint256" }, { internalType: "bytes32[]", name: "_proofs", type: "bytes32[]" }, { internalType: "uint256", name: "_proofMaxQuantityPerTransaction", type: "uint256" }], name: "verifyClaimMerkleProof", outputs: [{ internalType: "bool", name: "validMerkleProof", type: "bool" }, { internalType: "uint256", name: "merkleProofIndex", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "uint256", name: "", type: "uint256" }, { internalType: "address", name: "", type: "address" }], name: "walletClaimCount", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }];
var D1 = "0x60a06040523480156200001157600080fd5b5060405162005efe38038062005efe83398101604081905262000034916200013b565b600054610100900460ff16620000515760005460ff16156200005b565b6200005b6200010e565b620000c35760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b600054610100900460ff16158015620000e6576000805461ffff19166101011790555b6001600160a01b038216608052801562000106576000805461ff00191690555b50506200016d565b600062000126306200012c60201b62002a6e1760201c565b15905090565b6001600160a01b03163b151590565b6000602082840312156200014e57600080fd5b81516001600160a01b03811681146200016657600080fd5b9392505050565b608051615d6e6200019060003960008181610ac301526134a80152615d6e6000f3fe6080604052600436106103755760003560e01c80639010d07c116101d1578063bd85b03911610102578063d45b28d7116100a0578063e9703d251161006f578063e9703d2514610bfa578063e985e9c514610c2f578063f242432a14610c79578063f5298aca14610c9957600080fd5b8063d45b28d714610b1b578063d547741f14610ba5578063e159163414610bc5578063e8a3d48514610be557600080fd5b8063ca15c873116100dc578063ca15c87314610a5e578063cb2ef6f714610a7e578063cf8267b114610ab1578063d45573f614610ae557600080fd5b8063bd85b039146109c0578063c16ce64e146109ee578063c7337d6b14610a2757600080fd5b8063a22cb4651161016f578063b101440011610149578063b101440014610930578063b24f2d3914610950578063b4c5faa11461097f578063b79cade41461099257600080fd5b8063a22cb465146108c3578063ab073c22146108e3578063ac9650d81461090357600080fd5b806395d89b41116101ab57806395d89b411461085d5780639bcf7a1514610872578063a0a8e46014610892578063a217fddf146108ae57600080fd5b80639010d07c146107d757806391d14854146107f7578063938e3d7b1461083d57600080fd5b80633b1475a7116102ab578063622a6c311161024957806371d53a5b1161022357806371d53a5b1461074b578063832c3a581461078257806387198cf2146107a25780638da5cb5b146107c257600080fd5b8063622a6c31146106d65780636b20c4541461070b5780636f4f28371461072b57600080fd5b80634e1273f4116102855780634e1273f414610630578063572b6c051461065d5780635ab063e814610696578063600dd5ea146106b657600080fd5b80633b1475a7146105b757806347158264146105ce5780634cc157df146105ee57600080fd5b8063248a9ca3116103185780632a55205a116102f25780632a55205a146105185780632eb2c2d6146105575780632f2ff15d1461057757806336568abe1461059757600080fd5b8063248a9ca31461049a57806324aaffaa146104ca57806326380d80146104f857600080fd5b8063079fe40e11610354578063079fe40e146103ff5780630e89341c1461043857806313af4035146104585780631e7ac4881461047a57600080fd5b8062fdd58e1461037a57806301ffc9a7146103ad57806306fdde03146103dd575b600080fd5b34801561038657600080fd5b5061039a610395366004614c16565b610cb9565b6040519081526020015b60405180910390f35b3480156103b957600080fd5b506103cd6103c8366004614c58565b610d68565b60405190151581526020016103a4565b3480156103e957600080fd5b506103f2610d90565b6040516103a49190614ccd565b34801561040b57600080fd5b5061019554610420906001600160a01b031681565b6040516001600160a01b0390911681526020016103a4565b34801561044457600080fd5b506103f2610453366004614ce0565b610e1f565b34801561046457600080fd5b50610478610473366004614cf9565b610ee0565b005b34801561048657600080fd5b50610478610495366004614c16565b610fe6565b3480156104a657600080fd5b5061039a6104b5366004614ce0565b600090815260fb602052604090206001015490565b3480156104d657600080fd5b5061039a6104e5366004614ce0565b61019d6020526000908152604090205481565b34801561050457600080fd5b50610478610513366004614d16565b6110c6565b34801561052457600080fd5b50610538610533366004614d74565b61141a565b604080516001600160a01b0390931683526020830191909152016103a4565b34801561056357600080fd5b50610478610572366004614ee2565b611457565b34801561058357600080fd5b50610478610592366004614f90565b61150b565b3480156105a357600080fd5b506104786105b2366004614f90565b611538565b3480156105c357600080fd5b5061039a6101945481565b3480156105da57600080fd5b506104786105e9366004615009565b6115d4565b3480156105fa57600080fd5b5061060e610609366004614ce0565b6116c6565b604080516001600160a01b03909316835261ffff9091166020830152016103a4565b34801561063c57600080fd5b5061065061064b3660046150c4565b611736565b6040516103a49190615163565b34801561066957600080fd5b506103cd610678366004614cf9565b6001600160a01b031660009081526065602052604090205460ff1690565b3480156106a257600080fd5b5061039a6106b1366004614ce0565b611874565b3480156106c257600080fd5b506104786106d1366004614c16565b611938565b3480156106e257600080fd5b506106f66106f1366004615176565b611a12565b604080519283526020830191909152016103a4565b34801561071757600080fd5b506104786107263660046151af565b611a6b565b34801561073757600080fd5b50610478610746366004614cf9565b611b03565b34801561075757600080fd5b5061076b61076636600461526a565b611b5d565b6040805192151583526020830191909152016103a4565b34801561078e57600080fd5b5061047861079d366004614d74565b611d99565b3480156107ae57600080fd5b506104786107bd366004614d74565b611df0565b3480156107ce57600080fd5b50610420611e47565b3480156107e357600080fd5b506104206107f2366004614d74565b611ea2565b34801561080357600080fd5b506103cd610812366004614f90565b600091825260fb602090815260408084206001600160a01b0393909316845291905290205460ff1690565b34801561084957600080fd5b506104786108583660046152e6565b611ec2565b34801561086957600080fd5b506103f2611ee3565b34801561087e57600080fd5b5061047861088d366004615328565b611ef1565b34801561089e57600080fd5b50604051600181526020016103a4565b3480156108ba57600080fd5b5061039a600081565b3480156108cf57600080fd5b506104786108de36600461536e565b611fdc565b3480156108ef57600080fd5b506104786108fe36600461539c565b611fee565b34801561090f57600080fd5b5061092361091e36600461542e565b6122db565b6040516103a49190615464565b34801561093c57600080fd5b5061047861094b366004615328565b6123d0565b34801561095c57600080fd5b5061019754610198546001600160a01b03909116906001600160801b031661060e565b61047861098d3660046154c6565b61243a565b34801561099e57600080fd5b5061039a6109ad366004614ce0565b6101a26020526000908152604090205481565b3480156109cc57600080fd5b5061039a6109db366004614ce0565b61019c6020526000908152604090205481565b3480156109fa57600080fd5b5061039a610a09366004614f90565b6101a160209081526000928352604080842090915290825290205481565b348015610a3357600080fd5b50610420610a42366004614ce0565b61019f602052600090815260409020546001600160a01b031681565b348015610a6a57600080fd5b5061039a610a79366004614ce0565b6125a2565b348015610a8a57600080fd5b507f44726f704552433131353500000000000000000000000000000000000000000061039a565b348015610abd57600080fd5b506104207f000000000000000000000000000000000000000000000000000000000000000081565b348015610af157600080fd5b5061019654610198546001600160a01b0390911690600160801b90046001600160801b031661060e565b348015610b2757600080fd5b50610b3b610b36366004614d74565b6125ba565b6040516103a49190600061010082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015260c083015160c08301526001600160a01b0360e08401511660e083015292915050565b348015610bb157600080fd5b50610478610bc0366004614f90565b612690565b348015610bd157600080fd5b50610478610be036600461556a565b6126b8565b348015610bf157600080fd5b506103f261291b565b348015610c0657600080fd5b506106f6610c15366004614ce0565b61019e602052600090815260409020805460019091015482565b348015610c3b57600080fd5b506103cd610c4a36600461567d565b6001600160a01b0391821660009081526101606020908152604080832093909416825291909152205460ff1690565b348015610c8557600080fd5b50610478610c943660046156ab565b612929565b348015610ca557600080fd5b50610478610cb4366004615714565b6129d6565b60006001600160a01b038316610d3c5760405162461bcd60e51b815260206004820152602b60248201527f455243313135353a2062616c616e636520717565727920666f7220746865207a60448201527f65726f206164647265737300000000000000000000000000000000000000000060648201526084015b60405180910390fd5b50600081815261015f602090815260408083206001600160a01b03861684529091529020545b92915050565b6000610d7382612a7d565b80610d625750506001600160e01b03191663152a902d60e11b1490565b6101918054610d9e90615749565b80601f0160208091040260200160405190810160405280929190818152602001828054610dca90615749565b8015610e175780601f10610dec57610100808354040283529160200191610e17565b820191906000526020600020905b815481529060010190602001808311610dfa57829003601f168201915b505050505081565b606060005b61019a54811015610eca5761019a8181548110610e4357610e43615784565b9060005260206000200154831015610eb85761019b600061019a8381548110610e6e57610e6e615784565b90600052602060002001548152602001908152602001600020610e9084612abd565b604051602001610ea19291906157b6565b604051602081830303815290604052915050919050565b610ec360018261586a565b9050610e24565b5050604080516020810190915260008152919050565b6000610ef381610eee612bbb565b612bc5565b6001600160a01b03821660009081527fc88390e7e62175be0932452175b6a7222b6b094ab0ef984a5153c620345d8975602052604090205460ff16610f7a5760405162461bcd60e51b815260206004820152601b60248201527f6e6577206f776e6572206e6f74206d6f64756c652061646d696e2e00000000006044820152606401610d33565b61019354604080516001600160a01b03928316815291841660208301527f8292fce18fa69edf4db7b94ea2e58241df0ae57f97e0a6c9b29067028bf92d76910160405180910390a15061019380546001600160a01b0319166001600160a01b0392909216919091179055565b6000610ff481610eee612bbb565b6127108211156110465760405162461bcd60e51b815260206004820152600d60248201527f627073203c3d2031303030302e000000000000000000000000000000000000006044820152606401610d33565b61019880546001600160801b031667ffffffffffffffff8416600160801b0217905561019680546001600160a01b0319166001600160a01b03851690811790915560408051918252602082018490527fe2497bd806ec41a6e0dd992c29a72efc0ef8fec9092d1978fd4a1e00b2f1830491015b60405180910390a1505050565b600084815261019e6020908152604080832089845260029081018352928190208151610100810183528154815260018201549381019390935292830154908201526003820154606082015260048201546080820152600582015460a0820152600682015460c08201526007909101546001600160a01b0390811660e0830181905290841614801561115a57508060c0015182145b6111b25760405162461bcd60e51b8152602060048201526024808201527f696e76616c69642063757272656e6379206f722070726963652073706563696660448201526334b2b21760e11b6064820152608401610d33565b6000841180156111c6575080606001518411155b6112125760405162461bcd60e51b815260206004820152601960248201527f696e76616c6964207175616e7469747920636c61696d65642e000000000000006044820152606401610d33565b8060200151848260400151611227919061586a565b11156112755760405162461bcd60e51b815260206004820152601760248201527f657863656564206d6178206d696e7420737570706c792e0000000000000000006044820152606401610d33565b600085815261019d602052604090205415806112b75750600085815261019d602090815260408083205461019c909252909120546112b490869061586a565b11155b6113035760405162461bcd60e51b815260206004820152601760248201527f657863656564206d617820746f74616c20737570706c790000000000000000006044820152606401610d33565b60008581526101a260205260409020541580611356575060008581526101a260209081526040808320546101a183528184206001600160a01b038b1685529092529091205461135390869061586a565b11155b6113a25760405162461bcd60e51b815260206004820152601d60248201527f65786365656420636c61696d206c696d697420666f722077616c6c65740000006044820152606401610d33565b6000806113b0878a8a611a12565b9150915081600014806113c35750804210155b61140f5760405162461bcd60e51b815260206004820152601160248201527f63616e6e6f7420636c61696d207965742e0000000000000000000000000000006044820152606401610d33565b505050505050505050565b600080600080611429866116c6565b90945084925061ffff1690506127106114428287615882565b61144c91906158b7565b925050509250929050565b61145f612bbb565b6001600160a01b0316856001600160a01b03161480611485575061148585610c4a612bbb565b6114f75760405162461bcd60e51b815260206004820152603260248201527f455243313135353a207472616e736665722063616c6c6572206973206e6f742060448201527f6f776e6572206e6f7220617070726f76656400000000000000000000000000006064820152608401610d33565b6115048585858585612c45565b5050505050565b600082815260fb602052604090206001015461152981610eee612bbb565b6115338383612ec1565b505050565b611540612bbb565b6001600160a01b0316816001600160a01b0316146115c65760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c6600000000000000000000000000000000006064820152608401610d33565b6115d08282612ee4565b5050565b7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a661160181610eee612bbb565b610194546000611611868361586a565b610194819055600081815261019b60205260409020909150611634908686614ae4565b5061019a8054600181810183556000929092527fd994f4dad00f9ff89caab117647e768aa59b274f965a222ec6a1586aa6e26bcb018290557f4e6c698792b8dfb7c94c60c7e9e91f82932832d5e1ec0870ed42cf674e6af44590839061169a898361586a565b6116a491906158cb565b87876040516116b694939291906158e2565b60405180910390a1505050505050565b60008181526101a060209081526040808320815180830190925280546001600160a01b03168083526001909101549282019290925282911561170e578051602082015161172c565b61019754610198546001600160a01b03909116906001600160801b03165b9250925050915091565b606081518351146117af5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e67746860448201527f206d69736d6174636800000000000000000000000000000000000000000000006064820152608401610d33565b6000835167ffffffffffffffff8111156117cb576117cb614d96565b6040519080825280602002602001820160405280156117f4578160200160208202803683370190505b50905060005b845181101561186c5761183f85828151811061181857611818615784565b602002602001015185838151811061183257611832615784565b6020026020010151610cb9565b82828151811061185157611851615784565b60209081029190910101526118658161591f565b90506117fa565b509392505050565b600081815261019e602052604081206001810154815483916118959161586a565b90505b81548111156118ef576002820160006118b26001846158cb565b81526020019081526020016000206000015442106118dd576118d56001826158cb565b949350505050565b806118e78161593a565b915050611898565b5060405162461bcd60e51b815260206004820152601960248201527f6e6f20616374697665206d696e7420636f6e646974696f6e2e000000000000006044820152606401610d33565b600061194681610eee612bbb565b6127108211156119985760405162461bcd60e51b815260206004820152601260248201527f65786365656420726f79616c74792062707300000000000000000000000000006044820152606401610d33565b61019780546001600160a01b0319166001600160a01b03851690811790915561019880546fffffffffffffffffffffffffffffffff19166001600160801b03851617905560408051918252602082018490527f90d7ec04bcb8978719414f82e52e4cb651db41d0e6f8cea6118c2191e6183adb91016110b9565b600083815261019e602090815260408083208584526003810183528184206001600160a01b0386168552835281842054868552600290910190925290912060040154810181811015611a6357506000195b935093915050565b611a73612bbb565b6001600160a01b0316836001600160a01b03161480611a995750611a9983610c4a612bbb565b611af85760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f726044820152691030b8383937bb32b21760b11b6064820152608401610d33565b611533838383612f07565b6000611b1181610eee612bbb565b61019580546001600160a01b0319166001600160a01b0384169081179091556040517f299d17e95023f496e0ffc4909cff1a61f74bb5eb18de6f900f4155bfa1b3b33390600090a25050565b600085815261019e602090815260408083208a8452600290810183528184208251610100810184528154815260018201549481019490945290810154918301919091526003810154606083015260048101546080830152600581015460a08301819052600682015460c08401526007909101546001600160a01b031660e083015282919015611d8c57611c6286868080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050505060a08301516040516bffffffffffffffffffffffff1960608e901b166020820152603481018890526054016040516020818303038152906040528051906020012061315a565b909350915082611cb45760405162461bcd60e51b815260206004820152601160248201527f6e6f7420696e2077686974656c6973742e0000000000000000000000000000006044820152606401610d33565b600088815261019e602090815260408083208d84526004018252808320600886901c8452909152902054600160ff84161b1615611d335760405162461bcd60e51b815260206004820152600e60248201527f70726f6f6620636c61696d65642e0000000000000000000000000000000000006044820152606401610d33565b831580611d405750838711155b611d8c5760405162461bcd60e51b815260206004820152601760248201527f696e76616c6964207175616e746974792070726f6f662e0000000000000000006044820152606401610d33565b5097509795505050505050565b6000611da781610eee612bbb565b60008381526101a2602090815260409182902084905581518581529081018490527f07fa2d0eb2fe8b8e6fbee6073cf9d84659d6db054d221579a0373ae29bc9d73d91016110b9565b6000611dfe81610eee612bbb565b600083815261019d602090815260409182902084905581518581529081018490527fc58cd6132bb46df23d468939c03dd023b74b509aaa6b04c39d5a6461c65963bd91016110b9565b610193546001600160a01b031660009081527fc88390e7e62175be0932452175b6a7222b6b094ab0ef984a5153c620345d8975602052604081205460ff16611e8f5750600090565b610193546001600160a01b03165b905090565b600082815261012d60205260408120611ebb9083613228565b9392505050565b6000611ed081610eee612bbb565b611edd6101998484614ae4565b50505050565b6101928054610d9e90615749565b6000611eff81610eee612bbb565b612710821115611f515760405162461bcd60e51b815260206004820152601260248201527f65786365656420726f79616c74792062707300000000000000000000000000006044820152606401610d33565b6040805180820182526001600160a01b03858116808352602080840187815260008a81526101a08352869020945185546001600160a01b031916941693909317845591516001909301929092558251918252810184905285917f7365cf4122f072a3365c20d54eff9b38d73c096c28e1892ec8f5b0e403a0f12d91015b60405180910390a250505050565b6115d0611fe7612bbb565b8383613234565b6000611ffc81610eee612bbb565b600085815261019e602052604090208054600182015481851561202657612023828461586a565b90505b6000805b8881101561216b5780158061205a575089898281811061204c5761204c615784565b905061010002016000013582105b6120cc5760405162461bcd60e51b815260206004820152602a60248201527f737461727454696d657374616d70206d75737420626520696e20617363656e6460448201527f696e67206f726465722e000000000000000000000000000000000000000000006064820152608401610d33565b8989828181106120de576120de615784565b9050610100020186600201600083866120f7919061586a565b815260200190815260200160002081816121119190615951565b50600090506002870181612125848761586a565b815260208101919091526040016000206002015589898281811061214b5761214b615784565b9050610100020160000135915080806121639061591f565b91505061202a565b5086156121ed57835b828110156121e7576000818152600280880160209081526040832083815560018101849055918201839055600382018390556004808301849055600583018490556006830193909355600790910180546001600160a01b03191690559087019052806121df8161591f565b915050612174565b50612289565b8783111561228957875b838110156122875760028601600061220f838661586a565b81526020810191909152604001600090812081815560018101829055600281018290556003810182905560048082018390556005820183905560068201839055600790910180546001600160a01b031916905587019061226f838661586a565b8152602001528061227f8161591f565b9150506121f7565b505b600185018890558185556040518a907f7822655b74d50f461cbd7ca5dfc8b5e48b21fa2157bd7d277888fccce85af2ae906122c7908c908c906159c2565b60405180910390a250505050505050505050565b60608167ffffffffffffffff8111156122f6576122f6614d96565b60405190808252806020026020018201604052801561232957816020015b60608152602001906001900390816123145790505b50905060005b828110156123c9576123993085858481811061234d5761234d615784565b905060200281019061235f9190615a59565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061332a92505050565b8282815181106123ab576123ab615784565b602002602001018190525080806123c19061591f565b91505061232f565b5092915050565b60006123de81610eee612bbb565b60008481526101a1602090815260408083206001600160a01b0387168085529083529281902085905580518781529182018590527f9260cdce30c9abdb65593c1a903e40c87feb886a28aa4335a6695547988aab2f9101611fce565b6002600154141561248d5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610d33565b6002600155600061249d88611874565b90506124b4816124ab612bbb565b8a8a8a8a6110c6565b6000806124cd836124c3612bbb565b8c8c8a8a8a611b5d565b915091508180156124de5750600084115b156125195760008a815261019e602090815260408083208684526004018252808320600885901c845290915290208054600160ff84161b1790555b6125258989898d613435565b6125318b848c8c613657565b612539612bbb565b6001600160a01b03168a847f4f72e6585331094d368e469f11198272039d08cbddfcda1577e192687a83afb68e8d6040516125899291906001600160a01b03929092168252602082015260400190565b60405180910390a4505060018055505050505050505050565b600081815261012d60205260408120610d6290613747565b61260e6040518061010001604052806000815260200160008152602001600081526020016000815260200160008152602001600080191681526020016000815260200160006001600160a01b031681525090565b50600091825261019e6020908152604080842092845260029283018252928390208351610100810185528154815260018201549281019290925291820154928101929092526003810154606083015260048101546080830152600581015460a0830152600681015460c0830152600701546001600160a01b031660e082015290565b600082815260fb60205260409020600101546126ae81610eee612bbb565b6115338383612ee4565b600054610100900460ff166126d35760005460ff16156126d7565b303b155b6127495760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610d33565b600054610100900460ff1615801561276b576000805461ffff19166101011790555b612773613751565b61277c876137c6565b61279460405180602001604052806000815250613899565b89516127a8906101919060208d0190614b68565b5088516127bd906101929060208c0190614b68565b5061019780546001600160a01b03199081166001600160a01b038881169190911790925561019880546fffffffffffffffffffffffffffffffff19166001600160801b0388161790556101968054821685841617905561019580549091169188169190911790558751612838906101999060208b0190614b68565b5061019880546001600160801b03808616600160801b02911617905561019380546001600160a01b038d166001600160a01b031990911617905561287d60008c613910565b6128a77f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a68c613910565b6128d17f8502233096d909befbda0999bb8ea2f3a6be3c138b9fbf003752a4c8bce86f6c8c613910565b6128fc7f8502233096d909befbda0999bb8ea2f3a6be3c138b9fbf003752a4c8bce86f6c6000613910565b801561290e576000805461ff00191690555b5050505050505050505050565b6101998054610d9e90615749565b612931612bbb565b6001600160a01b0316856001600160a01b03161480612957575061295785610c4a612bbb565b6129c95760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260448201527f20617070726f76656400000000000000000000000000000000000000000000006064820152608401610d33565b611504858585858561391a565b6129de612bbb565b6001600160a01b0316836001600160a01b03161480612a045750612a0483610c4a612bbb565b612a635760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f726044820152691030b8383937bb32b21760b11b6064820152608401610d33565b611533838383613ad8565b6001600160a01b03163b151590565b60006001600160e01b03198216636cdb3d1360e11b1480612aae57506001600160e01b031982166303a24d0760e21b145b80610d625750610d6282613c62565b606081612ae15750506040805180820190915260018152600360fc1b602082015290565b8160005b8115612b0b5780612af58161591f565b9150612b049050600a836158b7565b9150612ae5565b60008167ffffffffffffffff811115612b2657612b26614d96565b6040519080825280601f01601f191660200182016040528015612b50576020820181803683370190505b5090505b84156118d557612b656001836158cb565b9150612b72600a86615aa0565b612b7d90603061586a565b60f81b818381518110612b9257612b92615784565b60200101906001600160f81b031916908160001a905350612bb4600a866158b7565b9450612b54565b6000611e9d613c87565b600082815260fb602090815260408083206001600160a01b038516845290915290205460ff166115d057612c03816001600160a01b03166014613cb4565b612c0e836020613cb4565b604051602001612c1f929190615ab4565b60408051601f198184030181529082905262461bcd60e51b8252610d3391600401614ccd565b8151835114612ca75760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b6064820152608401610d33565b6001600160a01b038416612d0b5760405162461bcd60e51b815260206004820152602560248201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604482015264647265737360d81b6064820152608401610d33565b6000612d15612bbb565b9050612d25818787878787613e5d565b60005b8451811015612e53576000858281518110612d4557612d45615784565b602002602001015190506000858381518110612d6357612d63615784565b602090810291909101810151600084815261015f835260408082206001600160a01b038e168352909352919091205490915081811015612df85760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60448201526939103a3930b739b332b960b11b6064820152608401610d33565b600083815261015f602090815260408083206001600160a01b038e8116855292528083208585039055908b16825281208054849290612e3890849061586a565b9250508190555050505080612e4c9061591f565b9050612d28565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051612ea3929190615b35565b60405180910390a4612eb98187878787876140bb565b505050505050565b612ecb8282614261565b600082815261012d602052604090206115339082614304565b612eee8282614319565b600082815261012d6020526040902061153390826143ba565b6001600160a01b038316612f695760405162461bcd60e51b815260206004820152602360248201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260448201526265737360e81b6064820152608401610d33565b8051825114612fcb5760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b6064820152608401610d33565b6000612fd5612bbb565b9050612ff581856000868660405180602001604052806000815250613e5d565b60005b83518110156130fb57600084828151811061301557613015615784565b60200260200101519050600084838151811061303357613033615784565b602090810291909101810151600084815261015f835260408082206001600160a01b038c1683529093529190912054909150818110156130c15760405162461bcd60e51b8152602060048201526024808201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604482015263616e636560e01b6064820152608401610d33565b600092835261015f602090815260408085206001600160a01b038b16865290915290922091039055806130f38161591f565b915050612ff8565b5060006001600160a01b0316846001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb868660405161314c929190615b35565b60405180910390a450505050565b6000808281805b875181101561321c57613175600283615882565b9150600088828151811061318b5761318b615784565b602002602001015190508084116131cd576040805160208101869052908101829052606001604051602081830303815290604052805190602001209350613209565b6040805160208101839052908101859052606001604051602081830303815290604052805190602001209350600183613206919061586a565b92505b50806132148161591f565b915050613161565b50941495939450505050565b6000611ebb83836143cf565b816001600160a01b0316836001600160a01b031614156132bc5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c2073746174757360448201527f20666f722073656c6600000000000000000000000000000000000000000000006064820152608401610d33565b6001600160a01b0383811660008181526101606020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b60606001600160a01b0383163b6133a95760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e747261637400000000000000000000000000000000000000000000000000006064820152608401610d33565b600080846001600160a01b0316846040516133c49190615b5a565b600060405180830381855af49150503d80600081146133ff576040519150601f19603f3d011682016040523d82523d6000602084013e613404565b606091505b509150915061342c8282604051806060016040528060278152602001615d3b602791396143f9565b95945050505050565b8161343f57611edd565b600061344b8386615882565b610198549091506000906127109061347390600160801b90046001600160801b031684615882565b61347d91906158b7565b60405163085b49ad60e41b815230600482015260006024820181905291925081906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906385b49ad0906044016040805180830381865afa1580156134ee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135129190615b76565b909250905060006127106135268387615882565b61353091906158b7565b90506001600160a01b03881673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee14156135a6578434146135a65760405162461bcd60e51b815260206004820152601660248201527f6d7573742073656e6420746f74616c2070726963652e000000000000000000006044820152606401610d33565b600086815261019f60205260408120546001600160a01b0316156135e257600087815261019f60205260409020546001600160a01b03166135f0565b610195546001600160a01b03165b9050613611896135fe612bbb565b610196546001600160a01b031688614432565b6136248961361d612bbb565b8685614432565b61364b89613630612bbb565b838561363c8a8c6158cb565b61364691906158cb565b614432565b50505050505050505050565b600082815261019e602090815260408083208684526002908101909252822001805483929061368790849061586a565b9091555050600082815261019e60209081526040808320868452600301909152812042916136b3612bbb565b6001600160a01b03166001600160a01b0316815260200190815260200160002081905550806101a1600084815260200190815260200160002060006136f6612bbb565b6001600160a01b03166001600160a01b031681526020019081526020016000206000828254613725919061586a565b92505081905550611edd8483836040518060200160405280600081525061447c565b6000610d62825490565b600054610100900460ff166137bc5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610d33565b6137c461458b565b565b600054610100900460ff166138315760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610d33565b60005b81518110156115d05760016065600084848151811061385557613855615784565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff1916911515919091179055806138918161591f565b915050613834565b600054610100900460ff166139045760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610d33565b61390d816145fc565b50565b6115d08282612ec1565b6001600160a01b03841661397e5760405162461bcd60e51b815260206004820152602560248201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604482015264647265737360d81b6064820152608401610d33565b6000613988612bbb565b90506139a881878761399988614610565b6139a288614610565b87613e5d565b600084815261015f602090815260408083206001600160a01b038a16845290915290205483811015613a2f5760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60448201526939103a3930b739b332b960b11b6064820152608401610d33565b600085815261015f602090815260408083206001600160a01b038b8116855292528083208785039055908816825281208054869290613a6f90849061586a565b909155505060408051868152602081018690526001600160a01b03808916928a821692918616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4613acf82888888888861465b565b50505050505050565b6001600160a01b038316613b3a5760405162461bcd60e51b815260206004820152602360248201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260448201526265737360e81b6064820152608401610d33565b6000613b44612bbb565b9050613b7481856000613b5687614610565b613b5f87614610565b60405180602001604052806000815250613e5d565b600083815261015f602090815260408083206001600160a01b038816845290915290205482811015613bf45760405162461bcd60e51b8152602060048201526024808201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604482015263616e636560e01b6064820152608401610d33565b600084815261015f602090815260408083206001600160a01b03898116808652918452828520888703905582518981529384018890529092908616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a45050505050565b60006001600160e01b03198216635a05180f60e01b1480610d625750610d6282614757565b3360009081526065602052604081205460ff1615613cac575060131936013560601c90565b503390565b90565b60606000613cc3836002615882565b613cce90600261586a565b67ffffffffffffffff811115613ce657613ce6614d96565b6040519080825280601f01601f191660200182016040528015613d10576020820181803683370190505b509050600360fc1b81600081518110613d2b57613d2b615784565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110613d5a57613d5a615784565b60200101906001600160f81b031916908160001a9053506000613d7e846002615882565b613d8990600161586a565b90505b6001811115613e0e577f303132333435363738396162636465660000000000000000000000000000000085600f1660108110613dca57613dca615784565b1a60f81b828281518110613de057613de0615784565b60200101906001600160f81b031916908160001a90535060049490941c93613e078161593a565b9050613d8c565b508315611ebb5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610d33565b600080527fde23fa6c6392e300b5ced791de0faa0b28226983a4ab1c05a1ba79ef4d0a13126020527f70e64e82d0337f3fa9071fdb3266f859725ed1fc29697b2e6e986b76cffbfb085460ff16158015613ebf57506001600160a01b03851615155b8015613ed357506001600160a01b03841615155b15613fad576001600160a01b03851660009081527fde23fa6c6392e300b5ced791de0faa0b28226983a4ab1c05a1ba79ef4d0a1312602052604090205460ff1680613f5557506001600160a01b03841660009081527fde23fa6c6392e300b5ced791de0faa0b28226983a4ab1c05a1ba79ef4d0a1312602052604090205460ff165b613fad5760405162461bcd60e51b8152602060048201526024808201527f7265737472696374656420746f205452414e534645525f524f4c4520686f6c6460448201526332b9399760e11b6064820152608401610d33565b6001600160a01b0385166140355760005b835181101561403357828181518110613fd957613fd9615784565b602002602001015161019c6000868481518110613ff857613ff8615784565b60200260200101518152602001908152602001600020600082825461401d919061586a565b9091555061402c90508161591f565b9050613fbe565b505b6001600160a01b038416612eb95760005b8351811015613acf5782818151811061406157614061615784565b602002602001015161019c600086848151811061408057614080615784565b6020026020010151815260200190815260200160002060008282546140a591906158cb565b909155506140b490508161591f565b9050614046565b6001600160a01b0384163b15612eb95760405163bc197c8160e01b81526001600160a01b0385169063bc197c81906140ff9089908990889088908890600401615ba4565b6020604051808303816000875af192505050801561413a575060408051601f3d908101601f1916820190925261413791810190615c02565b60015b6141f057614146615c1f565b806308c379a01415614180575061415b615c3a565b806141665750614182565b8060405162461bcd60e51b8152600401610d339190614ccd565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e204552433131353560448201527f526563656976657220696d706c656d656e7465720000000000000000000000006064820152608401610d33565b6001600160e01b0319811663bc197c8160e01b14613acf5760405162461bcd60e51b815260206004820152602860248201527f455243313135353a204552433131353552656365697665722072656a656374656044820152676420746f6b656e7360c01b6064820152608401610d33565b600082815260fb602090815260408083206001600160a01b038516845290915290205460ff166115d057600082815260fb602090815260408083206001600160a01b03851684529091529020805460ff191660011790556142c0612bbb565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000611ebb836001600160a01b03841661478c565b600082815260fb602090815260408083206001600160a01b038516845290915290205460ff16156115d057600082815260fb602090815260408083206001600160a01b03851684529091529020805460ff19169055614376612bbb565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b6000611ebb836001600160a01b0384166147db565b60008260000182815481106143e6576143e6615784565b9060005260206000200154905092915050565b60608315614408575081611ebb565b8251156144185782518084602001fd5b8160405162461bcd60e51b8152600401610d339190614ccd565b8061443c57611edd565b6001600160a01b03841673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee14156144705761446b82826148ce565b611edd565b611edd84848484614971565b6001600160a01b0384166144dc5760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b6064820152608401610d33565b60006144e6612bbb565b90506144f88160008761399988614610565b600084815261015f602090815260408083206001600160a01b03891684529091528120805485929061452b90849061586a565b909155505060408051858152602081018590526001600160a01b0380881692600092918516917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46115048160008787878761465b565b600054610100900460ff166145f65760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610d33565b60018055565b80516115d090610161906020840190614b68565b6040805160018082528183019092526060916000919060208083019080368337019050509050828160008151811061464a5761464a615784565b602090810291909101015292915050565b6001600160a01b0384163b15612eb95760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e619061469f9089908990889088908890600401615cc4565b6020604051808303816000875af19250505080156146da575060408051601f3d908101601f191682019092526146d791810190615c02565b60015b6146e657614146615c1f565b6001600160e01b0319811663f23a6e6160e01b14613acf5760405162461bcd60e51b815260206004820152602860248201527f455243313135353a204552433131353552656365697665722072656a656374656044820152676420746f6b656e7360c01b6064820152608401610d33565b60006001600160e01b03198216637965db0b60e01b1480610d6257506301ffc9a760e01b6001600160e01b0319831614610d62565b60008181526001830160205260408120546147d357508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610d62565b506000610d62565b600081815260018301602052604081205480156148c45760006147ff6001836158cb565b8554909150600090614813906001906158cb565b905081811461487857600086600001828154811061483357614833615784565b906000526020600020015490508087600001848154811061485657614856615784565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061488957614889615d07565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610d62565b6000915050610d62565b6000826001600160a01b03168260405160006040518083038185875af1925050503d806000811461491b576040519150601f19603f3d011682016040523d82523d6000602084013e614920565b606091505b50509050806115335760405162461bcd60e51b815260206004820152601c60248201527f6e617469766520746f6b656e207472616e73666572206661696c6564000000006044820152606401610d33565b816001600160a01b0316836001600160a01b0316141561499057611edd565b60006001600160a01b0384163014614a22576040516323b872dd60e01b81526001600160a01b0385811660048301528481166024830152604482018490528616906323b872dd906064016020604051808303816000875af11580156149f9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614a1d9190615d1d565b614a95565b60405163a9059cbb60e01b81526001600160a01b0384811660048301526024820184905286169063a9059cbb906044016020604051808303816000875af1158015614a71573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614a959190615d1d565b9050806115045760405162461bcd60e51b815260206004820152601960248201527f63757272656e6379207472616e73666572206661696c65642e000000000000006044820152606401610d33565b828054614af090615749565b90600052602060002090601f016020900481019282614b125760008555614b58565b82601f10614b2b5782800160ff19823516178555614b58565b82800160010185558215614b58579182015b82811115614b58578235825591602001919060010190614b3d565b50614b64929150614bdc565b5090565b828054614b7490615749565b90600052602060002090601f016020900481019282614b965760008555614b58565b82601f10614baf57805160ff1916838001178555614b58565b82800160010185558215614b58579182015b82811115614b58578251825591602001919060010190614bc1565b5b80821115614b645760008155600101614bdd565b6001600160a01b038116811461390d57600080fd5b8035614c1181614bf1565b919050565b60008060408385031215614c2957600080fd5b8235614c3481614bf1565b946020939093013593505050565b6001600160e01b03198116811461390d57600080fd5b600060208284031215614c6a57600080fd5b8135611ebb81614c42565b60005b83811015614c90578181015183820152602001614c78565b83811115611edd5750506000910152565b60008151808452614cb9816020860160208601614c75565b601f01601f19169290920160200192915050565b602081526000611ebb6020830184614ca1565b600060208284031215614cf257600080fd5b5035919050565b600060208284031215614d0b57600080fd5b8135611ebb81614bf1565b60008060008060008060c08789031215614d2f57600080fd5b863595506020870135614d4181614bf1565b945060408701359350606087013592506080870135614d5f81614bf1565b8092505060a087013590509295509295509295565b60008060408385031215614d8757600080fd5b50508035926020909101359150565b634e487b7160e01b600052604160045260246000fd5b601f8201601f1916810167ffffffffffffffff81118282101715614dd257614dd2614d96565b6040525050565b600067ffffffffffffffff821115614df357614df3614d96565b5060051b60200190565b600082601f830112614e0e57600080fd5b81356020614e1b82614dd9565b604051614e288282614dac565b83815260059390931b8501820192828101915086841115614e4857600080fd5b8286015b84811015614e635780358352918301918301614e4c565b509695505050505050565b600082601f830112614e7f57600080fd5b813567ffffffffffffffff811115614e9957614e99614d96565b604051614eb0601f8301601f191660200182614dac565b818152846020838601011115614ec557600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a08688031215614efa57600080fd5b8535614f0581614bf1565b94506020860135614f1581614bf1565b9350604086013567ffffffffffffffff80821115614f3257600080fd5b614f3e89838a01614dfd565b94506060880135915080821115614f5457600080fd5b614f6089838a01614dfd565b93506080880135915080821115614f7657600080fd5b50614f8388828901614e6e565b9150509295509295909350565b60008060408385031215614fa357600080fd5b823591506020830135614fb581614bf1565b809150509250929050565b60008083601f840112614fd257600080fd5b50813567ffffffffffffffff811115614fea57600080fd5b60208301915083602082850101111561500257600080fd5b9250929050565b60008060006040848603121561501e57600080fd5b83359250602084013567ffffffffffffffff81111561503c57600080fd5b61504886828701614fc0565b9497909650939450505050565b600082601f83011261506657600080fd5b8135602061507382614dd9565b6040516150808282614dac565b83815260059390931b85018201928281019150868411156150a057600080fd5b8286015b84811015614e635780356150b781614bf1565b83529183019183016150a4565b600080604083850312156150d757600080fd5b823567ffffffffffffffff808211156150ef57600080fd5b6150fb86838701615055565b9350602085013591508082111561511157600080fd5b5061511e85828601614dfd565b9150509250929050565b600081518084526020808501945080840160005b838110156151585781518752958201959082019060010161513c565b509495945050505050565b602081526000611ebb6020830184615128565b60008060006060848603121561518b57600080fd5b833592506020840135915060408401356151a481614bf1565b809150509250925092565b6000806000606084860312156151c457600080fd5b83356151cf81614bf1565b9250602084013567ffffffffffffffff808211156151ec57600080fd5b6151f887838801614dfd565b9350604086013591508082111561520e57600080fd5b5061521b86828701614dfd565b9150509250925092565b60008083601f84011261523757600080fd5b50813567ffffffffffffffff81111561524f57600080fd5b6020830191508360208260051b850101111561500257600080fd5b600080600080600080600060c0888a03121561528557600080fd5b87359650602088013561529781614bf1565b95506040880135945060608801359350608088013567ffffffffffffffff8111156152c157600080fd5b6152cd8a828b01615225565b989b979a5095989497959660a090950135949350505050565b600080602083850312156152f957600080fd5b823567ffffffffffffffff81111561531057600080fd5b61531c85828601614fc0565b90969095509350505050565b60008060006060848603121561533d57600080fd5b83359250602084013561534f81614bf1565b929592945050506040919091013590565b801515811461390d57600080fd5b6000806040838503121561538157600080fd5b823561538c81614bf1565b91506020830135614fb581615360565b600080600080606085870312156153b257600080fd5b84359350602085013567ffffffffffffffff808211156153d157600080fd5b818701915087601f8301126153e557600080fd5b8135818111156153f457600080fd5b8860208260081b850101111561540957600080fd5b602083019550809450505050604085013561542381615360565b939692955090935050565b6000806020838503121561544157600080fd5b823567ffffffffffffffff81111561545857600080fd5b61531c85828601615225565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b828110156154b957603f198886030184526154a7858351614ca1565b9450928501929085019060010161548b565b5092979650505050505050565b60008060008060008060008060e0898b0312156154e257600080fd5b88356154ed81614bf1565b97506020890135965060408901359550606089013561550b81614bf1565b94506080890135935060a089013567ffffffffffffffff81111561552e57600080fd5b61553a8b828c01615225565b999c989b50969995989497949560c00135949350505050565b80356001600160801b0381168114614c1157600080fd5b6000806000806000806000806000806101408b8d03121561558a57600080fd5b6155938b614c06565b995060208b013567ffffffffffffffff808211156155b057600080fd5b6155bc8e838f01614e6e565b9a5060408d01359150808211156155d257600080fd5b6155de8e838f01614e6e565b995060608d01359150808211156155f457600080fd5b6156008e838f01614e6e565b985060808d013591508082111561561657600080fd5b506156238d828e01615055565b96505061563260a08c01614c06565b945061564060c08c01614c06565b935061564e60e08c01615553565b925061565d6101008c01615553565b915061566c6101208c01614c06565b90509295989b9194979a5092959850565b6000806040838503121561569057600080fd5b823561569b81614bf1565b91506020830135614fb581614bf1565b600080600080600060a086880312156156c357600080fd5b85356156ce81614bf1565b945060208601356156de81614bf1565b93506040860135925060608601359150608086013567ffffffffffffffff81111561570857600080fd5b614f8388828901614e6e565b60008060006060848603121561572957600080fd5b833561573481614bf1565b95602085013595506040909401359392505050565b600181811c9082168061575d57607f821691505b6020821081141561577e57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b600081516157ac818560208601614c75565b9290920192915050565b600080845481600182811c9150808316806157d257607f831692505b60208084108214156157f257634e487b7160e01b86526022600452602486fd5b818015615806576001811461581757615844565b60ff19861689528489019650615844565b60008b81526020902060005b8681101561583c5781548b820152908501908301615823565b505084890196505b50505050505061342c818561579a565b634e487b7160e01b600052601160045260246000fd5b6000821982111561587d5761587d615854565b500190565b600081600019048311821515161561589c5761589c615854565b500290565b634e487b7160e01b600052601260045260246000fd5b6000826158c6576158c66158a1565b500490565b6000828210156158dd576158dd615854565b500390565b84815283602082015260606040820152816060820152818360808301376000818301608090810191909152601f909201601f191601019392505050565b600060001982141561593357615933615854565b5060010190565b60008161594957615949615854565b506000190190565b813581556020820135600182015560408201356002820155606082013560038201556080820135600482015560a0820135600582015560c082013560068201556007810160e08301356159a381614bf1565b6001600160a01b0381166001600160a01b031983541617825550505050565b6020808252818101839052600090604080840186845b87811015615a4c578135835284820135858401528382013584840152606080830135908401526080808301359084015260a0808301359084015260c0808301359084015260e080830135615a2b81614bf1565b6001600160a01b0316908401526101009283019291909101906001016159d8565b5090979650505050505050565b6000808335601e19843603018112615a7057600080fd5b83018035915067ffffffffffffffff821115615a8b57600080fd5b60200191503681900382131561500257600080fd5b600082615aaf57615aaf6158a1565b500690565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351615aec816017850160208801614c75565b7f206973206d697373696e6720726f6c65200000000000000000000000000000006017918401918201528351615b29816028840160208801614c75565b01602801949350505050565b604081526000615b486040830185615128565b828103602084015261342c8185615128565b60008251615b6c818460208701614c75565b9190910192915050565b60008060408385031215615b8957600080fd5b8251615b9481614bf1565b6020939093015192949293505050565b60006001600160a01b03808816835280871660208401525060a06040830152615bd060a0830186615128565b8281036060840152615be28186615128565b90508281036080840152615bf68185614ca1565b98975050505050505050565b600060208284031215615c1457600080fd5b8151611ebb81614c42565b600060033d1115613cb15760046000803e5060005160e01c90565b600060443d1015615c485790565b6040516003193d81016004833e81513d67ffffffffffffffff8160248401118184111715615c7857505050505090565b8285019150815181811115615c905750505050505090565b843d8701016020828501011115615caa5750505050505090565b615cb960208286010187614dac565b509095945050505050565b60006001600160a01b03808816835280871660208401525084604083015283606083015260a06080830152615cfc60a0830184614ca1565b979650505050505050565b634e487b7160e01b600052603160045260246000fd5b600060208284031215615d2f57600080fd5b8151611ebb8161536056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a164736f6c634300080c000a";
var m2 = (a) => a.length > 1;
var g = class extends ContractFactory {
  constructor(...e) {
    m2(e) ? super(...e) : super(v, D1, e[0]), this.contractName = "DropERC1155";
  }
  deploy(e, t) {
    return super.deploy(e, t || {});
  }
  getDeployTransaction(e, t) {
    return super.getDeployTransaction(e, t || {});
  }
  attach(e) {
    return super.attach(e);
  }
  connect(e) {
    return super.connect(e);
  }
  static createInterface() {
    return new utils_exports.Interface(v);
  }
  static connect(e, t) {
    return new Contract(e, v, t);
  }
};
g.bytecode = D1, g.abi = v;
var x = [{ inputs: [{ internalType: "address", name: "_thirdwebFee", type: "address" }], stateMutability: "nonpayable", type: "constructor" }, { anonymous: false, inputs: [{ indexed: true, internalType: "address", name: "owner", type: "address" }, { indexed: true, internalType: "address", name: "spender", type: "address" }, { indexed: false, internalType: "uint256", name: "value", type: "uint256" }], name: "Approval", type: "event" }, { anonymous: false, inputs: [{ components: [{ internalType: "uint256", name: "startTimestamp", type: "uint256" }, { internalType: "uint256", name: "maxClaimableSupply", type: "uint256" }, { internalType: "uint256", name: "supplyClaimed", type: "uint256" }, { internalType: "uint256", name: "quantityLimitPerTransaction", type: "uint256" }, { internalType: "uint256", name: "waitTimeInSecondsBetweenClaims", type: "uint256" }, { internalType: "bytes32", name: "merkleRoot", type: "bytes32" }, { internalType: "uint256", name: "pricePerToken", type: "uint256" }, { internalType: "address", name: "currency", type: "address" }], indexed: false, internalType: "struct IDropClaimCondition.ClaimCondition[]", name: "claimConditions", type: "tuple[]" }], name: "ClaimConditionsUpdated", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "address", name: "delegator", type: "address" }, { indexed: true, internalType: "address", name: "fromDelegate", type: "address" }, { indexed: true, internalType: "address", name: "toDelegate", type: "address" }], name: "DelegateChanged", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "address", name: "delegate", type: "address" }, { indexed: false, internalType: "uint256", name: "previousBalance", type: "uint256" }, { indexed: false, internalType: "uint256", name: "newBalance", type: "uint256" }], name: "DelegateVotesChanged", type: "event" }, { anonymous: false, inputs: [{ indexed: false, internalType: "uint256", name: "maxTotalSupply", type: "uint256" }], name: "MaxTotalSupplyUpdated", type: "event" }, { anonymous: false, inputs: [{ indexed: false, internalType: "uint256", name: "count", type: "uint256" }], name: "MaxWalletClaimCountUpdated", type: "event" }, { anonymous: false, inputs: [{ indexed: false, internalType: "address", name: "account", type: "address" }], name: "Paused", type: "event" }, { anonymous: false, inputs: [{ indexed: false, internalType: "address", name: "platformFeeRecipient", type: "address" }, { indexed: false, internalType: "uint256", name: "platformFeeBps", type: "uint256" }], name: "PlatformFeeInfoUpdated", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "address", name: "recipient", type: "address" }], name: "PrimarySaleRecipientUpdated", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "bytes32", name: "role", type: "bytes32" }, { indexed: true, internalType: "bytes32", name: "previousAdminRole", type: "bytes32" }, { indexed: true, internalType: "bytes32", name: "newAdminRole", type: "bytes32" }], name: "RoleAdminChanged", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "bytes32", name: "role", type: "bytes32" }, { indexed: true, internalType: "address", name: "account", type: "address" }, { indexed: true, internalType: "address", name: "sender", type: "address" }], name: "RoleGranted", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "bytes32", name: "role", type: "bytes32" }, { indexed: true, internalType: "address", name: "account", type: "address" }, { indexed: true, internalType: "address", name: "sender", type: "address" }], name: "RoleRevoked", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "uint256", name: "claimConditionIndex", type: "uint256" }, { indexed: true, internalType: "address", name: "claimer", type: "address" }, { indexed: true, internalType: "address", name: "receiver", type: "address" }, { indexed: false, internalType: "uint256", name: "quantityClaimed", type: "uint256" }], name: "TokensClaimed", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "address", name: "from", type: "address" }, { indexed: true, internalType: "address", name: "to", type: "address" }, { indexed: false, internalType: "uint256", name: "value", type: "uint256" }], name: "Transfer", type: "event" }, { anonymous: false, inputs: [{ indexed: false, internalType: "address", name: "account", type: "address" }], name: "Unpaused", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "address", name: "wallet", type: "address" }, { indexed: false, internalType: "uint256", name: "count", type: "uint256" }], name: "WalletClaimCountUpdated", type: "event" }, { inputs: [], name: "DEFAULT_ADMIN_ROLE", outputs: [{ internalType: "bytes32", name: "", type: "bytes32" }], stateMutability: "view", type: "function" }, { inputs: [], name: "DOMAIN_SEPARATOR", outputs: [{ internalType: "bytes32", name: "", type: "bytes32" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "owner", type: "address" }, { internalType: "address", name: "spender", type: "address" }], name: "allowance", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "spender", type: "address" }, { internalType: "uint256", name: "amount", type: "uint256" }], name: "approve", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "account", type: "address" }], name: "balanceOf", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "uint256", name: "amount", type: "uint256" }], name: "burn", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "account", type: "address" }, { internalType: "uint256", name: "amount", type: "uint256" }], name: "burnFrom", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "account", type: "address" }, { internalType: "uint32", name: "pos", type: "uint32" }], name: "checkpoints", outputs: [{ components: [{ internalType: "uint32", name: "fromBlock", type: "uint32" }, { internalType: "uint224", name: "votes", type: "uint224" }], internalType: "struct ERC20VotesUpgradeable.Checkpoint", name: "", type: "tuple" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "_receiver", type: "address" }, { internalType: "uint256", name: "_quantity", type: "uint256" }, { internalType: "address", name: "_currency", type: "address" }, { internalType: "uint256", name: "_pricePerToken", type: "uint256" }, { internalType: "bytes32[]", name: "_proofs", type: "bytes32[]" }, { internalType: "uint256", name: "_proofMaxQuantityPerTransaction", type: "uint256" }], name: "claim", outputs: [], stateMutability: "payable", type: "function" }, { inputs: [], name: "claimCondition", outputs: [{ internalType: "uint256", name: "currentStartId", type: "uint256" }, { internalType: "uint256", name: "count", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [], name: "contractType", outputs: [{ internalType: "bytes32", name: "", type: "bytes32" }], stateMutability: "pure", type: "function" }, { inputs: [], name: "contractURI", outputs: [{ internalType: "string", name: "", type: "string" }], stateMutability: "view", type: "function" }, { inputs: [], name: "contractVersion", outputs: [{ internalType: "uint8", name: "", type: "uint8" }], stateMutability: "pure", type: "function" }, { inputs: [], name: "decimals", outputs: [{ internalType: "uint8", name: "", type: "uint8" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "spender", type: "address" }, { internalType: "uint256", name: "subtractedValue", type: "uint256" }], name: "decreaseAllowance", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "delegatee", type: "address" }], name: "delegate", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "delegatee", type: "address" }, { internalType: "uint256", name: "nonce", type: "uint256" }, { internalType: "uint256", name: "expiry", type: "uint256" }, { internalType: "uint8", name: "v", type: "uint8" }, { internalType: "bytes32", name: "r", type: "bytes32" }, { internalType: "bytes32", name: "s", type: "bytes32" }], name: "delegateBySig", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "account", type: "address" }], name: "delegates", outputs: [{ internalType: "address", name: "", type: "address" }], stateMutability: "view", type: "function" }, { inputs: [], name: "getActiveClaimConditionId", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "uint256", name: "_conditionId", type: "uint256" }, { internalType: "address", name: "_claimer", type: "address" }], name: "getClaimTimestamp", outputs: [{ internalType: "uint256", name: "lastClaimTimestamp", type: "uint256" }, { internalType: "uint256", name: "nextValidClaimTimestamp", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "uint256", name: "blockNumber", type: "uint256" }], name: "getPastTotalSupply", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "account", type: "address" }, { internalType: "uint256", name: "blockNumber", type: "uint256" }], name: "getPastVotes", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [], name: "getPlatformFeeInfo", outputs: [{ internalType: "address", name: "", type: "address" }, { internalType: "uint16", name: "", type: "uint16" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "bytes32", name: "role", type: "bytes32" }], name: "getRoleAdmin", outputs: [{ internalType: "bytes32", name: "", type: "bytes32" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "bytes32", name: "role", type: "bytes32" }, { internalType: "uint256", name: "index", type: "uint256" }], name: "getRoleMember", outputs: [{ internalType: "address", name: "", type: "address" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "bytes32", name: "role", type: "bytes32" }], name: "getRoleMemberCount", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "account", type: "address" }], name: "getVotes", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "bytes32", name: "role", type: "bytes32" }, { internalType: "address", name: "account", type: "address" }], name: "grantRole", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "bytes32", name: "role", type: "bytes32" }, { internalType: "address", name: "account", type: "address" }], name: "hasRole", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "spender", type: "address" }, { internalType: "uint256", name: "addedValue", type: "uint256" }], name: "increaseAllowance", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "_defaultAdmin", type: "address" }, { internalType: "string", name: "_name", type: "string" }, { internalType: "string", name: "_symbol", type: "string" }, { internalType: "string", name: "_contractURI", type: "string" }, { internalType: "address[]", name: "_trustedForwarders", type: "address[]" }, { internalType: "address", name: "_primarySaleRecipient", type: "address" }, { internalType: "uint256", name: "_platformFeeBps", type: "uint256" }, { internalType: "address", name: "_platformFeeRecipient", type: "address" }], name: "initialize", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "forwarder", type: "address" }], name: "isTrustedForwarder", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "view", type: "function" }, { inputs: [], name: "maxTotalSupply", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [], name: "maxWalletClaimCount", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "bytes[]", name: "data", type: "bytes[]" }], name: "multicall", outputs: [{ internalType: "bytes[]", name: "results", type: "bytes[]" }], stateMutability: "nonpayable", type: "function" }, { inputs: [], name: "name", outputs: [{ internalType: "string", name: "", type: "string" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "owner", type: "address" }], name: "nonces", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "account", type: "address" }], name: "numCheckpoints", outputs: [{ internalType: "uint32", name: "", type: "uint32" }], stateMutability: "view", type: "function" }, { inputs: [], name: "paused", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "owner", type: "address" }, { internalType: "address", name: "spender", type: "address" }, { internalType: "uint256", name: "value", type: "uint256" }, { internalType: "uint256", name: "deadline", type: "uint256" }, { internalType: "uint8", name: "v", type: "uint8" }, { internalType: "bytes32", name: "r", type: "bytes32" }, { internalType: "bytes32", name: "s", type: "bytes32" }], name: "permit", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [], name: "primarySaleRecipient", outputs: [{ internalType: "address", name: "", type: "address" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "bytes32", name: "role", type: "bytes32" }, { internalType: "address", name: "account", type: "address" }], name: "renounceRole", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "bytes32", name: "role", type: "bytes32" }, { internalType: "address", name: "account", type: "address" }], name: "revokeRole", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ components: [{ internalType: "uint256", name: "startTimestamp", type: "uint256" }, { internalType: "uint256", name: "maxClaimableSupply", type: "uint256" }, { internalType: "uint256", name: "supplyClaimed", type: "uint256" }, { internalType: "uint256", name: "quantityLimitPerTransaction", type: "uint256" }, { internalType: "uint256", name: "waitTimeInSecondsBetweenClaims", type: "uint256" }, { internalType: "bytes32", name: "merkleRoot", type: "bytes32" }, { internalType: "uint256", name: "pricePerToken", type: "uint256" }, { internalType: "address", name: "currency", type: "address" }], internalType: "struct IDropClaimCondition.ClaimCondition[]", name: "_phases", type: "tuple[]" }, { internalType: "bool", name: "_resetLimitRestriction", type: "bool" }], name: "setClaimConditions", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "string", name: "_uri", type: "string" }], name: "setContractURI", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "uint256", name: "_maxTotalSupply", type: "uint256" }], name: "setMaxTotalSupply", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "uint256", name: "_count", type: "uint256" }], name: "setMaxWalletClaimCount", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "_platformFeeRecipient", type: "address" }, { internalType: "uint256", name: "_platformFeeBps", type: "uint256" }], name: "setPlatformFeeInfo", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "_saleRecipient", type: "address" }], name: "setPrimarySaleRecipient", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "_claimer", type: "address" }, { internalType: "uint256", name: "_count", type: "uint256" }], name: "setWalletClaimCount", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "bytes4", name: "interfaceId", type: "bytes4" }], name: "supportsInterface", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "view", type: "function" }, { inputs: [], name: "symbol", outputs: [{ internalType: "string", name: "", type: "string" }], stateMutability: "view", type: "function" }, { inputs: [], name: "totalSupply", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "to", type: "address" }, { internalType: "uint256", name: "amount", type: "uint256" }], name: "transfer", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "from", type: "address" }, { internalType: "address", name: "to", type: "address" }, { internalType: "uint256", name: "amount", type: "uint256" }], name: "transferFrom", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "uint256", name: "_conditionId", type: "uint256" }, { internalType: "address", name: "_claimer", type: "address" }, { internalType: "uint256", name: "_quantity", type: "uint256" }, { internalType: "address", name: "_currency", type: "address" }, { internalType: "uint256", name: "_pricePerToken", type: "uint256" }], name: "verifyClaim", outputs: [], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "uint256", name: "_conditionId", type: "uint256" }, { internalType: "address", name: "_claimer", type: "address" }, { internalType: "uint256", name: "_quantity", type: "uint256" }, { internalType: "bytes32[]", name: "_proofs", type: "bytes32[]" }, { internalType: "uint256", name: "_proofMaxQuantityPerTransaction", type: "uint256" }], name: "verifyClaimMerkleProof", outputs: [{ internalType: "bool", name: "validMerkleProof", type: "bool" }, { internalType: "uint256", name: "merkleProofIndex", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "", type: "address" }], name: "walletClaimCount", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }];
var B1 = "0x60a06040523480156200001157600080fd5b50604051620054dd380380620054dd83398101604081905262000034916200013b565b600054610100900460ff16620000515760005460ff16156200005b565b6200005b6200010e565b620000c35760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b600054610100900460ff16158015620000e6576000805461ffff19166101011790555b6001600160a01b038216608052801562000106576000805461ff00191690555b50506200016d565b600062000126306200012c60201b6200247c1760201c565b15905090565b6001600160a01b03163b151590565b6000602082840312156200014e57600080fd5b81516001600160a01b03811681146200016657600080fd5b9392505050565b608051615354620001896000396000612df901526153546000f3fe6080604052600436106103815760003560e01c806370a08231116101d1578063a9059cbb11610102578063d45573f6116100a0578063dd62ed3e1161006f578063dd62ed3e14610b23578063e23b816414610b69578063e8a3d48514610b89578063f1127ed814610b9e57600080fd5b8063d45573f614610a8f578063d505accf14610ac6578063d547741f14610ae6578063d637ed5914610b0657600080fd5b8063c3cda520116100dc578063c3cda52014610a07578063c68907de14610a27578063ca15c87314610a3c578063cb2ef6f714610a5c57600080fd5b8063a9059cbb14610983578063ac9650d8146109a3578063af3be890146109d057600080fd5b806391d148541161016f5780639ab24eb0116101495780639ab24eb01461091a578063a0a8e4601461093a578063a217fddf1461094e578063a457c2d71461096357600080fd5b806391d148541461089e578063938e3d7b146108e557806395d89b411461090557600080fd5b80637ecebe00116101ab5780637ecebe001461080957806386ee745d146108295780638e539e8c1461085e5780639010d07c1461087e57600080fd5b806370a08231146107a057806379cc6790146107d65780637a5a8e7e146107f657600080fd5b806336568abe116102b657806350867957116102545780635c19a95c116102235780635c19a95c146107125780635c975abb146107325780636f4f28371461074b5780636fcfff451461076b57600080fd5b8063508679571461065f578063572b6c051461067f578063587cde1e146106b85780635aedd621146106f257600080fd5b80633ea33f29116102905780633ea33f29146105d15780633f3e4c11146105f157806342966c68146106115780634352ab411461063157600080fd5b806336568abe1461057157806339509351146105915780633a46b1a8146105b157600080fd5b80631e7ac488116103235780632ab4d052116102fd5780632ab4d052146105035780632f2ff15d1461051a578063313ce5671461053a5780633644e5151461055c57600080fd5b80631e7ac4881461049257806323b872dd146104b2578063248a9ca3146104d257600080fd5b806306fdde031161035f57806306fdde0314610402578063079fe40e14610424578063095ea7b31461045d57806318160ddd1461047d57600080fd5b806301ffc9a71461038657806302c7a877146103bb57806305981769146103dd575b600080fd5b34801561039257600080fd5b506103a66103a136600461476c565b610be8565b60405190151581526020015b60405180910390f35b3480156103c757600080fd5b506103db6103d63660046147bb565b610bf9565b005b3480156103e957600080fd5b506103f46102c45481565b6040519081526020016103b2565b34801561040e57600080fd5b50610417610f0f565b6040516103b29190614865565b34801561043057600080fd5b506102c354610445906001600160a01b031681565b6040516001600160a01b0390911681526020016103b2565b34801561046957600080fd5b506103a6610478366004614878565b610fa1565b34801561048957600080fd5b5060cb546103f4565b34801561049e57600080fd5b506103db6104ad366004614878565b610fc3565b3480156104be57600080fd5b506103a66104cd3660046148a4565b6110ac565b3480156104de57600080fd5b506103f46104ed3660046148e5565b600090815261025c602052604090206001015490565b34801561050f57600080fd5b506103f46102c55481565b34801561052657600080fd5b506103db6105353660046148fe565b6110dc565b34801561054657600080fd5b5060125b60405160ff90911681526020016103b2565b34801561056857600080fd5b506103f461110a565b34801561057d57600080fd5b506103db61058c3660046148fe565b611119565b34801561059d57600080fd5b506103a66105ac366004614878565b6111b5565b3480156105bd57600080fd5b506103f46105cc366004614878565b611201565b3480156105dd57600080fd5b506103db6105ec366004614878565b611275565b3480156105fd57600080fd5b506103db61060c3660046148e5565b6112de565b34801561061d57600080fd5b506103db61062c3660046148e5565b61132a565b34801561063d57600080fd5b506103f461064c36600461492e565b6102cb6020526000908152604090205481565b34801561066b57600080fd5b506103db61067a3660046148e5565b61133e565b34801561068b57600080fd5b506103a661069a36600461492e565b6001600160a01b031660009081526065602052604090205460ff1690565b3480156106c457600080fd5b506104456106d336600461492e565b6001600160a01b0390811660009081526101f860205260409020541690565b3480156106fe57600080fd5b506103db61070d366004614a8b565b611382565b34801561071e57600080fd5b506103db61072d36600461492e565b611599565b34801561073e57600080fd5b5061012d5460ff166103a6565b34801561075757600080fd5b506103db61076636600461492e565b6115aa565b34801561077757600080fd5b5061078b61078636600461492e565b611604565b60405163ffffffff90911681526020016103b2565b3480156107ac57600080fd5b506103f46107bb36600461492e565b6001600160a01b0316600090815260c9602052604090205490565b3480156107e257600080fd5b506103db6107f1366004614878565b611627565b6103db610804366004614bb9565b611643565b34801561081557600080fd5b506103f461082436600461492e565b61178f565b34801561083557600080fd5b506108496108443660046148fe565b6117ae565b604080519283526020830191909152016103b2565b34801561086a57600080fd5b506103f46108793660046148e5565b6117f8565b34801561088a57600080fd5b50610445610899366004614c3e565b611855565b3480156108aa57600080fd5b506103a66108b93660046148fe565b600091825261025c602090815260408084206001600160a01b0393909316845291905290205460ff1690565b3480156108f157600080fd5b506103db610900366004614c60565b61186e565b34801561091157600080fd5b5061041761188f565b34801561092657600080fd5b506103f461093536600461492e565b61189e565b34801561094657600080fd5b50600161054a565b34801561095a57600080fd5b506103f4600081565b34801561096f57600080fd5b506103a661097e366004614878565b611927565b34801561098f57600080fd5b506103a661099e366004614878565b6119e9565b3480156109af57600080fd5b506109c36109be366004614cd2565b611a01565b6040516103b29190614d14565b3480156109dc57600080fd5b506109f06109eb366004614d76565b611af6565b6040805192151583526020830191909152016103b2565b348015610a1357600080fd5b506103db610a22366004614df9565b611d1a565b348015610a3357600080fd5b506103f4611e50565b348015610a4857600080fd5b506103f4610a573660046148e5565b611f09565b348015610a6857600080fd5b507f44726f70455243323000000000000000000000000000000000000000000000006103f4565b348015610a9b57600080fd5b506102c2546102c154604080516001600160a01b03909316835261ffff9091166020830152016103b2565b348015610ad257600080fd5b506103db610ae1366004614e53565b611f21565b348015610af257600080fd5b506103db610b013660046148fe565b612068565b348015610b1257600080fd5b506102c6546102c754610849919082565b348015610b2f57600080fd5b506103f4610b3e366004614ec1565b6001600160a01b03918216600090815260ca6020908152604080832093909416825291909152205490565b348015610b7557600080fd5b506103db610b84366004614efd565b612091565b348015610b9557600080fd5b50610417612368565b348015610baa57600080fd5b50610bbe610bb9366004614f83565b6123f7565b60408051825163ffffffff1681526020928301516001600160e01b031692810192909252016103b2565b6000610bf38261248b565b92915050565b60008581526102c86020908152604091829020825161010081018452815481526001820154928101929092526002810154928201929092526003820154606082015260048201546080820152600582015460a0820152600682015460c08201526007909101546001600160a01b0390811660e08301819052908416148015610c8457508060c0015182145b610ce15760405162461bcd60e51b8152602060048201526024808201527f696e76616c69642063757272656e6379206f722070726963652073706563696660448201526334b2b21760e11b60648201526084015b60405180910390fd5b600084118015610cf5575080606001518411155b610d415760405162461bcd60e51b815260206004820152601960248201527f696e76616c6964207175616e7469747920636c61696d65642e000000000000006044820152606401610cd8565b8060200151848260400151610d569190614fd0565b1115610da45760405162461bcd60e51b815260206004820152601760248201527f657863656564206d6178206d696e7420737570706c792e0000000000000000006044820152606401610cd8565b6102c5541580610dca57506102c55484610dbd60cb5490565b610dc79190614fd0565b11155b610e165760405162461bcd60e51b815260206004820152601860248201527f657863656564206d617820746f74616c20737570706c792e00000000000000006044820152606401610cd8565b6102c4541580610e4d57506102c4546001600160a01b03861660009081526102cb6020526040902054610e4a908690614fd0565b11155b610e995760405162461bcd60e51b815260206004820152601d60248201527f65786365656420636c61696d206c696d697420666f722077616c6c65740000006044820152606401610cd8565b600080610ea688886117ae565b915091508160001480610eb95750804210155b610f055760405162461bcd60e51b815260206004820152601160248201527f63616e6e6f7420636c61696d207965742e0000000000000000000000000000006044820152606401610cd8565b5050505050505050565b606060cc8054610f1e90614fe8565b80601f0160208091040260200160405190810160405280929190818152602001828054610f4a90614fe8565b8015610f975780601f10610f6c57610100808354040283529160200191610f97565b820191906000526020600020905b815481529060010190602001808311610f7a57829003601f168201915b5050505050905090565b600080610fac6124b0565b9050610fb98185856124ba565b5060019392505050565b6000610fd681610fd16124b0565b6125de565b6127108211156110285760405162461bcd60e51b815260206004820152600d60248201527f627073203c3d2031303030302e000000000000000000000000000000000000006044820152606401610cd8565b6102c180546fffffffffffffffffffffffffffffffff191667ffffffffffffffff84161790556102c280546001600160a01b0385166001600160a01b0319909116811790915560408051918252602082018490527fe2497bd806ec41a6e0dd992c29a72efc0ef8fec9092d1978fd4a1e00b2f18304910160405180910390a1505050565b6000806110b76124b0565b90506110c485828561265f565b6110cf8585856126eb565b60019150505b9392505050565b600082815261025c60205260409020600101546110fb81610fd16124b0565b61110583836128f9565b505050565b600061111461291c565b905090565b6111216124b0565b6001600160a01b0316816001600160a01b0316146111a75760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c6600000000000000000000000000000000006064820152608401610cd8565b6111b18282612999565b5050565b6000806111c06124b0565b6001600160a01b03808216600090815260ca6020908152604080832093891683529290522054909150610fb990829086906111fc908790614fd0565b6124ba565b60004382106112525760405162461bcd60e51b815260206004820152601f60248201527f4552433230566f7465733a20626c6f636b206e6f7420796574206d696e6564006044820152606401610cd8565b6001600160a01b03831660009081526101f9602052604090206110d590836129bc565b600061128381610fd16124b0565b6001600160a01b03831660008181526102cb602052604090819020849055517f8973b95d42472e89416ea69404f8038c041db700af9ec294e7b4cd4e1ff2801c906112d19085815260200190565b60405180910390a2505050565b60006112ec81610fd16124b0565b6102c58290556040518281527ff2672935fc79f5237559e2e2999dbe743bf65430894ac2b37666890e7c69e1af906020015b60405180910390a15050565b61133b6113356124b0565b82612a79565b50565b600061134c81610fd16124b0565b6102c48290556040518281527ff9d383c69b6255cbd431ca23734f43bdf15e694c7494956c917498469bcbce739060200161131e565b600054610100900460ff1661139d5760005460ff16156113a1565b303b155b6114135760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610cd8565b600054610100900460ff16158015611435576000805461ffff19166101011790555b61143e85612a83565b61144788612b56565b6114518888612bed565b8551611465906102c0906020890190614663565b506102c380546001600160a01b038087166001600160a01b0319928316179092556102c28054928516929091169190911790556102c180546fffffffffffffffffffffffffffffffff85166fffffffffffffffffffffffffffffffff199091161790556114d360008a612c7f565b6114fd7f8502233096d909befbda0999bb8ea2f3a6be3c138b9fbf003752a4c8bce86f6c8a612c7f565b6115277f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a68a612c7f565b6115517f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a8a612c7f565b61157c7f8502233096d909befbda0999bb8ea2f3a6be3c138b9fbf003752a4c8bce86f6c6000612c7f565b801561158e576000805461ff00191690555b505050505050505050565b61133b6115a46124b0565b82612c89565b60006115b881610fd16124b0565b6102c380546001600160a01b0319166001600160a01b0384169081179091556040517f299d17e95023f496e0ffc4909cff1a61f74bb5eb18de6f900f4155bfa1b3b33390600090a25050565b6001600160a01b03811660009081526101f96020526040812054610bf390612d04565b611639826116336124b0565b8361265f565b6111b18282612a79565b600260015414156116965760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610cd8565b600260015560006116a5611e50565b90506116bb816116b36124b0565b898989610bf9565b6000806116d3836116ca6124b0565b8b898989611af6565b915091508180156116e45750600084115b156117145760008381526102ca60209081526040808320600885901c845290915290208054600160ff84161b1790555b61171f898989612d84565b61172a8a848b612f5c565b896001600160a01b031661173c6124b0565b6001600160a01b0316847f9c4945d842cc8c6704877a0defcd9ab09f6d77b24a369a95c2610506c6c38ee78c60405161177791815260200190565b60405180910390a45050600180555050505050505050565b6001600160a01b03811660009081526101c56020526040812054610bf3565b60008281526102c9602090815260408083206001600160a01b03851684528252808320548584526102c8909252909120600401548101818110156117f157506000195b9250929050565b60004382106118495760405162461bcd60e51b815260206004820152601f60248201527f4552433230566f7465733a20626c6f636b206e6f7420796574206d696e6564006044820152606401610cd8565b610bf36101fa836129bc565b600082815261028e602052604081206110d5908361300d565b600061187c81610fd16124b0565b6118896102c084846146e3565b50505050565b606060cd8054610f1e90614fe8565b6001600160a01b03811660009081526101f960205260408120548015611914576001600160a01b03831660009081526101f9602052604090206118e260018361501d565b815481106118f2576118f2615034565b60009182526020909120015464010000000090046001600160e01b0316611917565b60005b6001600160e01b03169392505050565b6000806119326124b0565b6001600160a01b03808216600090815260ca6020908152604080832093891683529290522054909150838110156119d15760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f0000000000000000000000000000000000000000000000000000006064820152608401610cd8565b6119de82868684036124ba565b506001949350505050565b6000806119f46124b0565b9050610fb98185856126eb565b60608167ffffffffffffffff811115611a1c57611a1c61494b565b604051908082528060200260200182016040528015611a4f57816020015b6060815260200190600190039081611a3a5790505b50905060005b82811015611aef57611abf30858584818110611a7357611a73615034565b9050602002810190611a85919061504a565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061301992505050565b828281518110611ad157611ad1615034565b60200260200101819052508080611ae790615091565b915050611a55565b5092915050565b60008681526102c860209081526040808320815161010081018352815481526001820154938101939093526002810154918301919091526003810154606083015260048101546080830152600581015460a08301819052600682015460c08401526007909101546001600160a01b031660e083015282919015611d0e57611bef86868080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050505060a08301516040516bffffffffffffffffffffffff1960608d901b1660208201526034810188905260540160405160208183030381529060405280519060200120613124565b909350915082611c415760405162461bcd60e51b815260206004820152601160248201527f6e6f7420696e2077686974656c6973742e0000000000000000000000000000006044820152606401610cd8565b60008981526102ca60209081526040808320600886901c8452909152902054600160ff84161b1615611cb55760405162461bcd60e51b815260206004820152600e60248201527f70726f6f6620636c61696d65642e0000000000000000000000000000000000006044820152606401610cd8565b831580611cc25750838711155b611d0e5760405162461bcd60e51b815260206004820152601760248201527f696e76616c6964207175616e746974792070726f6f662e0000000000000000006044820152606401610cd8565b50965096945050505050565b83421115611d6a5760405162461bcd60e51b815260206004820152601d60248201527f4552433230566f7465733a207369676e617475726520657870697265640000006044820152606401610cd8565b604080517fe48329057bfd03d55e49b547132e39cffd9c1820ad7b9d4c5307691425d15adf60208201526001600160a01b038816918101919091526060810186905260808101859052600090611de490611ddc9060a001604051602081830303815290604052805190602001206131f2565b858585613240565b9050611def81613268565b8614611e3d5760405162461bcd60e51b815260206004820152601960248201527f4552433230566f7465733a20696e76616c6964206e6f6e6365000000000000006044820152606401610cd8565b611e478188612c89565b50505050505050565b6102c7546102c6546000918291611e679190614fd0565b90505b6102c654811115611ec0576102c86000611e8560018461501d565b8152602001908152602001600020600001544210611eae57611ea860018261501d565b91505090565b80611eb8816150ac565b915050611e6a565b5060405162461bcd60e51b815260206004820152601960248201527f6e6f20616374697665206d696e7420636f6e646974696f6e2e000000000000006044820152606401610cd8565b600081815261028e60205260408120610bf390613291565b83421115611f715760405162461bcd60e51b815260206004820152601d60248201527f45524332305065726d69743a206578706972656420646561646c696e650000006044820152606401610cd8565b60006101c654888888611f838c613268565b6040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810186905260e0016040516020818303038152906040528051906020012090506000611fde826131f2565b90506000611fee82878787613240565b9050896001600160a01b0316816001600160a01b0316146120515760405162461bcd60e51b815260206004820152601e60248201527f45524332305065726d69743a20696e76616c6964207369676e617475726500006044820152606401610cd8565b61205c8a8a8a6124ba565b50505050505050505050565b600082815261025c602052604090206001015461208781610fd16124b0565b6111058383612999565b600061209f81610fd16124b0565b6102c6546102c7548184156120bb576120b88284614fd0565b90505b6000805b878110156121ff578015806120ef57508888828181106120e1576120e1615034565b905061010002016000013582105b6121615760405162461bcd60e51b815260206004820152602a60248201527f737461727454696d657374616d70206d75737420626520696e20617363656e6460448201527f696e67206f726465722e000000000000000000000000000000000000000000006064820152608401610cd8565b88888281811061217357612173615034565b610100029190910190506102c8600061218c8487614fd0565b815260200190815260200160002081816121a691906150c3565b50600090506102c8816121b98487614fd0565b81526020810191909152604001600020600201558888828181106121df576121df615034565b9050610100020160000135915080806121f790615091565b9150506120bf565b50851561227f57835b828110156122795760008181526102c860209081526040822082815560018101839055600281018390556003810183905560048101839055600581018390556006810192909255600790910180546001600160a01b03191690556102ca90528061227181615091565b915050612208565b50612318565b8683111561231857865b83811015612316576102c860006122a08386614fd0565b81526020810191909152604001600090812081815560018101829055600281018290556003810182905560048101829055600581018290556006810182905560070180546001600160a01b03191690556102ca906122fe8386614fd0565b8152602001528061230e81615091565b915050612289565b505b6102c78790556102c68290556040517f22ddd1bcb3816651679299dbffccb94973edec10c32e88dc2f4735c7699a02ca90612356908a908a90615134565b60405180910390a15050505050505050565b6102c0805461237690614fe8565b80601f01602080910402602001604051908101604052809291908181526020018280546123a290614fe8565b80156123ef5780601f106123c4576101008083540402835291602001916123ef565b820191906000526020600020905b8154815290600101906020018083116123d257829003601f168201915b505050505081565b60408051808201909152600080825260208201526001600160a01b03831660009081526101f960205260409020805463ffffffff841690811061243c5761243c615034565b60009182526020918290206040805180820190915291015463ffffffff8116825264010000000090046001600160e01b0316918101919091529392505050565b6001600160a01b03163b151590565b60006001600160e01b03198216635a05180f60e01b1480610bf35750610bf38261329b565b60006111146132d0565b6001600160a01b03831661251c5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610cd8565b6001600160a01b03821661257d5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610cd8565b6001600160a01b03838116600081815260ca602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b600082815261025c602090815260408083206001600160a01b038516845290915290205460ff166111b15761261d816001600160a01b031660146132fa565b6126288360206132fa565b6040516020016126399291906151cb565b60408051601f198184030181529082905262461bcd60e51b8252610cd891600401614865565b6001600160a01b03838116600090815260ca6020908152604080832093861683529290522054600019811461188957818110156126de5760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610cd8565b61188984848484036124ba565b6001600160a01b0383166127675760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f64726573730000000000000000000000000000000000000000000000000000006064820152608401610cd8565b6001600160a01b0382166127c95760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610cd8565b6127d48383836134a3565b6001600160a01b038316600090815260c96020526040902054818110156128635760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e636500000000000000000000000000000000000000000000000000006064820152608401610cd8565b6001600160a01b03808516600090815260c9602052604080822085850390559185168152908120805484929061289a908490614fd0565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516128e691815260200190565b60405180910390a36118898484846135f2565b61290382826135fd565b600082815261028e6020526040902061110590826136a2565b60006111147f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f61294c6101915490565b610192546040805160208101859052908101839052606081018290524660808201523060a082015260009060c0016040516020818303038152906040528051906020012090509392505050565b6129a382826136b7565b600082815261028e60205260409020611105908261375a565b8154600090815b81811015612a205760006129d7828461376f565b9050848682815481106129ec576129ec615034565b60009182526020909120015463ffffffff161115612a0c57809250612a1a565b612a17816001614fd0565b91505b506129c3565b8115612a645784612a3260018461501d565b81548110612a4257612a42615034565b60009182526020909120015464010000000090046001600160e01b0316612a67565b60005b6001600160e01b031695945050505050565b6111b1828261378a565b600054610100900460ff16612aee5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610cd8565b60005b81518110156111b157600160656000848481518110612b1257612b12615034565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff191691151591909117905580612b4e81615091565b915050612af1565b600054610100900460ff16612bc15760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610cd8565b612be481604051806040016040528060018152602001603160f81b8152506137a3565b61133b8161382a565b600054610100900460ff16612c585760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610cd8565b8151612c6b9060cc906020850190614663565b5080516111059060cd906020840190614663565b6111b182826128f9565b6001600160a01b0382811660008181526101f860208181526040808420805460c9845282862054949093528787166001600160a01b03198416811790915590519190951694919391928592917f3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f9190a46118898284836138bd565b600063ffffffff821115612d805760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203360448201527f32206269747300000000000000000000000000000000000000000000000000006064820152608401610cd8565b5090565b80612d8e57505050565b6000612d9a828561524c565b6102c15490915060009061271090612dc4906fffffffffffffffffffffffffffffffff168461524c565b612dce919061526b565b60405163085b49ad60e41b815230600482015260006024820181905291925081906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906385b49ad0906044016040805180830381865afa158015612e3f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e63919061528d565b90925090506000612710612e77838761524c565b612e81919061526b565b90506001600160a01b03871673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1415612ef757843414612ef75760405162461bcd60e51b815260206004820152601660248201527f6d7573742073656e6420746f74616c2070726963652e000000000000000000006044820152606401610cd8565b612f1687612f036124b0565b6102c2546001600160a01b0316876139fc565b612f2987612f226124b0565b85846139fc565b610f0587612f356124b0565b6102c3546001600160a01b031684612f4d898b61501d565b612f57919061501d565b6139fc565b60008281526102c8602052604081206002018054839290612f7e908490614fd0565b909155505060008281526102c9602052604081204291612f9c6124b0565b6001600160a01b03166001600160a01b0316815260200190815260200160002081905550806102cb6000612fce6124b0565b6001600160a01b03166001600160a01b031681526020019081526020016000206000828254612ffd9190614fd0565b9091555061110590508382613a46565b60006110d58383613a50565b60606001600160a01b0383163b6130985760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e747261637400000000000000000000000000000000000000000000000000006064820152608401610cd8565b600080846001600160a01b0316846040516130b391906152bb565b600060405180830381855af49150503d80600081146130ee576040519150601f19603f3d011682016040523d82523d6000602084013e6130f3565b606091505b509150915061311b828260405180606001604052806027815260200161532160279139613a7a565b95945050505050565b6000808281805b87518110156131e65761313f60028361524c565b9150600088828151811061315557613155615034565b602002602001015190508084116131975760408051602081018690529081018290526060016040516020818303038152906040528051906020012093506131d3565b60408051602081018390529081018590526060016040516020818303038152906040528051906020012093506001836131d09190614fd0565b92505b50806131de81615091565b91505061312b565b50941495939450505050565b6000610bf36131ff61291c565b8360405161190160f01b6020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b600080600061325187878787613ab3565b9150915061325e81613ba0565b5095945050505050565b6001600160a01b03811660009081526101c5602052604090208054600181018255905b50919050565b6000610bf3825490565b60006001600160e01b03198216637965db0b60e01b1480610bf357506301ffc9a760e01b6001600160e01b0319831614610bf3565b3360009081526065602052604081205460ff16156132f5575060131936013560601c90565b503390565b6060600061330983600261524c565b613314906002614fd0565b67ffffffffffffffff81111561332c5761332c61494b565b6040519080825280601f01601f191660200182016040528015613356576020820181803683370190505b509050600360fc1b8160008151811061337157613371615034565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106133a0576133a0615034565b60200101906001600160f81b031916908160001a90535060006133c484600261524c565b6133cf906001614fd0565b90505b6001811115613454577f303132333435363738396162636465660000000000000000000000000000000085600f166010811061341057613410615034565b1a60f81b82828151811061342657613426615034565b60200101906001600160f81b031916908160001a90535060049490941c9361344d816150ac565b90506133d2565b5083156110d55760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610cd8565b6134ae838383613d5b565b600080527fb5795f43f55584b15429e81b8f953f506f3fda5f74ae532bfc787216c93b37366020527fd61a19a5865dc34bcdb6a4cbf3d3d73edfd2abc9fbcb992f6e6da26bc3a636695460ff1615801561351057506001600160a01b03831615155b801561352457506001600160a01b03821615155b15611105576001600160a01b03831660009081527fb5795f43f55584b15429e81b8f953f506f3fda5f74ae532bfc787216c93b3736602052604090205460ff16806135a657506001600160a01b03821660009081527fb5795f43f55584b15429e81b8f953f506f3fda5f74ae532bfc787216c93b3736602052604090205460ff165b6111055760405162461bcd60e51b815260206004820152601560248201527f7472616e736665727320726573747269637465642e00000000000000000000006044820152606401610cd8565b611105838383613dd5565b600082815261025c602090815260408083206001600160a01b038516845290915290205460ff166111b157600082815261025c602090815260408083206001600160a01b03851684529091529020805460ff1916600117905561365e6124b0565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60006110d5836001600160a01b038416613e08565b600082815261025c602090815260408083206001600160a01b038516845290915290205460ff16156111b157600082815261025c602090815260408083206001600160a01b03851684529091529020805460ff191690556137166124b0565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b60006110d5836001600160a01b038416613e57565b600061377e600284841861526b565b6110d590848416614fd0565b6137948282613f4a565b6118896101fa6140ab836140b7565b600054610100900460ff1661380e5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610cd8565b8151602092830120815191909201206101919190915561019255565b600054610100900460ff166138955760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610cd8565b507f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c96101c655565b816001600160a01b0316836001600160a01b0316141580156138df5750600081115b15611105576001600160a01b0383161561396e576001600160a01b03831660009081526101f960205260408120819061391b906140ab856140b7565b91509150846001600160a01b03167fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a7248383604051613963929190918252602082015260400190565b60405180910390a250505b6001600160a01b03821615611105576001600160a01b03821660009081526101f96020526040812081906139a590614230856140b7565b91509150836001600160a01b03167fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a72483836040516139ed929190918252602082015260400190565b60405180910390a25050505050565b80613a0657611889565b6001600160a01b03841673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1415613a3a57613a35828261423c565b611889565b611889848484846142df565b6111b18282614459565b6000826000018281548110613a6757613a67615034565b9060005260206000200154905092915050565b60608315613a895750816110d5565b825115613a995782518084602001fd5b8160405162461bcd60e51b8152600401610cd89190614865565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115613aea5750600090506003613b97565b8460ff16601b14158015613b0257508460ff16601c14155b15613b135750600090506004613b97565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015613b67573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116613b9057600060019250925050613b97565b9150600090505b94509492505050565b6000816004811115613bb457613bb46152d7565b1415613bbd5750565b6001816004811115613bd157613bd16152d7565b1415613c1f5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610cd8565b6002816004811115613c3357613c336152d7565b1415613c815760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610cd8565b6003816004811115613c9557613c956152d7565b1415613cee5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610cd8565b6004816004811115613d0257613d026152d7565b141561133b5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b6064820152608401610cd8565b61012d5460ff16156111055760405162461bcd60e51b815260206004820152602a60248201527f45524332305061757361626c653a20746f6b656e207472616e7366657220776860448201527f696c6520706175736564000000000000000000000000000000000000000000006064820152608401610cd8565b6001600160a01b0383811660009081526101f86020526040808220548584168352912054611105929182169116836138bd565b6000818152600183016020526040812054613e4f57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610bf3565b506000610bf3565b60008181526001830160205260408120548015613f40576000613e7b60018361501d565b8554909150600090613e8f9060019061501d565b9050818114613ef4576000866000018281548110613eaf57613eaf615034565b9060005260206000200154905080876000018481548110613ed257613ed2615034565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080613f0557613f056152ed565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610bf3565b6000915050610bf3565b6001600160a01b038216613faa5760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610cd8565b613fb6826000836134a3565b6001600160a01b038216600090815260c960205260409020548181101561402a5760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610cd8565b6001600160a01b038316600090815260c960205260408120838303905560cb805484929061405990849061501d565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3611105836000846135f2565b60006110d5828461501d565b82546000908190801561410257856140d060018361501d565b815481106140e0576140e0615034565b60009182526020909120015464010000000090046001600160e01b0316614105565b60005b6001600160e01b0316925061411e83858763ffffffff16565b915060008111801561415c5750438661413860018461501d565b8154811061414857614148615034565b60009182526020909120015463ffffffff16145b156141bc5761416a826144f1565b8661417660018461501d565b8154811061418657614186615034565b9060005260206000200160000160046101000a8154816001600160e01b0302191690836001600160e01b03160217905550614227565b8560405180604001604052806141d143612d04565b63ffffffff1681526020016141e5856144f1565b6001600160e01b0390811690915282546001810184556000938452602093849020835194909301519091166401000000000263ffffffff909316929092179101555b50935093915050565b60006110d58284614fd0565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114614289576040519150601f19603f3d011682016040523d82523d6000602084013e61428e565b606091505b50509050806111055760405162461bcd60e51b815260206004820152601c60248201527f6e617469766520746f6b656e207472616e73666572206661696c6564000000006044820152606401610cd8565b816001600160a01b0316836001600160a01b031614156142fe57611889565b60006001600160a01b0384163014614390576040516323b872dd60e01b81526001600160a01b0385811660048301528481166024830152604482018490528616906323b872dd906064016020604051808303816000875af1158015614367573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061438b9190615303565b614403565b60405163a9059cbb60e01b81526001600160a01b0384811660048301526024820184905286169063a9059cbb906044016020604051808303816000875af11580156143df573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906144039190615303565b9050806144525760405162461bcd60e51b815260206004820152601960248201527f63757272656e6379207472616e73666572206661696c65642e000000000000006044820152606401610cd8565b5050505050565b6144638282614570565b60cb546001600160e01b0310156144e25760405162461bcd60e51b815260206004820152603060248201527f4552433230566f7465733a20746f74616c20737570706c79207269736b73206f60448201527f766572666c6f77696e6720766f746573000000000000000000000000000000006064820152608401610cd8565b6118896101fa614230836140b7565b60006001600160e01b03821115612d805760405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203260448201527f32342062697473000000000000000000000000000000000000000000000000006064820152608401610cd8565b6001600160a01b0382166145c65760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610cd8565b6145d2600083836134a3565b8060cb60008282546145e49190614fd0565b90915550506001600160a01b038216600090815260c9602052604081208054839290614611908490614fd0565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a36111b1600083836135f2565b82805461466f90614fe8565b90600052602060002090601f01602090048101928261469157600085556146d7565b82601f106146aa57805160ff19168380011785556146d7565b828001600101855582156146d7579182015b828111156146d75782518255916020019190600101906146bc565b50612d80929150614757565b8280546146ef90614fe8565b90600052602060002090601f01602090048101928261471157600085556146d7565b82601f1061472a5782800160ff198235161785556146d7565b828001600101855582156146d7579182015b828111156146d757823582559160200191906001019061473c565b5b80821115612d805760008155600101614758565b60006020828403121561477e57600080fd5b81356001600160e01b0319811681146110d557600080fd5b6001600160a01b038116811461133b57600080fd5b80356147b681614796565b919050565b600080600080600060a086880312156147d357600080fd5b8535945060208601356147e581614796565b93506040860135925060608601356147fc81614796565b949793965091946080013592915050565b60005b83811015614828578181015183820152602001614810565b838111156118895750506000910152565b6000815180845261485181602086016020860161480d565b601f01601f19169290920160200192915050565b6020815260006110d56020830184614839565b6000806040838503121561488b57600080fd5b823561489681614796565b946020939093013593505050565b6000806000606084860312156148b957600080fd5b83356148c481614796565b925060208401356148d481614796565b929592945050506040919091013590565b6000602082840312156148f757600080fd5b5035919050565b6000806040838503121561491157600080fd5b82359150602083013561492381614796565b809150509250929050565b60006020828403121561494057600080fd5b81356110d581614796565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561498a5761498a61494b565b604052919050565b600082601f8301126149a357600080fd5b813567ffffffffffffffff8111156149bd576149bd61494b565b6149d0601f8201601f1916602001614961565b8181528460208386010111156149e557600080fd5b816020850160208301376000918101602001919091529392505050565b600082601f830112614a1357600080fd5b8135602067ffffffffffffffff821115614a2f57614a2f61494b565b8160051b614a3e828201614961565b9283528481018201928281019087851115614a5857600080fd5b83870192505b84831015614a80578235614a7181614796565b82529183019190830190614a5e565b979650505050505050565b600080600080600080600080610100898b031215614aa857600080fd5b614ab1896147ab565b9750602089013567ffffffffffffffff80821115614ace57600080fd5b614ada8c838d01614992565b985060408b0135915080821115614af057600080fd5b614afc8c838d01614992565b975060608b0135915080821115614b1257600080fd5b614b1e8c838d01614992565b965060808b0135915080821115614b3457600080fd5b50614b418b828c01614a02565b945050614b5060a08a016147ab565b925060c08901359150614b6560e08a016147ab565b90509295985092959890939650565b60008083601f840112614b8657600080fd5b50813567ffffffffffffffff811115614b9e57600080fd5b6020830191508360208260051b85010111156117f157600080fd5b600080600080600080600060c0888a031215614bd457600080fd5b8735614bdf81614796565b9650602088013595506040880135614bf681614796565b945060608801359350608088013567ffffffffffffffff811115614c1957600080fd5b614c258a828b01614b74565b989b979a5095989497959660a090950135949350505050565b60008060408385031215614c5157600080fd5b50508035926020909101359150565b60008060208385031215614c7357600080fd5b823567ffffffffffffffff80821115614c8b57600080fd5b818501915085601f830112614c9f57600080fd5b813581811115614cae57600080fd5b866020828501011115614cc057600080fd5b60209290920196919550909350505050565b60008060208385031215614ce557600080fd5b823567ffffffffffffffff811115614cfc57600080fd5b614d0885828601614b74565b90969095509350505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015614d6957603f19888603018452614d57858351614839565b94509285019290850190600101614d3b565b5092979650505050505050565b60008060008060008060a08789031215614d8f57600080fd5b863595506020870135614da181614796565b945060408701359350606087013567ffffffffffffffff811115614dc457600080fd5b614dd089828a01614b74565b979a9699509497949695608090950135949350505050565b803560ff811681146147b657600080fd5b60008060008060008060c08789031215614e1257600080fd5b8635614e1d81614796565b95506020870135945060408701359350614e3960608801614de8565b92506080870135915060a087013590509295509295509295565b600080600080600080600060e0888a031215614e6e57600080fd5b8735614e7981614796565b96506020880135614e8981614796565b95506040880135945060608801359350614ea560808901614de8565b925060a0880135915060c0880135905092959891949750929550565b60008060408385031215614ed457600080fd5b8235614edf81614796565b9150602083013561492381614796565b801515811461133b57600080fd5b600080600060408486031215614f1257600080fd5b833567ffffffffffffffff80821115614f2a57600080fd5b818601915086601f830112614f3e57600080fd5b813581811115614f4d57600080fd5b8760208260081b8501011115614f6257600080fd5b60209283019550935050840135614f7881614eef565b809150509250925092565b60008060408385031215614f9657600080fd5b8235614fa181614796565b9150602083013563ffffffff8116811461492357600080fd5b634e487b7160e01b600052601160045260246000fd5b60008219821115614fe357614fe3614fba565b500190565b600181811c90821680614ffc57607f821691505b6020821081141561328b57634e487b7160e01b600052602260045260246000fd5b60008282101561502f5761502f614fba565b500390565b634e487b7160e01b600052603260045260246000fd5b6000808335601e1984360301811261506157600080fd5b83018035915067ffffffffffffffff82111561507c57600080fd5b6020019150368190038213156117f157600080fd5b60006000198214156150a5576150a5614fba565b5060010190565b6000816150bb576150bb614fba565b506000190190565b813581556020820135600182015560408201356002820155606082013560038201556080820135600482015560a0820135600582015560c082013560068201556007810160e083013561511581614796565b6001600160a01b0381166001600160a01b031983541617825550505050565b6020808252818101839052600090604080840186845b878110156151be578135835284820135858401528382013584840152606080830135908401526080808301359084015260a0808301359084015260c0808301359084015260e08083013561519d81614796565b6001600160a01b03169084015261010092830192919091019060010161514a565b5090979650505050505050565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161520381601785016020880161480d565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000601791840191820152835161524081602884016020880161480d565b01602801949350505050565b600081600019048311821515161561526657615266614fba565b500290565b60008261528857634e487b7160e01b600052601260045260246000fd5b500490565b600080604083850312156152a057600080fd5b82516152ab81614796565b6020939093015192949293505050565b600082516152cd81846020870161480d565b9190910192915050565b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603160045260246000fd5b60006020828403121561531557600080fd5b81516110d581614eef56fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a164736f6c634300080c000a";
var x2 = (a) => a.length > 1;
var I = class extends ContractFactory {
  constructor(...e) {
    x2(e) ? super(...e) : super(x, B1, e[0]), this.contractName = "DropERC20";
  }
  deploy(e, t) {
    return super.deploy(e, t || {});
  }
  getDeployTransaction(e, t) {
    return super.getDeployTransaction(e, t || {});
  }
  attach(e) {
    return super.attach(e);
  }
  connect(e) {
    return super.connect(e);
  }
  static createInterface() {
    return new utils_exports.Interface(x);
  }
  static connect(e, t) {
    return new Contract(e, x, t);
  }
};
I.bytecode = B1, I.abi = x;
var M = [{ inputs: [{ internalType: "address", name: "_thirdwebFee", type: "address" }], stateMutability: "nonpayable", type: "constructor" }, { anonymous: false, inputs: [{ indexed: true, internalType: "address", name: "owner", type: "address" }, { indexed: true, internalType: "address", name: "approved", type: "address" }, { indexed: true, internalType: "uint256", name: "tokenId", type: "uint256" }], name: "Approval", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "address", name: "owner", type: "address" }, { indexed: true, internalType: "address", name: "operator", type: "address" }, { indexed: false, internalType: "bool", name: "approved", type: "bool" }], name: "ApprovalForAll", type: "event" }, { anonymous: false, inputs: [{ components: [{ internalType: "uint256", name: "startTimestamp", type: "uint256" }, { internalType: "uint256", name: "maxClaimableSupply", type: "uint256" }, { internalType: "uint256", name: "supplyClaimed", type: "uint256" }, { internalType: "uint256", name: "quantityLimitPerTransaction", type: "uint256" }, { internalType: "uint256", name: "waitTimeInSecondsBetweenClaims", type: "uint256" }, { internalType: "bytes32", name: "merkleRoot", type: "bytes32" }, { internalType: "uint256", name: "pricePerToken", type: "uint256" }, { internalType: "address", name: "currency", type: "address" }], indexed: false, internalType: "struct IDropClaimCondition.ClaimCondition[]", name: "claimConditions", type: "tuple[]" }], name: "ClaimConditionsUpdated", type: "event" }, { anonymous: false, inputs: [{ indexed: false, internalType: "address", name: "newRoyaltyRecipient", type: "address" }, { indexed: false, internalType: "uint256", name: "newRoyaltyBps", type: "uint256" }], name: "DefaultRoyalty", type: "event" }, { anonymous: false, inputs: [{ indexed: false, internalType: "uint256", name: "maxTotalSupply", type: "uint256" }], name: "MaxTotalSupplyUpdated", type: "event" }, { anonymous: false, inputs: [{ indexed: false, internalType: "uint256", name: "count", type: "uint256" }], name: "MaxWalletClaimCountUpdated", type: "event" }, { anonymous: false, inputs: [{ indexed: false, internalType: "uint256", name: "endTokenId", type: "uint256" }, { indexed: false, internalType: "string", name: "revealedURI", type: "string" }], name: "NFTRevealed", type: "event" }, { anonymous: false, inputs: [{ indexed: false, internalType: "address", name: "prevOwner", type: "address" }, { indexed: false, internalType: "address", name: "newOwner", type: "address" }], name: "OwnerUpdated", type: "event" }, { anonymous: false, inputs: [{ indexed: false, internalType: "address", name: "platformFeeRecipient", type: "address" }, { indexed: false, internalType: "uint256", name: "platformFeeBps", type: "uint256" }], name: "PlatformFeeInfoUpdated", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "address", name: "recipient", type: "address" }], name: "PrimarySaleRecipientUpdated", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "bytes32", name: "role", type: "bytes32" }, { indexed: true, internalType: "bytes32", name: "previousAdminRole", type: "bytes32" }, { indexed: true, internalType: "bytes32", name: "newAdminRole", type: "bytes32" }], name: "RoleAdminChanged", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "bytes32", name: "role", type: "bytes32" }, { indexed: true, internalType: "address", name: "account", type: "address" }, { indexed: true, internalType: "address", name: "sender", type: "address" }], name: "RoleGranted", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "bytes32", name: "role", type: "bytes32" }, { indexed: true, internalType: "address", name: "account", type: "address" }, { indexed: true, internalType: "address", name: "sender", type: "address" }], name: "RoleRevoked", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "uint256", name: "tokenId", type: "uint256" }, { indexed: false, internalType: "address", name: "royaltyRecipient", type: "address" }, { indexed: false, internalType: "uint256", name: "royaltyBps", type: "uint256" }], name: "RoyaltyForToken", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "uint256", name: "claimConditionIndex", type: "uint256" }, { indexed: true, internalType: "address", name: "claimer", type: "address" }, { indexed: true, internalType: "address", name: "receiver", type: "address" }, { indexed: false, internalType: "uint256", name: "startTokenId", type: "uint256" }, { indexed: false, internalType: "uint256", name: "quantityClaimed", type: "uint256" }], name: "TokensClaimed", type: "event" }, { anonymous: false, inputs: [{ indexed: false, internalType: "uint256", name: "startTokenId", type: "uint256" }, { indexed: false, internalType: "uint256", name: "endTokenId", type: "uint256" }, { indexed: false, internalType: "string", name: "baseURI", type: "string" }, { indexed: false, internalType: "bytes", name: "encryptedBaseURI", type: "bytes" }], name: "TokensLazyMinted", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "address", name: "from", type: "address" }, { indexed: true, internalType: "address", name: "to", type: "address" }, { indexed: true, internalType: "uint256", name: "tokenId", type: "uint256" }], name: "Transfer", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "address", name: "wallet", type: "address" }, { indexed: false, internalType: "uint256", name: "count", type: "uint256" }], name: "WalletClaimCountUpdated", type: "event" }, { inputs: [], name: "DEFAULT_ADMIN_ROLE", outputs: [{ internalType: "bytes32", name: "", type: "bytes32" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "to", type: "address" }, { internalType: "uint256", name: "tokenId", type: "uint256" }], name: "approve", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "owner", type: "address" }], name: "balanceOf", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "uint256", name: "", type: "uint256" }], name: "baseURIIndices", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "uint256", name: "tokenId", type: "uint256" }], name: "burn", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "_receiver", type: "address" }, { internalType: "uint256", name: "_quantity", type: "uint256" }, { internalType: "address", name: "_currency", type: "address" }, { internalType: "uint256", name: "_pricePerToken", type: "uint256" }, { internalType: "bytes32[]", name: "_proofs", type: "bytes32[]" }, { internalType: "uint256", name: "_proofMaxQuantityPerTransaction", type: "uint256" }], name: "claim", outputs: [], stateMutability: "payable", type: "function" }, { inputs: [], name: "claimCondition", outputs: [{ internalType: "uint256", name: "currentStartId", type: "uint256" }, { internalType: "uint256", name: "count", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [], name: "contractType", outputs: [{ internalType: "bytes32", name: "", type: "bytes32" }], stateMutability: "pure", type: "function" }, { inputs: [], name: "contractURI", outputs: [{ internalType: "string", name: "", type: "string" }], stateMutability: "view", type: "function" }, { inputs: [], name: "contractVersion", outputs: [{ internalType: "uint8", name: "", type: "uint8" }], stateMutability: "pure", type: "function" }, { inputs: [{ internalType: "bytes", name: "data", type: "bytes" }, { internalType: "bytes", name: "key", type: "bytes" }], name: "encryptDecrypt", outputs: [{ internalType: "bytes", name: "result", type: "bytes" }], stateMutability: "pure", type: "function" }, { inputs: [{ internalType: "uint256", name: "", type: "uint256" }], name: "encryptedBaseURI", outputs: [{ internalType: "bytes", name: "", type: "bytes" }], stateMutability: "view", type: "function" }, { inputs: [], name: "getActiveClaimConditionId", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "uint256", name: "tokenId", type: "uint256" }], name: "getApproved", outputs: [{ internalType: "address", name: "", type: "address" }], stateMutability: "view", type: "function" }, { inputs: [], name: "getBaseURICount", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "uint256", name: "_conditionId", type: "uint256" }], name: "getClaimConditionById", outputs: [{ components: [{ internalType: "uint256", name: "startTimestamp", type: "uint256" }, { internalType: "uint256", name: "maxClaimableSupply", type: "uint256" }, { internalType: "uint256", name: "supplyClaimed", type: "uint256" }, { internalType: "uint256", name: "quantityLimitPerTransaction", type: "uint256" }, { internalType: "uint256", name: "waitTimeInSecondsBetweenClaims", type: "uint256" }, { internalType: "bytes32", name: "merkleRoot", type: "bytes32" }, { internalType: "uint256", name: "pricePerToken", type: "uint256" }, { internalType: "address", name: "currency", type: "address" }], internalType: "struct IDropClaimCondition.ClaimCondition", name: "condition", type: "tuple" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "uint256", name: "_conditionId", type: "uint256" }, { internalType: "address", name: "_claimer", type: "address" }], name: "getClaimTimestamp", outputs: [{ internalType: "uint256", name: "lastClaimTimestamp", type: "uint256" }, { internalType: "uint256", name: "nextValidClaimTimestamp", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [], name: "getDefaultRoyaltyInfo", outputs: [{ internalType: "address", name: "", type: "address" }, { internalType: "uint16", name: "", type: "uint16" }], stateMutability: "view", type: "function" }, { inputs: [], name: "getPlatformFeeInfo", outputs: [{ internalType: "address", name: "", type: "address" }, { internalType: "uint16", name: "", type: "uint16" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "bytes32", name: "role", type: "bytes32" }], name: "getRoleAdmin", outputs: [{ internalType: "bytes32", name: "", type: "bytes32" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "bytes32", name: "role", type: "bytes32" }, { internalType: "uint256", name: "index", type: "uint256" }], name: "getRoleMember", outputs: [{ internalType: "address", name: "", type: "address" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "bytes32", name: "role", type: "bytes32" }], name: "getRoleMemberCount", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "uint256", name: "_tokenId", type: "uint256" }], name: "getRoyaltyInfoForToken", outputs: [{ internalType: "address", name: "", type: "address" }, { internalType: "uint16", name: "", type: "uint16" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "bytes32", name: "role", type: "bytes32" }, { internalType: "address", name: "account", type: "address" }], name: "grantRole", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "bytes32", name: "role", type: "bytes32" }, { internalType: "address", name: "account", type: "address" }], name: "hasRole", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "_defaultAdmin", type: "address" }, { internalType: "string", name: "_name", type: "string" }, { internalType: "string", name: "_symbol", type: "string" }, { internalType: "string", name: "_contractURI", type: "string" }, { internalType: "address[]", name: "_trustedForwarders", type: "address[]" }, { internalType: "address", name: "_saleRecipient", type: "address" }, { internalType: "address", name: "_royaltyRecipient", type: "address" }, { internalType: "uint128", name: "_royaltyBps", type: "uint128" }, { internalType: "uint128", name: "_platformFeeBps", type: "uint128" }, { internalType: "address", name: "_platformFeeRecipient", type: "address" }], name: "initialize", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "owner", type: "address" }, { internalType: "address", name: "operator", type: "address" }], name: "isApprovedForAll", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "forwarder", type: "address" }], name: "isTrustedForwarder", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "uint256", name: "_amount", type: "uint256" }, { internalType: "string", name: "_baseURIForTokens", type: "string" }, { internalType: "bytes", name: "_encryptedBaseURI", type: "bytes" }], name: "lazyMint", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [], name: "maxTotalSupply", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [], name: "maxWalletClaimCount", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "bytes[]", name: "data", type: "bytes[]" }], name: "multicall", outputs: [{ internalType: "bytes[]", name: "results", type: "bytes[]" }], stateMutability: "nonpayable", type: "function" }, { inputs: [], name: "name", outputs: [{ internalType: "string", name: "", type: "string" }], stateMutability: "view", type: "function" }, { inputs: [], name: "nextTokenIdToClaim", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [], name: "nextTokenIdToMint", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [], name: "owner", outputs: [{ internalType: "address", name: "", type: "address" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "uint256", name: "tokenId", type: "uint256" }], name: "ownerOf", outputs: [{ internalType: "address", name: "", type: "address" }], stateMutability: "view", type: "function" }, { inputs: [], name: "primarySaleRecipient", outputs: [{ internalType: "address", name: "", type: "address" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "bytes32", name: "role", type: "bytes32" }, { internalType: "address", name: "account", type: "address" }], name: "renounceRole", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "uint256", name: "index", type: "uint256" }, { internalType: "bytes", name: "_key", type: "bytes" }], name: "reveal", outputs: [{ internalType: "string", name: "revealedURI", type: "string" }], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "bytes32", name: "role", type: "bytes32" }, { internalType: "address", name: "account", type: "address" }], name: "revokeRole", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "uint256", name: "tokenId", type: "uint256" }, { internalType: "uint256", name: "salePrice", type: "uint256" }], name: "royaltyInfo", outputs: [{ internalType: "address", name: "receiver", type: "address" }, { internalType: "uint256", name: "royaltyAmount", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "from", type: "address" }, { internalType: "address", name: "to", type: "address" }, { internalType: "uint256", name: "tokenId", type: "uint256" }], name: "safeTransferFrom", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "from", type: "address" }, { internalType: "address", name: "to", type: "address" }, { internalType: "uint256", name: "tokenId", type: "uint256" }, { internalType: "bytes", name: "_data", type: "bytes" }], name: "safeTransferFrom", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "operator", type: "address" }, { internalType: "bool", name: "approved", type: "bool" }], name: "setApprovalForAll", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ components: [{ internalType: "uint256", name: "startTimestamp", type: "uint256" }, { internalType: "uint256", name: "maxClaimableSupply", type: "uint256" }, { internalType: "uint256", name: "supplyClaimed", type: "uint256" }, { internalType: "uint256", name: "quantityLimitPerTransaction", type: "uint256" }, { internalType: "uint256", name: "waitTimeInSecondsBetweenClaims", type: "uint256" }, { internalType: "bytes32", name: "merkleRoot", type: "bytes32" }, { internalType: "uint256", name: "pricePerToken", type: "uint256" }, { internalType: "address", name: "currency", type: "address" }], internalType: "struct IDropClaimCondition.ClaimCondition[]", name: "_phases", type: "tuple[]" }, { internalType: "bool", name: "_resetClaimEligibility", type: "bool" }], name: "setClaimConditions", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "string", name: "_uri", type: "string" }], name: "setContractURI", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "_royaltyRecipient", type: "address" }, { internalType: "uint256", name: "_royaltyBps", type: "uint256" }], name: "setDefaultRoyaltyInfo", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "uint256", name: "_maxTotalSupply", type: "uint256" }], name: "setMaxTotalSupply", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "uint256", name: "_count", type: "uint256" }], name: "setMaxWalletClaimCount", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "_newOwner", type: "address" }], name: "setOwner", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "_platformFeeRecipient", type: "address" }, { internalType: "uint256", name: "_platformFeeBps", type: "uint256" }], name: "setPlatformFeeInfo", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "_saleRecipient", type: "address" }], name: "setPrimarySaleRecipient", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "uint256", name: "_tokenId", type: "uint256" }, { internalType: "address", name: "_recipient", type: "address" }, { internalType: "uint256", name: "_bps", type: "uint256" }], name: "setRoyaltyInfoForToken", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "_claimer", type: "address" }, { internalType: "uint256", name: "_count", type: "uint256" }], name: "setWalletClaimCount", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "bytes4", name: "interfaceId", type: "bytes4" }], name: "supportsInterface", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "view", type: "function" }, { inputs: [], name: "symbol", outputs: [{ internalType: "string", name: "", type: "string" }], stateMutability: "view", type: "function" }, { inputs: [], name: "thirdwebFee", outputs: [{ internalType: "contract ITWFee", name: "", type: "address" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "uint256", name: "index", type: "uint256" }], name: "tokenByIndex", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "owner", type: "address" }, { internalType: "uint256", name: "index", type: "uint256" }], name: "tokenOfOwnerByIndex", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "uint256", name: "_tokenId", type: "uint256" }], name: "tokenURI", outputs: [{ internalType: "string", name: "", type: "string" }], stateMutability: "view", type: "function" }, { inputs: [], name: "totalSupply", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "from", type: "address" }, { internalType: "address", name: "to", type: "address" }, { internalType: "uint256", name: "tokenId", type: "uint256" }], name: "transferFrom", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "uint256", name: "_conditionId", type: "uint256" }, { internalType: "address", name: "_claimer", type: "address" }, { internalType: "uint256", name: "_quantity", type: "uint256" }, { internalType: "address", name: "_currency", type: "address" }, { internalType: "uint256", name: "_pricePerToken", type: "uint256" }], name: "verifyClaim", outputs: [], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "uint256", name: "_conditionId", type: "uint256" }, { internalType: "address", name: "_claimer", type: "address" }, { internalType: "uint256", name: "_quantity", type: "uint256" }, { internalType: "bytes32[]", name: "_proofs", type: "bytes32[]" }, { internalType: "uint256", name: "_proofMaxQuantityPerTransaction", type: "uint256" }], name: "verifyClaimMerkleProof", outputs: [{ internalType: "bool", name: "validMerkleProof", type: "bool" }, { internalType: "uint256", name: "merkleProofIndex", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "", type: "address" }], name: "walletClaimCount", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }];
var O1 = "0x60a06040523480156200001157600080fd5b5060405162005fd638038062005fd683398101604081905262000034916200013b565b600054610100900460ff16620000515760005460ff16156200005b565b6200005b6200010e565b620000c35760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b600054610100900460ff16158015620000e6576000805461ffff19166101011790555b6001600160a01b038216608052801562000106576000805461ff00191690555b50506200016d565b600062000126306200012c60201b620030501760201c565b15905090565b6001600160a01b03163b151590565b6000602082840312156200014e57600080fd5b81516001600160a01b03811681146200016657600080fd5b9392505050565b608051615e466200019060003960008181610c1e015261359a0152615e466000f3fe6080604052600436106103f95760003560e01c80637a5a8e7e1161020d578063b88d4fde11610128578063d45573f6116100bb578063e15916341161008a578063e71503221161006f578063e715032214610d33578063e8a3d48514610d53578063e985e9c514610d6857600080fd5b8063e159163414610cf3578063e23b816414610d1357600080fd5b8063d45573f614610c60578063d547741f14610c96578063d637ed5914610cb6578063d860483f14610cd357600080fd5b8063cb2ef6f7116100f7578063cb2ef6f714610bb9578063ce80564214610bec578063cf8267b114610c0c578063d37c353b14610c4057600080fd5b8063b88d4fde14610b44578063c68907de14610b64578063c87b56dd14610b79578063ca15c87314610b9957600080fd5b80639bcf7a15116101a0578063ac9650d81161016f578063ac9650d814610a9a578063acd083f814610ac7578063af3be89014610ade578063b24f2d3914610b1557600080fd5b80639bcf7a1514610a29578063a0a8e46014610a49578063a217fddf14610a65578063a22cb46514610a7a57600080fd5b80639010d07c116101dc5780639010d07c1461098e57806391d14854146109ae578063938e3d7b146109f457806395d89b4114610a1457600080fd5b80637a5a8e7e14610911578063829099591461092457806386ee745d146109445780638da5cb5b1461097957600080fd5b806336568abe116103185780634f6ccce7116102ab5780636352211e1161027a5780636f4f28371161025f5780636f4f2837146108475780636f8934f41461086757806370a08231146108f157600080fd5b80636352211e1461081157806363b45e2d1461083157600080fd5b80634f6ccce7146107785780635086795714610798578063572b6c05146107b8578063600dd5ea146107f157600080fd5b806342842e0e116102e757806342842e0e146106c857806342966c68146106e85780634352ab41146107085780634cc157df1461073657600080fd5b806336568abe146106515780633b1475a7146106715780633ea33f29146106885780633f3e4c11146106a857600080fd5b806318160ddd116103905780632a55205a1161035f5780632a55205a146105bb5780632ab4d052146105fa5780632f2ff15d146106115780632f745c591461063157600080fd5b806318160ddd146105355780631e7ac4881461054b57806323b872dd1461056b578063248a9ca31461058b57600080fd5b8063079fe40e116103cc578063079fe40e1461049c578063081812fc146104d5578063095ea7b3146104f557806313af40351461051557600080fd5b806301ffc9a7146103fe57806302c7a87714610433578063059817691461045557806306fdde031461047a575b600080fd5b34801561040a57600080fd5b5061041e610419366004614f7c565b610db2565b60405190151581526020015b60405180910390f35b34801561043f57600080fd5b5061045361044e366004614fbe565b610dde565b005b34801561046157600080fd5b5061046c6101c75481565b60405190815260200161042a565b34801561048657600080fd5b5061048f611150565b60405161042a9190615068565b3480156104a857600080fd5b506101c6546104bd906001600160a01b031681565b6040516001600160a01b03909116815260200161042a565b3480156104e157600080fd5b506104bd6104f036600461507b565b6111e3565b34801561050157600080fd5b50610453610510366004615094565b61127a565b34801561052157600080fd5b506104536105303660046150c0565b6113a2565b34801561054157600080fd5b506101935461046c565b34801561055757600080fd5b50610453610566366004615094565b6114a0565b34801561057757600080fd5b506104536105863660046150dd565b611577565b34801561059757600080fd5b5061046c6105a636600461507b565b600090815260fb602052604090206001015490565b3480156105c757600080fd5b506105db6105d636600461511e565b611605565b604080516001600160a01b03909316835260208301919091520161042a565b34801561060657600080fd5b5061046c6101c85481565b34801561061d57600080fd5b5061045361062c366004615140565b611642565b34801561063d57600080fd5b5061046c61064c366004615094565b61166a565b34801561065d57600080fd5b5061045361066c366004615140565b611713565b34801561067d57600080fd5b5061046c6101c45481565b34801561069457600080fd5b506104536106a3366004615094565b6117af565b3480156106b457600080fd5b506104536106c336600461507b565b611818565b3480156106d457600080fd5b506104536106e33660046150dd565b6118dc565b3480156106f457600080fd5b5061045361070336600461507b565b6118f7565b34801561071457600080fd5b5061046c6107233660046150c0565b6101d56020526000908152604090205481565b34801561074257600080fd5b5061075661075136600461507b565b61195a565b604080516001600160a01b03909316835261ffff90911660208301520161042a565b34801561078457600080fd5b5061046c61079336600461507b565b6119ca565b3480156107a457600080fd5b506104536107b336600461507b565b611a70565b3480156107c457600080fd5b5061041e6107d33660046150c0565b6001600160a01b031660009081526065602052604090205460ff1690565b3480156107fd57600080fd5b5061045361080c366004615094565b611ab4565b34801561081d57600080fd5b506104bd61082c36600461507b565b611b8e565b34801561083d57600080fd5b506101cd5461046c565b34801561085357600080fd5b506104536108623660046150c0565b611c1a565b34801561087357600080fd5b5061088761088236600461507b565b611c74565b60405161042a9190600061010082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015260c083015160c08301526001600160a01b0360e08401511660e083015292915050565b3480156108fd57600080fd5b5061046c61090c3660046150c0565b611d40565b61045361091f3660046151b5565b611ddb565b34801561093057600080fd5b5061048f61093f36600461507b565b611f35565b34801561095057600080fd5b5061096461095f366004615140565b611fd0565b6040805192835260208301919091520161042a565b34801561098557600080fd5b506104bd61201a565b34801561099a57600080fd5b506104bd6109a936600461511e565b612075565b3480156109ba57600080fd5b5061041e6109c9366004615140565b600091825260fb602090815260408084206001600160a01b0393909316845291905290205460ff1690565b348015610a0057600080fd5b50610453610a0f36600461527c565b612095565b348015610a2057600080fd5b5061048f6120b6565b348015610a3557600080fd5b50610453610a443660046152be565b6120c6565b348015610a5557600080fd5b506040516001815260200161042a565b348015610a7157600080fd5b5061046c600081565b348015610a8657600080fd5b50610453610a953660046152f3565b6121b0565b348015610aa657600080fd5b50610aba610ab5366004615321565b6121c2565b60405161042a9190615357565b348015610ad357600080fd5b5061046c6101c55481565b348015610aea57600080fd5b50610afe610af93660046153b9565b6122b7565b60408051921515835260208301919091520161042a565b348015610b2157600080fd5b506101ca546101cb546001600160a01b03909116906001600160801b0316610756565b348015610b5057600080fd5b50610453610b5f3660046154e2565b6124db565b348015610b7057600080fd5b5061046c61256a565b348015610b8557600080fd5b5061048f610b9436600461507b565b612623565b348015610ba557600080fd5b5061046c610bb436600461507b565b61276a565b348015610bc557600080fd5b507f44726f704552433732310000000000000000000000000000000000000000000061046c565b348015610bf857600080fd5b5061048f610c0736600461554e565b612782565b348015610c1857600080fd5b506104bd7f000000000000000000000000000000000000000000000000000000000000000081565b348015610c4c57600080fd5b50610453610c5b36600461559a565b6129a5565b348015610c6c57600080fd5b506101c9546101cb546001600160a01b0390911690600160801b90046001600160801b0316610756565b348015610ca257600080fd5b50610453610cb1366004615140565b612abe565b348015610cc257600080fd5b506101ce546101cf54610964919082565b348015610cdf57600080fd5b5061046c610cee36600461507b565b612ae6565b348015610cff57600080fd5b50610453610d0e3660046156b4565b612b08565b348015610d1f57600080fd5b50610453610d2e3660046157c7565b612d09565b348015610d3f57600080fd5b5061048f610d4e36600461584d565b612fcd565b348015610d5f57600080fd5b5061048f613042565b348015610d7457600080fd5b5061041e610d833660046158a9565b6001600160a01b0391821660009081526101646020908152604080832093909416825291909152205460ff1690565b6000610dbd8261305f565b80610dd8575063152a902d60e11b6001600160e01b03198316145b92915050565b60008581526101d06020908152604091829020825161010081018452815481526001820154928101929092526002810154928201929092526003820154606082015260048201546080820152600582015460a0820152600682015460c08201526007909101546001600160a01b0390811660e08301819052908416148015610e6957508060c0015182145b610ec65760405162461bcd60e51b8152602060048201526024808201527f696e76616c69642063757272656e6379206f722070726963652073706563696660448201526334b2b21760e11b60648201526084015b60405180910390fd5b600084118015610eda575080606001518411155b610f265760405162461bcd60e51b815260206004820152601960248201527f696e76616c6964207175616e7469747920636c61696d65642e000000000000006044820152606401610ebd565b8060200151848260400151610f3b91906158ed565b1115610f895760405162461bcd60e51b815260206004820152601760248201527f657863656564206d6178206d696e7420737570706c792e0000000000000000006044820152606401610ebd565b6101c454846101c554610f9c91906158ed565b1115610fea5760405162461bcd60e51b815260206004820152601960248201527f6e6f7420656e6f756768206d696e74656420746f6b656e732e000000000000006044820152606401610ebd565b6101c854158061100b57506101c854846101c55461100891906158ed565b11155b6110575760405162461bcd60e51b815260206004820152601860248201527f657863656564206d617820746f74616c20737570706c792e00000000000000006044820152606401610ebd565b6101c754158061108e57506101c7546001600160a01b03861660009081526101d5602052604090205461108b9086906158ed565b11155b6110da5760405162461bcd60e51b815260206004820152601d60248201527f65786365656420636c61696d206c696d697420666f722077616c6c65740000006044820152606401610ebd565b6000806110e78888611fd0565b9150915081600014806110fa5750804210155b6111465760405162461bcd60e51b815260206004820152601160248201527f63616e6e6f7420636c61696d207965742e0000000000000000000000000000006044820152606401610ebd565b5050505050505050565b606061015f805461116090615905565b80601f016020809104026020016040519081016040528092919081815260200182805461118c90615905565b80156111d95780601f106111ae576101008083540402835291602001916111d9565b820191906000526020600020905b8154815290600101906020018083116111bc57829003601f168201915b5050505050905090565b600081815261016160205260408120546001600160a01b031661125d5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610ebd565b50600090815261016360205260409020546001600160a01b031690565b600061128582611b8e565b9050806001600160a01b0316836001600160a01b031614156112f35760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401610ebd565b806001600160a01b0316611305613084565b6001600160a01b03161480611321575061132181610d83613084565b6113935760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610ebd565b61139d838361308e565b505050565b60006113b5816113b0613084565b6130fd565b6001600160a01b03821660009081527fc88390e7e62175be0932452175b6a7222b6b094ab0ef984a5153c620345d8975602052604090205460ff1661143c5760405162461bcd60e51b815260206004820152601d60248201527f6e6577206f776e6572206e6f7420636f6e74726163742061646d696e2e0000006044820152606401610ebd565b6101c380546001600160a01b038481166001600160a01b031983168117909355604080519190921680825260208201939093527f8292fce18fa69edf4db7b94ea2e58241df0ae57f97e0a6c9b29067028bf92d7691015b60405180910390a1505050565b60006114ae816113b0613084565b6127108211156115005760405162461bcd60e51b815260206004820152600d60248201527f627073203c3d2031303030302e000000000000000000000000000000000000006044820152606401610ebd565b6101cb80546001600160801b031667ffffffffffffffff8416600160801b021790556101c980546001600160a01b0319166001600160a01b03851690811790915560408051918252602082018490527fe2497bd806ec41a6e0dd992c29a72efc0ef8fec9092d1978fd4a1e00b2f183049101611493565b611588611582613084565b8261317d565b6115fa5760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f7665640000000000000000000000000000006064820152608401610ebd565b61139d838383613276565b6000806000806116148661195a565b90945084925061ffff16905061271061162d8287615940565b6116379190615975565b925050509250929050565b600082815260fb6020526040902060010154611660816113b0613084565b61139d8383613438565b600061167583611d40565b82106116e95760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201527f74206f6620626f756e64730000000000000000000000000000000000000000006064820152608401610ebd565b506001600160a01b0391909116600090815261019160209081526040808320938352929052205490565b61171b613084565b6001600160a01b0316816001600160a01b0316146117a15760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c6600000000000000000000000000000000006064820152608401610ebd565b6117ab828261345b565b5050565b60006117bd816113b0613084565b6001600160a01b03831660008181526101d5602052604090819020849055517f8973b95d42472e89416ea69404f8038c041db700af9ec294e7b4cd4e1ff2801c9061180b9085815260200190565b60405180910390a2505050565b6000611826816113b0613084565b6101c454821061189e5760405162461bcd60e51b815260206004820152602b60248201527f616c7265616479206d696e746564206d6f7265207468616e206465736972656460448201527f206d617820737570706c790000000000000000000000000000000000000000006064820152608401610ebd565b6101c88290556040518281527ff2672935fc79f5237559e2e2999dbe743bf65430894ac2b37666890e7c69e1af906020015b60405180910390a15050565b61139d838383604051806020016040528060008152506124db565b611902611582613084565b61194e5760405162461bcd60e51b815260206004820181905260248201527f63616c6c6572206973206e6f74206f776e6572206e6f7220617070726f7665646044820152606401610ebd565b6119578161347e565b50565b60008181526101d660209081526040808320815180830190925280546001600160a01b0316808352600190910154928201929092528291156119a257805160208201516119c0565b6101ca546101cb546001600160a01b03909116906001600160801b03165b9250925050915091565b60006119d66101935490565b8210611a4a5760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201527f7574206f6620626f756e647300000000000000000000000000000000000000006064820152608401610ebd565b6101938281548110611a5e57611a5e615989565b90600052602060002001549050919050565b6000611a7e816113b0613084565b6101c78290556040518281527ff9d383c69b6255cbd431ca23734f43bdf15e694c7494956c917498469bcbce73906020016118d0565b6000611ac2816113b0613084565b612710821115611b145760405162461bcd60e51b815260206004820152601260248201527f65786365656420726f79616c74792062707300000000000000000000000000006044820152606401610ebd565b6101ca80546001600160a01b0319166001600160a01b0385169081179091556101cb80546fffffffffffffffffffffffffffffffff19166001600160801b03851617905560408051918252602082018490527f90d7ec04bcb8978719414f82e52e4cb651db41d0e6f8cea6118c2191e6183adb9101611493565b600081815261016160205260408120546001600160a01b031680610dd85760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201527f656e7420746f6b656e00000000000000000000000000000000000000000000006064820152608401610ebd565b6000611c28816113b0613084565b6101c680546001600160a01b0319166001600160a01b0384169081179091556040517f299d17e95023f496e0ffc4909cff1a61f74bb5eb18de6f900f4155bfa1b3b33390600090a25050565b611cc86040518061010001604052806000815260200160008152602001600081526020016000815260200160008152602001600080191681526020016000815260200160006001600160a01b031681525090565b5060009081526101d06020908152604091829020825161010081018452815481526001820154928101929092526002810154928201929092526003820154606082015260048201546080820152600582015460a0820152600682015460c08201526007909101546001600160a01b031660e082015290565b60006001600160a01b038216611dbe5760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a6560448201527f726f2061646472657373000000000000000000000000000000000000000000006064820152608401610ebd565b506001600160a01b03166000908152610162602052604090205490565b60026001541415611e2e5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610ebd565b60026001556101c5546000611e4161256a565b9050611e5781611e4f613084565b8a8a8a610dde565b600080611e6f83611e66613084565b8c8a8a8a6122b7565b91509150818015611e805750600085115b15611eb05760008381526101d260209081526040808320600885901c845290915290208054600160ff84161b1790555b611ebb8a8a8a613527565b611ec68b848c6136fd565b8a6001600160a01b0316611ed8613084565b6001600160a01b0316847ffa76a4010d9533e3e964f2930a65fb6042a12fa6ff5b08281837a10b0be7321e878e604051611f1c929190918252602082015260400190565b60405180910390a4505060018055505050505050505050565b6101d46020526000908152604090208054611f4f90615905565b80601f0160208091040260200160405190810160405280929190818152602001828054611f7b90615905565b8015611fc85780601f10611f9d57610100808354040283529160200191611fc8565b820191906000526020600020905b815481529060010190602001808311611fab57829003601f168201915b505050505081565b60008281526101d1602090815260408083206001600160a01b03851684528252808320548584526101d09092529091206004015481018181101561201357506000195b9250929050565b6101c3546001600160a01b031660009081527fc88390e7e62175be0932452175b6a7222b6b094ab0ef984a5153c620345d8975602052604081205460ff166120625750600090565b6101c3546001600160a01b03165b905090565b600082815261012d6020526040812061208e90836137e5565b9392505050565b60006120a3816113b0613084565b6120b06101cc8484614e23565b50505050565b6060610160805461116090615905565b60006120d4816113b0613084565b6127108211156121265760405162461bcd60e51b815260206004820152601260248201527f65786365656420726f79616c74792062707300000000000000000000000000006044820152606401610ebd565b6040805180820182526001600160a01b03858116808352602080840187815260008a81526101d68352869020945185546001600160a01b031916941693909317845591516001909301929092558251918252810184905285917f7365cf4122f072a3365c20d54eff9b38d73c096c28e1892ec8f5b0e403a0f12d910160405180910390a250505050565b6117ab6121bb613084565b83836137f1565b60608167ffffffffffffffff8111156121dd576121dd61542b565b60405190808252806020026020018201604052801561221057816020015b60608152602001906001900390816121fb5790505b50905060005b828110156122b0576122803085858481811061223457612234615989565b9050602002810190612246919061599f565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506138c192505050565b82828151811061229257612292615989565b602002602001018190525080806122a8906159e6565b915050612216565b5092915050565b60008681526101d060209081526040808320815161010081018352815481526001820154938101939093526002810154918301919091526003810154606083015260048101546080830152600581015460a08301819052600682015460c08401526007909101546001600160a01b031660e0830152829190156124cf576123b086868080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050505060a08301516040516bffffffffffffffffffffffff1960608d901b16602082015260348101889052605401604051602081830303815290604052805190602001206139cc565b9093509150826124025760405162461bcd60e51b815260206004820152601160248201527f6e6f7420696e2077686974656c6973742e0000000000000000000000000000006044820152606401610ebd565b60008981526101d260209081526040808320600886901c8452909152902054600160ff84161b16156124765760405162461bcd60e51b815260206004820152600e60248201527f70726f6f6620636c61696d65642e0000000000000000000000000000000000006044820152606401610ebd565b8315806124835750838711155b6124cf5760405162461bcd60e51b815260206004820152601760248201527f696e76616c6964207175616e746974792070726f6f662e0000000000000000006044820152606401610ebd565b50965096945050505050565b6124ec6124e6613084565b8361317d565b61255e5760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f7665640000000000000000000000000000006064820152608401610ebd565b6120b084848484613a9a565b6101cf546101ce54600091829161258191906158ed565b90505b6101ce548111156125da576101d0600061259f600184615a01565b81526020019081526020016000206000015442106125c8576125c2600182615a01565b91505090565b806125d281615a18565b915050612584565b5060405162461bcd60e51b815260206004820152601960248201527f6e6f20616374697665206d696e7420636f6e646974696f6e2e000000000000006044820152606401610ebd565b606060005b6101cd54811015612754576101cd818154811061264757612647615989565b9060005260206000200154831015612742576101d460006101cd838154811061267257612672615989565b90600052602060002001548152602001908152602001600020805461269690615905565b1590506126f6576101d360006101cd83815481106126b6576126b6615989565b906000526020600020015481526020019081526020016000206040516020016126df9190615ac9565b604051602081830303815290604052915050919050565b6101d360006101cd838154811061270f5761270f615989565b9060005260206000200154815260200190815260200160002061273184613b23565b6040516020016126df929190615ae6565b61274d6001826158ed565b9050612628565b5050604080516020810190915260008152919050565b600081815261012d60205260408120610dd890613c21565b60607f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a66127b1816113b0613084565b6101cd5485106128035760405162461bcd60e51b815260206004820152600e60248201527f696e76616c696420696e6465782e0000000000000000000000000000000000006044820152606401610ebd565b60006101cd868154811061281957612819615989565b9060005260206000200154905060006101d46000838152602001908152602001600020805461284790615905565b80601f016020809104026020016040519081016040528092919081815260200182805461287390615905565b80156128c05780601f10612895576101008083540402835291602001916128c0565b820191906000526020600020905b8154815290600101906020018083116128a357829003601f168201915b505050505090508051600014156129195760405162461bcd60e51b815260206004820152601260248201527f6e6f7468696e6720746f2072657665616c2e00000000000000000000000000006044820152606401610ebd565b612924818787612fcd565b60008381526101d3602090815260409091208251929650612949929091870190614ea7565b5060008281526101d46020526040812061296291614f1b565b7f09b52c0c3a3e08761cd3917c8e49275ed1e0982477b54047add8b4d70513bc868285604051612993929190615b0b565b60405180910390a15050509392505050565b7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a66129d2816113b0613084565b6101c45460006129e288836158ed565b6101c481905560008181526101d360205260409020909150612a05908888614e23565b506101cd80546001810182556000919091527f41bf21270d8c221a457e2f64e0b5e3c274a814409eea17edf41bb9eb4ee64eb0018190558315612a5e5760008181526101d460205260409020612a5c908686614e23565b505b7f2a0365091ef1a40953c670dce28177e37520648a6fdc91506bffac0ab045570d826001612a8c8b836158ed565b612a969190615a01565b89898989604051612aac96959493929190615b4d565b60405180910390a15050505050505050565b600082815260fb6020526040902060010154612adc816113b0613084565b61139d838361345b565b6101cd8181548110612af757600080fd5b600091825260209091200154905081565b600054610100900460ff16612b235760005460ff1615612b27565b303b155b612b995760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610ebd565b600054610100900460ff16158015612bbb576000805461ffff19166101011790555b612bc3613c2b565b612bcc87613ca0565b612bd68a8a613d1c565b6101ca80546001600160a01b038088166001600160a01b0319928316179092556101c980548584169083161790556001600160801b03858116600160801b02908716176101cb556101c68054928916929091169190911790558751612c43906101cc9060208b0190614ea7565b506101c380546001600160a01b0319166001600160a01b038d16179055612c6b60008c613d91565b612c957f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a68c613d91565b612cbf7f8502233096d909befbda0999bb8ea2f3a6be3c138b9fbf003752a4c8bce86f6c8c613d91565b612cea7f8502233096d909befbda0999bb8ea2f3a6be3c138b9fbf003752a4c8bce86f6c6000613d91565b8015612cfc576000805461ff00191690555b5050505050505050505050565b6000612d17816113b0613084565b6101ce546101cf54818415612d3357612d3082846158ed565b90505b6101cf8690556101ce8190556000805b87811015612e8357801580612d735750888882818110612d6557612d65615989565b905061010002016000013582105b612de55760405162461bcd60e51b815260206004820152602a60248201527f737461727454696d657374616d70206d75737420626520696e20617363656e6460448201527f696e67206f726465722e000000000000000000000000000000000000000000006064820152608401610ebd565b888882818110612df757612df7615989565b610100029190910190506101d06000612e1084876158ed565b81526020019081526020016000208181612e2a9190615b8d565b50600090506101d081612e3d84876158ed565b8152602081019190915260400160002060020155888882818110612e6357612e63615989565b905061010002016000013591508080612e7b906159e6565b915050612d43565b508515612f0357835b82811015612efd5760008181526101d060209081526040822082815560018101839055600281018390556003810183905560048101839055600581018390556006810192909255600790910180546001600160a01b03191690556101d2905280612ef5816159e6565b915050612e8c565b50612f9c565b86831115612f9c57865b83811015612f9a576101d06000612f2483866158ed565b81526020810191909152604001600090812081815560018101829055600281018290556003810182905560048101829055600581018290556006810182905560070180546001600160a01b03191690556101d290612f8283866158ed565b81526020015280612f92816159e6565b915050612f0d565b505b7f22ddd1bcb3816651679299dbffccb94973edec10c32e88dc2f4735c7699a02ca8888604051612aac929190615bfe565b8251604080518083016020019091528181529060005b8181101561303957600085858360405160200161300293929190615c95565b60408051601f198184030181529190528051602091820120888401820151188584018201526130329150826158ed565b9050612fe3565b50509392505050565b6101cc8054611f4f90615905565b6001600160a01b03163b151590565b60006001600160e01b0319821663780e9d6360e01b1480610dd85750610dd882613d9b565b6000612070613ddb565b60008181526101636020526040902080546001600160a01b0319166001600160a01b03841690811790915581906130c482611b8e565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600082815260fb602090815260408083206001600160a01b038516845290915290205460ff166117ab5761313b816001600160a01b03166014613e05565b613146836020613e05565b604051602001613157929190615ca7565b60408051601f198184030181529082905262461bcd60e51b8252610ebd91600401615068565b600081815261016160205260408120546001600160a01b03166131f75760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610ebd565b600061320283611b8e565b9050806001600160a01b0316846001600160a01b0316148061323d5750836001600160a01b0316613232846111e3565b6001600160a01b0316145b8061326e57506001600160a01b038082166000908152610164602090815260408083209388168352929052205460ff165b949350505050565b826001600160a01b031661328982611b8e565b6001600160a01b0316146133055760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201527f6f776e65720000000000000000000000000000000000000000000000000000006064820152608401610ebd565b6001600160a01b0382166133675760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610ebd565b613372838383613fae565b61337d60008261308e565b6001600160a01b0383166000908152610162602052604081208054600192906133a7908490615a01565b90915550506001600160a01b0382166000908152610162602052604081208054600192906133d69084906158ed565b90915550506000818152610161602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6134428282614109565b600082815261012d6020526040902061139d90826141ac565b61346582826141c1565b600082815261012d6020526040902061139d9082614262565b600061348982611b8e565b905061349781600084613fae565b6134a260008361308e565b6001600160a01b0381166000908152610162602052604081208054600192906134cc908490615a01565b90915550506000828152610161602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b8061353157505050565b600061353d8285615940565b6101cb549091506000906127109061356590600160801b90046001600160801b031684615940565b61356f9190615975565b60405163085b49ad60e41b815230600482015260006024820181905291925081906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906385b49ad0906044016040805180830381865afa1580156135e0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136049190615d28565b909250905060006127106136188387615940565b6136229190615975565b90506001600160a01b03871673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1415613698578434146136985760405162461bcd60e51b815260206004820152601660248201527f6d7573742073656e6420746f74616c2070726963652e000000000000000000006044820152606401610ebd565b6136b7876136a4613084565b6101c9546001600160a01b031687614277565b6136ca876136c3613084565b8584614277565b611146876136d6613084565b6101c6546001600160a01b0316846136ee898b615a01565b6136f89190615a01565b614277565b60008281526101d060205260408120600201805483929061371f9084906158ed565b909155505060008281526101d160205260408120429161373d613084565b6001600160a01b03166001600160a01b0316815260200190815260200160002081905550806101d5600061376f613084565b6001600160a01b03166001600160a01b03168152602001908152602001600020600082825461379e91906158ed565b90915550506101c55460005b828110156137db576137bc85836142c1565b6137c76001836158ed565b91506137d46001826158ed565b90506137aa565b506101c555505050565b600061208e8383614412565b816001600160a01b0316836001600160a01b031614156138535760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610ebd565b6001600160a01b0383811660008181526101646020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b60606001600160a01b0383163b6139405760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e747261637400000000000000000000000000000000000000000000000000006064820152608401610ebd565b600080846001600160a01b03168460405161395b9190615d56565b600060405180830381855af49150503d8060008114613996576040519150601f19603f3d011682016040523d82523d6000602084013e61399b565b606091505b50915091506139c38282604051806060016040528060278152602001615e136027913961443c565b95945050505050565b6000808281805b8751811015613a8e576139e7600283615940565b915060008882815181106139fd576139fd615989565b60200260200101519050808411613a3f576040805160208101869052908101829052606001604051602081830303815290604052805190602001209350613a7b565b6040805160208101839052908101859052606001604051602081830303815290604052805190602001209350600183613a7891906158ed565b92505b5080613a86816159e6565b9150506139d3565b50941495939450505050565b613aa5848484613276565b613ab184848484614475565b6120b05760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608401610ebd565b606081613b475750506040805180820190915260018152600360fc1b602082015290565b8160005b8115613b715780613b5b816159e6565b9150613b6a9050600a83615975565b9150613b4b565b60008167ffffffffffffffff811115613b8c57613b8c61542b565b6040519080825280601f01601f191660200182016040528015613bb6576020820181803683370190505b5090505b841561326e57613bcb600183615a01565b9150613bd8600a86615d72565b613be39060306158ed565b60f81b818381518110613bf857613bf8615989565b60200101906001600160f81b031916908160001a905350613c1a600a86615975565b9450613bba565b6000610dd8825490565b600054610100900460ff16613c965760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610ebd565b613c9e6145d0565b565b600054610100900460ff16613d0b5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610ebd565b613d13614641565b611957816146ac565b600054610100900460ff16613d875760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610ebd565b6117ab828261477f565b6117ab8282613438565b60006001600160e01b031982166380ac58cd60e01b1480613dcc57506001600160e01b03198216635b5e139f60e01b145b80610dd85750610dd882614813565b3360009081526065602052604081205460ff1615613e00575060131936013560601c90565b503390565b60606000613e14836002615940565b613e1f9060026158ed565b67ffffffffffffffff811115613e3757613e3761542b565b6040519080825280601f01601f191660200182016040528015613e61576020820181803683370190505b509050600360fc1b81600081518110613e7c57613e7c615989565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110613eab57613eab615989565b60200101906001600160f81b031916908160001a9053506000613ecf846002615940565b613eda9060016158ed565b90505b6001811115613f5f577f303132333435363738396162636465660000000000000000000000000000000085600f1660108110613f1b57613f1b615989565b1a60f81b828281518110613f3157613f31615989565b60200101906001600160f81b031916908160001a90535060049490941c93613f5881615a18565b9050613edd565b50831561208e5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610ebd565b613fb9838383614838565b600080527fde23fa6c6392e300b5ced791de0faa0b28226983a4ab1c05a1ba79ef4d0a13126020527f70e64e82d0337f3fa9071fdb3266f859725ed1fc29697b2e6e986b76cffbfb085460ff1615801561401b57506001600160a01b03831615155b801561402f57506001600160a01b03821615155b1561139d576001600160a01b03831660009081527fde23fa6c6392e300b5ced791de0faa0b28226983a4ab1c05a1ba79ef4d0a1312602052604090205460ff16806140b157506001600160a01b03821660009081527fde23fa6c6392e300b5ced791de0faa0b28226983a4ab1c05a1ba79ef4d0a1312602052604090205460ff165b61139d5760405162461bcd60e51b815260206004820152602360248201527f7265737472696374656420746f205452414e534645525f524f4c4520686f6c6460448201526265727360e81b6064820152608401610ebd565b600082815260fb602090815260408083206001600160a01b038516845290915290205460ff166117ab57600082815260fb602090815260408083206001600160a01b03851684529091529020805460ff19166001179055614168613084565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b600061208e836001600160a01b0384166148f2565b600082815260fb602090815260408083206001600160a01b038516845290915290205460ff16156117ab57600082815260fb602090815260408083206001600160a01b03851684529091529020805460ff1916905561421e613084565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b600061208e836001600160a01b038416614941565b80614281576120b0565b6001600160a01b03841673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee14156142b5576142b08282614a34565b6120b0565b6120b084848484614ad7565b6001600160a01b0382166143175760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610ebd565b600081815261016160205260409020546001600160a01b03161561437d5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610ebd565b61438960008383613fae565b6001600160a01b0382166000908152610162602052604081208054600192906143b39084906158ed565b90915550506000818152610161602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b600082600001828154811061442957614429615989565b9060005260206000200154905092915050565b6060831561444b57508161208e565b82511561445b5782518084602001fd5b8160405162461bcd60e51b8152600401610ebd9190615068565b60006001600160a01b0384163b156145c557836001600160a01b031663150b7a0261449e613084565b8786866040518563ffffffff1660e01b81526004016144c09493929190615d86565b6020604051808303816000875af19250505080156144fb575060408051601f3d908101601f191682019092526144f891810190615dc2565b60015b6145ab573d808015614529576040519150601f19603f3d011682016040523d82523d6000602084013e61452e565b606091505b5080516145a35760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608401610ebd565b805181602001fd5b6001600160e01b031916630a85bd0160e11b14905061326e565b506001949350505050565b600054610100900460ff1661463b5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610ebd565b60018055565b600054610100900460ff16613c9e5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610ebd565b600054610100900460ff166147175760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610ebd565b60005b81518110156117ab5760016065600084848151811061473b5761473b615989565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff191691151591909117905580614777816159e6565b91505061471a565b600054610100900460ff166147ea5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610ebd565b81516147fe9061015f906020850190614ea7565b50805161139d90610160906020840190614ea7565b60006001600160e01b03198216635a05180f60e01b1480610dd85750610dd882614c51565b6001600160a01b03831661489557614890816101938054600083815261019460205260408120829055600182018355919091527ffc8af01f449989052b52093a58fc9f42d0b11f0c6dd5dca0463dab62346ccc680155565b6148b8565b816001600160a01b0316836001600160a01b0316146148b8576148b88382614c86565b6001600160a01b0382166148cf5761139d81614d28565b826001600160a01b0316826001600160a01b03161461139d5761139d8282614ddd565b600081815260018301602052604081205461493957508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610dd8565b506000610dd8565b60008181526001830160205260408120548015614a2a576000614965600183615a01565b855490915060009061497990600190615a01565b90508181146149de57600086600001828154811061499957614999615989565b90600052602060002001549050808760000184815481106149bc576149bc615989565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806149ef576149ef615ddf565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610dd8565b6000915050610dd8565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114614a81576040519150601f19603f3d011682016040523d82523d6000602084013e614a86565b606091505b505090508061139d5760405162461bcd60e51b815260206004820152601c60248201527f6e617469766520746f6b656e207472616e73666572206661696c6564000000006044820152606401610ebd565b816001600160a01b0316836001600160a01b03161415614af6576120b0565b60006001600160a01b0384163014614b88576040516323b872dd60e01b81526001600160a01b0385811660048301528481166024830152604482018490528616906323b872dd906064016020604051808303816000875af1158015614b5f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614b839190615df5565b614bfb565b60405163a9059cbb60e01b81526001600160a01b0384811660048301526024820184905286169063a9059cbb906044016020604051808303816000875af1158015614bd7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614bfb9190615df5565b905080614c4a5760405162461bcd60e51b815260206004820152601960248201527f63757272656e6379207472616e73666572206661696c65642e000000000000006044820152606401610ebd565b5050505050565b60006001600160e01b03198216637965db0b60e01b1480610dd857506301ffc9a760e01b6001600160e01b0319831614610dd8565b60006001614c9384611d40565b614c9d9190615a01565b60008381526101926020526040902054909150808214614cf3576001600160a01b038416600090815261019160209081526040808320858452825280832054848452818420819055835261019290915290208190555b506000918252610192602090815260408084208490556001600160a01b03909416835261019181528383209183525290812055565b61019354600090614d3b90600190615a01565b600083815261019460205260408120546101938054939450909284908110614d6557614d65615989565b90600052602060002001549050806101938381548110614d8757614d87615989565b60009182526020808320909101929092558281526101949091526040808220849055858252812055610193805480614dc157614dc1615ddf565b6001900381819060005260206000200160009055905550505050565b6000614de883611d40565b6001600160a01b0390931660009081526101916020908152604080832086845282528083208590559382526101929052919091209190915550565b828054614e2f90615905565b90600052602060002090601f016020900481019282614e515760008555614e97565b82601f10614e6a5782800160ff19823516178555614e97565b82800160010185558215614e97579182015b82811115614e97578235825591602001919060010190614e7c565b50614ea3929150614f51565b5090565b828054614eb390615905565b90600052602060002090601f016020900481019282614ed55760008555614e97565b82601f10614eee57805160ff1916838001178555614e97565b82800160010185558215614e97579182015b82811115614e97578251825591602001919060010190614f00565b508054614f2790615905565b6000825580601f10614f37575050565b601f01602090049060005260206000209081019061195791905b5b80821115614ea35760008155600101614f52565b6001600160e01b03198116811461195757600080fd5b600060208284031215614f8e57600080fd5b813561208e81614f66565b6001600160a01b038116811461195757600080fd5b8035614fb981614f99565b919050565b600080600080600060a08688031215614fd657600080fd5b853594506020860135614fe881614f99565b9350604086013592506060860135614fff81614f99565b949793965091946080013592915050565b60005b8381101561502b578181015183820152602001615013565b838111156120b05750506000910152565b60008151808452615054816020860160208601615010565b601f01601f19169290920160200192915050565b60208152600061208e602083018461503c565b60006020828403121561508d57600080fd5b5035919050565b600080604083850312156150a757600080fd5b82356150b281614f99565b946020939093013593505050565b6000602082840312156150d257600080fd5b813561208e81614f99565b6000806000606084860312156150f257600080fd5b83356150fd81614f99565b9250602084013561510d81614f99565b929592945050506040919091013590565b6000806040838503121561513157600080fd5b50508035926020909101359150565b6000806040838503121561515357600080fd5b82359150602083013561516581614f99565b809150509250929050565b60008083601f84011261518257600080fd5b50813567ffffffffffffffff81111561519a57600080fd5b6020830191508360208260051b850101111561201357600080fd5b600080600080600080600060c0888a0312156151d057600080fd5b87356151db81614f99565b96506020880135955060408801356151f281614f99565b945060608801359350608088013567ffffffffffffffff81111561521557600080fd5b6152218a828b01615170565b989b979a5095989497959660a090950135949350505050565b60008083601f84011261524c57600080fd5b50813567ffffffffffffffff81111561526457600080fd5b60208301915083602082850101111561201357600080fd5b6000806020838503121561528f57600080fd5b823567ffffffffffffffff8111156152a657600080fd5b6152b28582860161523a565b90969095509350505050565b6000806000606084860312156152d357600080fd5b83359250602084013561510d81614f99565b801515811461195757600080fd5b6000806040838503121561530657600080fd5b823561531181614f99565b91506020830135615165816152e5565b6000806020838503121561533457600080fd5b823567ffffffffffffffff81111561534b57600080fd5b6152b285828601615170565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b828110156153ac57603f1988860301845261539a85835161503c565b9450928501929085019060010161537e565b5092979650505050505050565b60008060008060008060a087890312156153d257600080fd5b8635955060208701356153e481614f99565b945060408701359350606087013567ffffffffffffffff81111561540757600080fd5b61541389828a01615170565b979a9699509497949695608090950135949350505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561546a5761546a61542b565b604052919050565b600082601f83011261548357600080fd5b813567ffffffffffffffff81111561549d5761549d61542b565b6154b0601f8201601f1916602001615441565b8181528460208386010111156154c557600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080608085870312156154f857600080fd5b843561550381614f99565b9350602085013561551381614f99565b925060408501359150606085013567ffffffffffffffff81111561553657600080fd5b61554287828801615472565b91505092959194509250565b60008060006040848603121561556357600080fd5b83359250602084013567ffffffffffffffff81111561558157600080fd5b61558d8682870161523a565b9497909650939450505050565b6000806000806000606086880312156155b257600080fd5b85359450602086013567ffffffffffffffff808211156155d157600080fd5b6155dd89838a0161523a565b909650945060408801359150808211156155f657600080fd5b506156038882890161523a565b969995985093965092949392505050565b600082601f83011261562557600080fd5b8135602067ffffffffffffffff8211156156415761564161542b565b8160051b615650828201615441565b928352848101820192828101908785111561566a57600080fd5b83870192505b8483101561569257823561568381614f99565b82529183019190830190615670565b979650505050505050565b80356001600160801b0381168114614fb957600080fd5b6000806000806000806000806000806101408b8d0312156156d457600080fd5b6156dd8b614fae565b995060208b013567ffffffffffffffff808211156156fa57600080fd5b6157068e838f01615472565b9a5060408d013591508082111561571c57600080fd5b6157288e838f01615472565b995060608d013591508082111561573e57600080fd5b61574a8e838f01615472565b985060808d013591508082111561576057600080fd5b5061576d8d828e01615614565b96505061577c60a08c01614fae565b945061578a60c08c01614fae565b935061579860e08c0161569d565b92506157a76101008c0161569d565b91506157b66101208c01614fae565b90509295989b9194979a5092959850565b6000806000604084860312156157dc57600080fd5b833567ffffffffffffffff808211156157f457600080fd5b818601915086601f83011261580857600080fd5b81358181111561581757600080fd5b8760208260081b850101111561582c57600080fd5b60209283019550935050840135615842816152e5565b809150509250925092565b60008060006040848603121561586257600080fd5b833567ffffffffffffffff8082111561587a57600080fd5b61588687838801615472565b9450602086013591508082111561589c57600080fd5b5061558d8682870161523a565b600080604083850312156158bc57600080fd5b82356158c781614f99565b9150602083013561516581614f99565b634e487b7160e01b600052601160045260246000fd5b60008219821115615900576159006158d7565b500190565b600181811c9082168061591957607f821691505b6020821081141561593a57634e487b7160e01b600052602260045260246000fd5b50919050565b600081600019048311821515161561595a5761595a6158d7565b500290565b634e487b7160e01b600052601260045260246000fd5b6000826159845761598461595f565b500490565b634e487b7160e01b600052603260045260246000fd5b6000808335601e198436030181126159b657600080fd5b83018035915067ffffffffffffffff8211156159d157600080fd5b60200191503681900382131561201357600080fd5b60006000198214156159fa576159fa6158d7565b5060010190565b600082821015615a1357615a136158d7565b500390565b600081615a2757615a276158d7565b506000190190565b8054600090600181811c9080831680615a4957607f831692505b6020808410821415615a6b57634e487b7160e01b600052602260045260246000fd5b818015615a7f5760018114615a9057615abd565b60ff19861689528489019650615abd565b60008881526020902060005b86811015615ab55781548b820152908501908301615a9c565b505084890196505b50505050505092915050565b6000615ad58284615a2f565b600360fc1b81526001019392505050565b6000615af28285615a2f565b8351615b02818360208801615010565b01949350505050565b82815260406020820152600061326e604083018461503c565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b868152856020820152608060408201526000615b6d608083018688615b24565b8281036060840152615b80818587615b24565b9998505050505050505050565b813581556020820135600182015560408201356002820155606082013560038201556080820135600482015560a0820135600582015560c082013560068201556007810160e0830135615bdf81614f99565b6001600160a01b0381166001600160a01b031983541617825550505050565b6020808252818101839052600090604080840186845b87811015615c88578135835284820135858401528382013584840152606080830135908401526080808301359084015260a0808301359084015260c0808301359084015260e080830135615c6781614f99565b6001600160a01b031690840152610100928301929190910190600101615c14565b5090979650505050505050565b82848237909101908152602001919050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351615cdf816017850160208801615010565b7f206973206d697373696e6720726f6c65200000000000000000000000000000006017918401918201528351615d1c816028840160208801615010565b01602801949350505050565b60008060408385031215615d3b57600080fd5b8251615d4681614f99565b6020939093015192949293505050565b60008251615d68818460208701615010565b9190910192915050565b600082615d8157615d8161595f565b500690565b60006001600160a01b03808716835280861660208401525083604083015260806060830152615db8608083018461503c565b9695505050505050565b600060208284031215615dd457600080fd5b815161208e81614f66565b634e487b7160e01b600052603160045260246000fd5b600060208284031215615e0757600080fd5b815161208e816152e556fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a164736f6c634300080c000a";
var w2 = (a) => a.length > 1;
var R = class extends ContractFactory {
  constructor(...e) {
    w2(e) ? super(...e) : super(M, O1, e[0]), this.contractName = "DropERC721";
  }
  deploy(e, t) {
    return super.deploy(e, t || {});
  }
  getDeployTransaction(e, t) {
    return super.getDeployTransaction(e, t || {});
  }
  attach(e) {
    return super.attach(e);
  }
  connect(e) {
    return super.connect(e);
  }
  static createInterface() {
    return new utils_exports.Interface(M);
  }
  static connect(e, t) {
    return new Contract(e, M, t);
  }
};
R.bytecode = O1, R.abi = M;
var w = [{ inputs: [], stateMutability: "nonpayable", type: "constructor" }, { inputs: [{ components: [{ internalType: "address", name: "from", type: "address" }, { internalType: "address", name: "to", type: "address" }, { internalType: "uint256", name: "value", type: "uint256" }, { internalType: "uint256", name: "gas", type: "uint256" }, { internalType: "uint256", name: "nonce", type: "uint256" }, { internalType: "bytes", name: "data", type: "bytes" }], internalType: "struct MinimalForwarder.ForwardRequest", name: "req", type: "tuple" }, { internalType: "bytes", name: "signature", type: "bytes" }], name: "execute", outputs: [{ internalType: "bool", name: "", type: "bool" }, { internalType: "bytes", name: "", type: "bytes" }], stateMutability: "payable", type: "function" }, { inputs: [{ internalType: "address", name: "from", type: "address" }], name: "getNonce", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ components: [{ internalType: "address", name: "from", type: "address" }, { internalType: "address", name: "to", type: "address" }, { internalType: "uint256", name: "value", type: "uint256" }, { internalType: "uint256", name: "gas", type: "uint256" }, { internalType: "uint256", name: "nonce", type: "uint256" }, { internalType: "bytes", name: "data", type: "bytes" }], internalType: "struct MinimalForwarder.ForwardRequest", name: "req", type: "tuple" }, { internalType: "bytes", name: "signature", type: "bytes" }], name: "verify", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "view", type: "function" }];
var V1 = "0x61014060405234801561001157600080fd5b50604080518082018252601081526f26b4b734b6b0b62337b93bb0b93232b960811b602080830191825283518085019094526005845264302e302e3160d81b908401528151902060e08190527fae209a0b48f21c054280f2455d32cf309387644879d9acbd8ffc1991638118856101008190524660a0529192917f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f6100fb8184846040805160208101859052908101839052606081018290524660808201523060a082015260009060c0016040516020818303038152906040528051906020012090509392505050565b6080523060c052610120525061011092505050565b60805160a05160c05160e0516101005161012051610b4061015f60003960006104f701526000610546015260006105210152600061047a015260006104a4015260006104ce0152610b406000f3fe6080604052600436106100345760003560e01c80632d0335ab1461003957806347153f8214610082578063bf5d3bdb146100a3575b600080fd5b34801561004557600080fd5b5061006f610054366004610901565b6001600160a01b031660009081526020819052604090205490565b6040519081526020015b60405180910390f35b610095610090366004610931565b6100d3565b604051610079929190610a00565b3480156100af57600080fd5b506100c36100be366004610931565b610277565b6040519015158152602001610079565b600060606100e2858585610277565b6101595760405162461bcd60e51b815260206004820152603260248201527f4d696e696d616c466f727761726465723a207369676e617475726520646f657360448201527f206e6f74206d617463682072657175657374000000000000000000000000000060648201526084015b60405180910390fd5b61016860808601356001610a3c565b6000806101786020890189610901565b6001600160a01b03166001600160a01b03168152602001908152602001600020819055506000808660200160208101906101b29190610901565b6001600160a01b0316606088013560408901356101d260a08b018b610a62565b6101df60208d018d610901565b6040516020016101f193929190610aa9565b60408051601f198184030181529082905261020b91610acf565b600060405180830381858888f193505050503d8060008114610249576040519150601f19603f3d011682016040523d82523d6000602084013e61024e565b606091505b509092509050610263603f6060890135610aeb565b5a1161026b57fe5b90969095509350505050565b60008061038a84848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061038492507fdd8f4b70b0f4393e889bd39128a30628a78b61816a9eb8199759e7a349657e4891506102e7905060208a018a610901565b6102f760408b0160208c01610901565b60408b013560608c013560808d013561031360a08f018f610a62565b604051610321929190610b0d565b6040805191829003822060208301989098526001600160a01b0396871690820152949093166060850152608084019190915260a083015260c082015260e081019190915261010001604051602081830303815290604052805190602001206103f5565b90610449565b905060808501356000806103a16020890189610901565b6001600160a01b03166001600160a01b03168152602001908152602001600020541480156103ec57506103d76020860186610901565b6001600160a01b0316816001600160a01b0316145b95945050505050565b600061044361040261046d565b8360405161190160f01b6020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b92915050565b60008060006104588585610594565b9150915061046581610604565b509392505050565b6000306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161480156104c657507f000000000000000000000000000000000000000000000000000000000000000046145b156104f057507f000000000000000000000000000000000000000000000000000000000000000090565b50604080517f00000000000000000000000000000000000000000000000000000000000000006020808301919091527f0000000000000000000000000000000000000000000000000000000000000000828401527f000000000000000000000000000000000000000000000000000000000000000060608301524660808301523060a0808401919091528351808403909101815260c0909201909252805191012090565b6000808251604114156105cb5760208301516040840151606085015160001a6105bf878285856107c2565b945094505050506105fd565b8251604014156105f557602083015160408401516105ea8683836108af565b9350935050506105fd565b506000905060025b9250929050565b600081600481111561061857610618610b1d565b14156106215750565b600181600481111561063557610635610b1d565b14156106835760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610150565b600281600481111561069757610697610b1d565b14156106e55760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610150565b60038160048111156106f9576106f9610b1d565b14156107525760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610150565b600481600481111561076657610766610b1d565b14156107bf5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b6064820152608401610150565b50565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156107f957506000905060036108a6565b8460ff16601b1415801561081157508460ff16601c14155b1561082257506000905060046108a6565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015610876573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661089f576000600192509250506108a6565b9150600090505b94509492505050565b6000807f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8316816108e560ff86901c601b610a3c565b90506108f3878288856107c2565b935093505050935093915050565b60006020828403121561091357600080fd5b81356001600160a01b038116811461092a57600080fd5b9392505050565b60008060006040848603121561094657600080fd5b833567ffffffffffffffff8082111561095e57600080fd5b9085019060c0828803121561097257600080fd5b9093506020850135908082111561098857600080fd5b818601915086601f83011261099c57600080fd5b8135818111156109ab57600080fd5b8760208285010111156109bd57600080fd5b6020830194508093505050509250925092565b60005b838110156109eb5781810151838201526020016109d3565b838111156109fa576000848401525b50505050565b82151581526040602082015260008251806040840152610a278160608501602087016109d0565b601f01601f1916919091016060019392505050565b60008219821115610a5d57634e487b7160e01b600052601160045260246000fd5b500190565b6000808335601e19843603018112610a7957600080fd5b83018035915067ffffffffffffffff821115610a9457600080fd5b6020019150368190038213156105fd57600080fd5b8284823760609190911b6bffffffffffffffffffffffff19169101908152601401919050565b60008251610ae18184602087016109d0565b9190910192915050565b600082610b0857634e487b7160e01b600052601260045260246000fd5b500490565b8183823760009101908152919050565b634e487b7160e01b600052602160045260246000fdfea164736f6c634300080c000a";
var k2 = (a) => a.length > 1;
var C = class extends ContractFactory {
  constructor(...e) {
    k2(e) ? super(...e) : super(w, V1, e[0]), this.contractName = "Forwarder";
  }
  deploy(e) {
    return super.deploy(e || {});
  }
  getDeployTransaction(e) {
    return super.getDeployTransaction(e || {});
  }
  attach(e) {
    return super.attach(e);
  }
  connect(e) {
    return super.connect(e);
  }
  static createInterface() {
    return new utils_exports.Interface(w);
  }
  static connect(e, t) {
    return new Contract(e, w, t);
  }
};
C.bytecode = V1, C.abi = w;
var Y6 = [{ anonymous: false, inputs: [{ indexed: true, internalType: "address", name: "account", type: "address" }, { indexed: true, internalType: "address", name: "operator", type: "address" }, { indexed: false, internalType: "bool", name: "approved", type: "bool" }], name: "ApprovalForAll", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "uint256", name: "tokenId", type: "uint256" }, { components: [{ internalType: "uint256", name: "startTimestamp", type: "uint256" }, { internalType: "uint256", name: "maxClaimableSupply", type: "uint256" }, { internalType: "uint256", name: "supplyClaimed", type: "uint256" }, { internalType: "uint256", name: "quantityLimitPerTransaction", type: "uint256" }, { internalType: "uint256", name: "waitTimeInSecondsBetweenClaims", type: "uint256" }, { internalType: "bytes32", name: "merkleRoot", type: "bytes32" }, { internalType: "uint256", name: "pricePerToken", type: "uint256" }, { internalType: "address", name: "currency", type: "address" }], indexed: false, internalType: "struct IDropClaimCondition.ClaimCondition[]", name: "claimConditions", type: "tuple[]" }], name: "ClaimConditionsUpdated", type: "event" }, { anonymous: false, inputs: [{ indexed: false, internalType: "address", name: "newRoyaltyRecipient", type: "address" }, { indexed: false, internalType: "uint256", name: "newRoyaltyBps", type: "uint256" }], name: "DefaultRoyalty", type: "event" }, { anonymous: false, inputs: [{ indexed: false, internalType: "uint256", name: "tokenId", type: "uint256" }, { indexed: false, internalType: "uint256", name: "maxTotalSupply", type: "uint256" }], name: "MaxTotalSupplyUpdated", type: "event" }, { anonymous: false, inputs: [{ indexed: false, internalType: "uint256", name: "tokenId", type: "uint256" }, { indexed: false, internalType: "uint256", name: "count", type: "uint256" }], name: "MaxWalletClaimCountUpdated", type: "event" }, { anonymous: false, inputs: [{ indexed: false, internalType: "address", name: "prevOwner", type: "address" }, { indexed: false, internalType: "address", name: "newOwner", type: "address" }], name: "OwnerUpdated", type: "event" }, { anonymous: false, inputs: [{ indexed: false, internalType: "address", name: "platformFeeRecipient", type: "address" }, { indexed: false, internalType: "uint256", name: "platformFeeBps", type: "uint256" }], name: "PlatformFeeInfoUpdated", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "address", name: "recipient", type: "address" }], name: "PrimarySaleRecipientUpdated", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "uint256", name: "tokenId", type: "uint256" }, { indexed: false, internalType: "address", name: "royaltyRecipient", type: "address" }, { indexed: false, internalType: "uint256", name: "royaltyBps", type: "uint256" }], name: "RoyaltyForToken", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "uint256", name: "claimConditionIndex", type: "uint256" }, { indexed: true, internalType: "uint256", name: "tokenId", type: "uint256" }, { indexed: true, internalType: "address", name: "claimer", type: "address" }, { indexed: false, internalType: "address", name: "receiver", type: "address" }, { indexed: false, internalType: "uint256", name: "quantityClaimed", type: "uint256" }], name: "TokensClaimed", type: "event" }, { anonymous: false, inputs: [{ indexed: false, internalType: "uint256", name: "startTokenId", type: "uint256" }, { indexed: false, internalType: "uint256", name: "endTokenId", type: "uint256" }, { indexed: false, internalType: "string", name: "baseURI", type: "string" }], name: "TokensLazyMinted", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "address", name: "operator", type: "address" }, { indexed: true, internalType: "address", name: "from", type: "address" }, { indexed: true, internalType: "address", name: "to", type: "address" }, { indexed: false, internalType: "uint256[]", name: "ids", type: "uint256[]" }, { indexed: false, internalType: "uint256[]", name: "values", type: "uint256[]" }], name: "TransferBatch", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "address", name: "operator", type: "address" }, { indexed: true, internalType: "address", name: "from", type: "address" }, { indexed: true, internalType: "address", name: "to", type: "address" }, { indexed: false, internalType: "uint256", name: "id", type: "uint256" }, { indexed: false, internalType: "uint256", name: "value", type: "uint256" }], name: "TransferSingle", type: "event" }, { anonymous: false, inputs: [{ indexed: false, internalType: "string", name: "value", type: "string" }, { indexed: true, internalType: "uint256", name: "id", type: "uint256" }], name: "URI", type: "event" }, { anonymous: false, inputs: [{ indexed: false, internalType: "uint256", name: "tokenId", type: "uint256" }, { indexed: true, internalType: "address", name: "wallet", type: "address" }, { indexed: false, internalType: "uint256", name: "count", type: "uint256" }], name: "WalletClaimCountUpdated", type: "event" }, { inputs: [{ internalType: "address", name: "account", type: "address" }, { internalType: "uint256", name: "id", type: "uint256" }], name: "balanceOf", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address[]", name: "accounts", type: "address[]" }, { internalType: "uint256[]", name: "ids", type: "uint256[]" }], name: "balanceOfBatch", outputs: [{ internalType: "uint256[]", name: "", type: "uint256[]" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "_receiver", type: "address" }, { internalType: "uint256", name: "_tokenId", type: "uint256" }, { internalType: "uint256", name: "_quantity", type: "uint256" }, { internalType: "address", name: "_currency", type: "address" }, { internalType: "uint256", name: "_pricePerToken", type: "uint256" }, { internalType: "bytes32[]", name: "_proofs", type: "bytes32[]" }, { internalType: "uint256", name: "_proofMaxQuantityPerTransaction", type: "uint256" }], name: "claim", outputs: [], stateMutability: "payable", type: "function" }, { inputs: [], name: "contractType", outputs: [{ internalType: "bytes32", name: "", type: "bytes32" }], stateMutability: "pure", type: "function" }, { inputs: [], name: "contractURI", outputs: [{ internalType: "string", name: "", type: "string" }], stateMutability: "view", type: "function" }, { inputs: [], name: "contractVersion", outputs: [{ internalType: "uint8", name: "", type: "uint8" }], stateMutability: "pure", type: "function" }, { inputs: [], name: "getDefaultRoyaltyInfo", outputs: [{ internalType: "address", name: "", type: "address" }, { internalType: "uint16", name: "", type: "uint16" }], stateMutability: "view", type: "function" }, { inputs: [], name: "getPlatformFeeInfo", outputs: [{ internalType: "address", name: "platformFeeRecipient", type: "address" }, { internalType: "uint16", name: "platformFeeBps", type: "uint16" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "uint256", name: "tokenId", type: "uint256" }], name: "getRoyaltyInfoForToken", outputs: [{ internalType: "address", name: "", type: "address" }, { internalType: "uint16", name: "", type: "uint16" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "account", type: "address" }, { internalType: "address", name: "operator", type: "address" }], name: "isApprovedForAll", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "uint256", name: "_amount", type: "uint256" }, { internalType: "string", name: "_baseURIForTokens", type: "string" }], name: "lazyMint", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [], name: "owner", outputs: [{ internalType: "address", name: "", type: "address" }], stateMutability: "view", type: "function" }, { inputs: [], name: "primarySaleRecipient", outputs: [{ internalType: "address", name: "", type: "address" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "uint256", name: "tokenId", type: "uint256" }, { internalType: "uint256", name: "salePrice", type: "uint256" }], name: "royaltyInfo", outputs: [{ internalType: "address", name: "receiver", type: "address" }, { internalType: "uint256", name: "royaltyAmount", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "from", type: "address" }, { internalType: "address", name: "to", type: "address" }, { internalType: "uint256[]", name: "ids", type: "uint256[]" }, { internalType: "uint256[]", name: "amounts", type: "uint256[]" }, { internalType: "bytes", name: "data", type: "bytes" }], name: "safeBatchTransferFrom", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "from", type: "address" }, { internalType: "address", name: "to", type: "address" }, { internalType: "uint256", name: "id", type: "uint256" }, { internalType: "uint256", name: "amount", type: "uint256" }, { internalType: "bytes", name: "data", type: "bytes" }], name: "safeTransferFrom", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "operator", type: "address" }, { internalType: "bool", name: "approved", type: "bool" }], name: "setApprovalForAll", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "uint256", name: "_tokenId", type: "uint256" }, { components: [{ internalType: "uint256", name: "startTimestamp", type: "uint256" }, { internalType: "uint256", name: "maxClaimableSupply", type: "uint256" }, { internalType: "uint256", name: "supplyClaimed", type: "uint256" }, { internalType: "uint256", name: "quantityLimitPerTransaction", type: "uint256" }, { internalType: "uint256", name: "waitTimeInSecondsBetweenClaims", type: "uint256" }, { internalType: "bytes32", name: "merkleRoot", type: "bytes32" }, { internalType: "uint256", name: "pricePerToken", type: "uint256" }, { internalType: "address", name: "currency", type: "address" }], internalType: "struct IDropClaimCondition.ClaimCondition[]", name: "_conditions", type: "tuple[]" }, { internalType: "bool", name: "_resetLimitRestriction", type: "bool" }], name: "setClaimConditions", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "string", name: "_uri", type: "string" }], name: "setContractURI", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "_royaltyRecipient", type: "address" }, { internalType: "uint256", name: "_royaltyBps", type: "uint256" }], name: "setDefaultRoyaltyInfo", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "_newOwner", type: "address" }], name: "setOwner", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "_platformFeeRecipient", type: "address" }, { internalType: "uint256", name: "_platformFeeBps", type: "uint256" }], name: "setPlatformFeeInfo", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "_saleRecipient", type: "address" }], name: "setPrimarySaleRecipient", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "uint256", name: "tokenId", type: "uint256" }, { internalType: "address", name: "recipient", type: "address" }, { internalType: "uint256", name: "bps", type: "uint256" }], name: "setRoyaltyInfoForToken", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "bytes4", name: "interfaceId", type: "bytes4" }], name: "supportsInterface", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "view", type: "function" }];
var X6 = class {
  static createInterface() {
    return new utils_exports.Interface(Y6);
  }
  static connect(e, t) {
    return new Contract(e, Y6, t);
  }
};
X6.abi = Y6;
var K6 = [{ anonymous: false, inputs: [{ indexed: true, internalType: "address", name: "owner", type: "address" }, { indexed: true, internalType: "address", name: "spender", type: "address" }, { indexed: false, internalType: "uint256", name: "value", type: "uint256" }], name: "Approval", type: "event" }, { anonymous: false, inputs: [{ components: [{ internalType: "uint256", name: "startTimestamp", type: "uint256" }, { internalType: "uint256", name: "maxClaimableSupply", type: "uint256" }, { internalType: "uint256", name: "supplyClaimed", type: "uint256" }, { internalType: "uint256", name: "quantityLimitPerTransaction", type: "uint256" }, { internalType: "uint256", name: "waitTimeInSecondsBetweenClaims", type: "uint256" }, { internalType: "bytes32", name: "merkleRoot", type: "bytes32" }, { internalType: "uint256", name: "pricePerToken", type: "uint256" }, { internalType: "address", name: "currency", type: "address" }], indexed: false, internalType: "struct IDropClaimCondition.ClaimCondition[]", name: "claimConditions", type: "tuple[]" }], name: "ClaimConditionsUpdated", type: "event" }, { anonymous: false, inputs: [{ indexed: false, internalType: "uint256", name: "maxTotalSupply", type: "uint256" }], name: "MaxTotalSupplyUpdated", type: "event" }, { anonymous: false, inputs: [{ indexed: false, internalType: "uint256", name: "count", type: "uint256" }], name: "MaxWalletClaimCountUpdated", type: "event" }, { anonymous: false, inputs: [{ indexed: false, internalType: "address", name: "platformFeeRecipient", type: "address" }, { indexed: false, internalType: "uint256", name: "platformFeeBps", type: "uint256" }], name: "PlatformFeeInfoUpdated", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "address", name: "recipient", type: "address" }], name: "PrimarySaleRecipientUpdated", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "uint256", name: "claimConditionIndex", type: "uint256" }, { indexed: true, internalType: "address", name: "claimer", type: "address" }, { indexed: true, internalType: "address", name: "receiver", type: "address" }, { indexed: false, internalType: "uint256", name: "quantityClaimed", type: "uint256" }], name: "TokensClaimed", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "address", name: "from", type: "address" }, { indexed: true, internalType: "address", name: "to", type: "address" }, { indexed: false, internalType: "uint256", name: "value", type: "uint256" }], name: "Transfer", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "address", name: "wallet", type: "address" }, { indexed: false, internalType: "uint256", name: "count", type: "uint256" }], name: "WalletClaimCountUpdated", type: "event" }, { inputs: [{ internalType: "address", name: "owner", type: "address" }, { internalType: "address", name: "spender", type: "address" }], name: "allowance", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "spender", type: "address" }, { internalType: "uint256", name: "amount", type: "uint256" }], name: "approve", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "account", type: "address" }], name: "balanceOf", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "_receiver", type: "address" }, { internalType: "uint256", name: "_quantity", type: "uint256" }, { internalType: "address", name: "_currency", type: "address" }, { internalType: "uint256", name: "_pricePerToken", type: "uint256" }, { internalType: "bytes32[]", name: "_proofs", type: "bytes32[]" }, { internalType: "uint256", name: "_proofMaxQuantityPerTransaction", type: "uint256" }], name: "claim", outputs: [], stateMutability: "payable", type: "function" }, { inputs: [], name: "contractType", outputs: [{ internalType: "bytes32", name: "", type: "bytes32" }], stateMutability: "pure", type: "function" }, { inputs: [], name: "contractURI", outputs: [{ internalType: "string", name: "", type: "string" }], stateMutability: "view", type: "function" }, { inputs: [], name: "contractVersion", outputs: [{ internalType: "uint8", name: "", type: "uint8" }], stateMutability: "pure", type: "function" }, { inputs: [], name: "getPlatformFeeInfo", outputs: [{ internalType: "address", name: "platformFeeRecipient", type: "address" }, { internalType: "uint16", name: "platformFeeBps", type: "uint16" }], stateMutability: "view", type: "function" }, { inputs: [], name: "primarySaleRecipient", outputs: [{ internalType: "address", name: "", type: "address" }], stateMutability: "view", type: "function" }, { inputs: [{ components: [{ internalType: "uint256", name: "startTimestamp", type: "uint256" }, { internalType: "uint256", name: "maxClaimableSupply", type: "uint256" }, { internalType: "uint256", name: "supplyClaimed", type: "uint256" }, { internalType: "uint256", name: "quantityLimitPerTransaction", type: "uint256" }, { internalType: "uint256", name: "waitTimeInSecondsBetweenClaims", type: "uint256" }, { internalType: "bytes32", name: "merkleRoot", type: "bytes32" }, { internalType: "uint256", name: "pricePerToken", type: "uint256" }, { internalType: "address", name: "currency", type: "address" }], internalType: "struct IDropClaimCondition.ClaimCondition[]", name: "_phases", type: "tuple[]" }, { internalType: "bool", name: "_resetLimitRestriction", type: "bool" }], name: "setClaimConditions", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "string", name: "_uri", type: "string" }], name: "setContractURI", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "_platformFeeRecipient", type: "address" }, { internalType: "uint256", name: "_platformFeeBps", type: "uint256" }], name: "setPlatformFeeInfo", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "_saleRecipient", type: "address" }], name: "setPrimarySaleRecipient", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [], name: "totalSupply", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "to", type: "address" }, { internalType: "uint256", name: "amount", type: "uint256" }], name: "transfer", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "from", type: "address" }, { internalType: "address", name: "to", type: "address" }, { internalType: "uint256", name: "amount", type: "uint256" }], name: "transferFrom", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "nonpayable", type: "function" }];
var j6 = class {
  static createInterface() {
    return new utils_exports.Interface(K6);
  }
  static connect(e, t) {
    return new Contract(e, K6, t);
  }
};
j6.abi = K6;
var J6 = [{ anonymous: false, inputs: [{ indexed: true, internalType: "address", name: "owner", type: "address" }, { indexed: true, internalType: "address", name: "approved", type: "address" }, { indexed: true, internalType: "uint256", name: "tokenId", type: "uint256" }], name: "Approval", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "address", name: "owner", type: "address" }, { indexed: true, internalType: "address", name: "operator", type: "address" }, { indexed: false, internalType: "bool", name: "approved", type: "bool" }], name: "ApprovalForAll", type: "event" }, { anonymous: false, inputs: [{ components: [{ internalType: "uint256", name: "startTimestamp", type: "uint256" }, { internalType: "uint256", name: "maxClaimableSupply", type: "uint256" }, { internalType: "uint256", name: "supplyClaimed", type: "uint256" }, { internalType: "uint256", name: "quantityLimitPerTransaction", type: "uint256" }, { internalType: "uint256", name: "waitTimeInSecondsBetweenClaims", type: "uint256" }, { internalType: "bytes32", name: "merkleRoot", type: "bytes32" }, { internalType: "uint256", name: "pricePerToken", type: "uint256" }, { internalType: "address", name: "currency", type: "address" }], indexed: false, internalType: "struct IDropClaimCondition.ClaimCondition[]", name: "claimConditions", type: "tuple[]" }], name: "ClaimConditionsUpdated", type: "event" }, { anonymous: false, inputs: [{ indexed: false, internalType: "address", name: "newRoyaltyRecipient", type: "address" }, { indexed: false, internalType: "uint256", name: "newRoyaltyBps", type: "uint256" }], name: "DefaultRoyalty", type: "event" }, { anonymous: false, inputs: [{ indexed: false, internalType: "uint256", name: "maxTotalSupply", type: "uint256" }], name: "MaxTotalSupplyUpdated", type: "event" }, { anonymous: false, inputs: [{ indexed: false, internalType: "uint256", name: "count", type: "uint256" }], name: "MaxWalletClaimCountUpdated", type: "event" }, { anonymous: false, inputs: [{ indexed: false, internalType: "uint256", name: "endTokenId", type: "uint256" }, { indexed: false, internalType: "string", name: "revealedURI", type: "string" }], name: "NFTRevealed", type: "event" }, { anonymous: false, inputs: [{ indexed: false, internalType: "address", name: "prevOwner", type: "address" }, { indexed: false, internalType: "address", name: "newOwner", type: "address" }], name: "OwnerUpdated", type: "event" }, { anonymous: false, inputs: [{ indexed: false, internalType: "address", name: "platformFeeRecipient", type: "address" }, { indexed: false, internalType: "uint256", name: "platformFeeBps", type: "uint256" }], name: "PlatformFeeInfoUpdated", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "address", name: "recipient", type: "address" }], name: "PrimarySaleRecipientUpdated", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "uint256", name: "tokenId", type: "uint256" }, { indexed: false, internalType: "address", name: "royaltyRecipient", type: "address" }, { indexed: false, internalType: "uint256", name: "royaltyBps", type: "uint256" }], name: "RoyaltyForToken", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "uint256", name: "claimConditionIndex", type: "uint256" }, { indexed: true, internalType: "address", name: "claimer", type: "address" }, { indexed: true, internalType: "address", name: "receiver", type: "address" }, { indexed: false, internalType: "uint256", name: "startTokenId", type: "uint256" }, { indexed: false, internalType: "uint256", name: "quantityClaimed", type: "uint256" }], name: "TokensClaimed", type: "event" }, { anonymous: false, inputs: [{ indexed: false, internalType: "uint256", name: "startTokenId", type: "uint256" }, { indexed: false, internalType: "uint256", name: "endTokenId", type: "uint256" }, { indexed: false, internalType: "string", name: "baseURI", type: "string" }, { indexed: false, internalType: "bytes", name: "encryptedBaseURI", type: "bytes" }], name: "TokensLazyMinted", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "address", name: "from", type: "address" }, { indexed: true, internalType: "address", name: "to", type: "address" }, { indexed: true, internalType: "uint256", name: "tokenId", type: "uint256" }], name: "Transfer", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "address", name: "wallet", type: "address" }, { indexed: false, internalType: "uint256", name: "count", type: "uint256" }], name: "WalletClaimCountUpdated", type: "event" }, { inputs: [{ internalType: "address", name: "to", type: "address" }, { internalType: "uint256", name: "tokenId", type: "uint256" }], name: "approve", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "owner", type: "address" }], name: "balanceOf", outputs: [{ internalType: "uint256", name: "balance", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "receiver", type: "address" }, { internalType: "uint256", name: "quantity", type: "uint256" }, { internalType: "address", name: "currency", type: "address" }, { internalType: "uint256", name: "pricePerToken", type: "uint256" }, { internalType: "bytes32[]", name: "proofs", type: "bytes32[]" }, { internalType: "uint256", name: "proofMaxQuantityPerTransaction", type: "uint256" }], name: "claim", outputs: [], stateMutability: "payable", type: "function" }, { inputs: [], name: "contractType", outputs: [{ internalType: "bytes32", name: "", type: "bytes32" }], stateMutability: "pure", type: "function" }, { inputs: [], name: "contractURI", outputs: [{ internalType: "string", name: "", type: "string" }], stateMutability: "view", type: "function" }, { inputs: [], name: "contractVersion", outputs: [{ internalType: "uint8", name: "", type: "uint8" }], stateMutability: "pure", type: "function" }, { inputs: [{ internalType: "uint256", name: "tokenId", type: "uint256" }], name: "getApproved", outputs: [{ internalType: "address", name: "operator", type: "address" }], stateMutability: "view", type: "function" }, { inputs: [], name: "getDefaultRoyaltyInfo", outputs: [{ internalType: "address", name: "", type: "address" }, { internalType: "uint16", name: "", type: "uint16" }], stateMutability: "view", type: "function" }, { inputs: [], name: "getPlatformFeeInfo", outputs: [{ internalType: "address", name: "platformFeeRecipient", type: "address" }, { internalType: "uint16", name: "platformFeeBps", type: "uint16" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "uint256", name: "tokenId", type: "uint256" }], name: "getRoyaltyInfoForToken", outputs: [{ internalType: "address", name: "", type: "address" }, { internalType: "uint16", name: "", type: "uint16" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "owner", type: "address" }, { internalType: "address", name: "operator", type: "address" }], name: "isApprovedForAll", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "uint256", name: "amount", type: "uint256" }, { internalType: "string", name: "baseURIForTokens", type: "string" }, { internalType: "bytes", name: "encryptedBaseURI", type: "bytes" }], name: "lazyMint", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [], name: "owner", outputs: [{ internalType: "address", name: "", type: "address" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "uint256", name: "tokenId", type: "uint256" }], name: "ownerOf", outputs: [{ internalType: "address", name: "owner", type: "address" }], stateMutability: "view", type: "function" }, { inputs: [], name: "primarySaleRecipient", outputs: [{ internalType: "address", name: "", type: "address" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "uint256", name: "tokenId", type: "uint256" }, { internalType: "uint256", name: "salePrice", type: "uint256" }], name: "royaltyInfo", outputs: [{ internalType: "address", name: "receiver", type: "address" }, { internalType: "uint256", name: "royaltyAmount", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "from", type: "address" }, { internalType: "address", name: "to", type: "address" }, { internalType: "uint256", name: "tokenId", type: "uint256" }], name: "safeTransferFrom", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "from", type: "address" }, { internalType: "address", name: "to", type: "address" }, { internalType: "uint256", name: "tokenId", type: "uint256" }, { internalType: "bytes", name: "data", type: "bytes" }], name: "safeTransferFrom", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "operator", type: "address" }, { internalType: "bool", name: "_approved", type: "bool" }], name: "setApprovalForAll", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ components: [{ internalType: "uint256", name: "startTimestamp", type: "uint256" }, { internalType: "uint256", name: "maxClaimableSupply", type: "uint256" }, { internalType: "uint256", name: "supplyClaimed", type: "uint256" }, { internalType: "uint256", name: "quantityLimitPerTransaction", type: "uint256" }, { internalType: "uint256", name: "waitTimeInSecondsBetweenClaims", type: "uint256" }, { internalType: "bytes32", name: "merkleRoot", type: "bytes32" }, { internalType: "uint256", name: "pricePerToken", type: "uint256" }, { internalType: "address", name: "currency", type: "address" }], internalType: "struct IDropClaimCondition.ClaimCondition[]", name: "phases", type: "tuple[]" }, { internalType: "bool", name: "resetClaimEligibility", type: "bool" }], name: "setClaimConditions", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "string", name: "_uri", type: "string" }], name: "setContractURI", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "_royaltyRecipient", type: "address" }, { internalType: "uint256", name: "_royaltyBps", type: "uint256" }], name: "setDefaultRoyaltyInfo", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "_newOwner", type: "address" }], name: "setOwner", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "_platformFeeRecipient", type: "address" }, { internalType: "uint256", name: "_platformFeeBps", type: "uint256" }], name: "setPlatformFeeInfo", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "_saleRecipient", type: "address" }], name: "setPrimarySaleRecipient", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "uint256", name: "tokenId", type: "uint256" }, { internalType: "address", name: "recipient", type: "address" }, { internalType: "uint256", name: "bps", type: "uint256" }], name: "setRoyaltyInfoForToken", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "bytes4", name: "interfaceId", type: "bytes4" }], name: "supportsInterface", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "from", type: "address" }, { internalType: "address", name: "to", type: "address" }, { internalType: "uint256", name: "tokenId", type: "uint256" }], name: "transferFrom", outputs: [], stateMutability: "nonpayable", type: "function" }];
var Z6 = class {
  static createInterface() {
    return new utils_exports.Interface(J6);
  }
  static connect(e, t) {
    return new Contract(e, J6, t);
  }
};
Z6.abi = J6;
var $6 = [{ anonymous: false, inputs: [{ indexed: false, internalType: "address", name: "newRoyaltyRecipient", type: "address" }, { indexed: false, internalType: "uint256", name: "newRoyaltyBps", type: "uint256" }], name: "DefaultRoyalty", type: "event" }, { anonymous: false, inputs: [{ indexed: false, internalType: "address", name: "prevOwner", type: "address" }, { indexed: false, internalType: "address", name: "newOwner", type: "address" }], name: "OwnerUpdated", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "uint256", name: "tokenId", type: "uint256" }, { indexed: false, internalType: "address", name: "royaltyRecipient", type: "address" }, { indexed: false, internalType: "uint256", name: "royaltyBps", type: "uint256" }], name: "RoyaltyForToken", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "address", name: "wrapper", type: "address" }, { indexed: false, internalType: "address", name: "sentTo", type: "address" }, { indexed: true, internalType: "uint256", name: "tokenIdOfShares", type: "uint256" }, { indexed: false, internalType: "uint256", name: "sharesUnwrapped", type: "uint256" }, { components: [{ internalType: "address[]", name: "erc1155AssetContracts", type: "address[]" }, { internalType: "uint256[][]", name: "erc1155TokensToWrap", type: "uint256[][]" }, { internalType: "uint256[][]", name: "erc1155AmountsToWrap", type: "uint256[][]" }, { internalType: "address[]", name: "erc721AssetContracts", type: "address[]" }, { internalType: "uint256[][]", name: "erc721TokensToWrap", type: "uint256[][]" }, { internalType: "address[]", name: "erc20AssetContracts", type: "address[]" }, { internalType: "uint256[]", name: "erc20AmountsToWrap", type: "uint256[]" }], indexed: false, internalType: "struct MultiTokenTransferLib.MultiToken", name: "wrappedContents", type: "tuple" }], name: "TokensUnwrapped", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "address", name: "wrapper", type: "address" }, { indexed: true, internalType: "uint256", name: "tokenIdOfShares", type: "uint256" }, { components: [{ internalType: "address[]", name: "erc1155AssetContracts", type: "address[]" }, { internalType: "uint256[][]", name: "erc1155TokensToWrap", type: "uint256[][]" }, { internalType: "uint256[][]", name: "erc1155AmountsToWrap", type: "uint256[][]" }, { internalType: "address[]", name: "erc721AssetContracts", type: "address[]" }, { internalType: "uint256[][]", name: "erc721TokensToWrap", type: "uint256[][]" }, { internalType: "address[]", name: "erc20AssetContracts", type: "address[]" }, { internalType: "uint256[]", name: "erc20AmountsToWrap", type: "uint256[]" }], indexed: false, internalType: "struct MultiTokenTransferLib.MultiToken", name: "wrappedContents", type: "tuple" }], name: "TokensWrapped", type: "event" }, { inputs: [], name: "contractType", outputs: [{ internalType: "bytes32", name: "", type: "bytes32" }], stateMutability: "pure", type: "function" }, { inputs: [], name: "contractURI", outputs: [{ internalType: "string", name: "", type: "string" }], stateMutability: "view", type: "function" }, { inputs: [], name: "contractVersion", outputs: [{ internalType: "uint8", name: "", type: "uint8" }], stateMutability: "pure", type: "function" }, { inputs: [], name: "getDefaultRoyaltyInfo", outputs: [{ internalType: "address", name: "", type: "address" }, { internalType: "uint16", name: "", type: "uint16" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "uint256", name: "tokenId", type: "uint256" }], name: "getRoyaltyInfoForToken", outputs: [{ internalType: "address", name: "", type: "address" }, { internalType: "uint16", name: "", type: "uint16" }], stateMutability: "view", type: "function" }, { inputs: [], name: "owner", outputs: [{ internalType: "address", name: "", type: "address" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "uint256", name: "tokenId", type: "uint256" }, { internalType: "uint256", name: "salePrice", type: "uint256" }], name: "royaltyInfo", outputs: [{ internalType: "address", name: "receiver", type: "address" }, { internalType: "uint256", name: "royaltyAmount", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "string", name: "_uri", type: "string" }], name: "setContractURI", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "_royaltyRecipient", type: "address" }, { internalType: "uint256", name: "_royaltyBps", type: "uint256" }], name: "setDefaultRoyaltyInfo", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "_newOwner", type: "address" }], name: "setOwner", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "uint256", name: "tokenId", type: "uint256" }, { internalType: "address", name: "recipient", type: "address" }, { internalType: "uint256", name: "bps", type: "uint256" }], name: "setRoyaltyInfoForToken", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "bytes4", name: "interfaceId", type: "bytes4" }], name: "supportsInterface", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "uint256", name: "tokenId", type: "uint256" }, { internalType: "uint256", name: "amountToRedeem", type: "uint256" }, { internalType: "address", name: "_sendTo", type: "address" }], name: "unwrap", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ components: [{ internalType: "address[]", name: "erc1155AssetContracts", type: "address[]" }, { internalType: "uint256[][]", name: "erc1155TokensToWrap", type: "uint256[][]" }, { internalType: "uint256[][]", name: "erc1155AmountsToWrap", type: "uint256[][]" }, { internalType: "address[]", name: "erc721AssetContracts", type: "address[]" }, { internalType: "uint256[][]", name: "erc721TokensToWrap", type: "uint256[][]" }, { internalType: "address[]", name: "erc20AssetContracts", type: "address[]" }, { internalType: "uint256[]", name: "erc20AmountsToWrap", type: "uint256[]" }], internalType: "struct MultiTokenTransferLib.MultiToken", name: "wrappedContents", type: "tuple" }, { internalType: "uint256", name: "shares", type: "uint256" }, { internalType: "string", name: "uriForShares", type: "string" }], name: "wrap", outputs: [{ internalType: "uint256", name: "tokenId", type: "uint256" }], stateMutability: "payable", type: "function" }];
var e1 = class {
  static createInterface() {
    return new utils_exports.Interface($6);
  }
  static connect(e, t) {
    return new Contract(e, $6, t);
  }
};
e1.abi = $6;
var t1 = [{ anonymous: false, inputs: [{ indexed: false, internalType: "address", name: "newRoyaltyRecipient", type: "address" }, { indexed: false, internalType: "uint256", name: "newRoyaltyBps", type: "uint256" }], name: "DefaultRoyalty", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "uint256", name: "tokenId", type: "uint256" }, { indexed: false, internalType: "address", name: "royaltyRecipient", type: "address" }, { indexed: false, internalType: "uint256", name: "royaltyBps", type: "uint256" }], name: "RoyaltyForToken", type: "event" }, { inputs: [], name: "contractType", outputs: [{ internalType: "bytes32", name: "", type: "bytes32" }], stateMutability: "pure", type: "function" }, { inputs: [], name: "contractURI", outputs: [{ internalType: "string", name: "", type: "string" }], stateMutability: "view", type: "function" }, { inputs: [], name: "contractVersion", outputs: [{ internalType: "uint8", name: "", type: "uint8" }], stateMutability: "pure", type: "function" }, { inputs: [{ components: [{ internalType: "address[]", name: "erc1155AssetContracts", type: "address[]" }, { internalType: "uint256[][]", name: "erc1155TokensToWrap", type: "uint256[][]" }, { internalType: "uint256[][]", name: "erc1155AmountsToWrap", type: "uint256[][]" }], internalType: "struct IPack.PackContents", name: "contents", type: "tuple" }, { internalType: "string", name: "uri", type: "string" }, { internalType: "uint128", name: "openStartTimestamp", type: "uint128" }, { internalType: "uint128", name: "nftsPerOpen", type: "uint128" }], name: "createPack", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [], name: "getDefaultRoyaltyInfo", outputs: [{ internalType: "address", name: "", type: "address" }, { internalType: "uint16", name: "", type: "uint16" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "uint256", name: "tokenId", type: "uint256" }], name: "getRoyaltyInfoForToken", outputs: [{ internalType: "address", name: "", type: "address" }, { internalType: "uint16", name: "", type: "uint16" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "uint256", name: "packId", type: "uint256" }, { internalType: "uint256", name: "amountToOpen", type: "uint256" }], name: "openPack", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [], name: "owner", outputs: [{ internalType: "address", name: "", type: "address" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "uint256", name: "tokenId", type: "uint256" }, { internalType: "uint256", name: "salePrice", type: "uint256" }], name: "royaltyInfo", outputs: [{ internalType: "address", name: "receiver", type: "address" }, { internalType: "uint256", name: "royaltyAmount", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "string", name: "_uri", type: "string" }], name: "setContractURI", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "_royaltyRecipient", type: "address" }, { internalType: "uint256", name: "_royaltyBps", type: "uint256" }], name: "setDefaultRoyaltyInfo", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "_newOwner", type: "address" }], name: "setOwner", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "uint256", name: "tokenId", type: "uint256" }, { internalType: "address", name: "recipient", type: "address" }, { internalType: "uint256", name: "bps", type: "uint256" }], name: "setRoyaltyInfoForToken", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "bytes4", name: "interfaceId", type: "bytes4" }], name: "supportsInterface", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "view", type: "function" }];
var a1 = class {
  static createInterface() {
    return new utils_exports.Interface(t1);
  }
  static connect(e, t) {
    return new Contract(e, t1, t);
  }
};
a1.abi = t1;
var n1 = [{ inputs: [], name: "contractType", outputs: [{ internalType: "bytes32", name: "", type: "bytes32" }], stateMutability: "pure", type: "function" }, { inputs: [], name: "contractURI", outputs: [{ internalType: "string", name: "", type: "string" }], stateMutability: "view", type: "function" }, { inputs: [], name: "contractVersion", outputs: [{ internalType: "uint8", name: "", type: "uint8" }], stateMutability: "pure", type: "function" }, { inputs: [{ internalType: "string", name: "_uri", type: "string" }], name: "setContractURI", outputs: [], stateMutability: "nonpayable", type: "function" }];
var b1 = class {
  static createInterface() {
    return new utils_exports.Interface(n1);
  }
  static connect(e, t) {
    return new Contract(e, n1, t);
  }
};
b1.abi = n1;
var f1 = [{ inputs: [], name: "owner", outputs: [{ internalType: "address", name: "", type: "address" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "_newOwner", type: "address" }], name: "setOwner", outputs: [], stateMutability: "nonpayable", type: "function" }];
var i1 = class {
  static createInterface() {
    return new utils_exports.Interface(f1);
  }
  static connect(e, t) {
    return new Contract(e, f1, t);
  }
};
i1.abi = f1;
var d1 = [{ inputs: [], name: "getPlatformFeeInfo", outputs: [{ internalType: "address", name: "platformFeeRecipient", type: "address" }, { internalType: "uint16", name: "platformFeeBps", type: "uint16" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "_platformFeeRecipient", type: "address" }, { internalType: "uint256", name: "_platformFeeBps", type: "uint256" }], name: "setPlatformFeeInfo", outputs: [], stateMutability: "nonpayable", type: "function" }];
var r1 = class {
  static createInterface() {
    return new utils_exports.Interface(d1);
  }
  static connect(e, t) {
    return new Contract(e, d1, t);
  }
};
r1.abi = d1;
var s1 = [{ inputs: [], name: "primarySaleRecipient", outputs: [{ internalType: "address", name: "", type: "address" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "_saleRecipient", type: "address" }], name: "setPrimarySaleRecipient", outputs: [], stateMutability: "nonpayable", type: "function" }];
var p1 = class {
  static createInterface() {
    return new utils_exports.Interface(s1);
  }
  static connect(e, t) {
    return new Contract(e, s1, t);
  }
};
p1.abi = s1;
var y1 = [{ anonymous: false, inputs: [{ indexed: false, internalType: "address", name: "newRoyaltyRecipient", type: "address" }, { indexed: false, internalType: "uint256", name: "newRoyaltyBps", type: "uint256" }], name: "DefaultRoyalty", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "uint256", name: "tokenId", type: "uint256" }, { indexed: false, internalType: "address", name: "royaltyRecipient", type: "address" }, { indexed: false, internalType: "uint256", name: "royaltyBps", type: "uint256" }], name: "RoyaltyForToken", type: "event" }, { inputs: [], name: "getDefaultRoyaltyInfo", outputs: [{ internalType: "address", name: "", type: "address" }, { internalType: "uint16", name: "", type: "uint16" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "uint256", name: "tokenId", type: "uint256" }], name: "getRoyaltyInfoForToken", outputs: [{ internalType: "address", name: "", type: "address" }, { internalType: "uint16", name: "", type: "uint16" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "uint256", name: "tokenId", type: "uint256" }, { internalType: "uint256", name: "salePrice", type: "uint256" }], name: "royaltyInfo", outputs: [{ internalType: "address", name: "receiver", type: "address" }, { internalType: "uint256", name: "royaltyAmount", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "_royaltyRecipient", type: "address" }, { internalType: "uint256", name: "_royaltyBps", type: "uint256" }], name: "setDefaultRoyaltyInfo", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "uint256", name: "tokenId", type: "uint256" }, { internalType: "address", name: "recipient", type: "address" }, { internalType: "uint256", name: "bps", type: "uint256" }], name: "setRoyaltyInfoForToken", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "bytes4", name: "interfaceId", type: "bytes4" }], name: "supportsInterface", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "view", type: "function" }];
var u1 = class {
  static createInterface() {
    return new utils_exports.Interface(y1);
  }
  static connect(e, t) {
    return new Contract(e, y1, t);
  }
};
u1.abi = y1;
var c1 = [{ inputs: [{ internalType: "address", name: "_proxy", type: "address" }, { internalType: "uint256", name: "_type", type: "uint256" }], name: "getFeeInfo", outputs: [{ internalType: "address", name: "recipient", type: "address" }, { internalType: "uint256", name: "bps", type: "uint256" }], stateMutability: "view", type: "function" }];
var o1 = class {
  static createInterface() {
    return new utils_exports.Interface(c1);
  }
  static connect(e, t) {
    return new Contract(e, c1, t);
  }
};
o1.abi = c1;
var l1 = [{ inputs: [], name: "deposit", outputs: [], stateMutability: "payable", type: "function" }, { inputs: [{ internalType: "address", name: "to", type: "address" }, { internalType: "uint256", name: "value", type: "uint256" }], name: "transfer", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "uint256", name: "amount", type: "uint256" }], name: "withdraw", outputs: [], stateMutability: "nonpayable", type: "function" }];
var m1 = class {
  static createInterface() {
    return new utils_exports.Interface(l1);
  }
  static connect(e, t) {
    return new Contract(e, l1, t);
  }
};
m1.abi = l1;
var T1 = [{ anonymous: false, inputs: [{ indexed: false, internalType: "uint256", name: "timeBuffer", type: "uint256" }, { indexed: false, internalType: "uint256", name: "bidBufferBps", type: "uint256" }], name: "AuctionBuffersUpdated", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "uint256", name: "listingId", type: "uint256" }, { indexed: true, internalType: "address", name: "closer", type: "address" }, { indexed: true, internalType: "bool", name: "cancelled", type: "bool" }, { indexed: false, internalType: "address", name: "auctionCreator", type: "address" }, { indexed: false, internalType: "address", name: "winningBidder", type: "address" }], name: "AuctionClosed", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "uint256", name: "listingId", type: "uint256" }, { indexed: true, internalType: "address", name: "assetContract", type: "address" }, { indexed: true, internalType: "address", name: "lister", type: "address" }, { components: [{ internalType: "uint256", name: "listingId", type: "uint256" }, { internalType: "address", name: "tokenOwner", type: "address" }, { internalType: "address", name: "assetContract", type: "address" }, { internalType: "uint256", name: "tokenId", type: "uint256" }, { internalType: "uint256", name: "startTime", type: "uint256" }, { internalType: "uint256", name: "endTime", type: "uint256" }, { internalType: "uint256", name: "quantity", type: "uint256" }, { internalType: "address", name: "currency", type: "address" }, { internalType: "uint256", name: "reservePricePerToken", type: "uint256" }, { internalType: "uint256", name: "buyoutPricePerToken", type: "uint256" }, { internalType: "enum IMarketplace.TokenType", name: "tokenType", type: "uint8" }, { internalType: "enum IMarketplace.ListingType", name: "listingType", type: "uint8" }], indexed: false, internalType: "struct IMarketplace.Listing", name: "listing", type: "tuple" }], name: "ListingAdded", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "uint256", name: "listingId", type: "uint256" }, { indexed: true, internalType: "address", name: "listingCreator", type: "address" }], name: "ListingRemoved", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "uint256", name: "listingId", type: "uint256" }, { indexed: true, internalType: "address", name: "listingCreator", type: "address" }], name: "ListingUpdated", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "uint256", name: "listingId", type: "uint256" }, { indexed: true, internalType: "address", name: "offeror", type: "address" }, { indexed: true, internalType: "enum IMarketplace.ListingType", name: "listingType", type: "uint8" }, { indexed: false, internalType: "uint256", name: "quantityWanted", type: "uint256" }, { indexed: false, internalType: "uint256", name: "totalOfferAmount", type: "uint256" }, { indexed: false, internalType: "address", name: "currency", type: "address" }], name: "NewOffer", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "uint256", name: "listingId", type: "uint256" }, { indexed: true, internalType: "address", name: "assetContract", type: "address" }, { indexed: true, internalType: "address", name: "lister", type: "address" }, { indexed: false, internalType: "address", name: "buyer", type: "address" }, { indexed: false, internalType: "uint256", name: "quantityBought", type: "uint256" }, { indexed: false, internalType: "uint256", name: "totalPricePaid", type: "uint256" }], name: "NewSale", type: "event" }, { anonymous: false, inputs: [{ indexed: false, internalType: "address", name: "platformFeeRecipient", type: "address" }, { indexed: false, internalType: "uint256", name: "platformFeeBps", type: "uint256" }], name: "PlatformFeeInfoUpdated", type: "event" }, { inputs: [{ internalType: "uint256", name: "_listingId", type: "uint256" }, { internalType: "address", name: "_offeror", type: "address" }, { internalType: "address", name: "_currency", type: "address" }, { internalType: "uint256", name: "_totalPrice", type: "uint256" }], name: "acceptOffer", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "uint256", name: "_listingId", type: "uint256" }, { internalType: "address", name: "_buyFor", type: "address" }, { internalType: "uint256", name: "_quantity", type: "uint256" }, { internalType: "address", name: "_currency", type: "address" }, { internalType: "uint256", name: "_totalPrice", type: "uint256" }], name: "buy", outputs: [], stateMutability: "payable", type: "function" }, { inputs: [{ internalType: "uint256", name: "_listingId", type: "uint256" }], name: "cancelDirectListing", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "uint256", name: "_listingId", type: "uint256" }, { internalType: "address", name: "_closeFor", type: "address" }], name: "closeAuction", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [], name: "contractType", outputs: [{ internalType: "bytes32", name: "", type: "bytes32" }], stateMutability: "pure", type: "function" }, { inputs: [], name: "contractURI", outputs: [{ internalType: "string", name: "", type: "string" }], stateMutability: "view", type: "function" }, { inputs: [], name: "contractVersion", outputs: [{ internalType: "uint8", name: "", type: "uint8" }], stateMutability: "pure", type: "function" }, { inputs: [{ components: [{ internalType: "address", name: "assetContract", type: "address" }, { internalType: "uint256", name: "tokenId", type: "uint256" }, { internalType: "uint256", name: "startTime", type: "uint256" }, { internalType: "uint256", name: "secondsUntilEndTime", type: "uint256" }, { internalType: "uint256", name: "quantityToList", type: "uint256" }, { internalType: "address", name: "currencyToAccept", type: "address" }, { internalType: "uint256", name: "reservePricePerToken", type: "uint256" }, { internalType: "uint256", name: "buyoutPricePerToken", type: "uint256" }, { internalType: "enum IMarketplace.ListingType", name: "listingType", type: "uint8" }], internalType: "struct IMarketplace.ListingParameters", name: "_params", type: "tuple" }], name: "createListing", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [], name: "getPlatformFeeInfo", outputs: [{ internalType: "address", name: "platformFeeRecipient", type: "address" }, { internalType: "uint16", name: "platformFeeBps", type: "uint16" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "uint256", name: "_listingId", type: "uint256" }, { internalType: "uint256", name: "_quantityWanted", type: "uint256" }, { internalType: "address", name: "_currency", type: "address" }, { internalType: "uint256", name: "_pricePerToken", type: "uint256" }], name: "offer", outputs: [], stateMutability: "payable", type: "function" }, { inputs: [{ internalType: "string", name: "_uri", type: "string" }], name: "setContractURI", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "_platformFeeRecipient", type: "address" }, { internalType: "uint256", name: "_platformFeeBps", type: "uint256" }], name: "setPlatformFeeInfo", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "uint256", name: "_listingId", type: "uint256" }, { internalType: "uint256", name: "_quantityToList", type: "uint256" }, { internalType: "uint256", name: "_reservePricePerToken", type: "uint256" }, { internalType: "uint256", name: "_buyoutPricePerToken", type: "uint256" }, { internalType: "address", name: "_currencyToAccept", type: "address" }, { internalType: "uint256", name: "_startTime", type: "uint256" }, { internalType: "uint256", name: "_secondsUntilEndTime", type: "uint256" }], name: "updateListing", outputs: [], stateMutability: "nonpayable", type: "function" }];
var v1 = class {
  static createInterface() {
    return new utils_exports.Interface(T1);
  }
  static connect(e, t) {
    return new Contract(e, T1, t);
  }
};
v1.abi = T1;
var g1 = [{ anonymous: false, inputs: [{ indexed: true, internalType: "address", name: "account", type: "address" }, { indexed: true, internalType: "address", name: "operator", type: "address" }, { indexed: false, internalType: "bool", name: "approved", type: "bool" }], name: "ApprovalForAll", type: "event" }, { anonymous: false, inputs: [{ indexed: false, internalType: "address", name: "newRoyaltyRecipient", type: "address" }, { indexed: false, internalType: "uint256", name: "newRoyaltyBps", type: "uint256" }], name: "DefaultRoyalty", type: "event" }, { anonymous: false, inputs: [{ indexed: false, internalType: "address", name: "prevOwner", type: "address" }, { indexed: false, internalType: "address", name: "newOwner", type: "address" }], name: "OwnerUpdated", type: "event" }, { anonymous: false, inputs: [{ indexed: false, internalType: "address", name: "platformFeeRecipient", type: "address" }, { indexed: false, internalType: "uint256", name: "platformFeeBps", type: "uint256" }], name: "PlatformFeeInfoUpdated", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "address", name: "recipient", type: "address" }], name: "PrimarySaleRecipientUpdated", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "uint256", name: "tokenId", type: "uint256" }, { indexed: false, internalType: "address", name: "royaltyRecipient", type: "address" }, { indexed: false, internalType: "uint256", name: "royaltyBps", type: "uint256" }], name: "RoyaltyForToken", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "address", name: "mintedTo", type: "address" }, { indexed: true, internalType: "uint256", name: "tokenIdMinted", type: "uint256" }, { indexed: false, internalType: "string", name: "uri", type: "string" }, { indexed: false, internalType: "uint256", name: "quantityMinted", type: "uint256" }], name: "TokensMinted", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "address", name: "signer", type: "address" }, { indexed: true, internalType: "address", name: "mintedTo", type: "address" }, { indexed: true, internalType: "uint256", name: "tokenIdMinted", type: "uint256" }, { components: [{ internalType: "address", name: "to", type: "address" }, { internalType: "address", name: "royaltyRecipient", type: "address" }, { internalType: "uint256", name: "royaltyBps", type: "uint256" }, { internalType: "address", name: "primarySaleRecipient", type: "address" }, { internalType: "uint256", name: "tokenId", type: "uint256" }, { internalType: "string", name: "uri", type: "string" }, { internalType: "uint256", name: "quantity", type: "uint256" }, { internalType: "uint256", name: "pricePerToken", type: "uint256" }, { internalType: "address", name: "currency", type: "address" }, { internalType: "uint128", name: "validityStartTimestamp", type: "uint128" }, { internalType: "uint128", name: "validityEndTimestamp", type: "uint128" }, { internalType: "bytes32", name: "uid", type: "bytes32" }], indexed: false, internalType: "struct ITokenERC1155.MintRequest", name: "mintRequest", type: "tuple" }], name: "TokensMintedWithSignature", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "address", name: "operator", type: "address" }, { indexed: true, internalType: "address", name: "from", type: "address" }, { indexed: true, internalType: "address", name: "to", type: "address" }, { indexed: false, internalType: "uint256[]", name: "ids", type: "uint256[]" }, { indexed: false, internalType: "uint256[]", name: "values", type: "uint256[]" }], name: "TransferBatch", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "address", name: "operator", type: "address" }, { indexed: true, internalType: "address", name: "from", type: "address" }, { indexed: true, internalType: "address", name: "to", type: "address" }, { indexed: false, internalType: "uint256", name: "id", type: "uint256" }, { indexed: false, internalType: "uint256", name: "value", type: "uint256" }], name: "TransferSingle", type: "event" }, { anonymous: false, inputs: [{ indexed: false, internalType: "string", name: "value", type: "string" }, { indexed: true, internalType: "uint256", name: "id", type: "uint256" }], name: "URI", type: "event" }, { inputs: [{ internalType: "address", name: "account", type: "address" }, { internalType: "uint256", name: "id", type: "uint256" }], name: "balanceOf", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address[]", name: "accounts", type: "address[]" }, { internalType: "uint256[]", name: "ids", type: "uint256[]" }], name: "balanceOfBatch", outputs: [{ internalType: "uint256[]", name: "", type: "uint256[]" }], stateMutability: "view", type: "function" }, { inputs: [], name: "contractType", outputs: [{ internalType: "bytes32", name: "", type: "bytes32" }], stateMutability: "pure", type: "function" }, { inputs: [], name: "contractURI", outputs: [{ internalType: "string", name: "", type: "string" }], stateMutability: "view", type: "function" }, { inputs: [], name: "contractVersion", outputs: [{ internalType: "uint8", name: "", type: "uint8" }], stateMutability: "pure", type: "function" }, { inputs: [], name: "getDefaultRoyaltyInfo", outputs: [{ internalType: "address", name: "", type: "address" }, { internalType: "uint16", name: "", type: "uint16" }], stateMutability: "view", type: "function" }, { inputs: [], name: "getPlatformFeeInfo", outputs: [{ internalType: "address", name: "platformFeeRecipient", type: "address" }, { internalType: "uint16", name: "platformFeeBps", type: "uint16" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "uint256", name: "tokenId", type: "uint256" }], name: "getRoyaltyInfoForToken", outputs: [{ internalType: "address", name: "", type: "address" }, { internalType: "uint16", name: "", type: "uint16" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "account", type: "address" }, { internalType: "address", name: "operator", type: "address" }], name: "isApprovedForAll", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "to", type: "address" }, { internalType: "uint256", name: "tokenId", type: "uint256" }, { internalType: "string", name: "uri", type: "string" }, { internalType: "uint256", name: "amount", type: "uint256" }], name: "mintTo", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ components: [{ internalType: "address", name: "to", type: "address" }, { internalType: "address", name: "royaltyRecipient", type: "address" }, { internalType: "uint256", name: "royaltyBps", type: "uint256" }, { internalType: "address", name: "primarySaleRecipient", type: "address" }, { internalType: "uint256", name: "tokenId", type: "uint256" }, { internalType: "string", name: "uri", type: "string" }, { internalType: "uint256", name: "quantity", type: "uint256" }, { internalType: "uint256", name: "pricePerToken", type: "uint256" }, { internalType: "address", name: "currency", type: "address" }, { internalType: "uint128", name: "validityStartTimestamp", type: "uint128" }, { internalType: "uint128", name: "validityEndTimestamp", type: "uint128" }, { internalType: "bytes32", name: "uid", type: "bytes32" }], internalType: "struct ITokenERC1155.MintRequest", name: "req", type: "tuple" }, { internalType: "bytes", name: "signature", type: "bytes" }], name: "mintWithSignature", outputs: [], stateMutability: "payable", type: "function" }, { inputs: [], name: "owner", outputs: [{ internalType: "address", name: "", type: "address" }], stateMutability: "view", type: "function" }, { inputs: [], name: "primarySaleRecipient", outputs: [{ internalType: "address", name: "", type: "address" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "uint256", name: "tokenId", type: "uint256" }, { internalType: "uint256", name: "salePrice", type: "uint256" }], name: "royaltyInfo", outputs: [{ internalType: "address", name: "receiver", type: "address" }, { internalType: "uint256", name: "royaltyAmount", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "from", type: "address" }, { internalType: "address", name: "to", type: "address" }, { internalType: "uint256[]", name: "ids", type: "uint256[]" }, { internalType: "uint256[]", name: "amounts", type: "uint256[]" }, { internalType: "bytes", name: "data", type: "bytes" }], name: "safeBatchTransferFrom", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "from", type: "address" }, { internalType: "address", name: "to", type: "address" }, { internalType: "uint256", name: "id", type: "uint256" }, { internalType: "uint256", name: "amount", type: "uint256" }, { internalType: "bytes", name: "data", type: "bytes" }], name: "safeTransferFrom", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "operator", type: "address" }, { internalType: "bool", name: "approved", type: "bool" }], name: "setApprovalForAll", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "string", name: "_uri", type: "string" }], name: "setContractURI", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "_royaltyRecipient", type: "address" }, { internalType: "uint256", name: "_royaltyBps", type: "uint256" }], name: "setDefaultRoyaltyInfo", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "_newOwner", type: "address" }], name: "setOwner", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "_platformFeeRecipient", type: "address" }, { internalType: "uint256", name: "_platformFeeBps", type: "uint256" }], name: "setPlatformFeeInfo", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "_saleRecipient", type: "address" }], name: "setPrimarySaleRecipient", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "uint256", name: "tokenId", type: "uint256" }, { internalType: "address", name: "recipient", type: "address" }, { internalType: "uint256", name: "bps", type: "uint256" }], name: "setRoyaltyInfoForToken", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "bytes4", name: "interfaceId", type: "bytes4" }], name: "supportsInterface", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "view", type: "function" }, { inputs: [{ components: [{ internalType: "address", name: "to", type: "address" }, { internalType: "address", name: "royaltyRecipient", type: "address" }, { internalType: "uint256", name: "royaltyBps", type: "uint256" }, { internalType: "address", name: "primarySaleRecipient", type: "address" }, { internalType: "uint256", name: "tokenId", type: "uint256" }, { internalType: "string", name: "uri", type: "string" }, { internalType: "uint256", name: "quantity", type: "uint256" }, { internalType: "uint256", name: "pricePerToken", type: "uint256" }, { internalType: "address", name: "currency", type: "address" }, { internalType: "uint128", name: "validityStartTimestamp", type: "uint128" }, { internalType: "uint128", name: "validityEndTimestamp", type: "uint128" }, { internalType: "bytes32", name: "uid", type: "bytes32" }], internalType: "struct ITokenERC1155.MintRequest", name: "req", type: "tuple" }, { internalType: "bytes", name: "signature", type: "bytes" }], name: "verify", outputs: [{ internalType: "bool", name: "success", type: "bool" }, { internalType: "address", name: "signer", type: "address" }], stateMutability: "view", type: "function" }];
var x1 = class {
  static createInterface() {
    return new utils_exports.Interface(g1);
  }
  static connect(e, t) {
    return new Contract(e, g1, t);
  }
};
x1.abi = g1;
var I1 = [{ anonymous: false, inputs: [{ indexed: true, internalType: "address", name: "owner", type: "address" }, { indexed: true, internalType: "address", name: "spender", type: "address" }, { indexed: false, internalType: "uint256", name: "value", type: "uint256" }], name: "Approval", type: "event" }, { anonymous: false, inputs: [{ indexed: false, internalType: "address", name: "platformFeeRecipient", type: "address" }, { indexed: false, internalType: "uint256", name: "platformFeeBps", type: "uint256" }], name: "PlatformFeeInfoUpdated", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "address", name: "recipient", type: "address" }], name: "PrimarySaleRecipientUpdated", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "address", name: "mintedTo", type: "address" }, { indexed: false, internalType: "uint256", name: "quantityMinted", type: "uint256" }], name: "TokensMinted", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "address", name: "signer", type: "address" }, { indexed: true, internalType: "address", name: "mintedTo", type: "address" }, { components: [{ internalType: "address", name: "to", type: "address" }, { internalType: "address", name: "primarySaleRecipient", type: "address" }, { internalType: "uint256", name: "quantity", type: "uint256" }, { internalType: "uint256", name: "price", type: "uint256" }, { internalType: "address", name: "currency", type: "address" }, { internalType: "uint128", name: "validityStartTimestamp", type: "uint128" }, { internalType: "uint128", name: "validityEndTimestamp", type: "uint128" }, { internalType: "bytes32", name: "uid", type: "bytes32" }], indexed: false, internalType: "struct ITokenERC20.MintRequest", name: "mintRequest", type: "tuple" }], name: "TokensMintedWithSignature", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "address", name: "from", type: "address" }, { indexed: true, internalType: "address", name: "to", type: "address" }, { indexed: false, internalType: "uint256", name: "value", type: "uint256" }], name: "Transfer", type: "event" }, { inputs: [{ internalType: "address", name: "owner", type: "address" }, { internalType: "address", name: "spender", type: "address" }], name: "allowance", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "spender", type: "address" }, { internalType: "uint256", name: "amount", type: "uint256" }], name: "approve", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "account", type: "address" }], name: "balanceOf", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [], name: "contractType", outputs: [{ internalType: "bytes32", name: "", type: "bytes32" }], stateMutability: "pure", type: "function" }, { inputs: [], name: "contractURI", outputs: [{ internalType: "string", name: "", type: "string" }], stateMutability: "view", type: "function" }, { inputs: [], name: "contractVersion", outputs: [{ internalType: "uint8", name: "", type: "uint8" }], stateMutability: "pure", type: "function" }, { inputs: [], name: "getPlatformFeeInfo", outputs: [{ internalType: "address", name: "platformFeeRecipient", type: "address" }, { internalType: "uint16", name: "platformFeeBps", type: "uint16" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "to", type: "address" }, { internalType: "uint256", name: "amount", type: "uint256" }], name: "mintTo", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ components: [{ internalType: "address", name: "to", type: "address" }, { internalType: "address", name: "primarySaleRecipient", type: "address" }, { internalType: "uint256", name: "quantity", type: "uint256" }, { internalType: "uint256", name: "price", type: "uint256" }, { internalType: "address", name: "currency", type: "address" }, { internalType: "uint128", name: "validityStartTimestamp", type: "uint128" }, { internalType: "uint128", name: "validityEndTimestamp", type: "uint128" }, { internalType: "bytes32", name: "uid", type: "bytes32" }], internalType: "struct ITokenERC20.MintRequest", name: "req", type: "tuple" }, { internalType: "bytes", name: "signature", type: "bytes" }], name: "mintWithSignature", outputs: [], stateMutability: "payable", type: "function" }, { inputs: [], name: "primarySaleRecipient", outputs: [{ internalType: "address", name: "", type: "address" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "string", name: "_uri", type: "string" }], name: "setContractURI", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "_platformFeeRecipient", type: "address" }, { internalType: "uint256", name: "_platformFeeBps", type: "uint256" }], name: "setPlatformFeeInfo", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "_saleRecipient", type: "address" }], name: "setPrimarySaleRecipient", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [], name: "totalSupply", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "to", type: "address" }, { internalType: "uint256", name: "amount", type: "uint256" }], name: "transfer", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "from", type: "address" }, { internalType: "address", name: "to", type: "address" }, { internalType: "uint256", name: "amount", type: "uint256" }], name: "transferFrom", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "nonpayable", type: "function" }, { inputs: [{ components: [{ internalType: "address", name: "to", type: "address" }, { internalType: "address", name: "primarySaleRecipient", type: "address" }, { internalType: "uint256", name: "quantity", type: "uint256" }, { internalType: "uint256", name: "price", type: "uint256" }, { internalType: "address", name: "currency", type: "address" }, { internalType: "uint128", name: "validityStartTimestamp", type: "uint128" }, { internalType: "uint128", name: "validityEndTimestamp", type: "uint128" }, { internalType: "bytes32", name: "uid", type: "bytes32" }], internalType: "struct ITokenERC20.MintRequest", name: "req", type: "tuple" }, { internalType: "bytes", name: "signature", type: "bytes" }], name: "verify", outputs: [{ internalType: "bool", name: "success", type: "bool" }, { internalType: "address", name: "signer", type: "address" }], stateMutability: "view", type: "function" }];
var M1 = class {
  static createInterface() {
    return new utils_exports.Interface(I1);
  }
  static connect(e, t) {
    return new Contract(e, I1, t);
  }
};
M1.abi = I1;
var R1 = [{ anonymous: false, inputs: [{ indexed: true, internalType: "address", name: "owner", type: "address" }, { indexed: true, internalType: "address", name: "approved", type: "address" }, { indexed: true, internalType: "uint256", name: "tokenId", type: "uint256" }], name: "Approval", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "address", name: "owner", type: "address" }, { indexed: true, internalType: "address", name: "operator", type: "address" }, { indexed: false, internalType: "bool", name: "approved", type: "bool" }], name: "ApprovalForAll", type: "event" }, { anonymous: false, inputs: [{ indexed: false, internalType: "address", name: "newRoyaltyRecipient", type: "address" }, { indexed: false, internalType: "uint256", name: "newRoyaltyBps", type: "uint256" }], name: "DefaultRoyalty", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "address", name: "paymentReceiver", type: "address" }, { indexed: false, internalType: "address", name: "feeRecipient", type: "address" }, { indexed: false, internalType: "uint256", name: "totalAmount", type: "uint256" }, { indexed: false, internalType: "uint256", name: "feeCollected", type: "uint256" }], name: "FundsWithdrawn", type: "event" }, { anonymous: false, inputs: [{ indexed: false, internalType: "address", name: "prevOwner", type: "address" }, { indexed: false, internalType: "address", name: "newOwner", type: "address" }], name: "OwnerUpdated", type: "event" }, { anonymous: false, inputs: [{ indexed: false, internalType: "address", name: "platformFeeRecipient", type: "address" }, { indexed: false, internalType: "uint256", name: "platformFeeBps", type: "uint256" }], name: "PlatformFeeInfoUpdated", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "address", name: "recipient", type: "address" }], name: "PrimarySaleRecipientUpdated", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "uint256", name: "tokenId", type: "uint256" }, { indexed: false, internalType: "address", name: "royaltyRecipient", type: "address" }, { indexed: false, internalType: "uint256", name: "royaltyBps", type: "uint256" }], name: "RoyaltyForToken", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "address", name: "mintedTo", type: "address" }, { indexed: true, internalType: "uint256", name: "tokenIdMinted", type: "uint256" }, { indexed: false, internalType: "string", name: "uri", type: "string" }], name: "TokensMinted", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "address", name: "signer", type: "address" }, { indexed: true, internalType: "address", name: "mintedTo", type: "address" }, { indexed: true, internalType: "uint256", name: "tokenIdMinted", type: "uint256" }, { components: [{ internalType: "address", name: "to", type: "address" }, { internalType: "address", name: "royaltyRecipient", type: "address" }, { internalType: "uint256", name: "royaltyBps", type: "uint256" }, { internalType: "address", name: "primarySaleRecipient", type: "address" }, { internalType: "string", name: "uri", type: "string" }, { internalType: "uint256", name: "price", type: "uint256" }, { internalType: "address", name: "currency", type: "address" }, { internalType: "uint128", name: "validityStartTimestamp", type: "uint128" }, { internalType: "uint128", name: "validityEndTimestamp", type: "uint128" }, { internalType: "bytes32", name: "uid", type: "bytes32" }], indexed: false, internalType: "struct ITokenERC721.MintRequest", name: "mintRequest", type: "tuple" }], name: "TokensMintedWithSignature", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "address", name: "from", type: "address" }, { indexed: true, internalType: "address", name: "to", type: "address" }, { indexed: true, internalType: "uint256", name: "tokenId", type: "uint256" }], name: "Transfer", type: "event" }, { inputs: [{ internalType: "address", name: "to", type: "address" }, { internalType: "uint256", name: "tokenId", type: "uint256" }], name: "approve", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "owner", type: "address" }], name: "balanceOf", outputs: [{ internalType: "uint256", name: "balance", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [], name: "contractType", outputs: [{ internalType: "bytes32", name: "", type: "bytes32" }], stateMutability: "pure", type: "function" }, { inputs: [], name: "contractURI", outputs: [{ internalType: "string", name: "", type: "string" }], stateMutability: "view", type: "function" }, { inputs: [], name: "contractVersion", outputs: [{ internalType: "uint8", name: "", type: "uint8" }], stateMutability: "pure", type: "function" }, { inputs: [{ internalType: "uint256", name: "tokenId", type: "uint256" }], name: "getApproved", outputs: [{ internalType: "address", name: "operator", type: "address" }], stateMutability: "view", type: "function" }, { inputs: [], name: "getDefaultRoyaltyInfo", outputs: [{ internalType: "address", name: "", type: "address" }, { internalType: "uint16", name: "", type: "uint16" }], stateMutability: "view", type: "function" }, { inputs: [], name: "getPlatformFeeInfo", outputs: [{ internalType: "address", name: "platformFeeRecipient", type: "address" }, { internalType: "uint16", name: "platformFeeBps", type: "uint16" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "uint256", name: "tokenId", type: "uint256" }], name: "getRoyaltyInfoForToken", outputs: [{ internalType: "address", name: "", type: "address" }, { internalType: "uint16", name: "", type: "uint16" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "owner", type: "address" }, { internalType: "address", name: "operator", type: "address" }], name: "isApprovedForAll", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "to", type: "address" }, { internalType: "string", name: "uri", type: "string" }], name: "mintTo", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "nonpayable", type: "function" }, { inputs: [{ components: [{ internalType: "address", name: "to", type: "address" }, { internalType: "address", name: "royaltyRecipient", type: "address" }, { internalType: "uint256", name: "royaltyBps", type: "uint256" }, { internalType: "address", name: "primarySaleRecipient", type: "address" }, { internalType: "string", name: "uri", type: "string" }, { internalType: "uint256", name: "price", type: "uint256" }, { internalType: "address", name: "currency", type: "address" }, { internalType: "uint128", name: "validityStartTimestamp", type: "uint128" }, { internalType: "uint128", name: "validityEndTimestamp", type: "uint128" }, { internalType: "bytes32", name: "uid", type: "bytes32" }], internalType: "struct ITokenERC721.MintRequest", name: "req", type: "tuple" }, { internalType: "bytes", name: "signature", type: "bytes" }], name: "mintWithSignature", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "payable", type: "function" }, { inputs: [], name: "owner", outputs: [{ internalType: "address", name: "", type: "address" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "uint256", name: "tokenId", type: "uint256" }], name: "ownerOf", outputs: [{ internalType: "address", name: "owner", type: "address" }], stateMutability: "view", type: "function" }, { inputs: [], name: "primarySaleRecipient", outputs: [{ internalType: "address", name: "", type: "address" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "uint256", name: "tokenId", type: "uint256" }, { internalType: "uint256", name: "salePrice", type: "uint256" }], name: "royaltyInfo", outputs: [{ internalType: "address", name: "receiver", type: "address" }, { internalType: "uint256", name: "royaltyAmount", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "from", type: "address" }, { internalType: "address", name: "to", type: "address" }, { internalType: "uint256", name: "tokenId", type: "uint256" }], name: "safeTransferFrom", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "from", type: "address" }, { internalType: "address", name: "to", type: "address" }, { internalType: "uint256", name: "tokenId", type: "uint256" }, { internalType: "bytes", name: "data", type: "bytes" }], name: "safeTransferFrom", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "operator", type: "address" }, { internalType: "bool", name: "_approved", type: "bool" }], name: "setApprovalForAll", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "string", name: "_uri", type: "string" }], name: "setContractURI", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "_royaltyRecipient", type: "address" }, { internalType: "uint256", name: "_royaltyBps", type: "uint256" }], name: "setDefaultRoyaltyInfo", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "_newOwner", type: "address" }], name: "setOwner", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "_platformFeeRecipient", type: "address" }, { internalType: "uint256", name: "_platformFeeBps", type: "uint256" }], name: "setPlatformFeeInfo", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "_saleRecipient", type: "address" }], name: "setPrimarySaleRecipient", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "uint256", name: "tokenId", type: "uint256" }, { internalType: "address", name: "recipient", type: "address" }, { internalType: "uint256", name: "bps", type: "uint256" }], name: "setRoyaltyInfoForToken", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "bytes4", name: "interfaceId", type: "bytes4" }], name: "supportsInterface", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "from", type: "address" }, { internalType: "address", name: "to", type: "address" }, { internalType: "uint256", name: "tokenId", type: "uint256" }], name: "transferFrom", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ components: [{ internalType: "address", name: "to", type: "address" }, { internalType: "address", name: "royaltyRecipient", type: "address" }, { internalType: "uint256", name: "royaltyBps", type: "uint256" }, { internalType: "address", name: "primarySaleRecipient", type: "address" }, { internalType: "string", name: "uri", type: "string" }, { internalType: "uint256", name: "price", type: "uint256" }, { internalType: "address", name: "currency", type: "address" }, { internalType: "uint128", name: "validityStartTimestamp", type: "uint128" }, { internalType: "uint128", name: "validityEndTimestamp", type: "uint128" }, { internalType: "bytes32", name: "uid", type: "bytes32" }], internalType: "struct ITokenERC721.MintRequest", name: "req", type: "tuple" }, { internalType: "bytes", name: "signature", type: "bytes" }], name: "verify", outputs: [{ internalType: "bool", name: "success", type: "bool" }, { internalType: "address", name: "signer", type: "address" }], stateMutability: "view", type: "function" }];
var w1 = class {
  static createInterface() {
    return new utils_exports.Interface(R1);
  }
  static connect(e, t) {
    return new Contract(e, R1, t);
  }
};
w1.abi = R1;
var P = [{ inputs: [], name: "NATIVE_TOKEN", outputs: [{ internalType: "address", name: "", type: "address" }], stateMutability: "view", type: "function" }];
var W1 = "0x6088610038600b82828239805160001a607314602b57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361060335760003560e01c806331f7d964146038575b600080fd5b605273eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f3fea164736f6c634300080c000a";
var p8 = (a) => a.length > 1;
var E = class extends ContractFactory {
  constructor(...e) {
    p8(e) ? super(...e) : super(P, W1, e[0]), this.contractName = "CurrencyTransferLib";
  }
  deploy(e) {
    return super.deploy(e || {});
  }
  getDeployTransaction(e) {
    return super.getDeployTransaction(e || {});
  }
  attach(e) {
    return super.attach(e);
  }
  connect(e) {
    return super.connect(e);
  }
  static createInterface() {
    return new utils_exports.Interface(P);
  }
  static connect(e, t) {
    return new Contract(e, P, t);
  }
};
E.bytecode = W1, E.abi = P;
var k = [{ inputs: [{ internalType: "address", name: "_nativeTokenWrapper", type: "address" }, { internalType: "address", name: "_thirdwebFee", type: "address" }], stateMutability: "nonpayable", type: "constructor" }, { anonymous: false, inputs: [{ indexed: false, internalType: "uint256", name: "timeBuffer", type: "uint256" }, { indexed: false, internalType: "uint256", name: "bidBufferBps", type: "uint256" }], name: "AuctionBuffersUpdated", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "uint256", name: "listingId", type: "uint256" }, { indexed: true, internalType: "address", name: "closer", type: "address" }, { indexed: true, internalType: "bool", name: "cancelled", type: "bool" }, { indexed: false, internalType: "address", name: "auctionCreator", type: "address" }, { indexed: false, internalType: "address", name: "winningBidder", type: "address" }], name: "AuctionClosed", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "uint256", name: "listingId", type: "uint256" }, { indexed: true, internalType: "address", name: "assetContract", type: "address" }, { indexed: true, internalType: "address", name: "lister", type: "address" }, { components: [{ internalType: "uint256", name: "listingId", type: "uint256" }, { internalType: "address", name: "tokenOwner", type: "address" }, { internalType: "address", name: "assetContract", type: "address" }, { internalType: "uint256", name: "tokenId", type: "uint256" }, { internalType: "uint256", name: "startTime", type: "uint256" }, { internalType: "uint256", name: "endTime", type: "uint256" }, { internalType: "uint256", name: "quantity", type: "uint256" }, { internalType: "address", name: "currency", type: "address" }, { internalType: "uint256", name: "reservePricePerToken", type: "uint256" }, { internalType: "uint256", name: "buyoutPricePerToken", type: "uint256" }, { internalType: "enum IMarketplace.TokenType", name: "tokenType", type: "uint8" }, { internalType: "enum IMarketplace.ListingType", name: "listingType", type: "uint8" }], indexed: false, internalType: "struct IMarketplace.Listing", name: "listing", type: "tuple" }], name: "ListingAdded", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "uint256", name: "listingId", type: "uint256" }, { indexed: true, internalType: "address", name: "listingCreator", type: "address" }], name: "ListingRemoved", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "uint256", name: "listingId", type: "uint256" }, { indexed: true, internalType: "address", name: "listingCreator", type: "address" }], name: "ListingUpdated", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "uint256", name: "listingId", type: "uint256" }, { indexed: true, internalType: "address", name: "offeror", type: "address" }, { indexed: true, internalType: "enum IMarketplace.ListingType", name: "listingType", type: "uint8" }, { indexed: false, internalType: "uint256", name: "quantityWanted", type: "uint256" }, { indexed: false, internalType: "uint256", name: "totalOfferAmount", type: "uint256" }, { indexed: false, internalType: "address", name: "currency", type: "address" }], name: "NewOffer", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "uint256", name: "listingId", type: "uint256" }, { indexed: true, internalType: "address", name: "assetContract", type: "address" }, { indexed: true, internalType: "address", name: "lister", type: "address" }, { indexed: false, internalType: "address", name: "buyer", type: "address" }, { indexed: false, internalType: "uint256", name: "quantityBought", type: "uint256" }, { indexed: false, internalType: "uint256", name: "totalPricePaid", type: "uint256" }], name: "NewSale", type: "event" }, { anonymous: false, inputs: [{ indexed: false, internalType: "address", name: "platformFeeRecipient", type: "address" }, { indexed: false, internalType: "uint256", name: "platformFeeBps", type: "uint256" }], name: "PlatformFeeInfoUpdated", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "bytes32", name: "role", type: "bytes32" }, { indexed: true, internalType: "bytes32", name: "previousAdminRole", type: "bytes32" }, { indexed: true, internalType: "bytes32", name: "newAdminRole", type: "bytes32" }], name: "RoleAdminChanged", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "bytes32", name: "role", type: "bytes32" }, { indexed: true, internalType: "address", name: "account", type: "address" }, { indexed: true, internalType: "address", name: "sender", type: "address" }], name: "RoleGranted", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "bytes32", name: "role", type: "bytes32" }, { indexed: true, internalType: "address", name: "account", type: "address" }, { indexed: true, internalType: "address", name: "sender", type: "address" }], name: "RoleRevoked", type: "event" }, { inputs: [], name: "DEFAULT_ADMIN_ROLE", outputs: [{ internalType: "bytes32", name: "", type: "bytes32" }], stateMutability: "view", type: "function" }, { inputs: [], name: "MAX_BPS", outputs: [{ internalType: "uint64", name: "", type: "uint64" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "uint256", name: "_listingId", type: "uint256" }, { internalType: "address", name: "_offeror", type: "address" }, { internalType: "address", name: "_currency", type: "address" }, { internalType: "uint256", name: "_pricePerToken", type: "uint256" }], name: "acceptOffer", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [], name: "bidBufferBps", outputs: [{ internalType: "uint64", name: "", type: "uint64" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "uint256", name: "_listingId", type: "uint256" }, { internalType: "address", name: "_buyFor", type: "address" }, { internalType: "uint256", name: "_quantityToBuy", type: "uint256" }, { internalType: "address", name: "_currency", type: "address" }, { internalType: "uint256", name: "_totalPrice", type: "uint256" }], name: "buy", outputs: [], stateMutability: "payable", type: "function" }, { inputs: [{ internalType: "uint256", name: "_listingId", type: "uint256" }], name: "cancelDirectListing", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "uint256", name: "_listingId", type: "uint256" }, { internalType: "address", name: "_closeFor", type: "address" }], name: "closeAuction", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [], name: "contractType", outputs: [{ internalType: "bytes32", name: "", type: "bytes32" }], stateMutability: "pure", type: "function" }, { inputs: [], name: "contractURI", outputs: [{ internalType: "string", name: "", type: "string" }], stateMutability: "view", type: "function" }, { inputs: [], name: "contractVersion", outputs: [{ internalType: "uint8", name: "", type: "uint8" }], stateMutability: "pure", type: "function" }, { inputs: [{ components: [{ internalType: "address", name: "assetContract", type: "address" }, { internalType: "uint256", name: "tokenId", type: "uint256" }, { internalType: "uint256", name: "startTime", type: "uint256" }, { internalType: "uint256", name: "secondsUntilEndTime", type: "uint256" }, { internalType: "uint256", name: "quantityToList", type: "uint256" }, { internalType: "address", name: "currencyToAccept", type: "address" }, { internalType: "uint256", name: "reservePricePerToken", type: "uint256" }, { internalType: "uint256", name: "buyoutPricePerToken", type: "uint256" }, { internalType: "enum IMarketplace.ListingType", name: "listingType", type: "uint8" }], internalType: "struct IMarketplace.ListingParameters", name: "_params", type: "tuple" }], name: "createListing", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [], name: "getPlatformFeeInfo", outputs: [{ internalType: "address", name: "", type: "address" }, { internalType: "uint16", name: "", type: "uint16" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "bytes32", name: "role", type: "bytes32" }], name: "getRoleAdmin", outputs: [{ internalType: "bytes32", name: "", type: "bytes32" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "bytes32", name: "role", type: "bytes32" }, { internalType: "uint256", name: "index", type: "uint256" }], name: "getRoleMember", outputs: [{ internalType: "address", name: "", type: "address" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "bytes32", name: "role", type: "bytes32" }], name: "getRoleMemberCount", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "bytes32", name: "role", type: "bytes32" }, { internalType: "address", name: "account", type: "address" }], name: "grantRole", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "bytes32", name: "role", type: "bytes32" }, { internalType: "address", name: "account", type: "address" }], name: "hasRole", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "_defaultAdmin", type: "address" }, { internalType: "string", name: "_contractURI", type: "string" }, { internalType: "address[]", name: "_trustedForwarders", type: "address[]" }, { internalType: "address", name: "_platformFeeRecipient", type: "address" }, { internalType: "uint256", name: "_platformFeeBps", type: "uint256" }], name: "initialize", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "forwarder", type: "address" }], name: "isTrustedForwarder", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "uint256", name: "", type: "uint256" }], name: "listings", outputs: [{ internalType: "uint256", name: "listingId", type: "uint256" }, { internalType: "address", name: "tokenOwner", type: "address" }, { internalType: "address", name: "assetContract", type: "address" }, { internalType: "uint256", name: "tokenId", type: "uint256" }, { internalType: "uint256", name: "startTime", type: "uint256" }, { internalType: "uint256", name: "endTime", type: "uint256" }, { internalType: "uint256", name: "quantity", type: "uint256" }, { internalType: "address", name: "currency", type: "address" }, { internalType: "uint256", name: "reservePricePerToken", type: "uint256" }, { internalType: "uint256", name: "buyoutPricePerToken", type: "uint256" }, { internalType: "enum IMarketplace.TokenType", name: "tokenType", type: "uint8" }, { internalType: "enum IMarketplace.ListingType", name: "listingType", type: "uint8" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "bytes[]", name: "data", type: "bytes[]" }], name: "multicall", outputs: [{ internalType: "bytes[]", name: "results", type: "bytes[]" }], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "uint256", name: "_listingId", type: "uint256" }, { internalType: "uint256", name: "_quantityWanted", type: "uint256" }, { internalType: "address", name: "_currency", type: "address" }, { internalType: "uint256", name: "_pricePerToken", type: "uint256" }], name: "offer", outputs: [], stateMutability: "payable", type: "function" }, { inputs: [{ internalType: "uint256", name: "", type: "uint256" }, { internalType: "address", name: "", type: "address" }], name: "offers", outputs: [{ internalType: "uint256", name: "listingId", type: "uint256" }, { internalType: "address", name: "offeror", type: "address" }, { internalType: "uint256", name: "quantityWanted", type: "uint256" }, { internalType: "address", name: "currency", type: "address" }, { internalType: "uint256", name: "pricePerToken", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "", type: "address" }, { internalType: "address", name: "", type: "address" }, { internalType: "uint256[]", name: "", type: "uint256[]" }, { internalType: "uint256[]", name: "", type: "uint256[]" }, { internalType: "bytes", name: "", type: "bytes" }], name: "onERC1155BatchReceived", outputs: [{ internalType: "bytes4", name: "", type: "bytes4" }], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "", type: "address" }, { internalType: "address", name: "", type: "address" }, { internalType: "uint256", name: "", type: "uint256" }, { internalType: "uint256", name: "", type: "uint256" }, { internalType: "bytes", name: "", type: "bytes" }], name: "onERC1155Received", outputs: [{ internalType: "bytes4", name: "", type: "bytes4" }], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "", type: "address" }, { internalType: "address", name: "", type: "address" }, { internalType: "uint256", name: "", type: "uint256" }, { internalType: "bytes", name: "", type: "bytes" }], name: "onERC721Received", outputs: [{ internalType: "bytes4", name: "", type: "bytes4" }], stateMutability: "pure", type: "function" }, { inputs: [{ internalType: "bytes32", name: "role", type: "bytes32" }, { internalType: "address", name: "account", type: "address" }], name: "renounceRole", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "bytes32", name: "role", type: "bytes32" }, { internalType: "address", name: "account", type: "address" }], name: "revokeRole", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "uint256", name: "_timeBuffer", type: "uint256" }, { internalType: "uint256", name: "_bidBufferBps", type: "uint256" }], name: "setAuctionBuffers", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "string", name: "_uri", type: "string" }], name: "setContractURI", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "_platformFeeRecipient", type: "address" }, { internalType: "uint256", name: "_platformFeeBps", type: "uint256" }], name: "setPlatformFeeInfo", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "bytes4", name: "interfaceId", type: "bytes4" }], name: "supportsInterface", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "view", type: "function" }, { inputs: [], name: "thirdwebFee", outputs: [{ internalType: "contract ITWFee", name: "", type: "address" }], stateMutability: "view", type: "function" }, { inputs: [], name: "timeBuffer", outputs: [{ internalType: "uint64", name: "", type: "uint64" }], stateMutability: "view", type: "function" }, { inputs: [], name: "totalListings", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "uint256", name: "_listingId", type: "uint256" }, { internalType: "uint256", name: "_quantityToList", type: "uint256" }, { internalType: "uint256", name: "_reservePricePerToken", type: "uint256" }, { internalType: "uint256", name: "_buyoutPricePerToken", type: "uint256" }, { internalType: "address", name: "_currencyToAccept", type: "address" }, { internalType: "uint256", name: "_startTime", type: "uint256" }, { internalType: "uint256", name: "_secondsUntilEndTime", type: "uint256" }], name: "updateListing", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "uint256", name: "", type: "uint256" }], name: "winningBid", outputs: [{ internalType: "uint256", name: "listingId", type: "uint256" }, { internalType: "address", name: "offeror", type: "address" }, { internalType: "uint256", name: "quantityWanted", type: "uint256" }, { internalType: "address", name: "currency", type: "address" }, { internalType: "uint256", name: "pricePerToken", type: "uint256" }], stateMutability: "view", type: "function" }, { stateMutability: "payable", type: "receive" }];
var q1 = "0x60c06040523480156200001157600080fd5b50604051620061773803806200617783398101604081905262000034916200015f565b600054610100900460ff16620000515760005460ff16156200005b565b6200005b62000115565b620000c35760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b600054610100900460ff16158015620000e6576000805461ffff19166101011790555b6001600160a01b0380831660a052831660805280156200010c576000805461ff00191690555b50505062000197565b60006200012d306200013360201b62002a611760201c565b15905090565b6001600160a01b03163b151590565b80516001600160a01b03811681146200015a57600080fd5b919050565b600080604083850312156200017357600080fd5b6200017e8362000142565b91506200018e6020840162000142565b90509250929050565b60805160a051615fa5620001d26000396000818161069e015261437b015260008181611ef901528181613d0d01526145190152615fa56000f3fe60806040526004361061026e5760003560e01c8063ac9650d811610153578063d45573f6116100cb578063ea0e02411161007f578063ec91f2a411610064578063ec91f2a4146108ea578063f23a6e611461090c578063fd967f471461093857600080fd5b8063ea0e024114610869578063ebdfbce51461088957600080fd5b8063d547741f116100b0578063d547741f14610780578063de74e57b146107a0578063e8a3d4851461084757600080fd5b8063d45573f6146106c0578063d4ac9b8c146106f857600080fd5b8063c4b5b15f11610122578063ca15c87311610107578063ca15c87314610639578063cb2ef6f714610659578063cf8267b11461068c57600080fd5b8063c4b5b15f14610602578063c78b616c1461062257600080fd5b8063ac9650d814610576578063acb1ba67146105a3578063b13c0e63146105b6578063bc197c81146105d657600080fd5b80636bab66ae116101e65780639010d07c116101b5578063938e3d7b1161019a578063938e3d7b14610525578063a0a8e46014610545578063a217fddf1461056157600080fd5b80639010d07c146104a757806391d14854146104df57600080fd5b80636bab66ae146104345780637506c84a146104545780637687ab02146104745780638c8a84e21461048757600080fd5b8063296f4e161161023d57806336568abe1161022257806336568abe146103945780634e03f28d146103b4578063572b6c05146103fb57600080fd5b8063296f4e16146103545780632f2ff15d1461037457600080fd5b806301ffc9a71461027a578063150b7a02146102af5780631e7ac488146102f4578063248a9ca31461031657600080fd5b3661027557005b600080fd5b34801561028657600080fd5b5061029a6102953660046152d7565b61094e565b60405190151581526020015b60405180910390f35b3480156102bb57600080fd5b506102db6102ca36600461536a565b630a85bd0160e11b95945050505050565b6040516001600160e01b031990911681526020016102a6565b34801561030057600080fd5b5061031461030f3660046153dd565b610994565b005b34801561032257600080fd5b50610346610331366004615409565b600090815260fb602052604090206001015490565b6040519081526020016102a6565b34801561036057600080fd5b5061031461036f3660046154a2565b610a78565b34801561038057600080fd5b5061031461038f36600461552e565b610fdf565b3480156103a057600080fd5b506103146103af36600461552e565b61100c565b3480156103c057600080fd5b50610162546103e29068010000000000000000900467ffffffffffffffff1681565b60405167ffffffffffffffff90911681526020016102a6565b34801561040757600080fd5b5061029a61041636600461555e565b6001600160a01b031660009081526065602052604090205460ff1690565b34801561044057600080fd5b5061031461044f36600461552e565b6110a8565b34801561046057600080fd5b5061031461046f366004615409565b611423565b61031461048236600461557b565b6116b0565b34801561049357600080fd5b506103146104a2366004615649565b61191b565b3480156104b357600080fd5b506104c76104c2366004615741565b611acd565b6040516001600160a01b0390911681526020016102a6565b3480156104eb57600080fd5b5061029a6104fa36600461552e565b600091825260fb602090815260408084206001600160a01b0393909316845291905290205460ff1690565b34801561053157600080fd5b50610314610540366004615763565b611aed565b34801561055157600080fd5b50604051600181526020016102a6565b34801561056d57600080fd5b50610346600081565b34801561058257600080fd5b506105966105913660046157a5565b611b0e565b6040516102a69190615872565b6103146105b13660046158d4565b611c03565b3480156105c257600080fd5b506103146105d1366004615913565b611f53565b3480156105e257600080fd5b506102db6105f13660046159d1565b63bc197c8160e01b95945050505050565b34801561060e57600080fd5b5061031461061d366004615a7f565b612399565b34801561062e57600080fd5b5061034661015f5481565b34801561064557600080fd5b50610346610654366004615409565b6128c0565b34801561066557600080fd5b507f4d61726b6574706c616365000000000000000000000000000000000000000000610346565b34801561069857600080fd5b506104c77f000000000000000000000000000000000000000000000000000000000000000081565b3480156106cc57600080fd5b5061016154604080516001600160a01b0383168152600160a01b90920461ffff166020830152016102a6565b34801561070457600080fd5b5061074e610713366004615409565b610165602052600090815260409020805460018201546002830154600384015460049094015492936001600160a01b03928316939192169085565b604080519586526001600160a01b0394851660208701528501929092529091166060830152608082015260a0016102a6565b34801561078c57600080fd5b5061031461079b36600461552e565b6128d8565b3480156107ac57600080fd5b5061082f6107bb366004615409565b61016360205260009081526040902080546001820154600283015460038401546004850154600586015460068701546007880154600889015460098a0154600a909a015498996001600160a01b03988916999789169896979596949593949092169290919060ff808216916101009004168c565b6040516102a69c9b9a99989796959493929190615b1f565b34801561085357600080fd5b5061085c612900565b6040516102a69190615ba3565b34801561087557600080fd5b50610314610884366004615741565b61298f565b34801561089557600080fd5b5061074e6108a436600461552e565b6101646020908152600092835260408084209091529082529020805460018201546002830154600384015460049094015492936001600160a01b03928316939192169085565b3480156108f657600080fd5b50610162546103e29067ffffffffffffffff1681565b34801561091857600080fd5b506102db610927366004615bb6565b63f23a6e6160e01b95945050505050565b34801561094457600080fd5b506103e261271081565b60006001600160e01b03198216630271189760e51b148061097f57506001600160e01b03198216630a85bd0160e11b145b8061098e575061098e82612a70565b92915050565b60006109a7816109a2612a95565b612aa4565b6127108211156109fe5760405162461bcd60e51b815260206004820152600d60248201527f627073203c3d2031303030302e0000000000000000000000000000000000000060448201526064015b60405180910390fd5b61016180546001600160e01b031916600160a01b67ffffffffffffffff8516026001600160a01b031916176001600160a01b03851690811790915560408051918252602082018490527fe2497bd806ec41a6e0dd992c29a72efc0ef8fec9092d1978fd4a1e00b2f1830491015b60405180910390a1505050565b6000816060015111610acc5760405162461bcd60e51b815260206004820152601260248201527f656e642074696d65206d757374203e20302e000000000000000000000000000060448201526064016109f5565b6000610ad6612b24565b90506000610ae2612a95565b90506000610af38460000151612b43565b90506000610b05828660800151612c8b565b905060008111610b575760405162461bcd60e51b815260206004820152601960248201527f6c697374696e6720696e76616c6964207175616e746974792e0000000000000060448201526064016109f5565b600080527f0bf587d4e74e99cde8c6e4c054a5635772877ff68dbace54cfa272aabdba99186020527f2e5a8a6546a6579ddcdee1c230e851e90e02911b1edbb4e6bce29e62ce9ef8cf5460ff1680610bd65750610bd67ff94103142c1baabe9ac2b5d1487bf783de9e69cfeea9a72f5c9c94afd7877b8c6104fa612a95565b610c225760405162461bcd60e51b815260206004820152601a60248201527f646f6573206e6f742068617665204c49535445525f524f4c452e00000000000060448201526064016109f5565b600080527feecdd96d2384df3dcc3b798a06e1b5425b0048600906bcf4c21166279a6e5cdb6020527f4be4ab7155dfb840c7e9b0c93044a57446f8382ea3b9bde86d10b5704d906e775460ff1680610cb2575084516001600160a01b031660009081527feecdd96d2384df3dcc3b798a06e1b5425b0048600906bcf4c21166279a6e5cdb602052604090205460ff165b610cfe5760405162461bcd60e51b815260206004820152601160248201527f756e617070726f7665642061737365742e00000000000000000000000000000060448201526064016109f5565b610d1383866000015187602001518486612cc2565b600042866040015110610d2a578560400151610d2c565b425b90506000604051806101800160405280878152602001866001600160a01b0316815260200188600001516001600160a01b0316815260200188602001518152602001838152602001886060015184610d849190615c35565b81526020018481526020018860a001516001600160a01b031681526020018860c0015181526020018860e001518152602001856001811115610dc857610dc8615ade565b81526020018861010001516001811115610de457610de4615ade565b9052600087815261016360209081526040918290208351815590830151600180830180546001600160a01b03199081166001600160a01b0394851617909155938501516002840180548616918416919091179055606085015160038401556080850151600484015560a0850151600584015560c0850151600684015560e085015160078401805490951692169190911790925561010083015160088201556101208301516009820155610140830151600a82018054949550859492939192909160ff19909116908381811115610ebc57610ebc615ade565b0217905550610160820151600a8201805461ff001916610100836001811115610ee757610ee7615ade565b021790555060019150610ef79050565b8161016001516001811115610f0e57610f0e615ade565b1415610f86578061010001518161012001511015610f7a5760405162461bcd60e51b815260206004820152602360248201527f726573657276652070726963652065786365656473206275796f75742070726960448201526231b29760e91b60648201526084016109f5565b610f8685308584612fda565b846001600160a01b031687600001516001600160a01b0316877f0c5bc74ccdf848b38eb526a154b85085e1d61addf1d100cba2074e039c0b634084604051610fce9190615c4d565b60405180910390a450505050505050565b600082815260fb6020526040902060010154610ffd816109a2612a95565b6110078383613130565b505050565b611014612a95565b6001600160a01b0316816001600160a01b03161461109a5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c66000000000000000000000000000000000060648201526084016109f5565b6110a48282613153565b5050565b600260015414156110fb5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016109f5565b60026001819055600083815261016360205260409020015482906001600160a01b03166111585760405162461bcd60e51b815260206004820152600b60248201526a6c697374696e6720444e4560a81b60448201526064016109f5565b600083815261016360209081526040808320815161018081018352815481526001808301546001600160a01b039081169583019590955260028301548516938201939093526003820154606082015260048201546080820152600582015460a0820152600682015460c0820152600782015490931660e084015260088101546101008401526009810154610120840152600a810154909161014084019160ff169081111561120857611208615ade565b600181111561121957611219615ade565b8152602001600a820160019054906101000a900460ff16600181111561124157611241615ade565b600181111561125257611252615ade565b90525090506001816101600151600181111561127057611270615ade565b146112bd5760405162461bcd60e51b815260206004820152600f60248201527f6e6f7420616e2061756374696f6e2e000000000000000000000000000000000060448201526064016109f5565b600084815261016560209081526040808320815160a0810183528154815260018201546001600160a01b039081169482019490945260028201549281019290925260038101549092166060820152600490910154608080830191909152830151909190421080611338575060208201516001600160a01b0316155b9050801561134e5761134983613176565b611417565b428360a00151106113c75760405162461bcd60e51b815260206004820152602960248201527f63616e6e6f7420636c6f73652061756374696f6e206265666f7265206974206860448201527f617320656e6465642e000000000000000000000000000000000000000000000060648201526084016109f5565b82602001516001600160a01b0316856001600160a01b031614156113ef576113ef83836132e2565b81602001516001600160a01b0316856001600160a01b031614156114175761141783836134fd565b50506001805550505050565b8061142c612a95565b600082815261016360205260409020600101546001600160a01b039081169116146114995760405162461bcd60e51b815260206004820152601760248201527f63616c6c657220213d206c697374696e67206f776e657200000000000000000060448201526064016109f5565b600082815261016360209081526040808320815161018081018352815481526001808301546001600160a01b039081169583019590955260028301548516938201939093526003820154606082015260048201546080820152600582015460a0820152600682015460c0820152600782015490931660e084015260088101546101008401526009810154610120840152600a810154909161014084019160ff169081111561154957611549615ade565b600181111561155a5761155a615ade565b8152602001600a820160019054906101000a900460ff16600181111561158257611582615ade565b600181111561159357611593615ade565b9052509050600081610160015160018111156115b1576115b1615ade565b146115fe5760405162461bcd60e51b815260206004820152601260248201527f6e6f7420646972656374206c697374696e67000000000000000000000000000060448201526064016109f5565b6000838152610163602090815260408083208381556001810180546001600160a01b0319908116909155600282018054821690556003820185905560048201859055600582018590556006820185905560078201805490911690556008810184905560098101849055600a01805461ffff191690559083015190516001600160a01b039091169185917f58b0852506006c4be6c7ae72afcd195d9e64d7f5d8947905e914b778e47b7cf39190a3505050565b600260015414156117035760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016109f5565b60026001819055600086815261016360205260409020015485906001600160a01b03166117605760405162461bcd60e51b815260206004820152600b60248201526a6c697374696e6720444e4560a81b60448201526064016109f5565b600086815261016360209081526040808320815161018081018352815481526001808301546001600160a01b039081169583019590955260028301548516938201939093526003820154606082015260048201546080820152600582015460a0820152600682015460c0820152600782015490931660e084015260088101546101008401526009810154610120840152600a810154909161014084019160ff169081111561181057611810615ade565b600181111561182157611821615ade565b8152602001600a820160019054906101000a900460ff16600181111561184957611849615ade565b600181111561185a5761185a615ade565b90525090506000611869612a95565b90508160e001516001600160a01b0316856001600160a01b031614801561189f57508582610120015161189c9190615d16565b84145b6118eb5760405162461bcd60e51b815260206004820152601960248201527f696e76616c69642063757272656e6379206f722070726963650000000000000060448201526064016109f5565b61190d8282898560e001518a8761012001516119079190615d16565b8b61366b565b505060018055505050505050565b600054610100900460ff166119365760005460ff161561193a565b303b155b6119ac5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016109f5565b600054610100900460ff161580156119ce576000805461ffff19166101011790555b6119d6613815565b6119df8461388a565b61016280546fffffffffffffffffffffffffffffffff19166901f400000000000003841790558451611a19906101609060208801906151ca565b5061016180546001600160e01b031916600160a01b67ffffffffffffffff8516026001600160a01b031916176001600160a01b038516179055611a5d600087613909565b611a887ff94103142c1baabe9ac2b5d1487bf783de9e69cfeea9a72f5c9c94afd7877b8c6000613909565b611ab37f86d5cf0a6bdc8d859ba3bdc97043337c82a0e609035f378e419298b6a3e00ae66000613909565b8015611ac5576000805461ff00191690555b505050505050565b600082815261012d60205260408120611ae69083613913565b9392505050565b6000611afb816109a2612a95565b611b08610160848461524e565b50505050565b60608167ffffffffffffffff811115611b2957611b29615422565b604051908082528060200260200182016040528015611b5c57816020015b6060815260200190600190039081611b475790505b50905060005b82811015611bfc57611bcc30858584818110611b8057611b80615d35565b9050602002810190611b929190615d4b565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061391f92505050565b828281518110611bde57611bde615d35565b60200260200101819052508080611bf490615d92565b915050611b62565b5092915050565b60026001541415611c565760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016109f5565b60026001819055600085815261016360205260409020015484906001600160a01b0316611cb35760405162461bcd60e51b815260206004820152600b60248201526a6c697374696e6720444e4560a81b60448201526064016109f5565b600085815261016360209081526040808320815161018081018352815481526001808301546001600160a01b039081169583019590955260028301548516938201939093526003820154606082015260048201546080820152600582015460a0820152600682015460c0820152600782015490931660e084015260088101546101008401526009810154610120840152600a810154909161014084019160ff1690811115611d6357611d63615ade565b6001811115611d7457611d74615ade565b8152602001600a820160019054906101000a900460ff166001811115611d9c57611d9c615ade565b6001811115611dad57611dad615ade565b815250509050428160a00151118015611dc95750428160800151105b611e155760405162461bcd60e51b815260206004820152601160248201527f696e616374697665206c697374696e672e00000000000000000000000000000060448201526064016109f5565b60006040518060a00160405280888152602001611e30612a95565b6001600160a01b0390811682526020820189905287166040820152606001859052905060018261016001516001811115611e6c57611e6c615ade565b1415611eae5760e08201516001600160a01b0316606082015261014082015160c0830151611e9a9190612c8b565b6040820152611ea98282613a2a565b611f46565b60008261016001516001811115611ec757611ec7615ade565b1415611f46576001600160a01b03851673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee14611ef75784611f19565b7f00000000000000000000000000000000000000000000000000000000000000005b6001600160a01b03166060820152610140820151611f379087612c8b565b6040820152611f468282613e09565b5050600180555050505050565b60026001541415611fa65760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016109f5565b600260015583611fb4612a95565b600082815261016360205260409020600101546001600160a01b039081169116146120215760405162461bcd60e51b815260206004820152601760248201527f63616c6c657220213d206c697374696e67206f776e657200000000000000000060448201526064016109f5565b6000858152610163602052604090206002015485906001600160a01b03166120795760405162461bcd60e51b815260206004820152600b60248201526a6c697374696e6720444e4560a81b60448201526064016109f5565b600061016460008881526020019081526020016000206000876001600160a01b03166001600160a01b031681526020019081526020016000206040518060a0016040529081600082015481526020016001820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b03168152602001600282015481526020016003820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b0316815260200160048201548152505090506000610163600089815260200190815260200160002060405180610180016040529081600082015481526020016001820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016002820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b03168152602001600382015481526020016004820154815260200160058201548152602001600682015481526020016007820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016008820154815260200160098201548152602001600a820160009054906101000a900460ff16600181111561225457612254615ade565b600181111561226557612265615ade565b8152602001600a820160019054906101000a900460ff16600181111561228d5761228d615ade565b600181111561229e5761229e615ade565b81525050905081606001516001600160a01b0316866001600160a01b03161480156122cc5750816080015185145b6123185760405162461bcd60e51b815260206004820152601960248201527f696e76616c69642063757272656e6379206f722070726963650000000000000060448201526064016109f5565b6000888152610164602090815260408083206001600160a01b038b1684529091528082208281556001810180546001600160a01b031990811690915560028201849055600382018054909116905560040191909155606083015190830151608084015161190d9284928b9283929161238f91615d16565b876040015161366b565b866123a2612a95565b600082815261016360205260409020600101546001600160a01b0390811691161461240f5760405162461bcd60e51b815260206004820152601760248201527f63616c6c657220213d206c697374696e67206f776e657200000000000000000060448201526064016109f5565b600088815261016360209081526040808320815161018081018352815481526001808301546001600160a01b039081169583019590955260028301548516938201939093526003820154606082015260048201546080820152600582015460a0820152600682015460c0820152600782015490931660e084015260088101546101008401526009810154610120840152600a810154909161014084019160ff16908111156124bf576124bf615ade565b60018111156124d0576124d0615ade565b8152602001600a820160019054906101000a900460ff1660018111156124f8576124f8615ade565b600181111561250957612509615ade565b81525050905060006125208261014001518a612c8b565b905060006001836101600151600181111561253d5761253d615ade565b1490508161258d5760405162461bcd60e51b815260206004820152601b60248201527f63616e6e6f742075706461746520746f2030207175616e74697479000000000060448201526064016109f5565b801561264257826080015142106125e65760405162461bcd60e51b815260206004820152601860248201527f61756374696f6e20616c726561647920737461727465642e000000000000000060448201526064016109f5565b888810156126425760405162461bcd60e51b815260206004820152602360248201527f726573657276652070726963652065786365656473206275796f75742070726960448201526231b29760e91b60648201526084016109f5565b600086156126505786612656565b83608001515b90506040518061018001604052808d8152602001612672612a95565b6001600160a01b0316815260200185604001516001600160a01b0316815260200185606001518152602001828152602001876000146126ba576126b58884615c35565b6126c0565b8560a001515b8152602001848152602001896001600160a01b031681526020018b81526020018a815260200185610140015160018111156126fd576126fd615ade565b8152602001856101600151600181111561271957612719615ade565b905260008d815261016360209081526040918290208351815590830151600180830180546001600160a01b03199081166001600160a01b0394851617909155938501516002840180548616918416919091179055606085015160038401556080850151600484015560a0850151600584015560c0850151600684015560e085015160078401805490951692169190911790925561010083015160088201556101208301516009820155610140830151600a8201805492939192909160ff199091169083818111156127ec576127ec615ade565b0217905550610160820151600a8201805461ff00191661010083600181111561281757612817615ade565b0217905550505060c08401518314612877578115612843576128433085602001518660c0015187612fda565b61286184602001518560400151866060015186886101400151612cc2565b8115612877576128778460200151308587612fda565b83602001516001600160a01b03168c7fbbea26162edf2bc6a0255bf144ec4dd044302a301ef7d32daa835a2ddacfdef060405160405180910390a3505050505050505050505050565b600081815261012d6020526040812061098e90613f9f565b600082815260fb60205260409020600101546128f6816109a2612a95565b6110078383613153565b610160805461290e90615dad565b80601f016020809104026020016040519081016040528092919081815260200182805461293a90615dad565b80156129875780601f1061295c57610100808354040283529160200191612987565b820191906000526020600020905b81548152906001019060200180831161296a57829003601f168201915b505050505081565b600061299d816109a2612a95565b61271082106129ee5760405162461bcd60e51b815260206004820152600c60248201527f696e76616c6964204250532e000000000000000000000000000000000000000060448201526064016109f5565b610162805467ffffffffffffffff84811668010000000000000000026fffffffffffffffffffffffffffffffff19909216908616171790556040517f441ed6470e96704c3f8c9e70c209107078aab3f17311385e886081b91aa7508890610a6b9085908590918252602082015260400190565b6001600160a01b03163b151590565b60006001600160e01b03198216635a05180f60e01b148061098e575061098e82613fa9565b6000612a9f613fde565b905090565b600082815260fb602090815260408083206001600160a01b038516845290915290205460ff166110a457612ae2816001600160a01b03166014614008565b612aed836020614008565b604051602001612afe929190615de8565b60408051601f198184030181529082905262461bcd60e51b82526109f591600401615ba3565b61015f8054906001906000612b398385615c35565b9250508190555090565b6040516301ffc9a760e01b8152636cdb3d1360e11b60048201526000906001600160a01b038316906301ffc9a790602401602060405180830381865afa158015612b91573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bb59190615e69565b15612bc257506000919050565b6040516301ffc9a760e01b81526380ac58cd60e01b60048201526001600160a01b038316906301ffc9a790602401602060405180830381865afa158015612c0d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c319190615e69565b15612c3e57506001919050565b60405162461bcd60e51b815260206004820181905260248201527f746f6b656e206d7573742062652045524331313535206f72204552433732312e60448201526064016109f5565b919050565b600081612c9a5750600061098e565b6001836001811115612cae57612cae615ade565b14612cb95781611ae6565b50600192915050565b30600080836001811115612cd857612cd8615ade565b1415612dd257604051627eeac760e11b81526001600160a01b0388811660048301526024820187905285919088169062fdd58e90604401602060405180830381865afa158015612d2c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d509190615e8b565b10158015612dcb575060405163e985e9c560e01b81526001600160a01b038881166004830152838116602483015287169063e985e9c590604401602060405180830381865afa158015612da7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612dcb9190615e69565b9050612f5e565b6001836001811115612de657612de6615ade565b1415612f5e576040516331a9108f60e11b8152600481018690526001600160a01b038089169190881690636352211e90602401602060405180830381865afa158015612e36573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e5a9190615ea4565b6001600160a01b0316148015612f5b575060405163020604bf60e21b8152600481018690526001600160a01b03808416919088169063081812fc90602401602060405180830381865afa158015612eb5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ed99190615ea4565b6001600160a01b03161480612f5b575060405163e985e9c560e01b81526001600160a01b038881166004830152838116602483015287169063e985e9c590604401602060405180830381865afa158015612f37573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f5b9190615e69565b90505b80612fd15760405162461bcd60e51b815260206004820152602760248201527f696e73756666696369656e7420746f6b656e2062616c616e6365206f7220617060448201527f70726f76616c2e0000000000000000000000000000000000000000000000000060648201526084016109f5565b50505050505050565b60008161014001516001811115612ff357612ff3615ade565b14156130885760408082015160608301519151637921219560e11b81526001600160a01b038781166004830152868116602483015260448201939093526064810185905260a06084820152600060a482015291169063f242432a9060c401600060405180830381600087803b15801561306b57600080fd5b505af115801561307f573d6000803e3d6000fd5b50505050611b08565b600181610140015160018111156130a1576130a1615ade565b1415611b085760408082015160608301519151635c46a7ef60e11b81526001600160a01b03878116600483015286811660248301526044820193909352608060648201526000608482015291169063b88d4fde9060a401600060405180830381600087803b15801561311257600080fd5b505af1158015613126573d6000803e3d6000fd5b5050505050505050565b61313a82826141b1565b600082815261012d602052604090206110079082614254565b61315d8282614269565b600082815261012d60205260409020611007908261430a565b61317e612a95565b8151600090815261016360205260409020600101546001600160a01b039081169116146131f85760405162461bcd60e51b815260206004820152602260248201527f63616c6c6572206973206e6f7420746865206c697374696e672063726561746f604482015261391760f11b60648201526084016109f5565b805160009081526101636020908152604082208281556001810180546001600160a01b031990811690915560028201805482169055600382018490556004820184905560058201849055600682018490556007820180549091169055600881018390556009810192909255600a909101805461ffff1916905581015160c082015161328591309184612fda565b600161328f612a95565b8251602080850151604080516001600160a01b0392831681526000938101939093529316927f572cdc5ca5e918473319d0f4737494e4709ac879a7d0bcd11ce1bef24b24e81d910160405180910390a450565b60008260c0015182608001516132f89190615d16565b600060c085018181524260a087019081528651835261016360209081526040938490208851815590880151600180830180546001600160a01b039384166001600160a01b031991821617909155958a015160028401805491841691881691909117905560608a0151600384015560808a01516004840155925160058301559251600682015560e08801516007820180549190941694169390931790915561010086015160088301556101208601516009830155610140860151600a8301805494955087949192909160ff19169083818111156133d6576133d6615ade565b0217905550610160820151600a8201805461ff00191661010083600181111561340157613401615ade565b02179055505060006080840181815285518252610165602090815260409283902086518155818701516001820180546001600160a01b03199081166001600160a01b03938416179091559488015160028301556060880151600383018054909616911617909355905160049092019190915584015160e085015161348a9250309190848761431f565b6000613494612a95565b6001600160a01b031684600001517f572cdc5ca5e918473319d0f4737494e4709ac879a7d0bcd11ce1bef24b24e81d866020015186602001516040516134f09291906001600160a01b0392831681529116602082015260400190565b60405180910390a4505050565b604081810180514260a0860190815260008084528651815261016560209081528582208751815581880151600180830180546001600160a01b03199081166001600160a01b039485161790915597516002808501919091556060808c0151600380870180548d16928716929092179091556080808e01516004978801558e5189526101638852978c90208e518155968e015187850180548d169187169190911790559a8d015191860180548b16928516929092179091558b01519884019890985592890151908201559151600583015560c0870151600683015560e087015160078301805490951691161790925561010085015160088301556101208501516009830155610140850151600a83018054929487949360ff191690838181111561362857613628615ade565b0217905550610160820151600a8201805461ff00191661010083600181111561365357613653615ade565b021790555090505061348a3083602001518386612fda565b613677868683856145a4565b808660c0018181516136899190615ec1565b9052508551600090815261016360209081526040918290208851815590880151600180830180546001600160a01b03199081166001600160a01b0394851617909155938a0151600284018054861691841691909117905560608a0151600384015560808a0151600484015560a08a0151600584015560c08a0151600684015560e08a015160078401805490951692169190911790925561010088015160088201556101208801516009820155610140880151600a820180548a9460ff1990911690838181111561375b5761375b615ade565b0217905550610160820151600a8201805461ff00191661010083600181111561378657613786615ade565b021790555090505061379f85876020015185858a61431f565b6137af8660200151858389612fda565b602080870151604080890151895182516001600160a01b038a81168252958101879052928301879052928416931691907f306e6cde5eb293794d557a3a6c844de939e6206b05e6910451c512852bf654a5906060015b60405180910390a4505050505050565b600054610100900460ff166138805760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016109f5565b613888614786565b565b600054610100900460ff166138f55760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016109f5565b6138fd6147f7565b61390681614862565b50565b6110a48282613130565b6000611ae68383614935565b60606001600160a01b0383163b61399e5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e7472616374000000000000000000000000000000000000000000000000000060648201526084016109f5565b600080846001600160a01b0316846040516139b99190615ed8565b600060405180830381855af49150503d80600081146139f4576040519150601f19603f3d011682016040523d82523d6000602084013e6139f9565b606091505b5091509150613a218282604051806060016040528060278152602001615f726027913961495f565b95945050505050565b8151600090815261016560209081526040808320815160a0810183528154815260018201546001600160a01b03908116948201949094526002820154928101839052600382015490931660608401526004015460808301819052919291613a919190615d16565b9050600083604001518460800151613aa99190615d16565b9050613aca8560c00151866101000151613ac39190615d16565b8383614998565b613b165760405162461bcd60e51b815260206004820152601060248201527f6e6f742077696e6e696e67206269642e0000000000000000000000000000000060448201526064016109f5565b6000856101200151118015613b3f57508460c00151856101200151613b3b9190615d16565b8110155b15613b5357613b4e85856134fd565b613e02565b84516000908152610165602090815260409182902086518155908601516001820180546001600160a01b03199081166001600160a01b0393841617909155928701516002830155606087015160038301805490941691161790915560808501516004909101556101625460a086015167ffffffffffffffff90911690613bda904290615ec1565b11613d06576101625460a08601805167ffffffffffffffff90921691613c01908390615c35565b9052508451600090815261016360209081526040918290208751815590870151600180830180546001600160a01b03199081166001600160a01b0394851617909155938901516002840180548616918416919091179055606089015160038401556080890151600484015560a0890151600584015560c0890151600684015560e089015160078401805490951692169190911790925561010087015160088201556101208701516009820155610140870151600a82018054899460ff19909116908381811115613cd357613cd3615ade565b0217905550610160820151600a8201805461ff001916610100836001811115613cfe57613cfe615ade565b021790555050505b60208301517f0000000000000000000000000000000000000000000000000000000000000000906001600160a01b031615801590613d445750600083115b15613d5e57613d5e8660e0015130866020015186856149fa565b613d738660e0015186602001513085856149fa565b8561016001516001811115613d8a57613d8a615ade565b85602001516001600160a01b031687600001517f8a412352601a288b3de40254a9de2ab14a497aa3638a7e558480680a56e2705d886040015189604001518a60800151613dd79190615d16565b6060808c01516040805194855260208501939093526001600160a01b03169183019190915201613805565b5050505050565b8160c00151816040015111158015613e25575060008260c00151115b613e715760405162461bcd60e51b815260206004820152601f60248201527f696e73756666696369656e7420746f6b656e7320696e206c697374696e672e0060448201526064016109f5565b613e978160200151826060015183604001518460800151613e929190615d16565b614b6f565b815160009081526101646020908152604080832082850180516001600160a01b0390811686529190935292819020845181559151600180840180549286166001600160a01b0319938416179055918501516002840155606085015160038401805491909516911617909255608083015160049091015561016083015190811115613f2357613f23615ade565b81602001516001600160a01b031683600001517f8a412352601a288b3de40254a9de2ab14a497aa3638a7e558480680a56e2705d846040015185604001518660800151613f709190615d16565b6060878101516040805194855260208501939093526001600160a01b0316838301529051918290030190a45050565b600061098e825490565b60006001600160e01b03198216637965db0b60e01b148061098e57506301ffc9a760e01b6001600160e01b031983161461098e565b3360009081526065602052604081205460ff1615614003575060131936013560601c90565b503390565b60606000614017836002615d16565b614022906002615c35565b67ffffffffffffffff81111561403a5761403a615422565b6040519080825280601f01601f191660200182016040528015614064576020820181803683370190505b509050600360fc1b8160008151811061407f5761407f615d35565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106140ae576140ae615d35565b60200101906001600160f81b031916908160001a90535060006140d2846002615d16565b6140dd906001615c35565b90505b6001811115614162577f303132333435363738396162636465660000000000000000000000000000000085600f166010811061411e5761411e615d35565b1a60f81b82828151811061413457614134615d35565b60200101906001600160f81b031916908160001a90535060049490941c9361415b81615ef4565b90506140e0565b508315611ae65760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016109f5565b600082815260fb602090815260408083206001600160a01b038516845290915290205460ff166110a457600082815260fb602090815260408083206001600160a01b03851684529091529020805460ff19166001179055614210612a95565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000611ae6836001600160a01b038416614cb2565b600082815260fb602090815260408083206001600160a01b038516845290915290205460ff16156110a457600082815260fb602090815260408083206001600160a01b03851684529091529020805460ff191690556142c6612a95565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b6000611ae6836001600160a01b038416614d01565b610161546000906127109061434590600160a01b900467ffffffffffffffff1685615d16565b61434f9190615f0b565b60405163085b49ad60e41b81523060048201526001602482015290915060009081906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906385b49ad0906044016040805180830381865afa1580156143c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906143e59190615f2d565b909250905060006127106143f98388615d16565b6144039190615f0b565b905060008086604001516001600160a01b0316632a55205a88606001518a6040518363ffffffff1660e01b8152600401614447929190918252602082015260400190565b6040805180830381865afa92505050801561447f575060408051601f3d908101601f1916820190925261447c91810190615f2d565b60015b61448857614513565b6001600160a01b038216158015906144a05750600081115b156145105789856144b18a84615c35565b6144bb9190615c35565b11156145095760405162461bcd60e51b815260206004820152601560248201527f666565732065786365656420746865207072696365000000000000000000000060448201526064016109f5565b8192508093505b50505b610161547f000000000000000000000000000000000000000000000000000000000000000090614551908b908e906001600160a01b03168a856149fa565b61455e8a8d8486856149fa565b61456b8a8d8887856149fa565b6145968a8d8d8761457c888d615c35565b6145869190615c35565b614590908e615ec1565b856149fa565b505050505050505050505050565b600084610160015160018111156145bd576145bd615ade565b1461460a5760405162461bcd60e51b815260206004820152601860248201527f63616e6e6f74206275792066726f6d206c697374696e672e000000000000000060448201526064016109f5565b60008460c0015111801561461e5750600082115b801561462e57508360c001518211155b61467a5760405162461bcd60e51b815260206004820152601960248201527f696e76616c696420616d6f756e74206f6620746f6b656e732e0000000000000060448201526064016109f5565b8360a00151421080156146905750836080015142115b6146dc5760405162461bcd60e51b815260206004820152601760248201527f6e6f742077697468696e2073616c652077696e646f772e00000000000000000060448201526064016109f5565b60e08401516001600160a01b031673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1415614759578034146147545760405162461bcd60e51b815260206004820152601260248201527f6d73672e76616c756520213d207072696365000000000000000000000000000060448201526064016109f5565b614768565b614768838560e0015183614b6f565b611b0884602001518560400151866060015185886101400151612cc2565b600054610100900460ff166147f15760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016109f5565b60018055565b600054610100900460ff166138885760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016109f5565b600054610100900460ff166148cd5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016109f5565b60005b81518110156110a4576001606560008484815181106148f1576148f1615d35565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff19169115159190911790558061492d81615d92565b9150506148d0565b600082600001828154811061494c5761494c615d35565b9060005260206000200154905092915050565b6060831561496e575081611ae6565b82511561497e5782518084602001fd5b8160405162461bcd60e51b81526004016109f59190615ba3565b6000826149a9575082811015611ae6565b82821180156149f257506101625468010000000000000000900467ffffffffffffffff16836127106149db8286615ec1565b6149e59190615d16565b6149ef9190615f0b565b10155b949350505050565b81614a0457613e02565b6001600160a01b03851673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1415614b63576001600160a01b038416301415614a9f57604051632e1a7d4d60e01b8152600481018390526001600160a01b03821690632e1a7d4d90602401600060405180830381600087803b158015614a7c57600080fd5b505af1158015614a90573d6000803e3d6000fd5b50505050613b4e838383614df4565b6001600160a01b038316301415614b5857348214614aff5760405162461bcd60e51b815260206004820152601360248201527f6d73672e76616c756520213d20616d6f756e740000000000000000000000000060448201526064016109f5565b806001600160a01b031663d0e30db0836040518263ffffffff1660e01b81526004016000604051808303818588803b158015614b3a57600080fd5b505af1158015614b4e573d6000803e3d6000fd5b5050505050613e02565b613b4e838383614df4565b613e0285858585614f63565b6040516370a0823160e01b81526001600160a01b0384811660048301528291908416906370a0823190602401602060405180830381865afa158015614bb8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614bdc9190615e8b565b10158015614c5b5750604051636eb1769f60e11b81526001600160a01b03848116600483015230602483015282919084169063dd62ed3e90604401602060405180830381865afa158015614c34573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614c589190615e8b565b10155b6110075760405162461bcd60e51b815260206004820152602260248201527f696e73756666696369656e742062616c616e6365206f7220616c6c6f77616e63604482015261329760f11b60648201526084016109f5565b6000818152600183016020526040812054614cf95750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915561098e565b50600061098e565b60008181526001830160205260408120548015614dea576000614d25600183615ec1565b8554909150600090614d3990600190615ec1565b9050818114614d9e576000866000018281548110614d5957614d59615d35565b9060005260206000200154905080876000018481548110614d7c57614d7c615d35565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080614daf57614daf615f5b565b60019003818190600052602060002001600090559055856001016000868152602001908152602001600020600090556001935050505061098e565b600091505061098e565b6000836001600160a01b03168360405160006040518083038185875af1925050503d8060008114614e41576040519150601f19603f3d011682016040523d82523d6000602084013e614e46565b606091505b5050905080611b0857816001600160a01b031663d0e30db0846040518263ffffffff1660e01b81526004016000604051808303818588803b158015614e8a57600080fd5b505af1158015614e9e573d6000803e3d6000fd5b505060405163a9059cbb60e01b81526001600160a01b038881166004830152602482018890528616935063a9059cbb925060440190506020604051808303816000875af1158015614ef3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614f179190615e69565b611b085760405162461bcd60e51b815260206004820152600f60248201527f7472616e73666572206661696c6564000000000000000000000000000000000060448201526064016109f5565b816001600160a01b0316836001600160a01b03161415614f8257611b08565b6040516370a0823160e01b81526001600160a01b038381166004830152600091908616906370a0823190602401602060405180830381865afa158015614fcc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614ff09190615e8b565b905060006001600160a01b0385163014615084576040516323b872dd60e01b81526001600160a01b0386811660048301528581166024830152604482018590528716906323b872dd906064016020604051808303816000875af115801561505b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061507f9190615e69565b6150f7565b60405163a9059cbb60e01b81526001600160a01b0385811660048301526024820185905287169063a9059cbb906044016020604051808303816000875af11580156150d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906150f79190615e69565b6040516370a0823160e01b81526001600160a01b0386811660048301529192506000918816906370a0823190602401602060405180830381865afa158015615143573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906151679190615e8b565b905081801561517e575061517b8484615c35565b81145b612fd15760405162461bcd60e51b815260206004820152601960248201527f63757272656e6379207472616e73666572206661696c65642e0000000000000060448201526064016109f5565b8280546151d690615dad565b90600052602060002090601f0160209004810192826151f8576000855561523e565b82601f1061521157805160ff191683800117855561523e565b8280016001018555821561523e579182015b8281111561523e578251825591602001919060010190615223565b5061524a9291506152c2565b5090565b82805461525a90615dad565b90600052602060002090601f01602090048101928261527c576000855561523e565b82601f106152955782800160ff1982351617855561523e565b8280016001018555821561523e579182015b8281111561523e5782358255916020019190600101906152a7565b5b8082111561524a57600081556001016152c3565b6000602082840312156152e957600080fd5b81356001600160e01b031981168114611ae657600080fd5b6001600160a01b038116811461390657600080fd5b8035612c8681615301565b60008083601f84011261533357600080fd5b50813567ffffffffffffffff81111561534b57600080fd5b60208301915083602082850101111561536357600080fd5b9250929050565b60008060008060006080868803121561538257600080fd5b853561538d81615301565b9450602086013561539d81615301565b935060408601359250606086013567ffffffffffffffff8111156153c057600080fd5b6153cc88828901615321565b969995985093965092949392505050565b600080604083850312156153f057600080fd5b82356153fb81615301565b946020939093013593505050565b60006020828403121561541b57600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b604051610120810167ffffffffffffffff8111828210171561545c5761545c615422565b60405290565b604051601f8201601f1916810167ffffffffffffffff8111828210171561548b5761548b615422565b604052919050565b803560028110612c8657600080fd5b600061012082840312156154b557600080fd5b6154bd615438565b6154c683615316565b8152602083013560208201526040830135604082015260608301356060820152608083013560808201526154fc60a08401615316565b60a082015260c083013560c082015260e083013560e0820152610100615523818501615493565b908201529392505050565b6000806040838503121561554157600080fd5b82359150602083013561555381615301565b809150509250929050565b60006020828403121561557057600080fd5b8135611ae681615301565b600080600080600060a0868803121561559357600080fd5b8535945060208601356155a581615301565b93506040860135925060608601356155bc81615301565b949793965091946080013592915050565b600067ffffffffffffffff8311156155e7576155e7615422565b6155fa601f8401601f1916602001615462565b905082815283838301111561560e57600080fd5b828260208301376000602084830101529392505050565b600067ffffffffffffffff82111561563f5761563f615422565b5060051b60200190565b600080600080600060a0868803121561566157600080fd5b853561566c81615301565b945060208681013567ffffffffffffffff8082111561568a57600080fd5b818901915089601f83011261569e57600080fd5b6156ac8a83358585016155cd565b965060408901359150808211156156c257600080fd5b508701601f810189136156d457600080fd5b80356156e76156e282615625565b615462565b81815260059190911b8201830190838101908b83111561570657600080fd5b928401925b8284101561572d57833561571e81615301565b8252928401929084019061570b565b80975050505050506155bc60608701615316565b6000806040838503121561575457600080fd5b50508035926020909101359150565b6000806020838503121561577657600080fd5b823567ffffffffffffffff81111561578d57600080fd5b61579985828601615321565b90969095509350505050565b600080602083850312156157b857600080fd5b823567ffffffffffffffff808211156157d057600080fd5b818501915085601f8301126157e457600080fd5b8135818111156157f357600080fd5b8660208260051b850101111561580857600080fd5b60209290920196919550909350505050565b60005b8381101561583557818101518382015260200161581d565b83811115611b085750506000910152565b6000815180845261585e81602086016020860161581a565b601f01601f19169290920160200192915050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b828110156158c757603f198886030184526158b5858351615846565b94509285019290850190600101615899565b5092979650505050505050565b600080600080608085870312156158ea57600080fd5b8435935060208501359250604085013561590381615301565b9396929550929360600135925050565b6000806000806080858703121561592957600080fd5b84359350602085013561593b81615301565b9250604085013561590381615301565b600082601f83011261595c57600080fd5b8135602061596c6156e283615625565b82815260059290921b8401810191818101908684111561598b57600080fd5b8286015b848110156159a6578035835291830191830161598f565b509695505050505050565b600082601f8301126159c257600080fd5b611ae6838335602085016155cd565b600080600080600060a086880312156159e957600080fd5b85356159f481615301565b94506020860135615a0481615301565b9350604086013567ffffffffffffffff80821115615a2157600080fd5b615a2d89838a0161594b565b94506060880135915080821115615a4357600080fd5b615a4f89838a0161594b565b93506080880135915080821115615a6557600080fd5b50615a72888289016159b1565b9150509295509295909350565b600080600080600080600060e0888a031215615a9a57600080fd5b873596506020880135955060408801359450606088013593506080880135615ac181615301565b9699959850939692959460a0840135945060c09093013592915050565b634e487b7160e01b600052602160045260246000fd5b6002811061390657634e487b7160e01b600052602160045260246000fd5b615b1b81615af4565b9052565b6000610180820190508d82526001600160a01b03808e166020840152808d1660408401528b60608401528a60808401528960a08401528860c084015280881660e0840152508561010083015284610120830152615b7b84615af4565b83610140830152615b8b83615af4565b826101608301529d9c50505050505050505050505050565b602081526000611ae66020830184615846565b600080600080600060a08688031215615bce57600080fd5b8535615bd981615301565b94506020860135615be981615301565b93506040860135925060608601359150608086013567ffffffffffffffff811115615c1357600080fd5b615a72888289016159b1565b634e487b7160e01b600052601160045260246000fd5b60008219821115615c4857615c48615c1f565b500190565b81518152602080830151610180830191615c71908401826001600160a01b03169052565b506040830151615c8c60408401826001600160a01b03169052565b50606083015160608301526080830151608083015260a083015160a083015260c083015160c083015260e0830151615ccf60e08401826001600160a01b03169052565b506101008381015190830152610120808401519083015261014080840151615cf982850182615b12565b505061016080840151615d0e82850182615b12565b505092915050565b6000816000190483118215151615615d3057615d30615c1f565b500290565b634e487b7160e01b600052603260045260246000fd5b6000808335601e19843603018112615d6257600080fd5b83018035915067ffffffffffffffff821115615d7d57600080fd5b60200191503681900382131561536357600080fd5b6000600019821415615da657615da6615c1f565b5060010190565b600181811c90821680615dc157607f821691505b60208210811415615de257634e487b7160e01b600052602260045260246000fd5b50919050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351615e2081601785016020880161581a565b7f206973206d697373696e6720726f6c65200000000000000000000000000000006017918401918201528351615e5d81602884016020880161581a565b01602801949350505050565b600060208284031215615e7b57600080fd5b81518015158114611ae657600080fd5b600060208284031215615e9d57600080fd5b5051919050565b600060208284031215615eb657600080fd5b8151611ae681615301565b600082821015615ed357615ed3615c1f565b500390565b60008251615eea81846020870161581a565b9190910192915050565b600081615f0357615f03615c1f565b506000190190565b600082615f2857634e487b7160e01b600052601260045260246000fd5b500490565b60008060408385031215615f4057600080fd5b8251615f4b81615301565b6020939093015192949293505050565b634e487b7160e01b600052603160045260246000fdfe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a164736f6c634300080c000a";
var o8 = (a) => a.length > 1;
var _ = class extends ContractFactory {
  constructor(...e) {
    o8(e) ? super(...e) : super(k, q1, e[0]), this.contractName = "Marketplace";
  }
  deploy(e, t, f3) {
    return super.deploy(e, t, f3 || {});
  }
  getDeployTransaction(e, t, f3) {
    return super.getDeployTransaction(e, t, f3 || {});
  }
  attach(e) {
    return super.attach(e);
  }
  connect(e) {
    return super.connect(e);
  }
  static createInterface() {
    return new utils_exports.Interface(k);
  }
  static connect(e, t) {
    return new Contract(e, k, t);
  }
};
_.bytecode = q1, _.abi = k;
var U = [{ inputs: [], name: "erc1155", outputs: [{ internalType: "contract IERC1155", name: "", type: "address" }], stateMutability: "view", type: "function" }, { inputs: [], name: "erc20", outputs: [{ internalType: "contract IERC20", name: "", type: "address" }], stateMutability: "view", type: "function" }, { inputs: [], name: "erc721", outputs: [{ internalType: "contract IERC721", name: "", type: "address" }], stateMutability: "view", type: "function" }];
var N1 = "0x608060405234801561001057600080fd5b5060a08061001f6000396000f3fe6080604052348015600f57600080fd5b5060043610603c5760003560e01c8063785e9e86146041578063bca6ce6414606f578063d56022d7146081575b600080fd5b6000546053906001600160a01b031681565b6040516001600160a01b03909116815260200160405180910390f35b6001546053906001600160a01b031681565b6002546053906001600160a01b03168156fea164736f6c634300080c000a";
var v8 = (a) => a.length > 1;
var F = class extends ContractFactory {
  constructor(...e) {
    v8(e) ? super(...e) : super(U, N1, e[0]), this.contractName = "Mock";
  }
  deploy(e) {
    return super.deploy(e || {});
  }
  getDeployTransaction(e) {
    return super.getDeployTransaction(e || {});
  }
  attach(e) {
    return super.attach(e);
  }
  connect(e) {
    return super.connect(e);
  }
  static createInterface() {
    return new utils_exports.Interface(U);
  }
  static connect(e, t) {
    return new Contract(e, U, t);
  }
};
F.bytecode = N1, F.abi = U;
var S = [{ anonymous: false, inputs: [{ indexed: true, internalType: "address", name: "account", type: "address" }, { indexed: true, internalType: "address", name: "operator", type: "address" }, { indexed: false, internalType: "bool", name: "approved", type: "bool" }], name: "ApprovalForAll", type: "event" }, { anonymous: false, inputs: [{ indexed: false, internalType: "address", name: "newRoyaltyRecipient", type: "address" }, { indexed: false, internalType: "uint256", name: "newRoyaltyBps", type: "uint256" }], name: "DefaultRoyalty", type: "event" }, { anonymous: false, inputs: [{ indexed: false, internalType: "address", name: "prevOwner", type: "address" }, { indexed: false, internalType: "address", name: "newOwner", type: "address" }], name: "OwnerUpdated", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "bytes32", name: "role", type: "bytes32" }, { indexed: true, internalType: "bytes32", name: "previousAdminRole", type: "bytes32" }, { indexed: true, internalType: "bytes32", name: "newAdminRole", type: "bytes32" }], name: "RoleAdminChanged", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "bytes32", name: "role", type: "bytes32" }, { indexed: true, internalType: "address", name: "account", type: "address" }, { indexed: true, internalType: "address", name: "sender", type: "address" }], name: "RoleGranted", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "bytes32", name: "role", type: "bytes32" }, { indexed: true, internalType: "address", name: "account", type: "address" }, { indexed: true, internalType: "address", name: "sender", type: "address" }], name: "RoleRevoked", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "uint256", name: "tokenId", type: "uint256" }, { indexed: false, internalType: "address", name: "royaltyRecipient", type: "address" }, { indexed: false, internalType: "uint256", name: "royaltyBps", type: "uint256" }], name: "RoyaltyForToken", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "address", name: "wrapper", type: "address" }, { indexed: false, internalType: "address", name: "sentTo", type: "address" }, { indexed: true, internalType: "uint256", name: "tokenIdOfShares", type: "uint256" }, { indexed: false, internalType: "uint256", name: "sharesUnwrapped", type: "uint256" }, { components: [{ internalType: "address[]", name: "erc1155AssetContracts", type: "address[]" }, { internalType: "uint256[][]", name: "erc1155TokensToWrap", type: "uint256[][]" }, { internalType: "uint256[][]", name: "erc1155AmountsToWrap", type: "uint256[][]" }, { internalType: "address[]", name: "erc721AssetContracts", type: "address[]" }, { internalType: "uint256[][]", name: "erc721TokensToWrap", type: "uint256[][]" }, { internalType: "address[]", name: "erc20AssetContracts", type: "address[]" }, { internalType: "uint256[]", name: "erc20AmountsToWrap", type: "uint256[]" }], indexed: false, internalType: "struct MultiTokenTransferLib.MultiToken", name: "wrappedContents", type: "tuple" }], name: "TokensUnwrapped", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "address", name: "wrapper", type: "address" }, { indexed: true, internalType: "uint256", name: "tokenIdOfShares", type: "uint256" }, { components: [{ internalType: "address[]", name: "erc1155AssetContracts", type: "address[]" }, { internalType: "uint256[][]", name: "erc1155TokensToWrap", type: "uint256[][]" }, { internalType: "uint256[][]", name: "erc1155AmountsToWrap", type: "uint256[][]" }, { internalType: "address[]", name: "erc721AssetContracts", type: "address[]" }, { internalType: "uint256[][]", name: "erc721TokensToWrap", type: "uint256[][]" }, { internalType: "address[]", name: "erc20AssetContracts", type: "address[]" }, { internalType: "uint256[]", name: "erc20AmountsToWrap", type: "uint256[]" }], indexed: false, internalType: "struct MultiTokenTransferLib.MultiToken", name: "wrappedContents", type: "tuple" }], name: "TokensWrapped", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "address", name: "operator", type: "address" }, { indexed: true, internalType: "address", name: "from", type: "address" }, { indexed: true, internalType: "address", name: "to", type: "address" }, { indexed: false, internalType: "uint256[]", name: "ids", type: "uint256[]" }, { indexed: false, internalType: "uint256[]", name: "values", type: "uint256[]" }], name: "TransferBatch", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "address", name: "operator", type: "address" }, { indexed: true, internalType: "address", name: "from", type: "address" }, { indexed: true, internalType: "address", name: "to", type: "address" }, { indexed: false, internalType: "uint256", name: "id", type: "uint256" }, { indexed: false, internalType: "uint256", name: "value", type: "uint256" }], name: "TransferSingle", type: "event" }, { anonymous: false, inputs: [{ indexed: false, internalType: "string", name: "value", type: "string" }, { indexed: true, internalType: "uint256", name: "id", type: "uint256" }], name: "URI", type: "event" }, { inputs: [], name: "DEFAULT_ADMIN_ROLE", outputs: [{ internalType: "bytes32", name: "", type: "bytes32" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "account", type: "address" }, { internalType: "uint256", name: "id", type: "uint256" }], name: "balanceOf", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address[]", name: "accounts", type: "address[]" }, { internalType: "uint256[]", name: "ids", type: "uint256[]" }], name: "balanceOfBatch", outputs: [{ internalType: "uint256[]", name: "", type: "uint256[]" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "account", type: "address" }, { internalType: "uint256", name: "id", type: "uint256" }, { internalType: "uint256", name: "value", type: "uint256" }], name: "burn", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "account", type: "address" }, { internalType: "uint256[]", name: "ids", type: "uint256[]" }, { internalType: "uint256[]", name: "values", type: "uint256[]" }], name: "burnBatch", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [], name: "contractType", outputs: [{ internalType: "bytes32", name: "", type: "bytes32" }], stateMutability: "pure", type: "function" }, { inputs: [], name: "contractURI", outputs: [{ internalType: "string", name: "", type: "string" }], stateMutability: "view", type: "function" }, { inputs: [], name: "contractVersion", outputs: [{ internalType: "uint8", name: "", type: "uint8" }], stateMutability: "pure", type: "function" }, { inputs: [], name: "getDefaultRoyaltyInfo", outputs: [{ internalType: "address", name: "", type: "address" }, { internalType: "uint16", name: "", type: "uint16" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "bytes32", name: "role", type: "bytes32" }], name: "getRoleAdmin", outputs: [{ internalType: "bytes32", name: "", type: "bytes32" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "bytes32", name: "role", type: "bytes32" }, { internalType: "uint256", name: "index", type: "uint256" }], name: "getRoleMember", outputs: [{ internalType: "address", name: "", type: "address" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "bytes32", name: "role", type: "bytes32" }], name: "getRoleMemberCount", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "uint256", name: "_tokenId", type: "uint256" }], name: "getRoyaltyInfoForToken", outputs: [{ internalType: "address", name: "", type: "address" }, { internalType: "uint16", name: "", type: "uint16" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "bytes32", name: "role", type: "bytes32" }, { internalType: "address", name: "account", type: "address" }], name: "grantRole", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "bytes32", name: "role", type: "bytes32" }, { internalType: "address", name: "account", type: "address" }], name: "hasRole", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "_defaultAdmin", type: "address" }, { internalType: "string", name: "_name", type: "string" }, { internalType: "string", name: "_symbol", type: "string" }, { internalType: "string", name: "_contractURI", type: "string" }, { internalType: "address[]", name: "_trustedForwarders", type: "address[]" }, { internalType: "address", name: "_royaltyRecipient", type: "address" }, { internalType: "uint256", name: "_royaltyBps", type: "uint256" }], name: "initialize", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "account", type: "address" }, { internalType: "address", name: "operator", type: "address" }], name: "isApprovedForAll", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "forwarder", type: "address" }], name: "isTrustedForwarder", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "bytes[]", name: "data", type: "bytes[]" }], name: "multicall", outputs: [{ internalType: "bytes[]", name: "results", type: "bytes[]" }], stateMutability: "nonpayable", type: "function" }, { inputs: [], name: "name", outputs: [{ internalType: "string", name: "", type: "string" }], stateMutability: "view", type: "function" }, { inputs: [], name: "nextTokenIdToMint", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "", type: "address" }, { internalType: "address", name: "", type: "address" }, { internalType: "uint256[]", name: "", type: "uint256[]" }, { internalType: "uint256[]", name: "", type: "uint256[]" }, { internalType: "bytes", name: "", type: "bytes" }], name: "onERC1155BatchReceived", outputs: [{ internalType: "bytes4", name: "", type: "bytes4" }], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "", type: "address" }, { internalType: "address", name: "", type: "address" }, { internalType: "uint256", name: "", type: "uint256" }, { internalType: "uint256", name: "", type: "uint256" }, { internalType: "bytes", name: "", type: "bytes" }], name: "onERC1155Received", outputs: [{ internalType: "bytes4", name: "", type: "bytes4" }], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "", type: "address" }, { internalType: "address", name: "", type: "address" }, { internalType: "uint256", name: "", type: "uint256" }, { internalType: "bytes", name: "", type: "bytes" }], name: "onERC721Received", outputs: [{ internalType: "bytes4", name: "", type: "bytes4" }], stateMutability: "nonpayable", type: "function" }, { inputs: [], name: "owner", outputs: [{ internalType: "address", name: "", type: "address" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "bytes32", name: "role", type: "bytes32" }, { internalType: "address", name: "account", type: "address" }], name: "renounceRole", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "bytes32", name: "role", type: "bytes32" }, { internalType: "address", name: "account", type: "address" }], name: "revokeRole", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "uint256", name: "tokenId", type: "uint256" }, { internalType: "uint256", name: "salePrice", type: "uint256" }], name: "royaltyInfo", outputs: [{ internalType: "address", name: "receiver", type: "address" }, { internalType: "uint256", name: "royaltyAmount", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "from", type: "address" }, { internalType: "address", name: "to", type: "address" }, { internalType: "uint256[]", name: "ids", type: "uint256[]" }, { internalType: "uint256[]", name: "amounts", type: "uint256[]" }, { internalType: "bytes", name: "data", type: "bytes" }], name: "safeBatchTransferFrom", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "from", type: "address" }, { internalType: "address", name: "to", type: "address" }, { internalType: "uint256", name: "id", type: "uint256" }, { internalType: "uint256", name: "amount", type: "uint256" }, { internalType: "bytes", name: "data", type: "bytes" }], name: "safeTransferFrom", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "operator", type: "address" }, { internalType: "bool", name: "approved", type: "bool" }], name: "setApprovalForAll", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "string", name: "_uri", type: "string" }], name: "setContractURI", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "_royaltyRecipient", type: "address" }, { internalType: "uint256", name: "_royaltyBps", type: "uint256" }], name: "setDefaultRoyaltyInfo", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "_newOwner", type: "address" }], name: "setOwner", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "uint256", name: "_tokenId", type: "uint256" }, { internalType: "address", name: "_recipient", type: "address" }, { internalType: "uint256", name: "_bps", type: "uint256" }], name: "setRoyaltyInfoForToken", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "bytes4", name: "interfaceId", type: "bytes4" }], name: "supportsInterface", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "view", type: "function" }, { inputs: [], name: "symbol", outputs: [{ internalType: "string", name: "", type: "string" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "uint256", name: "", type: "uint256" }], name: "totalShares", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "uint256", name: "", type: "uint256" }], name: "totalSupply", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "uint256", name: "_tokenId", type: "uint256" }, { internalType: "uint256", name: "_amountToRedeem", type: "uint256" }, { internalType: "address", name: "_sendTo", type: "address" }], name: "unwrap", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "uint256", name: "_tokenId", type: "uint256" }], name: "uri", outputs: [{ internalType: "string", name: "", type: "string" }], stateMutability: "view", type: "function" }, { inputs: [{ components: [{ internalType: "address[]", name: "erc1155AssetContracts", type: "address[]" }, { internalType: "uint256[][]", name: "erc1155TokensToWrap", type: "uint256[][]" }, { internalType: "uint256[][]", name: "erc1155AmountsToWrap", type: "uint256[][]" }, { internalType: "address[]", name: "erc721AssetContracts", type: "address[]" }, { internalType: "uint256[][]", name: "erc721TokensToWrap", type: "uint256[][]" }, { internalType: "address[]", name: "erc20AssetContracts", type: "address[]" }, { internalType: "uint256[]", name: "erc20AmountsToWrap", type: "uint256[]" }], internalType: "struct MultiTokenTransferLib.MultiToken", name: "_wrappedContents", type: "tuple" }, { internalType: "uint256", name: "_shares", type: "uint256" }, { internalType: "string", name: "_uriForShares", type: "string" }], name: "wrap", outputs: [{ internalType: "uint256", name: "tokenId", type: "uint256" }], stateMutability: "payable", type: "function" }];
var L1 = "0x608060405234801561001057600080fd5b506159a780620000216000396000f3fe6080604052600436106102d05760003560e01c80639010d07c11610179578063bc197c81116100d6578063d547741f1161008a578063f23a6e6111610064578063f23a6e61146108f9578063f242432a14610925578063f5298aca1461094557600080fd5b8063d547741f1461087a578063e8a3d4851461089a578063e985e9c5146108af57600080fd5b8063ca15c873116100bb578063ca15c87314610814578063cb2ef6f714610834578063cde144671461086757600080fd5b8063bc197c81146107ba578063bd85b039146107e657600080fd5b8063a0a8e4601161012d578063a22cb46511610112578063a22cb46514610735578063ac9650d814610755578063b24f2d391461078257600080fd5b8063a0a8e46014610704578063a217fddf1461072057600080fd5b8063938e3d7b1161015e578063938e3d7b146106af57806395d89b41146106cf5780639bcf7a15146106e457600080fd5b80639010d07c1461064957806391d148541461066957600080fd5b80632f2ff15d11610232578063572b6c05116101e65780636b20c454116101c05780636b20c454146105dc578063754b8fe7146105fc5780638da5cb5b1461061c57600080fd5b8063572b6c05146105635780635b952ae41461059c578063600dd5ea146105bc57600080fd5b80633b1475a7116102175780633b1475a7146104dd5780634cc157df146104f45780634e1273f41461053657600080fd5b80632f2ff15d1461049d57806336568abe146104bd57600080fd5b806313f2dad011610289578063248a9ca31161026e578063248a9ca31461040e5780632a55205a1461043e5780632eb2c2d61461047d57600080fd5b806313f2dad01461039c578063150b7a02146103ca57600080fd5b806306fdde03116102ba57806306fdde03146103385780630e89341c1461035a57806313af40351461037a57600080fd5b8062fdd58e146102d557806301ffc9a714610308575b600080fd5b3480156102e157600080fd5b506102f56102f0366004614367565b610965565b6040519081526020015b60405180910390f35b34801561031457600080fd5b506103286103233660046143a9565b610a14565b60405190151581526020016102ff565b34801561034457600080fd5b5061034d610a5a565b6040516102ff919061441e565b34801561036657600080fd5b5061034d610375366004614431565b610ae9565b34801561038657600080fd5b5061039a61039536600461444a565b610b8c565b005b3480156103a857600080fd5b506102f56103b7366004614431565b6102306020526000908152604090205481565b3480156103d657600080fd5b506103f56103e5366004614547565b630a85bd0160e11b949350505050565b6040516001600160e01b031990911681526020016102ff565b34801561041a57600080fd5b506102f5610429366004614431565b600090815260fb602052604090206001015490565b34801561044a57600080fd5b5061045e6104593660046145b3565b610c92565b604080516001600160a01b0390931683526020830191909152016102ff565b34801561048957600080fd5b5061039a61049836600461466a565b610ccf565b3480156104a957600080fd5b5061039a6104b8366004614718565b610d83565b3480156104c957600080fd5b5061039a6104d8366004614718565b610db0565b3480156104e957600080fd5b506102f561022a5481565b34801561050057600080fd5b5061051461050f366004614431565b610e4c565b604080516001600160a01b03909316835261ffff9091166020830152016102ff565b34801561054257600080fd5b506105566105513660046147b7565b610ec5565b6040516102ff9190614856565b34801561056f57600080fd5b5061032861057e36600461444a565b6001600160a01b031660009081526065602052604090205460ff1690565b3480156105a857600080fd5b5061039a6105b7366004614869565b611003565b3480156105c857600080fd5b5061039a6105d7366004614367565b611590565b3480156105e857600080fd5b5061039a6105f73660046148a2565b61167b565b34801561060857600080fd5b5061039a610617366004614918565b611713565b34801561062857600080fd5b5061063161190f565b6040516001600160a01b0390911681526020016102ff565b34801561065557600080fd5b506106316106643660046145b3565b61196a565b34801561067557600080fd5b50610328610684366004614718565b600091825260fb602090815260408084206001600160a01b0393909316845291905290205460ff1690565b3480156106bb57600080fd5b5061039a6106ca366004614a39565b61198a565b3480156106db57600080fd5b5061034d6119ab565b3480156106f057600080fd5b5061039a6106ff366004614a7b565b6119b9565b34801561071057600080fd5b50604051600181526020016102ff565b34801561072c57600080fd5b506102f5600081565b34801561074157600080fd5b5061039a610750366004614ac1565b611aa3565b34801561076157600080fd5b50610775610770366004614aef565b611ab5565b6040516102ff9190614b64565b34801561078e57600080fd5b5061022b5461022c546001600160a01b03909116906fffffffffffffffffffffffffffffffff16610514565b3480156107c657600080fd5b506103f56107d536600461466a565b63bc197c8160e01b95945050505050565b3480156107f257600080fd5b506102f5610801366004614431565b61022f6020526000908152604090205481565b34801561082057600080fd5b506102f561082f366004614431565b611baa565b34801561084057600080fd5b507f4d756c74697772617000000000000000000000000000000000000000000000006102f5565b6102f5610875366004614bc6565b611bc2565b34801561088657600080fd5b5061039a610895366004614718565b611d14565b3480156108a657600080fd5b5061034d611d3c565b3480156108bb57600080fd5b506103286108ca366004614c3e565b6001600160a01b0391821660009081526101f66020908152604080832093909416825291909152205460ff1690565b34801561090557600080fd5b506103f5610914366004614c6c565b63f23a6e6160e01b95945050505050565b34801561093157600080fd5b5061039a610940366004614c6c565b611d4a565b34801561095157600080fd5b5061039a610960366004614cd5565b611df7565b60006001600160a01b0383166109e85760405162461bcd60e51b815260206004820152602b60248201527f455243313135353a2062616c616e636520717565727920666f7220746865207a60448201527f65726f206164647265737300000000000000000000000000000000000000000060648201526084015b60405180910390fd5b5060008181526101f5602090815260408083206001600160a01b03861684529091529020545b92915050565b6000610a1f82611e8f565b80610a3a57506001600160e01b03198216636cdb3d1360e11b145b80610a0e57506001600160e01b0319821663152a902d60e11b1492915050565b6102278054610a6890614d0a565b80601f0160208091040260200160405190810160405280929190818152602001828054610a9490614d0a565b8015610ae15780601f10610ab657610100808354040283529160200191610ae1565b820191906000526020600020905b815481529060010190602001808311610ac457829003601f168201915b505050505081565b600081815261023160205260409020805460609190610b0790614d0a565b80601f0160208091040260200160405190810160405280929190818152602001828054610b3390614d0a565b8015610b805780601f10610b5557610100808354040283529160200191610b80565b820191906000526020600020905b815481529060010190602001808311610b6357829003601f168201915b50505050509050919050565b6000610b9f81610b9a611ecf565b611ed9565b6001600160a01b03821660009081527fc88390e7e62175be0932452175b6a7222b6b094ab0ef984a5153c620345d8975602052604090205460ff16610c265760405162461bcd60e51b815260206004820152601b60248201527f6e6577206f776e6572206e6f74206d6f64756c652061646d696e2e000000000060448201526064016109df565b61022954604080516001600160a01b03928316815291841660208301527f8292fce18fa69edf4db7b94ea2e58241df0ae57f97e0a6c9b29067028bf92d76910160405180910390a15061022980546001600160a01b0319166001600160a01b0392909216919091179055565b600080600080610ca186610e4c565b90945084925061ffff169050612710610cba8287614d5b565b610cc49190614d90565b925050509250929050565b610cd7611ecf565b6001600160a01b0316856001600160a01b03161480610cfd5750610cfd856108ca611ecf565b610d6f5760405162461bcd60e51b815260206004820152603260248201527f455243313135353a207472616e736665722063616c6c6572206973206e6f742060448201527f6f776e6572206e6f7220617070726f766564000000000000000000000000000060648201526084016109df565b610d7c8585858585611f59565b5050505050565b600082815260fb6020526040902060010154610da181610b9a611ecf565b610dab83836121d5565b505050565b610db8611ecf565b6001600160a01b0316816001600160a01b031614610e3e5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c66000000000000000000000000000000000060648201526084016109df565b610e4882826121f8565b5050565b600081815261022e60209081526040808320815180830190925280546001600160a01b031680835260019091015492820192909252829115610e945780516020820151610ebb565b61022b5461022c546001600160a01b03909116906fffffffffffffffffffffffffffffffff165b9250925050915091565b60608151835114610f3e5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e67746860448201527f206d69736d61746368000000000000000000000000000000000000000000000060648201526084016109df565b6000835167ffffffffffffffff811115610f5a57610f5a614467565b604051908082528060200260200182016040528015610f83578160200160208202803683370190505b50905060005b8451811015610ffb57610fce858281518110610fa757610fa7614da4565b6020026020010151858381518110610fc157610fc1614da4565b6020026020010151610965565b828281518110610fe057610fe0614da4565b6020908102919091010152610ff481614dba565b9050610f89565b509392505050565b600260335414156110565760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016109df565b600260335561022a5483106110ad5760405162461bcd60e51b815260206004820152600f60248201527f696e76616c696420746f6b656e4964000000000000000000000000000000000060448201526064016109df565b816110bf6110b9611ecf565b85610965565b101561110d5760405162461bcd60e51b815260206004820152601a60248201527f756e7772617070696e67206d6f7265207468616e206f776e656400000000000060448201526064016109df565b600083815261023060209081526040808320546102328352818420825181546101009581028201860190945260e08101848152929588871495909491938492909184919084018282801561118a57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161116c575b5050505050815260200160018201805480602002602001604051908101604052809291908181526020016000905b828210156112245760008481526020908190208301805460408051828502810185019091528181529283018282801561121057602002820191906000526020600020905b8154815260200190600101908083116111fc575b5050505050815260200190600101906111b8565b50505050815260200160028201805480602002602001604051908101604052809291908181526020016000905b828210156112bd576000848152602090819020830180546040805182850281018501909152818152928301828280156112a957602002820191906000526020600020905b815481526020019060010190808311611295575b505050505081526020019060010190611251565b5050505081526020016003820180548060200260200160405190810160405280929190818152602001828054801561131e57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611300575b5050505050815260200160048201805480602002602001604051908101604052809291908181526020016000905b828210156113b8576000848152602090819020830180546040805182850281018501909152818152928301828280156113a457602002820191906000526020600020905b815481526020019060010190808311611390575b50505050508152602001906001019061134c565b5050505081526020016005820180548060200260200160405190810160405280929190818152602001828054801561141957602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116113fb575b505050505081526020016006820180548060200260200160405190810160405280929190818152602001828054801561147157602002820191906000526020600020905b81548152602001906001019080831161145d575b505050505081525050905061148e611487611ecf565b8787611df7565b600086815261022f602052604090205461151357600086815261023260205260408120906114bc82826141dc565b6114ca6001830160006141fa565b6114d86002830160006141fa565b6114e66003830160006141dc565b6114f46004830160006141fa565b6115026005830160006141dc565b6115106006830160006141dc565b50505b81156115295761152430858361221b565b611536565b611536308583888761223c565b8561153f611ecf565b6001600160a01b03167fbea23a5d5d2f9f8870c832f365d0da18b82c673d11b74920d8f613fda6b898bf86888560405161157b93929190614e66565b60405180910390a35050600160335550505050565b600061159e81610b9a611ecf565b6127108211156115f05760405162461bcd60e51b815260206004820152601260248201527f65786365656420726f79616c747920627073000000000000000000000000000060448201526064016109df565b61022b80546001600160a01b0319166001600160a01b03851690811790915561022c80546fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff851617905560408051918252602082018490527f90d7ec04bcb8978719414f82e52e4cb651db41d0e6f8cea6118c2191e6183adb910160405180910390a1505050565b611683611ecf565b6001600160a01b0316836001600160a01b031614806116a957506116a9836108ca611ecf565b6117085760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f726044820152691030b8383937bb32b21760b11b60648201526084016109df565b610dab8383836123b7565b600054610100900460ff1661172e5760005460ff1615611732565b303b155b6117a45760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016109df565b600054610100900460ff161580156117c6576000805461ffff19166101011790555b6117ce61260a565b6117d78461267f565b6117ef604051806020016040528060008152506126fe565b8651611803906102279060208a0190614218565b50855161181890610228906020890190614218565b5061022b80546001600160a01b0319166001600160a01b03851617905561022c80546fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff841617905584516118779061022d906020880190614218565b5061022980546001600160a01b0319166001600160a01b038a1617905561189f600089612772565b6118c97f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a689612772565b6118f37f8502233096d909befbda0999bb8ea2f3a6be3c138b9fbf003752a4c8bce86f6c89612772565b8015611905576000805461ff00191690555b5050505050505050565b610229546001600160a01b031660009081527fc88390e7e62175be0932452175b6a7222b6b094ab0ef984a5153c620345d8975602052604081205460ff166119575750600090565b610229546001600160a01b03165b905090565b600082815261012d60205260408120611983908361277c565b9392505050565b600061199881610b9a611ecf565b6119a561022d848461429c565b50505050565b6102288054610a6890614d0a565b60006119c781610b9a611ecf565b612710821115611a195760405162461bcd60e51b815260206004820152601260248201527f65786365656420726f79616c747920627073000000000000000000000000000060448201526064016109df565b6040805180820182526001600160a01b03858116808352602080840187815260008a815261022e8352869020945185546001600160a01b031916941693909317845591516001909301929092558251918252810184905285917f7365cf4122f072a3365c20d54eff9b38d73c096c28e1892ec8f5b0e403a0f12d910160405180910390a250505050565b610e48611aae611ecf565b8383612788565b60608167ffffffffffffffff811115611ad057611ad0614467565b604051908082528060200260200182016040528015611b0357816020015b6060815260200190600190039081611aee5790505b50905060005b82811015611ba357611b7330858584818110611b2757611b27614da4565b9050602002810190611b399190614f55565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061287e92505050565b828281518110611b8557611b85614da4565b60200260200101819052508080611b9b90614dba565b915050611b09565b5092915050565b600081815261012d60205260408120610a0e90612989565b600060026033541415611c175760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016109df565b50600260335561022a8054906001906000611c328385614f9c565b9091555050600081815261023160205260409020611c5190848461429c565b506000818152610232602052604090208590611c6d82826151b8565b905050611c92611c7b611ecf565b828660405180602001604052806000815250612993565b600081815261023060205260409020849055611cbe611caf611ecf565b30611cb988615374565b61221b565b80611cc7611ecf565b6001600160a01b03167f35369f28fefabac32c27a961cff17f3d99cfa3b8afd4ba90032933b91ae2512f87604051611cff91906155c3565b60405180910390a36001603355949350505050565b600082815260fb6020526040902060010154611d3281610b9a611ecf565b610dab83836121f8565b61022d8054610a6890614d0a565b611d52611ecf565b6001600160a01b0316856001600160a01b03161480611d785750611d78856108ca611ecf565b611dea5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260448201527f20617070726f766564000000000000000000000000000000000000000000000060648201526084016109df565b610d7c8585858585612ab1565b611dff611ecf565b6001600160a01b0316836001600160a01b03161480611e255750611e25836108ca611ecf565b611e845760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f726044820152691030b8383937bb32b21760b11b60648201526084016109df565b610dab838383612c60565b60006001600160e01b03198216636cdb3d1360e11b1480611ec057506001600160e01b031982166303a24d0760e21b145b80610a0e5750610a0e82612dea565b6000611965612e0f565b600082815260fb602090815260408083206001600160a01b038516845290915290205460ff16610e4857611f17816001600160a01b03166014612e3c565b611f22836020612e3c565b604051602001611f339291906156e4565b60408051601f198184030181529082905262461bcd60e51b82526109df9160040161441e565b8151835114611fbb5760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b60648201526084016109df565b6001600160a01b03841661201f5760405162461bcd60e51b815260206004820152602560248201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604482015264647265737360d81b60648201526084016109df565b6000612029611ecf565b9050612039818787878787612fe5565b60005b845181101561216757600085828151811061205957612059614da4565b60200260200101519050600085838151811061207757612077614da4565b60209081029190910181015160008481526101f5835260408082206001600160a01b038e16835290935291909120549091508181101561210c5760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60448201526939103a3930b739b332b960b11b60648201526084016109df565b60008381526101f5602090815260408083206001600160a01b038e8116855292528083208585039055908b1682528120805484929061214c908490614f9c565b925050819055505050508061216090614dba565b905061203c565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516121b7929190615765565b60405180910390a46121cd818787878787613243565b505050505050565b6121df82826133e9565b600082815261012d60205260409020610dab908261348c565b61220282826134a1565b600082815261012d60205260409020610dab9082613542565b612226838383613557565b61223183838361379a565b610dab838383613937565b82515115801561224f5750606083015151155b61229b5760405162461bcd60e51b815260206004820152601760248201527f63616e6e6f7420756e777261702062792073686172657300000000000000000060448201526064016109df565b60c08301515160a08401515114801561236a5760005b8460a001515181101561236857828560c0015182815181106122d5576122d5614da4565b60200260200101516122e7919061578a565b159150816122f457612368565b600083858760c00151848151811061230e5761230e614da4565b60200260200101516123209190614d5b565b61232a9190614d90565b90506123558660a00151838151811061234557612345614da4565b60200260200101518989846139fe565b50612361600182614f9c565b90506122b1565b505b806121cd5760405162461bcd60e51b815260206004820152601260248201527f696e76616c69642065726332302077726170000000000000000000000000000060448201526064016109df565b6001600160a01b0383166124195760405162461bcd60e51b815260206004820152602360248201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260448201526265737360e81b60648201526084016109df565b805182511461247b5760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b60648201526084016109df565b6000612485611ecf565b90506124a581856000868660405180602001604052806000815250612fe5565b60005b83518110156125ab5760008482815181106124c5576124c5614da4565b6020026020010151905060008483815181106124e3576124e3614da4565b60209081029190910181015160008481526101f5835260408082206001600160a01b038c1683529093529190912054909150818110156125715760405162461bcd60e51b8152602060048201526024808201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604482015263616e636560e01b60648201526084016109df565b60009283526101f5602090815260408085206001600160a01b038b16865290915290922091039055806125a381614dba565b9150506124a8565b5060006001600160a01b0316846001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb86866040516125fc929190615765565b60405180910390a450505050565b600054610100900460ff166126755760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016109df565b61267d613a48565b565b600054610100900460ff166126ea5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016109df565b6126f2613aba565b6126fb81613b25565b50565b600054610100900460ff166127695760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016109df565b6126fb81613bf8565b610e4882826121d5565b60006119838383613c6c565b816001600160a01b0316836001600160a01b031614156128105760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c2073746174757360448201527f20666f722073656c66000000000000000000000000000000000000000000000060648201526084016109df565b6001600160a01b0383811660008181526101f66020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b60606001600160a01b0383163b6128fd5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e7472616374000000000000000000000000000000000000000000000000000060648201526084016109df565b600080846001600160a01b031684604051612918919061579e565b600060405180830381855af49150503d8060008114612953576040519150601f19603f3d011682016040523d82523d6000602084013e612958565b606091505b5091509150612980828260405180606001604052806027815260200161597460279139613c96565b95945050505050565b6000610a0e825490565b6001600160a01b0384166129f35760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b60648201526084016109df565b60006129fd611ecf565b9050612a1e81600087612a0f88613ccf565b612a1888613ccf565b87612fe5565b60008481526101f5602090815260408083206001600160a01b038916845290915281208054859290612a51908490614f9c565b909155505060408051858152602081018590526001600160a01b0380881692600092918516917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4610d7c81600087878787613d1a565b6001600160a01b038416612b155760405162461bcd60e51b815260206004820152602560248201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604482015264647265737360d81b60648201526084016109df565b6000612b1f611ecf565b9050612b30818787612a0f88613ccf565b60008481526101f5602090815260408083206001600160a01b038a16845290915290205483811015612bb75760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60448201526939103a3930b739b332b960b11b60648201526084016109df565b60008581526101f5602090815260408083206001600160a01b038b8116855292528083208785039055908816825281208054869290612bf7908490614f9c565b909155505060408051868152602081018690526001600160a01b03808916928a821692918616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4612c57828888888888613d1a565b50505050505050565b6001600160a01b038316612cc25760405162461bcd60e51b815260206004820152602360248201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260448201526265737360e81b60648201526084016109df565b6000612ccc611ecf565b9050612cfc81856000612cde87613ccf565b612ce787613ccf565b60405180602001604052806000815250612fe5565b60008381526101f5602090815260408083206001600160a01b038816845290915290205482811015612d7c5760405162461bcd60e51b8152602060048201526024808201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604482015263616e636560e01b60648201526084016109df565b60008481526101f5602090815260408083206001600160a01b03898116808652918452828520888703905582518981529384018890529092908616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a45050505050565b60006001600160e01b03198216630271189760e51b1480610a0e5750610a0e82613e16565b3360009081526065602052604081205460ff1615612e34575060131936013560601c90565b503390565b90565b60606000612e4b836002614d5b565b612e56906002614f9c565b67ffffffffffffffff811115612e6e57612e6e614467565b6040519080825280601f01601f191660200182016040528015612e98576020820181803683370190505b509050600360fc1b81600081518110612eb357612eb3614da4565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110612ee257612ee2614da4565b60200101906001600160f81b031916908160001a9053506000612f06846002614d5b565b612f11906001614f9c565b90505b6001811115612f96577f303132333435363738396162636465660000000000000000000000000000000085600f1660108110612f5257612f52614da4565b1a60f81b828281518110612f6857612f68614da4565b60200101906001600160f81b031916908160001a90535060049490941c93612f8f816157ba565b9050612f14565b5083156119835760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016109df565b600080527fde23fa6c6392e300b5ced791de0faa0b28226983a4ab1c05a1ba79ef4d0a13126020527f70e64e82d0337f3fa9071fdb3266f859725ed1fc29697b2e6e986b76cffbfb085460ff1615801561304757506001600160a01b03851615155b801561305b57506001600160a01b03841615155b15613135576001600160a01b03851660009081527fde23fa6c6392e300b5ced791de0faa0b28226983a4ab1c05a1ba79ef4d0a1312602052604090205460ff16806130dd57506001600160a01b03841660009081527fde23fa6c6392e300b5ced791de0faa0b28226983a4ab1c05a1ba79ef4d0a1312602052604090205460ff165b6131355760405162461bcd60e51b8152602060048201526024808201527f7265737472696374656420746f205452414e534645525f524f4c4520686f6c6460448201526332b9399760e11b60648201526084016109df565b6001600160a01b0385166131bd5760005b83518110156131bb5782818151811061316157613161614da4565b602002602001015161022f600086848151811061318057613180614da4565b6020026020010151815260200190815260200160002060008282546131a59190614f9c565b909155506131b4905081614dba565b9050613146565b505b6001600160a01b0384166121cd5760005b8351811015612c57578281815181106131e9576131e9614da4565b602002602001015161022f600086848151811061320857613208614da4565b60200260200101518152602001908152602001600020600082825461322d91906157d1565b9091555061323c905081614dba565b90506131ce565b6001600160a01b0384163b156121cd5760405163bc197c8160e01b81526001600160a01b0385169063bc197c819061328790899089908890889088906004016157e8565b6020604051808303816000875af19250505080156132c2575060408051601f3d908101601f191682019092526132bf91810190615846565b60015b613378576132ce615863565b806308c379a0141561330857506132e361587e565b806132ee575061330a565b8060405162461bcd60e51b81526004016109df919061441e565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e204552433131353560448201527f526563656976657220696d706c656d656e74657200000000000000000000000060648201526084016109df565b6001600160e01b0319811663bc197c8160e01b14612c575760405162461bcd60e51b815260206004820152602860248201527f455243313135353a204552433131353552656365697665722072656a656374656044820152676420746f6b656e7360c01b60648201526084016109df565b600082815260fb602090815260408083206001600160a01b038516845290915290205460ff16610e4857600082815260fb602090815260408083206001600160a01b03851684529091529020805460ff19166001179055613448611ecf565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000611983836001600160a01b038416613e3b565b600082815260fb602090815260408083206001600160a01b038516845290915290205460ff1615610e4857600082815260fb602090815260408083206001600160a01b03851684529091529020805460ff191690556134fe611ecf565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b6000611983836001600160a01b038416613e8a565b600080600083602001515184600001515114801561357b5750604084015151845151145b9050801561374d57600092505b83515183101561374d57836040015183815181106135a8576135a8614da4565b602002602001015151846020015184815181106135c7576135c7614da4565b602002602001015151149050806135dd5761374d565b6000846000015184815181106135f5576135f5614da4565b60200260200101519050600092505b8460200151848151811061361a5761361a614da4565b60200260200101515183101561373a57806001600160a01b031663f242432a88888860200151888151811061365157613651614da4565b6020026020010151878151811061366a5761366a614da4565b60200260200101518960400151898151811061368857613688614da4565b602002602001015188815181106136a1576136a1614da4565b60209081029190910101516040516001600160e01b031960e087901b1681526001600160a01b0394851660048201529390921660248401526044830152606482015260a06084820152600060a482015260c401600060405180830381600087803b15801561370e57600080fd5b505af1158015613722573d6000803e3d6000fd5b505050506001836137339190614f9c565b9250613604565b50613746600184614f9c565b9250613588565b806121cd5760405162461bcd60e51b815260206004820152601460248201527f696e76616c69642065726331313535207772617000000000000000000000000060448201526064016109df565b60808101515160608201515160009182911480156138ea57600092505b8360600151518310156138ea576000846060015184815181106137dc576137dc614da4565b60200260200101519050600092505b8460800151848151811061380157613801614da4565b6020026020010151518310156138d757806001600160a01b03166342842e0e88888860800151888151811061383857613838614da4565b6020026020010151878151811061385157613851614da4565b60209081029190910101516040516001600160e01b031960e086901b1681526001600160a01b0393841660048201529290911660248301526044820152606401600060405180830381600087803b1580156138ab57600080fd5b505af11580156138bf573d6000803e3d6000fd5b505050506001836138d09190614f9c565b92506137eb565b506138e3600184614f9c565b92506137b7565b806121cd5760405162461bcd60e51b815260206004820152601360248201527f696e76616c69642065726337323120777261700000000000000000000000000060448201526064016109df565b60c08101515160a08201515160009114806139945760405162461bcd60e51b815260206004820152601260248201527f696e76616c69642065726332302077726170000000000000000000000000000060448201526064016109df565b600091505b8260a0015151821015610d7c576139ec8360a0015183815181106139bf576139bf614da4565b602002602001015186868660c0015186815181106139df576139df614da4565b60200260200101516139fe565b6139f7600183614f9c565b9150613999565b80613a08576119a5565b6001600160a01b03841673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1415613a3c57613a378282613f7d565b6119a5565b6119a584848484614020565b600054610100900460ff16613ab35760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016109df565b6001603355565b600054610100900460ff1661267d5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016109df565b600054610100900460ff16613b905760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016109df565b60005b8151811015610e4857600160656000848481518110613bb457613bb4614da4565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff191691151591909117905580613bf081614dba565b915050613b93565b600054610100900460ff16613c635760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016109df565b6126fb81614193565b6000826000018281548110613c8357613c83614da4565b9060005260206000200154905092915050565b60608315613ca5575081611983565b825115613cb55782518084602001fd5b8160405162461bcd60e51b81526004016109df919061441e565b60408051600180825281830190925260609160009190602080830190803683370190505090508281600081518110613d0957613d09614da4565b602090810291909101015292915050565b6001600160a01b0384163b156121cd5760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e6190613d5e9089908990889088908890600401615908565b6020604051808303816000875af1925050508015613d99575060408051601f3d908101601f19168201909252613d9691810190615846565b60015b613da5576132ce615863565b6001600160e01b0319811663f23a6e6160e01b14612c575760405162461bcd60e51b815260206004820152602860248201527f455243313135353a204552433131353552656365697665722072656a656374656044820152676420746f6b656e7360c01b60648201526084016109df565b60006001600160e01b03198216635a05180f60e01b1480610a0e5750610a0e826141a7565b6000818152600183016020526040812054613e8257508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610a0e565b506000610a0e565b60008181526001830160205260408120548015613f73576000613eae6001836157d1565b8554909150600090613ec2906001906157d1565b9050818114613f27576000866000018281548110613ee257613ee2614da4565b9060005260206000200154905080876000018481548110613f0557613f05614da4565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080613f3857613f38615940565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610a0e565b6000915050610a0e565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114613fca576040519150601f19603f3d011682016040523d82523d6000602084013e613fcf565b606091505b5050905080610dab5760405162461bcd60e51b815260206004820152601c60248201527f6e617469766520746f6b656e207472616e73666572206661696c65640000000060448201526064016109df565b816001600160a01b0316836001600160a01b0316141561403f576119a5565b60006001600160a01b03841630146140d1576040516323b872dd60e01b81526001600160a01b0385811660048301528481166024830152604482018490528616906323b872dd906064016020604051808303816000875af11580156140a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906140cc9190615956565b614144565b60405163a9059cbb60e01b81526001600160a01b0384811660048301526024820184905286169063a9059cbb906044016020604051808303816000875af1158015614120573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906141449190615956565b905080610d7c5760405162461bcd60e51b815260206004820152601960248201527f63757272656e6379207472616e73666572206661696c65642e0000000000000060448201526064016109df565b8051610e48906101f7906020840190614218565b60006001600160e01b03198216637965db0b60e01b1480610a0e57506301ffc9a760e01b6001600160e01b0319831614610a0e565b50805460008255906000526020600020908101906126fb9190614310565b50805460008255906000526020600020908101906126fb9190614325565b82805461422490614d0a565b90600052602060002090601f016020900481019282614246576000855561428c565b82601f1061425f57805160ff191683800117855561428c565b8280016001018555821561428c579182015b8281111561428c578251825591602001919060010190614271565b50614298929150614310565b5090565b8280546142a890614d0a565b90600052602060002090601f0160209004810192826142ca576000855561428c565b82601f106142e35782800160ff1982351617855561428c565b8280016001018555821561428c579182015b8281111561428c5782358255916020019190600101906142f5565b5b808211156142985760008155600101614311565b8082111561429857600061433982826141dc565b50600101614325565b6001600160a01b03811681146126fb57600080fd5b803561436281614342565b919050565b6000806040838503121561437a57600080fd5b823561438581614342565b946020939093013593505050565b6001600160e01b0319811681146126fb57600080fd5b6000602082840312156143bb57600080fd5b813561198381614393565b60005b838110156143e15781810151838201526020016143c9565b838111156119a55750506000910152565b6000815180845261440a8160208601602086016143c6565b601f01601f19169290920160200192915050565b60208152600061198360208301846143f2565b60006020828403121561444357600080fd5b5035919050565b60006020828403121561445c57600080fd5b813561198381614342565b634e487b7160e01b600052604160045260246000fd5b601f8201601f1916810167ffffffffffffffff811182821017156144a3576144a3614467565b6040525050565b60405160e0810167ffffffffffffffff811182821017156144cd576144cd614467565b60405290565b600082601f8301126144e457600080fd5b813567ffffffffffffffff8111156144fe576144fe614467565b604051614515601f8301601f19166020018261447d565b81815284602083860101111561452a57600080fd5b816020850160208301376000918101602001919091529392505050565b6000806000806080858703121561455d57600080fd5b843561456881614342565b9350602085013561457881614342565b925060408501359150606085013567ffffffffffffffff81111561459b57600080fd5b6145a7878288016144d3565b91505092959194509250565b600080604083850312156145c657600080fd5b50508035926020909101359150565b600067ffffffffffffffff8211156145ef576145ef614467565b5060051b60200190565b600082601f83011261460a57600080fd5b81356020614617826145d5565b604051614624828261447d565b83815260059390931b850182019282810191508684111561464457600080fd5b8286015b8481101561465f5780358352918301918301614648565b509695505050505050565b600080600080600060a0868803121561468257600080fd5b853561468d81614342565b9450602086013561469d81614342565b9350604086013567ffffffffffffffff808211156146ba57600080fd5b6146c689838a016145f9565b945060608801359150808211156146dc57600080fd5b6146e889838a016145f9565b935060808801359150808211156146fe57600080fd5b5061470b888289016144d3565b9150509295509295909350565b6000806040838503121561472b57600080fd5b82359150602083013561473d81614342565b809150509250929050565b600082601f83011261475957600080fd5b81356020614766826145d5565b604051614773828261447d565b83815260059390931b850182019282810191508684111561479357600080fd5b8286015b8481101561465f5780356147aa81614342565b8352918301918301614797565b600080604083850312156147ca57600080fd5b823567ffffffffffffffff808211156147e257600080fd5b6147ee86838701614748565b9350602085013591508082111561480457600080fd5b50614811858286016145f9565b9150509250929050565b600081518084526020808501945080840160005b8381101561484b5781518752958201959082019060010161482f565b509495945050505050565b602081526000611983602083018461481b565b60008060006060848603121561487e57600080fd5b8335925060208401359150604084013561489781614342565b809150509250925092565b6000806000606084860312156148b757600080fd5b83356148c281614342565b9250602084013567ffffffffffffffff808211156148df57600080fd5b6148eb878388016145f9565b9350604086013591508082111561490157600080fd5b5061490e868287016145f9565b9150509250925092565b600080600080600080600060e0888a03121561493357600080fd5b61493c88614357565b9650602088013567ffffffffffffffff8082111561495957600080fd5b6149658b838c016144d3565b975060408a013591508082111561497b57600080fd5b6149878b838c016144d3565b965060608a013591508082111561499d57600080fd5b6149a98b838c016144d3565b955060808a01359150808211156149bf57600080fd5b506149cc8a828b01614748565b9350506149db60a08901614357565b915060c0880135905092959891949750929550565b60008083601f840112614a0257600080fd5b50813567ffffffffffffffff811115614a1a57600080fd5b602083019150836020828501011115614a3257600080fd5b9250929050565b60008060208385031215614a4c57600080fd5b823567ffffffffffffffff811115614a6357600080fd5b614a6f858286016149f0565b90969095509350505050565b600080600060608486031215614a9057600080fd5b833592506020840135614aa281614342565b929592945050506040919091013590565b80151581146126fb57600080fd5b60008060408385031215614ad457600080fd5b8235614adf81614342565b9150602083013561473d81614ab3565b60008060208385031215614b0257600080fd5b823567ffffffffffffffff80821115614b1a57600080fd5b818501915085601f830112614b2e57600080fd5b813581811115614b3d57600080fd5b8660208260051b8501011115614b5257600080fd5b60209290920196919550909350505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015614bb957603f19888603018452614ba78583516143f2565b94509285019290850190600101614b8b565b5092979650505050505050565b60008060008060608587031215614bdc57600080fd5b843567ffffffffffffffff80821115614bf457600080fd5b9086019060e08289031215614c0857600080fd5b9094506020860135935060408601359080821115614c2557600080fd5b50614c32878288016149f0565b95989497509550505050565b60008060408385031215614c5157600080fd5b8235614c5c81614342565b9150602083013561473d81614342565b600080600080600060a08688031215614c8457600080fd5b8535614c8f81614342565b94506020860135614c9f81614342565b93506040860135925060608601359150608086013567ffffffffffffffff811115614cc957600080fd5b61470b888289016144d3565b600080600060608486031215614cea57600080fd5b8335614cf581614342565b95602085013595506040909401359392505050565b600181811c90821680614d1e57607f821691505b60208210811415614d3f57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615614d7557614d75614d45565b500290565b634e487b7160e01b600052601260045260246000fd5b600082614d9f57614d9f614d7a565b500490565b634e487b7160e01b600052603260045260246000fd5b6000600019821415614dce57614dce614d45565b5060010190565b600081518084526020808501945080840160005b8381101561484b5781516001600160a01b031687529582019590820190600101614de9565b600082825180855260208086019550808260051b84010181860160005b84811015614e5957601f19868403018952614e4783835161481b565b98840198925090830190600101614e2b565b5090979650505050505050565b6001600160a01b0384168152826020820152606060408201526000825160e06060840152614e98610140840182614dd5565b90506020840151605f1980858403016080860152614eb68383614e0e565b925060408601519150808584030160a0860152614ed38383614e0e565b925060608601519150808584030160c0860152614ef08383614dd5565b925060808601519150808584030160e0860152614f0d8383614e0e565b925060a086015191508085840301610100860152614f2b8383614dd5565b925060c08601519150808584030161012086015250614f4a828261481b565b979650505050505050565b6000808335601e19843603018112614f6c57600080fd5b83018035915067ffffffffffffffff821115614f8757600080fd5b602001915036819003821315614a3257600080fd5b60008219821115614faf57614faf614d45565b500190565b6000808335601e19843603018112614fcb57600080fd5b83018035915067ffffffffffffffff821115614fe657600080fd5b6020019150600581901b3603821315614a3257600080fd5b81831015610dab576000818152602081208481019084015b808210156121cd57828255600182019150615016565b6801000000000000000083111561504557615045614467565b8054838255615055848284614ffe565b50818160005260208060002060005b86811015612c5757833561507781614342565b82546001600160a01b0319166001600160a01b03919091161782559282019260019182019101615064565b805460008083558115610dab57828152602081208281015b80821015610d7c578282556001820191506150ba565b680100000000000000008311156150e9576150e9614467565b80548382556150f9848284614ffe565b50818160005260208060002060005b86811015612c5757833582559282019260019182019101615108565b6801000000000000000083111561513d5761513d614467565b805483825580841015615179576000828152602090208481019082015b808210156151765761516b826150a2565b60018201915061515a565b50505b5060008181526020812083915b858110156121cd576151988386614fb4565b6151a38183866150d0565b50506020929092019160019182019101615186565b6151c28283614fb4565b680100000000000000008111156151db576151db614467565b82548184556151eb828286614ffe565b508260005260208060002060005b8381101561523757843561520c81614342565b82546001600160a01b0319166001600160a01b039190911617825593820193600191820191016151f9565b505061524581860186614fb4565b9350915050615258828260018601615124565b50506152676040830183614fb4565b615275818360028601615124565b50506152846060830183614fb4565b61529281836003860161502c565b50506152a16080830183614fb4565b6152af818360048601615124565b50506152be60a0830183614fb4565b6152cc81836005860161502c565b50506152db60c0830183614fb4565b6119a58183600686016150d0565b600082601f8301126152fa57600080fd5b81356020615307826145d5565b604051615314828261447d565b83815260059390931b850182019282810191508684111561533457600080fd5b8286015b8481101561465f57803567ffffffffffffffff8111156153585760008081fd5b6153668986838b01016145f9565b845250918301918301615338565b600060e0823603121561538657600080fd5b61538e6144aa565b823567ffffffffffffffff808211156153a657600080fd5b6153b236838701614748565b835260208501359150808211156153c857600080fd5b6153d4368387016152e9565b602084015260408501359150808211156153ed57600080fd5b6153f9368387016152e9565b6040840152606085013591508082111561541257600080fd5b61541e36838701614748565b6060840152608085013591508082111561543757600080fd5b615443368387016152e9565b608084015260a085013591508082111561545c57600080fd5b61546836838701614748565b60a084015260c085013591508082111561548157600080fd5b5061548e368286016145f9565b60c08301525092915050565b6000808335601e198436030181126154b157600080fd5b830160208101925035905067ffffffffffffffff8111156154d157600080fd5b8060051b3603831315614a3257600080fd5b8183526000602080850194508260005b8581101561484b57813561550681614342565b6001600160a01b0316875295820195908201906001016154f3565b81835260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83111561555357600080fd5b8260051b8083602087013760009401602001938452509192915050565b60008383855260208086019550808560051b8301018460005b87811015614e5957848303601f190189526155a4828861549a565b6155af858284615521565b9a86019a9450505090830190600101615589565b6020815260006155d3838461549a565b60e060208501526155e9610100850182846154e3565b9150506155f9602085018561549a565b601f1980868503016040870152615611848385615570565b9350615620604088018861549a565b9350915080868503016060870152615639848484615570565b9350615648606088018861549a565b93509150808685030160808701526156618484846154e3565b9350615670608088018861549a565b93509150808685030160a0870152615689848484615570565b935061569860a088018861549a565b93509150808685030160c08701526156b18484846154e3565b93506156c060c088018861549a565b93509150808685030160e0870152506156da838383615521565b9695505050505050565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161571c8160178501602088016143c6565b7f206973206d697373696e6720726f6c652000000000000000000000000000000060179184019182015283516157598160288401602088016143c6565b01602801949350505050565b604081526000615778604083018561481b565b8281036020840152612980818561481b565b60008261579957615799614d7a565b500690565b600082516157b08184602087016143c6565b9190910192915050565b6000816157c9576157c9614d45565b506000190190565b6000828210156157e3576157e3614d45565b500390565b60006001600160a01b03808816835280871660208401525060a0604083015261581460a083018661481b565b8281036060840152615826818661481b565b9050828103608084015261583a81856143f2565b98975050505050505050565b60006020828403121561585857600080fd5b815161198381614393565b600060033d1115612e395760046000803e5060005160e01c90565b600060443d101561588c5790565b6040516003193d81016004833e81513d67ffffffffffffffff81602484011181841117156158bc57505050505090565b82850191508151818111156158d45750505050505090565b843d87010160208285010111156158ee5750505050505090565b6158fd6020828601018761447d565b509095945050505050565b60006001600160a01b03808816835280871660208401525084604083015283606083015260a06080830152614f4a60a08301846143f2565b634e487b7160e01b600052603160045260246000fd5b60006020828403121561596857600080fd5b815161198381614ab356fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a164736f6c634300080c000a";
var M8 = (a) => a.length > 1;
var A = class extends ContractFactory {
  constructor(...e) {
    M8(e) ? super(...e) : super(S, L1, e[0]), this.contractName = "Multiwrap";
  }
  deploy(e) {
    return super.deploy(e || {});
  }
  getDeployTransaction(e) {
    return super.getDeployTransaction(e || {});
  }
  attach(e) {
    return super.attach(e);
  }
  connect(e) {
    return super.connect(e);
  }
  static createInterface() {
    return new utils_exports.Interface(S);
  }
  static connect(e, t) {
    return new Contract(e, S, t);
  }
};
A.bytecode = L1, A.abi = S;
var h = [{ anonymous: false, inputs: [{ indexed: true, internalType: "address", name: "account", type: "address" }, { indexed: true, internalType: "address", name: "operator", type: "address" }, { indexed: false, internalType: "bool", name: "approved", type: "bool" }], name: "ApprovalForAll", type: "event" }, { anonymous: false, inputs: [{ indexed: false, internalType: "address", name: "account", type: "address" }], name: "Paused", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "bytes32", name: "role", type: "bytes32" }, { indexed: true, internalType: "bytes32", name: "previousAdminRole", type: "bytes32" }, { indexed: true, internalType: "bytes32", name: "newAdminRole", type: "bytes32" }], name: "RoleAdminChanged", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "bytes32", name: "role", type: "bytes32" }, { indexed: true, internalType: "address", name: "account", type: "address" }, { indexed: true, internalType: "address", name: "sender", type: "address" }], name: "RoleGranted", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "bytes32", name: "role", type: "bytes32" }, { indexed: true, internalType: "address", name: "account", type: "address" }, { indexed: true, internalType: "address", name: "sender", type: "address" }], name: "RoleRevoked", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "address", name: "operator", type: "address" }, { indexed: true, internalType: "address", name: "from", type: "address" }, { indexed: true, internalType: "address", name: "to", type: "address" }, { indexed: false, internalType: "uint256[]", name: "ids", type: "uint256[]" }, { indexed: false, internalType: "uint256[]", name: "values", type: "uint256[]" }], name: "TransferBatch", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "address", name: "operator", type: "address" }, { indexed: true, internalType: "address", name: "from", type: "address" }, { indexed: true, internalType: "address", name: "to", type: "address" }, { indexed: false, internalType: "uint256", name: "id", type: "uint256" }, { indexed: false, internalType: "uint256", name: "value", type: "uint256" }], name: "TransferSingle", type: "event" }, { anonymous: false, inputs: [{ indexed: false, internalType: "string", name: "value", type: "string" }, { indexed: true, internalType: "uint256", name: "id", type: "uint256" }], name: "URI", type: "event" }, { anonymous: false, inputs: [{ indexed: false, internalType: "address", name: "account", type: "address" }], name: "Unpaused", type: "event" }, { inputs: [], name: "DEFAULT_ADMIN_ROLE", outputs: [{ internalType: "bytes32", name: "", type: "bytes32" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "account", type: "address" }, { internalType: "uint256", name: "id", type: "uint256" }], name: "balanceOf", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address[]", name: "accounts", type: "address[]" }, { internalType: "uint256[]", name: "ids", type: "uint256[]" }], name: "balanceOfBatch", outputs: [{ internalType: "uint256[]", name: "", type: "uint256[]" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "account", type: "address" }, { internalType: "uint256", name: "id", type: "uint256" }, { internalType: "uint256", name: "value", type: "uint256" }], name: "burn", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "account", type: "address" }, { internalType: "uint256[]", name: "ids", type: "uint256[]" }, { internalType: "uint256[]", name: "values", type: "uint256[]" }], name: "burnBatch", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "bytes32", name: "role", type: "bytes32" }], name: "getRoleAdmin", outputs: [{ internalType: "bytes32", name: "", type: "bytes32" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "bytes32", name: "role", type: "bytes32" }, { internalType: "uint256", name: "index", type: "uint256" }], name: "getRoleMember", outputs: [{ internalType: "address", name: "", type: "address" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "bytes32", name: "role", type: "bytes32" }], name: "getRoleMemberCount", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "bytes32", name: "role", type: "bytes32" }, { internalType: "address", name: "account", type: "address" }], name: "grantRole", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "bytes32", name: "role", type: "bytes32" }, { internalType: "address", name: "account", type: "address" }], name: "hasRole", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "account", type: "address" }, { internalType: "address", name: "operator", type: "address" }], name: "isApprovedForAll", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "to", type: "address" }, { internalType: "uint256", name: "id", type: "uint256" }, { internalType: "uint256", name: "amount", type: "uint256" }, { internalType: "bytes", name: "data", type: "bytes" }], name: "mint", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "to", type: "address" }, { internalType: "uint256[]", name: "ids", type: "uint256[]" }, { internalType: "uint256[]", name: "amounts", type: "uint256[]" }, { internalType: "bytes", name: "data", type: "bytes" }], name: "mintBatch", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "", type: "address" }, { internalType: "address", name: "", type: "address" }, { internalType: "uint256[]", name: "", type: "uint256[]" }, { internalType: "uint256[]", name: "", type: "uint256[]" }, { internalType: "bytes", name: "", type: "bytes" }], name: "onERC1155BatchReceived", outputs: [{ internalType: "bytes4", name: "", type: "bytes4" }], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "", type: "address" }, { internalType: "address", name: "", type: "address" }, { internalType: "uint256", name: "", type: "uint256" }, { internalType: "uint256", name: "", type: "uint256" }, { internalType: "bytes", name: "", type: "bytes" }], name: "onERC1155Received", outputs: [{ internalType: "bytes4", name: "", type: "bytes4" }], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "", type: "address" }, { internalType: "address", name: "", type: "address" }, { internalType: "uint256", name: "", type: "uint256" }, { internalType: "bytes", name: "", type: "bytes" }], name: "onERC721Received", outputs: [{ internalType: "bytes4", name: "", type: "bytes4" }], stateMutability: "nonpayable", type: "function" }, { inputs: [], name: "pause", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [], name: "paused", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "bytes32", name: "role", type: "bytes32" }, { internalType: "address", name: "account", type: "address" }], name: "renounceRole", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "bytes32", name: "role", type: "bytes32" }, { internalType: "address", name: "account", type: "address" }], name: "revokeRole", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "from", type: "address" }, { internalType: "address", name: "to", type: "address" }, { internalType: "uint256[]", name: "ids", type: "uint256[]" }, { internalType: "uint256[]", name: "amounts", type: "uint256[]" }, { internalType: "bytes", name: "data", type: "bytes" }], name: "safeBatchTransferFrom", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "from", type: "address" }, { internalType: "address", name: "to", type: "address" }, { internalType: "uint256", name: "id", type: "uint256" }, { internalType: "uint256", name: "amount", type: "uint256" }, { internalType: "bytes", name: "data", type: "bytes" }], name: "safeTransferFrom", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "operator", type: "address" }, { internalType: "bool", name: "approved", type: "bool" }], name: "setApprovalForAll", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "bytes4", name: "interfaceId", type: "bytes4" }], name: "supportsInterface", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "uint256", name: "id", type: "uint256" }], name: "totalSupply", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [], name: "unpause", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "uint256", name: "", type: "uint256" }], name: "uri", outputs: [{ internalType: "string", name: "", type: "string" }], stateMutability: "view", type: "function" }];
var G1 = "";
var P8 = (a) => a.length > 1;
var D = class extends ContractFactory {
  constructor(...e) {
    P8(e) ? super(...e) : super(h, G1, e[0]), this.contractName = "ERC1155PresetUpgradeable";
  }
  deploy(e) {
    return super.deploy(e || {});
  }
  getDeployTransaction(e) {
    return super.getDeployTransaction(e || {});
  }
  attach(e) {
    return super.attach(e);
  }
  connect(e) {
    return super.connect(e);
  }
  static createInterface() {
    return new utils_exports.Interface(h);
  }
  static connect(e, t) {
    return new Contract(e, h, t);
  }
};
D.bytecode = G1, D.abi = h;
var B = [{ anonymous: false, inputs: [{ indexed: true, internalType: "contract IERC20Upgradeable", name: "token", type: "address" }, { indexed: false, internalType: "address", name: "to", type: "address" }, { indexed: false, internalType: "uint256", name: "amount", type: "uint256" }], name: "ERC20PaymentReleased", type: "event" }, { anonymous: false, inputs: [{ indexed: false, internalType: "address", name: "account", type: "address" }, { indexed: false, internalType: "uint256", name: "shares", type: "uint256" }], name: "PayeeAdded", type: "event" }, { anonymous: false, inputs: [{ indexed: false, internalType: "address", name: "from", type: "address" }, { indexed: false, internalType: "uint256", name: "amount", type: "uint256" }], name: "PaymentReceived", type: "event" }, { anonymous: false, inputs: [{ indexed: false, internalType: "address", name: "to", type: "address" }, { indexed: false, internalType: "uint256", name: "amount", type: "uint256" }], name: "PaymentReleased", type: "event" }, { inputs: [{ internalType: "uint256", name: "index", type: "uint256" }], name: "payee", outputs: [{ internalType: "address", name: "", type: "address" }], stateMutability: "view", type: "function" }, { inputs: [], name: "payeeCount", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address payable", name: "account", type: "address" }], name: "release", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "contract IERC20Upgradeable", name: "token", type: "address" }, { internalType: "address", name: "account", type: "address" }], name: "release", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "contract IERC20Upgradeable", name: "token", type: "address" }, { internalType: "address", name: "account", type: "address" }], name: "released", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "account", type: "address" }], name: "released", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "account", type: "address" }], name: "shares", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "contract IERC20Upgradeable", name: "token", type: "address" }], name: "totalReleased", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [], name: "totalReleased", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [], name: "totalShares", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { stateMutability: "payable", type: "receive" }];
var H1 = "0x608060405234801561001057600080fd5b50610c8d806100206000396000f3fe6080604052600436106100b45760003560e01c80638b83209b11610069578063ce7c2ac21161004e578063ce7c2ac214610231578063d79779b214610267578063e33b7de31461029d57600080fd5b80638b83209b146101c35780639852595c146101fb57600080fd5b80633a98ef391161009a5780633a98ef3914610148578063406072a91461015d57806348b75044146101a357600080fd5b8062dbe10914610102578063191655871461012657600080fd5b366100fd577f6ef95f06320e7a25a04a175ca677b7052bdd97131872c2192525a629f51be77033604080516001600160a01b0390921682523460208301520160405180910390a1005b600080fd5b34801561010e57600080fd5b506037545b6040519081526020015b60405180910390f35b34801561013257600080fd5b50610146610141366004610abb565b6102b2565b005b34801561015457600080fd5b50603354610113565b34801561016957600080fd5b50610113610178366004610ad8565b6001600160a01b03918216600090815260396020908152604080832093909416825291909152205490565b3480156101af57600080fd5b506101466101be366004610ad8565b610468565b3480156101cf57600080fd5b506101e36101de366004610b11565b6106c4565b6040516001600160a01b03909116815260200161011d565b34801561020757600080fd5b50610113610216366004610abb565b6001600160a01b031660009081526036602052604090205490565b34801561023d57600080fd5b5061011361024c366004610abb565b6001600160a01b031660009081526035602052604090205490565b34801561027357600080fd5b50610113610282366004610abb565b6001600160a01b031660009081526038602052604090205490565b3480156102a957600080fd5b50603454610113565b6001600160a01b03811660009081526035602052604090205461032b5760405162461bcd60e51b815260206004820152602660248201527f5061796d656e7453706c69747465723a206163636f756e7420686173206e6f2060448201526573686172657360d01b60648201526084015b60405180910390fd5b600061033660345490565b6103409047610b40565b9050600061036d8383610368866001600160a01b031660009081526036602052604090205490565b6106f4565b9050806103d05760405162461bcd60e51b815260206004820152602b60248201527f5061796d656e7453706c69747465723a206163636f756e74206973206e6f742060448201526a191d59481c185e5b595b9d60aa1b6064820152608401610322565b6001600160a01b038316600090815260366020526040812080548392906103f8908490610b40565b9250508190555080603460008282546104119190610b40565b909155506104219050838261073c565b604080516001600160a01b0385168152602081018390527fdf20fd1e76bc69d672e4814fafb2c449bba3a5369d8359adf9e05e6fde87b056910160405180910390a1505050565b6001600160a01b0381166000908152603560205260409020546104dc5760405162461bcd60e51b815260206004820152602660248201527f5061796d656e7453706c69747465723a206163636f756e7420686173206e6f2060448201526573686172657360d01b6064820152608401610322565b6001600160a01b0382166000908152603860205260408120546040516370a0823160e01b81523060048201526001600160a01b038516906370a0823190602401602060405180830381865afa158015610539573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061055d9190610b58565b6105679190610b40565b905060006105a0838361036887876001600160a01b03918216600090815260396020908152604080832093909416825291909152205490565b9050806106035760405162461bcd60e51b815260206004820152602b60248201527f5061796d656e7453706c69747465723a206163636f756e74206973206e6f742060448201526a191d59481c185e5b595b9d60aa1b6064820152608401610322565b6001600160a01b0380851660009081526039602090815260408083209387168352929052908120805483929061063a908490610b40565b90915550506001600160a01b03841660009081526038602052604081208054839290610667908490610b40565b90915550610678905084848361085a565b604080516001600160a01b038581168252602082018490528616917f3be5b7a71e84ed12875d241991c70855ac5817d847039e17a9d895c1ceb0f18a910160405180910390a250505050565b6000603782815481106106d9576106d9610b71565b6000918252602090912001546001600160a01b031692915050565b6033546001600160a01b0384166000908152603560205260408120549091839161071e9086610b87565b6107289190610ba6565b6107329190610bc8565b90505b9392505050565b8047101561078c5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610322565b6000826001600160a01b03168260405160006040518083038185875af1925050503d80600081146107d9576040519150601f19603f3d011682016040523d82523d6000602084013e6107de565b606091505b50509050806108555760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610322565b505050565b604080516001600160a01b03848116602483015260448083018590528351808403909101815260649092018352602080830180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1663a9059cbb60e01b17905283518085019094528084527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656490840152610855928692916000916108ff91851690849061098f565b805190915015610855578080602001905181019061091d9190610bdf565b6108555760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610322565b60606107328484600085856001600160a01b0385163b6109f15760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610322565b600080866001600160a01b03168587604051610a0d9190610c31565b60006040518083038185875af1925050503d8060008114610a4a576040519150601f19603f3d011682016040523d82523d6000602084013e610a4f565b606091505b5091509150610a5f828286610a6a565b979650505050505050565b60608315610a79575081610735565b825115610a895782518084602001fd5b8160405162461bcd60e51b81526004016103229190610c4d565b6001600160a01b0381168114610ab857600080fd5b50565b600060208284031215610acd57600080fd5b813561073581610aa3565b60008060408385031215610aeb57600080fd5b8235610af681610aa3565b91506020830135610b0681610aa3565b809150509250929050565b600060208284031215610b2357600080fd5b5035919050565b634e487b7160e01b600052601160045260246000fd5b60008219821115610b5357610b53610b2a565b500190565b600060208284031215610b6a57600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b6000816000190483118215151615610ba157610ba1610b2a565b500290565b600082610bc357634e487b7160e01b600052601260045260246000fd5b500490565b600082821015610bda57610bda610b2a565b500390565b600060208284031215610bf157600080fd5b8151801515811461073557600080fd5b60005b83811015610c1c578181015183820152602001610c04565b83811115610c2b576000848401525b50505050565b60008251610c43818460208701610c01565b9190910192915050565b6020815260008251806020840152610c6c816040850160208701610c01565b601f01601f1916919091016040019291505056fea164736f6c634300080c000a";
var U8 = (a) => a.length > 1;
var O = class extends ContractFactory {
  constructor(...e) {
    U8(e) ? super(...e) : super(B, H1, e[0]), this.contractName = "PaymentSplitterUpgradeable";
  }
  deploy(e) {
    return super.deploy(e || {});
  }
  getDeployTransaction(e) {
    return super.getDeployTransaction(e || {});
  }
  attach(e) {
    return super.attach(e);
  }
  connect(e) {
    return super.connect(e);
  }
  static createInterface() {
    return new utils_exports.Interface(B);
  }
  static connect(e, t) {
    return new Contract(e, B, t);
  }
};
O.bytecode = H1, O.abi = B;
var C1 = [{ inputs: [{ internalType: "address", name: "forwarder", type: "address" }], name: "isTrustedForwarder", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "view", type: "function" }];
var P1 = class {
  static createInterface() {
    return new utils_exports.Interface(C1);
  }
  static connect(e, t) {
    return new Contract(e, C1, t);
  }
};
P1.abi = C1;
var V = [{ inputs: [{ internalType: "address", name: "_vrfCoordinator", type: "address" }, { internalType: "address", name: "_linkToken", type: "address" }, { internalType: "address", name: "_thirdwebFee", type: "address" }], stateMutability: "nonpayable", type: "constructor" }, { anonymous: false, inputs: [{ indexed: true, internalType: "address", name: "account", type: "address" }, { indexed: true, internalType: "address", name: "operator", type: "address" }, { indexed: false, internalType: "bool", name: "approved", type: "bool" }], name: "ApprovalForAll", type: "event" }, { anonymous: false, inputs: [{ indexed: false, internalType: "address", name: "newRoyaltyRecipient", type: "address" }, { indexed: false, internalType: "uint256", name: "newRoyaltyBps", type: "uint256" }], name: "DefaultRoyalty", type: "event" }, { anonymous: false, inputs: [{ indexed: false, internalType: "address", name: "prevOwner", type: "address" }, { indexed: false, internalType: "address", name: "newOwner", type: "address" }], name: "OwnerUpdated", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "uint256", name: "packId", type: "uint256" }, { indexed: true, internalType: "address", name: "rewardContract", type: "address" }, { indexed: true, internalType: "address", name: "creator", type: "address" }, { indexed: false, internalType: "uint256", name: "packTotalSupply", type: "uint256" }, { components: [{ internalType: "string", name: "uri", type: "string" }, { internalType: "address", name: "creator", type: "address" }, { internalType: "uint256", name: "openStart", type: "uint256" }], indexed: false, internalType: "struct Pack.PackState", name: "packState", type: "tuple" }, { components: [{ internalType: "address", name: "source", type: "address" }, { internalType: "uint256[]", name: "tokenIds", type: "uint256[]" }, { internalType: "uint256[]", name: "amountsPacked", type: "uint256[]" }, { internalType: "uint256", name: "rewardsPerOpen", type: "uint256" }], indexed: false, internalType: "struct Pack.Rewards", name: "rewards", type: "tuple" }], name: "PackAdded", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "uint256", name: "packId", type: "uint256" }, { indexed: true, internalType: "address", name: "opener", type: "address" }, { indexed: false, internalType: "bytes32", name: "requestId", type: "bytes32" }, { indexed: true, internalType: "address", name: "rewardContract", type: "address" }, { indexed: false, internalType: "uint256[]", name: "rewardIds", type: "uint256[]" }], name: "PackOpenFulfilled", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "uint256", name: "packId", type: "uint256" }, { indexed: true, internalType: "address", name: "opener", type: "address" }, { indexed: false, internalType: "bytes32", name: "requestId", type: "bytes32" }], name: "PackOpenRequested", type: "event" }, { anonymous: false, inputs: [{ indexed: false, internalType: "address", name: "account", type: "address" }], name: "Paused", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "bytes32", name: "role", type: "bytes32" }, { indexed: true, internalType: "bytes32", name: "previousAdminRole", type: "bytes32" }, { indexed: true, internalType: "bytes32", name: "newAdminRole", type: "bytes32" }], name: "RoleAdminChanged", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "bytes32", name: "role", type: "bytes32" }, { indexed: true, internalType: "address", name: "account", type: "address" }, { indexed: true, internalType: "address", name: "sender", type: "address" }], name: "RoleGranted", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "bytes32", name: "role", type: "bytes32" }, { indexed: true, internalType: "address", name: "account", type: "address" }, { indexed: true, internalType: "address", name: "sender", type: "address" }], name: "RoleRevoked", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "uint256", name: "tokenId", type: "uint256" }, { indexed: false, internalType: "address", name: "royaltyRecipient", type: "address" }, { indexed: false, internalType: "uint256", name: "royaltyBps", type: "uint256" }], name: "RoyaltyForToken", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "address", name: "operator", type: "address" }, { indexed: true, internalType: "address", name: "from", type: "address" }, { indexed: true, internalType: "address", name: "to", type: "address" }, { indexed: false, internalType: "uint256[]", name: "ids", type: "uint256[]" }, { indexed: false, internalType: "uint256[]", name: "values", type: "uint256[]" }], name: "TransferBatch", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "address", name: "operator", type: "address" }, { indexed: true, internalType: "address", name: "from", type: "address" }, { indexed: true, internalType: "address", name: "to", type: "address" }, { indexed: false, internalType: "uint256", name: "id", type: "uint256" }, { indexed: false, internalType: "uint256", name: "value", type: "uint256" }], name: "TransferSingle", type: "event" }, { anonymous: false, inputs: [{ indexed: false, internalType: "string", name: "value", type: "string" }, { indexed: true, internalType: "uint256", name: "id", type: "uint256" }], name: "URI", type: "event" }, { anonymous: false, inputs: [{ indexed: false, internalType: "address", name: "account", type: "address" }], name: "Unpaused", type: "event" }, { inputs: [], name: "DEFAULT_ADMIN_ROLE", outputs: [{ internalType: "bytes32", name: "", type: "bytes32" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "account", type: "address" }, { internalType: "uint256", name: "id", type: "uint256" }], name: "balanceOf", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address[]", name: "accounts", type: "address[]" }, { internalType: "uint256[]", name: "ids", type: "uint256[]" }], name: "balanceOfBatch", outputs: [{ internalType: "uint256[]", name: "", type: "uint256[]" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "account", type: "address" }, { internalType: "uint256", name: "id", type: "uint256" }, { internalType: "uint256", name: "value", type: "uint256" }], name: "burn", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "account", type: "address" }, { internalType: "uint256[]", name: "ids", type: "uint256[]" }, { internalType: "uint256[]", name: "values", type: "uint256[]" }], name: "burnBatch", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [], name: "contractType", outputs: [{ internalType: "bytes32", name: "", type: "bytes32" }], stateMutability: "pure", type: "function" }, { inputs: [], name: "contractURI", outputs: [{ internalType: "string", name: "", type: "string" }], stateMutability: "view", type: "function" }, { inputs: [], name: "contractVersion", outputs: [{ internalType: "uint8", name: "", type: "uint8" }], stateMutability: "pure", type: "function" }, { inputs: [{ internalType: "uint256", name: "", type: "uint256" }, { internalType: "address", name: "", type: "address" }], name: "currentRequestId", outputs: [{ internalType: "bytes32", name: "", type: "bytes32" }], stateMutability: "view", type: "function" }, { inputs: [], name: "getDefaultRoyaltyInfo", outputs: [{ internalType: "address", name: "", type: "address" }, { internalType: "uint16", name: "", type: "uint16" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "uint256", name: "_packId", type: "uint256" }], name: "getPackWithRewards", outputs: [{ components: [{ internalType: "string", name: "uri", type: "string" }, { internalType: "address", name: "creator", type: "address" }, { internalType: "uint256", name: "openStart", type: "uint256" }], internalType: "struct Pack.PackState", name: "pack", type: "tuple" }, { internalType: "uint256", name: "packTotalSupply", type: "uint256" }, { internalType: "address", name: "source", type: "address" }, { internalType: "uint256[]", name: "tokenIds", type: "uint256[]" }, { internalType: "uint256[]", name: "amountsPacked", type: "uint256[]" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "bytes32", name: "role", type: "bytes32" }], name: "getRoleAdmin", outputs: [{ internalType: "bytes32", name: "", type: "bytes32" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "bytes32", name: "role", type: "bytes32" }, { internalType: "uint256", name: "index", type: "uint256" }], name: "getRoleMember", outputs: [{ internalType: "address", name: "", type: "address" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "bytes32", name: "role", type: "bytes32" }], name: "getRoleMemberCount", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "uint256", name: "_tokenId", type: "uint256" }], name: "getRoyaltyInfoForToken", outputs: [{ internalType: "address", name: "", type: "address" }, { internalType: "uint16", name: "", type: "uint16" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "bytes32", name: "role", type: "bytes32" }, { internalType: "address", name: "account", type: "address" }], name: "grantRole", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "bytes32", name: "role", type: "bytes32" }, { internalType: "address", name: "account", type: "address" }], name: "hasRole", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "_defaultAdmin", type: "address" }, { internalType: "string", name: "_name", type: "string" }, { internalType: "string", name: "_symbol", type: "string" }, { internalType: "string", name: "_contractURI", type: "string" }, { internalType: "address[]", name: "_trustedForwarders", type: "address[]" }, { internalType: "address", name: "_royaltyRecipient", type: "address" }, { internalType: "uint128", name: "_royaltyBps", type: "uint128" }, { internalType: "uint128", name: "_fees", type: "uint128" }, { internalType: "bytes32", name: "_keyHash", type: "bytes32" }], name: "initialize", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "account", type: "address" }, { internalType: "address", name: "operator", type: "address" }], name: "isApprovedForAll", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "forwarder", type: "address" }], name: "isTrustedForwarder", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "", type: "address" }, { internalType: "uint256", name: "", type: "uint256" }, { internalType: "uint256", name: "", type: "uint256" }, { internalType: "bytes", name: "", type: "bytes" }], name: "mint", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "", type: "address" }, { internalType: "uint256[]", name: "", type: "uint256[]" }, { internalType: "uint256[]", name: "", type: "uint256[]" }, { internalType: "bytes", name: "", type: "bytes" }], name: "mintBatch", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "bytes[]", name: "data", type: "bytes[]" }], name: "multicall", outputs: [{ internalType: "bytes[]", name: "results", type: "bytes[]" }], stateMutability: "nonpayable", type: "function" }, { inputs: [], name: "name", outputs: [{ internalType: "string", name: "", type: "string" }], stateMutability: "view", type: "function" }, { inputs: [], name: "nextTokenId", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "_operator", type: "address" }, { internalType: "address", name: "", type: "address" }, { internalType: "uint256[]", name: "_ids", type: "uint256[]" }, { internalType: "uint256[]", name: "_values", type: "uint256[]" }, { internalType: "bytes", name: "_data", type: "bytes" }], name: "onERC1155BatchReceived", outputs: [{ internalType: "bytes4", name: "", type: "bytes4" }], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "", type: "address" }, { internalType: "address", name: "", type: "address" }, { internalType: "uint256", name: "", type: "uint256" }, { internalType: "uint256", name: "", type: "uint256" }, { internalType: "bytes", name: "", type: "bytes" }], name: "onERC1155Received", outputs: [{ internalType: "bytes4", name: "", type: "bytes4" }], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "", type: "address" }, { internalType: "address", name: "", type: "address" }, { internalType: "uint256", name: "", type: "uint256" }, { internalType: "bytes", name: "", type: "bytes" }], name: "onERC721Received", outputs: [{ internalType: "bytes4", name: "", type: "bytes4" }], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "uint256", name: "_packId", type: "uint256" }], name: "openPack", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [], name: "owner", outputs: [{ internalType: "address", name: "", type: "address" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "uint256", name: "", type: "uint256" }], name: "packs", outputs: [{ internalType: "string", name: "uri", type: "string" }, { internalType: "address", name: "creator", type: "address" }, { internalType: "uint256", name: "openStart", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [], name: "pause", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [], name: "paused", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "bytes32", name: "", type: "bytes32" }], name: "randomnessRequests", outputs: [{ internalType: "uint256", name: "packId", type: "uint256" }, { internalType: "address", name: "opener", type: "address" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "bytes32", name: "requestId", type: "bytes32" }, { internalType: "uint256", name: "randomness", type: "uint256" }], name: "rawFulfillRandomness", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "bytes32", name: "role", type: "bytes32" }, { internalType: "address", name: "account", type: "address" }], name: "renounceRole", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "bytes32", name: "role", type: "bytes32" }, { internalType: "address", name: "account", type: "address" }], name: "revokeRole", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "uint256", name: "", type: "uint256" }], name: "rewards", outputs: [{ internalType: "address", name: "source", type: "address" }, { internalType: "uint256", name: "rewardsPerOpen", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "uint256", name: "tokenId", type: "uint256" }, { internalType: "uint256", name: "salePrice", type: "uint256" }], name: "royaltyInfo", outputs: [{ internalType: "address", name: "receiver", type: "address" }, { internalType: "uint256", name: "royaltyAmount", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "from", type: "address" }, { internalType: "address", name: "to", type: "address" }, { internalType: "uint256[]", name: "ids", type: "uint256[]" }, { internalType: "uint256[]", name: "amounts", type: "uint256[]" }, { internalType: "bytes", name: "data", type: "bytes" }], name: "safeBatchTransferFrom", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "from", type: "address" }, { internalType: "address", name: "to", type: "address" }, { internalType: "uint256", name: "id", type: "uint256" }, { internalType: "uint256", name: "amount", type: "uint256" }, { internalType: "bytes", name: "data", type: "bytes" }], name: "safeTransferFrom", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "operator", type: "address" }, { internalType: "bool", name: "approved", type: "bool" }], name: "setApprovalForAll", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "uint256", name: "_newFees", type: "uint256" }], name: "setChainlinkFees", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "string", name: "_uri", type: "string" }], name: "setContractURI", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "_royaltyRecipient", type: "address" }, { internalType: "uint256", name: "_royaltyBps", type: "uint256" }], name: "setDefaultRoyaltyInfo", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "_newOwner", type: "address" }], name: "setOwner", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "uint256", name: "_tokenId", type: "uint256" }, { internalType: "address", name: "_recipient", type: "address" }, { internalType: "uint256", name: "_bps", type: "uint256" }], name: "setRoyaltyInfoForToken", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "bytes4", name: "interfaceId", type: "bytes4" }], name: "supportsInterface", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "view", type: "function" }, { inputs: [], name: "symbol", outputs: [{ internalType: "string", name: "", type: "string" }], stateMutability: "view", type: "function" }, { inputs: [], name: "thirdwebFee", outputs: [{ internalType: "contract ITWFee", name: "", type: "address" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "uint256", name: "id", type: "uint256" }], name: "totalSupply", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [], name: "unpause", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "uint256", name: "_id", type: "uint256" }], name: "uri", outputs: [{ internalType: "string", name: "", type: "string" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "_to", type: "address" }, { internalType: "uint256", name: "_amount", type: "uint256" }], name: "withdrawLink", outputs: [], stateMutability: "nonpayable", type: "function" }];
var Q1 = "";
var B8 = (a) => a.length > 1;
var W = class extends ContractFactory {
  constructor(...e) {
    B8(e) ? super(...e) : super(V, Q1, e[0]), this.contractName = "Pack";
  }
  deploy(e, t, f3, b0) {
    return super.deploy(e, t, f3, b0 || {});
  }
  getDeployTransaction(e, t, f3, b0) {
    return super.getDeployTransaction(e, t, f3, b0 || {});
  }
  attach(e) {
    return super.attach(e);
  }
  connect(e) {
    return super.connect(e);
  }
  static createInterface() {
    return new utils_exports.Interface(V);
  }
  static connect(e, t) {
    return new Contract(e, V, t);
  }
};
W.bytecode = Q1, W.abi = V;
var q = [{ inputs: [{ internalType: "address", name: "_thirdwebFee", type: "address" }], stateMutability: "nonpayable", type: "constructor" }, { anonymous: false, inputs: [{ indexed: true, internalType: "contract IERC20Upgradeable", name: "token", type: "address" }, { indexed: false, internalType: "address", name: "to", type: "address" }, { indexed: false, internalType: "uint256", name: "amount", type: "uint256" }], name: "ERC20PaymentReleased", type: "event" }, { anonymous: false, inputs: [{ indexed: false, internalType: "address", name: "account", type: "address" }, { indexed: false, internalType: "uint256", name: "shares", type: "uint256" }], name: "PayeeAdded", type: "event" }, { anonymous: false, inputs: [{ indexed: false, internalType: "address", name: "from", type: "address" }, { indexed: false, internalType: "uint256", name: "amount", type: "uint256" }], name: "PaymentReceived", type: "event" }, { anonymous: false, inputs: [{ indexed: false, internalType: "address", name: "to", type: "address" }, { indexed: false, internalType: "uint256", name: "amount", type: "uint256" }], name: "PaymentReleased", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "bytes32", name: "role", type: "bytes32" }, { indexed: true, internalType: "bytes32", name: "previousAdminRole", type: "bytes32" }, { indexed: true, internalType: "bytes32", name: "newAdminRole", type: "bytes32" }], name: "RoleAdminChanged", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "bytes32", name: "role", type: "bytes32" }, { indexed: true, internalType: "address", name: "account", type: "address" }, { indexed: true, internalType: "address", name: "sender", type: "address" }], name: "RoleGranted", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "bytes32", name: "role", type: "bytes32" }, { indexed: true, internalType: "address", name: "account", type: "address" }, { indexed: true, internalType: "address", name: "sender", type: "address" }], name: "RoleRevoked", type: "event" }, { inputs: [], name: "DEFAULT_ADMIN_ROLE", outputs: [{ internalType: "bytes32", name: "", type: "bytes32" }], stateMutability: "view", type: "function" }, { inputs: [], name: "contractType", outputs: [{ internalType: "bytes32", name: "", type: "bytes32" }], stateMutability: "pure", type: "function" }, { inputs: [], name: "contractURI", outputs: [{ internalType: "string", name: "", type: "string" }], stateMutability: "view", type: "function" }, { inputs: [], name: "contractVersion", outputs: [{ internalType: "uint8", name: "", type: "uint8" }], stateMutability: "pure", type: "function" }, { inputs: [{ internalType: "contract IERC20Upgradeable", name: "token", type: "address" }], name: "distribute", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [], name: "distribute", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "bytes32", name: "role", type: "bytes32" }], name: "getRoleAdmin", outputs: [{ internalType: "bytes32", name: "", type: "bytes32" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "bytes32", name: "role", type: "bytes32" }, { internalType: "uint256", name: "index", type: "uint256" }], name: "getRoleMember", outputs: [{ internalType: "address", name: "", type: "address" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "bytes32", name: "role", type: "bytes32" }], name: "getRoleMemberCount", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "bytes32", name: "role", type: "bytes32" }, { internalType: "address", name: "account", type: "address" }], name: "grantRole", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "bytes32", name: "role", type: "bytes32" }, { internalType: "address", name: "account", type: "address" }], name: "hasRole", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "_defaultAdmin", type: "address" }, { internalType: "string", name: "_contractURI", type: "string" }, { internalType: "address[]", name: "_trustedForwarders", type: "address[]" }, { internalType: "address[]", name: "_payees", type: "address[]" }, { internalType: "uint256[]", name: "_shares", type: "uint256[]" }], name: "initialize", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "forwarder", type: "address" }], name: "isTrustedForwarder", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "bytes[]", name: "data", type: "bytes[]" }], name: "multicall", outputs: [{ internalType: "bytes[]", name: "results", type: "bytes[]" }], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "uint256", name: "index", type: "uint256" }], name: "payee", outputs: [{ internalType: "address", name: "", type: "address" }], stateMutability: "view", type: "function" }, { inputs: [], name: "payeeCount", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address payable", name: "account", type: "address" }], name: "release", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "contract IERC20Upgradeable", name: "token", type: "address" }, { internalType: "address", name: "account", type: "address" }], name: "release", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "contract IERC20Upgradeable", name: "token", type: "address" }, { internalType: "address", name: "account", type: "address" }], name: "released", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "account", type: "address" }], name: "released", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "bytes32", name: "role", type: "bytes32" }, { internalType: "address", name: "account", type: "address" }], name: "renounceRole", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "bytes32", name: "role", type: "bytes32" }, { internalType: "address", name: "account", type: "address" }], name: "revokeRole", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "string", name: "_uri", type: "string" }], name: "setContractURI", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "account", type: "address" }], name: "shares", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "bytes4", name: "interfaceId", type: "bytes4" }], name: "supportsInterface", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "view", type: "function" }, { inputs: [], name: "thirdwebFee", outputs: [{ internalType: "contract ITWFee", name: "", type: "address" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "contract IERC20Upgradeable", name: "token", type: "address" }], name: "totalReleased", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [], name: "totalReleased", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [], name: "totalShares", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { stateMutability: "payable", type: "receive" }];
var z1 = "0x60a06040523480156200001157600080fd5b5060405162002c4e38038062002c4e83398101604081905262000034916200013b565b600054610100900460ff16620000515760005460ff16156200005b565b6200005b6200010e565b620000c35760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b600054610100900460ff16158015620000e6576000805461ffff19166101011790555b6001600160a01b038216608052801562000106576000805461ff00191690555b50506200016d565b600062000126306200012c60201b62000c451760201c565b15905090565b6001600160a01b03163b151590565b6000602082840312156200014e57600080fd5b81516001600160a01b03811681146200016657600080fd5b9392505050565b608051612ab762000197600039600081816105e601528181610dea01526111a20152612ab76000f3fe6080604052600436106101c55760003560e01c8063938e3d7b116100f7578063cb2ef6f711610095578063d79779b211610064578063d79779b214610628578063e33b7de31461065f578063e4fc6b6d14610675578063e8a3d4851461068a57600080fd5b8063cb2ef6f71461056a578063ce7c2ac21461059d578063cf8267b1146105d4578063d547741f1461060857600080fd5b8063a217fddf116100d1578063a217fddf146104e8578063ac9650d8146104fd578063b1a144371461052a578063ca15c8731461054a57600080fd5b8063938e3d7b146104755780639852595c14610495578063a0a8e460146104cc57600080fd5b8063406072a91161016457806363453ae11161013e57806363453ae1146103b75780638b83209b146103d75780639010d07c1461040f57806391d148541461042f57600080fd5b8063406072a91461031757806348b750441461035e578063572b6c051461037e57600080fd5b8063248a9ca3116101a0578063248a9ca3146102915780632f2ff15d146102c157806336568abe146102e15780633a98ef391461030157600080fd5b8062dbe1091461021a57806301ffc9a71461023f578063191655871461026f57600080fd5b36610215577f6ef95f06320e7a25a04a175ca677b7052bdd97131872c2192525a629f51be7706101f36106ac565b604080516001600160a01b0390921682523460208301520160405180910390a1005b600080fd5b34801561022657600080fd5b50610131545b6040519081526020015b60405180910390f35b34801561024b57600080fd5b5061025f61025a36600461232b565b6106bb565b6040519015158152602001610236565b34801561027b57600080fd5b5061028f61028a36600461236a565b6106e6565b005b34801561029d57600080fd5b5061022c6102ac366004612387565b600090815260c9602052604090206001015490565b3480156102cd57600080fd5b5061028f6102dc3660046123a0565b61075d565b3480156102ed57600080fd5b5061028f6102fc3660046123a0565b61078f565b34801561030d57600080fd5b5061012d5461022c565b34801561032357600080fd5b5061022c6103323660046123d0565b6001600160a01b0391821660009081526101336020908152604080832093909416825291909152205490565b34801561036a57600080fd5b5061028f6103793660046123d0565b610827565b34801561038a57600080fd5b5061025f61039936600461236a565b6001600160a01b031660009081526065602052604090205460ff1690565b3480156103c357600080fd5b5061028f6103d236600461236a565b610896565b3480156103e357600080fd5b506103f76103f2366004612387565b6108d4565b6040516001600160a01b039091168152602001610236565b34801561041b57600080fd5b506103f761042a3660046123fe565b610905565b34801561043b57600080fd5b5061025f61044a3660046123a0565b600091825260c9602090815260408084206001600160a01b0393909316845291905290205460ff1690565b34801561048157600080fd5b5061028f610490366004612420565b610924565b3480156104a157600080fd5b5061022c6104b036600461236a565b6001600160a01b03166000908152610130602052604090205490565b3480156104d857600080fd5b5060405160018152602001610236565b3480156104f457600080fd5b5061022c600081565b34801561050957600080fd5b5061051d610518366004612492565b610945565b604051610236919061254d565b34801561053657600080fd5b5061028f6105453660046126e9565b610a3a565b34801561055657600080fd5b5061022c610565366004612387565b610b3a565b34801561057657600080fd5b507f53706c697400000000000000000000000000000000000000000000000000000061022c565b3480156105a957600080fd5b5061022c6105b836600461236a565b6001600160a01b0316600090815261012f602052604090205490565b3480156105e057600080fd5b506103f77f000000000000000000000000000000000000000000000000000000000000000081565b34801561061457600080fd5b5061028f6106233660046123a0565b610b51565b34801561063457600080fd5b5061022c61064336600461236a565b6001600160a01b03166000908152610132602052604090205490565b34801561066b57600080fd5b5061012e5461022c565b34801561068157600080fd5b5061028f610b79565b34801561069657600080fd5b5061069f610bb6565b60405161023691906127fd565b60006106b6610c54565b905090565b60006001600160e01b03198216635a05180f60e01b14806106e057506106e082610c7e565b92915050565b60006106f182610cb3565b9050806107595760405162461bcd60e51b815260206004820152602b60248201527f5061796d656e7453706c69747465723a206163636f756e74206973206e6f742060448201526a191d59481c185e5b595b9d60aa1b60648201526084015b60405180910390fd5b5050565b600082815260c960205260409020600101546107808161077b6106ac565b610f01565b61078a8383610f81565b505050565b6107976106ac565b6001600160a01b0316816001600160a01b03161461081d5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c6600000000000000000000000000000000006064820152608401610750565b6107598282610fa3565b60006108338383610fc5565b90508061078a5760405162461bcd60e51b815260206004820152602b60248201527f5061796d656e7453706c69747465723a206163636f756e74206973206e6f742060448201526a191d59481c185e5b595b9d60aa1b6064820152608401610750565b60006108a26101315490565b905060005b8181101561078a576108c1836108bc836108d4565b610fc5565b50806108cc81612826565b9150506108a7565b600061013182815481106108ea576108ea612841565b6000918252602090912001546001600160a01b031692915050565b600082815260fb6020526040812061091d90836112c0565b9392505050565b60006109328161077b6106ac565b61093f61015f848461221e565b50505050565b60608167ffffffffffffffff811115610960576109606125af565b60405190808252806020026020018201604052801561099357816020015b606081526020019060019003908161097e5790505b50905060005b82811015610a3357610a03308585848181106109b7576109b7612841565b90506020028101906109c99190612857565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506112cc92505050565b828281518110610a1557610a15612841565b60200260200101819052508080610a2b90612826565b915050610999565b5092915050565b600054610100900460ff16610a555760005460ff1615610a59565b303b155b610acb5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610750565b600054610100900460ff16158015610aed576000805461ffff19166101011790555b610af6846113d7565b610b008383611456565b8451610b149061015f9060208801906122a2565b50610b206000876114d3565b8015610b32576000805461ff00191690555b505050505050565b600081815260fb602052604081206106e0906114dd565b600082815260c96020526040902060010154610b6f8161077b6106ac565b61078a8383610fa3565b6000610b856101315490565b905060005b8181101561075957610ba3610b9e826108d4565b610cb3565b5080610bae81612826565b915050610b8a565b61015f8054610bc4906128a5565b80601f0160208091040260200160405190810160405280929190818152602001828054610bf0906128a5565b8015610c3d5780601f10610c1257610100808354040283529160200191610c3d565b820191906000526020600020905b815481529060010190602001808311610c2057829003601f168201915b505050505081565b6001600160a01b03163b151590565b3360009081526065602052604081205460ff1615610c79575060131936013560601c90565b503390565b60006001600160e01b03198216637965db0b60e01b14806106e057506301ffc9a760e01b6001600160e01b03198316146106e0565b6001600160a01b038116600090815261012f60205260408120548110610d2a5760405162461bcd60e51b815260206004820152602660248201527f5061796d656e7453706c69747465723a206163636f756e7420686173206e6f2060448201526573686172657360d01b6064820152608401610750565b6000610d3661012e5490565b610d4090476128e0565b90506000610d6e8483610d69876001600160a01b03166000908152610130602052604090205490565b6114e7565b905080610d7f575060009392505050565b6001600160a01b0384166000908152610130602052604081208054839290610da89084906128e0565b925050819055508061012e6000828254610dc291906128e0565b909155505060405163085b49ad60e41b815230600482015260026024820152600090819081907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906385b49ad0906044016040805180830381865afa158015610e38573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e5c91906128f8565b90925090506001600160a01b03821615801590610e795750600081115b15610ea157612710610e8b8286612926565b610e959190612945565b9250610ea1828461152f565b610eb487610eaf8587612967565b61152f565b604080516001600160a01b0389168152602081018690527fdf20fd1e76bc69d672e4814fafb2c449bba3a5369d8359adf9e05e6fde87b056910160405180910390a1509195945050505050565b600082815260c9602090815260408083206001600160a01b038516845290915290205460ff1661075957610f3f816001600160a01b03166014611648565b610f4a836020611648565b604051602001610f5b92919061297e565b60408051601f198184030181529082905262461bcd60e51b8252610750916004016127fd565b610f8b82826117f1565b600082815260fb6020526040902061078a9082611894565b610fad82826118a9565b600082815260fb6020526040902061078a908261194a565b6001600160a01b038116600090815261012f6020526040812054811061103c5760405162461bcd60e51b815260206004820152602660248201527f5061796d656e7453706c69747465723a206163636f756e7420686173206e6f2060448201526573686172657360d01b6064820152608401610750565b6001600160a01b038316600090815261013260205260408120546040516370a0823160e01b81523060048201526001600160a01b038616906370a0823190602401602060405180830381865afa15801561109a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110be91906129ff565b6110c891906128e0565b905060006111028483610d6988886001600160a01b0391821660009081526101336020908152604080832093909416825291909152205490565b905080611114576000925050506106e0565b6001600160a01b038086166000908152610133602090815260408083209388168352929052908120805483929061114c9084906128e0565b90915550506001600160a01b038516600090815261013260205260408120805483929061117a9084906128e0565b909155505060405163085b49ad60e41b815230600482015260026024820152600090819081907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906385b49ad0906044016040805180830381865afa1580156111f0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061121491906128f8565b90925090506001600160a01b038216158015906112315750600081115b1561125a576127106112438286612926565b61124d9190612945565b925061125a88838561195f565b61126e88886112698688612967565b61195f565b604080516001600160a01b038981168252602082018790528a16917f3be5b7a71e84ed12875d241991c70855ac5817d847039e17a9d895c1ceb0f18a910160405180910390a250919695505050505050565b600061091d83836119c6565b60606001600160a01b0383163b61134b5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e747261637400000000000000000000000000000000000000000000000000006064820152608401610750565b600080846001600160a01b0316846040516113669190612a18565b600060405180830381855af49150503d80600081146113a1576040519150601f19603f3d011682016040523d82523d6000602084013e6113a6565b606091505b50915091506113ce8282604051806060016040528060278152602001612a84602791396119f0565b95945050505050565b600054610100900460ff166114425760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610750565b61144a611a29565b61145381611a96565b50565b600054610100900460ff166114c15760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610750565b6114c9611a29565b6107598282611b69565b6107598282610f81565b60006106e0825490565b61012d546001600160a01b038416600090815261012f6020526040812054909183916115139086612926565b61151d9190612945565b6115279190612967565b949350505050565b8047101561157f5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610750565b6000826001600160a01b03168260405160006040518083038185875af1925050503d80600081146115cc576040519150601f19603f3d011682016040523d82523d6000602084013e6115d1565b606091505b505090508061078a5760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610750565b60606000611657836002612926565b6116629060026128e0565b67ffffffffffffffff81111561167a5761167a6125af565b6040519080825280601f01601f1916602001820160405280156116a4576020820181803683370190505b509050600360fc1b816000815181106116bf576116bf612841565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106116ee576116ee612841565b60200101906001600160f81b031916908160001a9053506000611712846002612926565b61171d9060016128e0565b90505b60018111156117a2577f303132333435363738396162636465660000000000000000000000000000000085600f166010811061175e5761175e612841565b1a60f81b82828151811061177457611774612841565b60200101906001600160f81b031916908160001a90535060049490941c9361179b81612a34565b9050611720565b50831561091d5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610750565b600082815260c9602090815260408083206001600160a01b038516845290915290205460ff1661075957600082815260c9602090815260408083206001600160a01b03851684529091529020805460ff191660011790556118506106ac565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b600061091d836001600160a01b038416611cf6565b600082815260c9602090815260408083206001600160a01b038516845290915290205460ff161561075957600082815260c9602090815260408083206001600160a01b03851684529091529020805460ff191690556119066106ac565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b600061091d836001600160a01b038416611d45565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1663a9059cbb60e01b17905261078a908490611e38565b60008260000182815481106119dd576119dd612841565b9060005260206000200154905092915050565b606083156119ff57508161091d565b825115611a0f5782518084602001fd5b8160405162461bcd60e51b815260040161075091906127fd565b600054610100900460ff16611a945760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610750565b565b600054610100900460ff16611b015760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610750565b60005b815181101561075957600160656000848481518110611b2557611b25612841565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff191691151591909117905580611b6181612826565b915050611b04565b600054610100900460ff16611bd45760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610750565b8051825114611c4b5760405162461bcd60e51b815260206004820152603260248201527f5061796d656e7453706c69747465723a2070617965657320616e64207368617260448201527f6573206c656e677468206d69736d6174636800000000000000000000000000006064820152608401610750565b6000825111611c9c5760405162461bcd60e51b815260206004820152601a60248201527f5061796d656e7453706c69747465723a206e6f207061796565730000000000006044820152606401610750565b60005b825181101561078a57611ce4838281518110611cbd57611cbd612841565b6020026020010151838381518110611cd757611cd7612841565b6020026020010151611f1d565b80611cee81612826565b915050611c9f565b6000818152600183016020526040812054611d3d575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556106e0565b5060006106e0565b60008181526001830160205260408120548015611e2e576000611d69600183612967565b8554909150600090611d7d90600190612967565b9050818114611de2576000866000018281548110611d9d57611d9d612841565b9060005260206000200154905080876000018481548110611dc057611dc0612841565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080611df357611df3612a4b565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506106e0565b60009150506106e0565b6000611e8d826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166121439092919063ffffffff16565b80519091501561078a5780806020019051810190611eab9190612a61565b61078a5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610750565b6001600160a01b038216611f995760405162461bcd60e51b815260206004820152602c60248201527f5061796d656e7453706c69747465723a206163636f756e74206973207468652060448201527f7a65726f206164647265737300000000000000000000000000000000000000006064820152608401610750565b60008111611fe95760405162461bcd60e51b815260206004820152601d60248201527f5061796d656e7453706c69747465723a207368617265732061726520300000006044820152606401610750565b6001600160a01b038216600090815261012f6020526040902054156120765760405162461bcd60e51b815260206004820152602b60248201527f5061796d656e7453706c69747465723a206163636f756e7420616c726561647960448201527f20686173207368617265730000000000000000000000000000000000000000006064820152608401610750565b6101318054600181019091557fbd987ad6ccdb7c7567f7335ea839f95dc944431abcf935b6924f70215963db730180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b038416908117909155600090815261012f6020526040902081905561012d546120f99082906128e0565b61012d55604080516001600160a01b0384168152602081018390527f40c340f65e17194d14ddddb073d3c9f888e3cb52b5aae0c6c7706b4fbc905fac910160405180910390a15050565b60606115278484600085856001600160a01b0385163b6121a55760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610750565b600080866001600160a01b031685876040516121c19190612a18565b60006040518083038185875af1925050503d80600081146121fe576040519150601f19603f3d011682016040523d82523d6000602084013e612203565b606091505b50915091506122138282866119f0565b979650505050505050565b82805461222a906128a5565b90600052602060002090601f01602090048101928261224c5760008555612292565b82601f106122655782800160ff19823516178555612292565b82800160010185558215612292579182015b82811115612292578235825591602001919060010190612277565b5061229e929150612316565b5090565b8280546122ae906128a5565b90600052602060002090601f0160209004810192826122d05760008555612292565b82601f106122e957805160ff1916838001178555612292565b82800160010185558215612292579182015b828111156122925782518255916020019190600101906122fb565b5b8082111561229e5760008155600101612317565b60006020828403121561233d57600080fd5b81356001600160e01b03198116811461091d57600080fd5b6001600160a01b038116811461145357600080fd5b60006020828403121561237c57600080fd5b813561091d81612355565b60006020828403121561239957600080fd5b5035919050565b600080604083850312156123b357600080fd5b8235915060208301356123c581612355565b809150509250929050565b600080604083850312156123e357600080fd5b82356123ee81612355565b915060208301356123c581612355565b6000806040838503121561241157600080fd5b50508035926020909101359150565b6000806020838503121561243357600080fd5b823567ffffffffffffffff8082111561244b57600080fd5b818501915085601f83011261245f57600080fd5b81358181111561246e57600080fd5b86602082850101111561248057600080fd5b60209290920196919550909350505050565b600080602083850312156124a557600080fd5b823567ffffffffffffffff808211156124bd57600080fd5b818501915085601f8301126124d157600080fd5b8135818111156124e057600080fd5b8660208260051b850101111561248057600080fd5b60005b838110156125105781810151838201526020016124f8565b8381111561093f5750506000910152565b600081518084526125398160208601602086016124f5565b601f01601f19169290920160200192915050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b828110156125a257603f19888603018452612590858351612521565b94509285019290850190600101612574565b5092979650505050505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156125ee576125ee6125af565b604052919050565b600067ffffffffffffffff821115612610576126106125af565b5060051b60200190565b600082601f83011261262b57600080fd5b8135602061264061263b836125f6565b6125c5565b82815260059290921b8401810191818101908684111561265f57600080fd5b8286015b8481101561268357803561267681612355565b8352918301918301612663565b509695505050505050565b600082601f83011261269f57600080fd5b813560206126af61263b836125f6565b82815260059290921b840181019181810190868411156126ce57600080fd5b8286015b8481101561268357803583529183019183016126d2565b600080600080600060a0868803121561270157600080fd5b853561270c81612355565b945060208681013567ffffffffffffffff8082111561272a57600080fd5b818901915089601f83011261273e57600080fd5b813581811115612750576127506125af565b612762601f8201601f191685016125c5565b8181528b8583860101111561277657600080fd5b818585018683013760009181019094018190529296506040890135929150808311156127a0578182fd5b6127ac8a848b0161261a565b955060608901359250808311156127c1578182fd5b6127cd8a848b0161261a565b945060808901359250808311156127e2578182fd5b50506127f08882890161268e565b9150509295509295909350565b60208152600061091d6020830184612521565b634e487b7160e01b600052601160045260246000fd5b600060001982141561283a5761283a612810565b5060010190565b634e487b7160e01b600052603260045260246000fd5b6000808335601e1984360301811261286e57600080fd5b83018035915067ffffffffffffffff82111561288957600080fd5b60200191503681900382131561289e57600080fd5b9250929050565b600181811c908216806128b957607f821691505b602082108114156128da57634e487b7160e01b600052602260045260246000fd5b50919050565b600082198211156128f3576128f3612810565b500190565b6000806040838503121561290b57600080fd5b825161291681612355565b6020939093015192949293505050565b600081600019048311821515161561294057612940612810565b500290565b60008261296257634e487b7160e01b600052601260045260246000fd5b500490565b60008282101561297957612979612810565b500390565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516129b68160178501602088016124f5565b7f206973206d697373696e6720726f6c652000000000000000000000000000000060179184019182015283516129f38160288401602088016124f5565b01602801949350505050565b600060208284031215612a1157600080fd5b5051919050565b60008251612a2a8184602087016124f5565b9190910192915050565b600081612a4357612a43612810565b506000190190565b634e487b7160e01b600052603160045260246000fd5b600060208284031215612a7357600080fd5b8151801515811461091d57600080fdfe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a164736f6c634300080c000a";
var q8 = (a) => a.length > 1;
var N2 = class extends ContractFactory {
  constructor(...e) {
    q8(e) ? super(...e) : super(q, z1, e[0]), this.contractName = "Split";
  }
  deploy(e, t) {
    return super.deploy(e, t || {});
  }
  getDeployTransaction(e, t) {
    return super.getDeployTransaction(e, t || {});
  }
  attach(e) {
    return super.attach(e);
  }
  connect(e) {
    return super.connect(e);
  }
  static createInterface() {
    return new utils_exports.Interface(q);
  }
  static connect(e, t) {
    return new Contract(e, q, t);
  }
};
N2.bytecode = z1, N2.abi = q;
var L = [{ inputs: [{ internalType: "address", name: "_thirdwebFee", type: "address" }], stateMutability: "nonpayable", type: "constructor" }, { anonymous: false, inputs: [{ indexed: true, internalType: "address", name: "account", type: "address" }, { indexed: true, internalType: "address", name: "operator", type: "address" }, { indexed: false, internalType: "bool", name: "approved", type: "bool" }], name: "ApprovalForAll", type: "event" }, { anonymous: false, inputs: [{ indexed: false, internalType: "address", name: "newRoyaltyRecipient", type: "address" }, { indexed: false, internalType: "uint256", name: "newRoyaltyBps", type: "uint256" }], name: "DefaultRoyalty", type: "event" }, { anonymous: false, inputs: [{ indexed: false, internalType: "address", name: "prevOwner", type: "address" }, { indexed: false, internalType: "address", name: "newOwner", type: "address" }], name: "OwnerUpdated", type: "event" }, { anonymous: false, inputs: [{ indexed: false, internalType: "address", name: "platformFeeRecipient", type: "address" }, { indexed: false, internalType: "uint256", name: "platformFeeBps", type: "uint256" }], name: "PlatformFeeInfoUpdated", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "address", name: "recipient", type: "address" }], name: "PrimarySaleRecipientUpdated", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "bytes32", name: "role", type: "bytes32" }, { indexed: true, internalType: "bytes32", name: "previousAdminRole", type: "bytes32" }, { indexed: true, internalType: "bytes32", name: "newAdminRole", type: "bytes32" }], name: "RoleAdminChanged", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "bytes32", name: "role", type: "bytes32" }, { indexed: true, internalType: "address", name: "account", type: "address" }, { indexed: true, internalType: "address", name: "sender", type: "address" }], name: "RoleGranted", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "bytes32", name: "role", type: "bytes32" }, { indexed: true, internalType: "address", name: "account", type: "address" }, { indexed: true, internalType: "address", name: "sender", type: "address" }], name: "RoleRevoked", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "uint256", name: "tokenId", type: "uint256" }, { indexed: false, internalType: "address", name: "royaltyRecipient", type: "address" }, { indexed: false, internalType: "uint256", name: "royaltyBps", type: "uint256" }], name: "RoyaltyForToken", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "address", name: "mintedTo", type: "address" }, { indexed: true, internalType: "uint256", name: "tokenIdMinted", type: "uint256" }, { indexed: false, internalType: "string", name: "uri", type: "string" }, { indexed: false, internalType: "uint256", name: "quantityMinted", type: "uint256" }], name: "TokensMinted", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "address", name: "signer", type: "address" }, { indexed: true, internalType: "address", name: "mintedTo", type: "address" }, { indexed: true, internalType: "uint256", name: "tokenIdMinted", type: "uint256" }, { components: [{ internalType: "address", name: "to", type: "address" }, { internalType: "address", name: "royaltyRecipient", type: "address" }, { internalType: "uint256", name: "royaltyBps", type: "uint256" }, { internalType: "address", name: "primarySaleRecipient", type: "address" }, { internalType: "uint256", name: "tokenId", type: "uint256" }, { internalType: "string", name: "uri", type: "string" }, { internalType: "uint256", name: "quantity", type: "uint256" }, { internalType: "uint256", name: "pricePerToken", type: "uint256" }, { internalType: "address", name: "currency", type: "address" }, { internalType: "uint128", name: "validityStartTimestamp", type: "uint128" }, { internalType: "uint128", name: "validityEndTimestamp", type: "uint128" }, { internalType: "bytes32", name: "uid", type: "bytes32" }], indexed: false, internalType: "struct ITokenERC1155.MintRequest", name: "mintRequest", type: "tuple" }], name: "TokensMintedWithSignature", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "address", name: "operator", type: "address" }, { indexed: true, internalType: "address", name: "from", type: "address" }, { indexed: true, internalType: "address", name: "to", type: "address" }, { indexed: false, internalType: "uint256[]", name: "ids", type: "uint256[]" }, { indexed: false, internalType: "uint256[]", name: "values", type: "uint256[]" }], name: "TransferBatch", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "address", name: "operator", type: "address" }, { indexed: true, internalType: "address", name: "from", type: "address" }, { indexed: true, internalType: "address", name: "to", type: "address" }, { indexed: false, internalType: "uint256", name: "id", type: "uint256" }, { indexed: false, internalType: "uint256", name: "value", type: "uint256" }], name: "TransferSingle", type: "event" }, { anonymous: false, inputs: [{ indexed: false, internalType: "string", name: "value", type: "string" }, { indexed: true, internalType: "uint256", name: "id", type: "uint256" }], name: "URI", type: "event" }, { inputs: [], name: "DEFAULT_ADMIN_ROLE", outputs: [{ internalType: "bytes32", name: "", type: "bytes32" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "account", type: "address" }, { internalType: "uint256", name: "id", type: "uint256" }], name: "balanceOf", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address[]", name: "accounts", type: "address[]" }, { internalType: "uint256[]", name: "ids", type: "uint256[]" }], name: "balanceOfBatch", outputs: [{ internalType: "uint256[]", name: "", type: "uint256[]" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "account", type: "address" }, { internalType: "uint256", name: "id", type: "uint256" }, { internalType: "uint256", name: "value", type: "uint256" }], name: "burn", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "account", type: "address" }, { internalType: "uint256[]", name: "ids", type: "uint256[]" }, { internalType: "uint256[]", name: "values", type: "uint256[]" }], name: "burnBatch", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [], name: "contractType", outputs: [{ internalType: "bytes32", name: "", type: "bytes32" }], stateMutability: "pure", type: "function" }, { inputs: [], name: "contractURI", outputs: [{ internalType: "string", name: "", type: "string" }], stateMutability: "view", type: "function" }, { inputs: [], name: "contractVersion", outputs: [{ internalType: "uint8", name: "", type: "uint8" }], stateMutability: "pure", type: "function" }, { inputs: [], name: "getDefaultRoyaltyInfo", outputs: [{ internalType: "address", name: "", type: "address" }, { internalType: "uint16", name: "", type: "uint16" }], stateMutability: "view", type: "function" }, { inputs: [], name: "getPlatformFeeInfo", outputs: [{ internalType: "address", name: "", type: "address" }, { internalType: "uint16", name: "", type: "uint16" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "bytes32", name: "role", type: "bytes32" }], name: "getRoleAdmin", outputs: [{ internalType: "bytes32", name: "", type: "bytes32" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "bytes32", name: "role", type: "bytes32" }, { internalType: "uint256", name: "index", type: "uint256" }], name: "getRoleMember", outputs: [{ internalType: "address", name: "", type: "address" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "bytes32", name: "role", type: "bytes32" }], name: "getRoleMemberCount", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "uint256", name: "_tokenId", type: "uint256" }], name: "getRoyaltyInfoForToken", outputs: [{ internalType: "address", name: "", type: "address" }, { internalType: "uint16", name: "", type: "uint16" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "bytes32", name: "role", type: "bytes32" }, { internalType: "address", name: "account", type: "address" }], name: "grantRole", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "bytes32", name: "role", type: "bytes32" }, { internalType: "address", name: "account", type: "address" }], name: "hasRole", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "_defaultAdmin", type: "address" }, { internalType: "string", name: "_name", type: "string" }, { internalType: "string", name: "_symbol", type: "string" }, { internalType: "string", name: "_contractURI", type: "string" }, { internalType: "address[]", name: "_trustedForwarders", type: "address[]" }, { internalType: "address", name: "_primarySaleRecipient", type: "address" }, { internalType: "address", name: "_royaltyRecipient", type: "address" }, { internalType: "uint128", name: "_royaltyBps", type: "uint128" }, { internalType: "uint128", name: "_platformFeeBps", type: "uint128" }, { internalType: "address", name: "_platformFeeRecipient", type: "address" }], name: "initialize", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "account", type: "address" }, { internalType: "address", name: "operator", type: "address" }], name: "isApprovedForAll", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "forwarder", type: "address" }], name: "isTrustedForwarder", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "_to", type: "address" }, { internalType: "uint256", name: "_tokenId", type: "uint256" }, { internalType: "string", name: "_uri", type: "string" }, { internalType: "uint256", name: "_amount", type: "uint256" }], name: "mintTo", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ components: [{ internalType: "address", name: "to", type: "address" }, { internalType: "address", name: "royaltyRecipient", type: "address" }, { internalType: "uint256", name: "royaltyBps", type: "uint256" }, { internalType: "address", name: "primarySaleRecipient", type: "address" }, { internalType: "uint256", name: "tokenId", type: "uint256" }, { internalType: "string", name: "uri", type: "string" }, { internalType: "uint256", name: "quantity", type: "uint256" }, { internalType: "uint256", name: "pricePerToken", type: "uint256" }, { internalType: "address", name: "currency", type: "address" }, { internalType: "uint128", name: "validityStartTimestamp", type: "uint128" }, { internalType: "uint128", name: "validityEndTimestamp", type: "uint128" }, { internalType: "bytes32", name: "uid", type: "bytes32" }], internalType: "struct ITokenERC1155.MintRequest", name: "_req", type: "tuple" }, { internalType: "bytes", name: "_signature", type: "bytes" }], name: "mintWithSignature", outputs: [], stateMutability: "payable", type: "function" }, { inputs: [{ internalType: "bytes[]", name: "data", type: "bytes[]" }], name: "multicall", outputs: [{ internalType: "bytes[]", name: "results", type: "bytes[]" }], stateMutability: "nonpayable", type: "function" }, { inputs: [], name: "name", outputs: [{ internalType: "string", name: "", type: "string" }], stateMutability: "view", type: "function" }, { inputs: [], name: "nextTokenIdToMint", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [], name: "owner", outputs: [{ internalType: "address", name: "", type: "address" }], stateMutability: "view", type: "function" }, { inputs: [], name: "platformFeeBps", outputs: [{ internalType: "uint128", name: "", type: "uint128" }], stateMutability: "view", type: "function" }, { inputs: [], name: "platformFeeRecipient", outputs: [{ internalType: "address", name: "", type: "address" }], stateMutability: "view", type: "function" }, { inputs: [], name: "primarySaleRecipient", outputs: [{ internalType: "address", name: "", type: "address" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "bytes32", name: "role", type: "bytes32" }, { internalType: "address", name: "account", type: "address" }], name: "renounceRole", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "bytes32", name: "role", type: "bytes32" }, { internalType: "address", name: "account", type: "address" }], name: "revokeRole", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "uint256", name: "tokenId", type: "uint256" }, { internalType: "uint256", name: "salePrice", type: "uint256" }], name: "royaltyInfo", outputs: [{ internalType: "address", name: "receiver", type: "address" }, { internalType: "uint256", name: "royaltyAmount", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "from", type: "address" }, { internalType: "address", name: "to", type: "address" }, { internalType: "uint256[]", name: "ids", type: "uint256[]" }, { internalType: "uint256[]", name: "amounts", type: "uint256[]" }, { internalType: "bytes", name: "data", type: "bytes" }], name: "safeBatchTransferFrom", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "from", type: "address" }, { internalType: "address", name: "to", type: "address" }, { internalType: "uint256", name: "id", type: "uint256" }, { internalType: "uint256", name: "amount", type: "uint256" }, { internalType: "bytes", name: "data", type: "bytes" }], name: "safeTransferFrom", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "uint256", name: "", type: "uint256" }], name: "saleRecipientForToken", outputs: [{ internalType: "address", name: "", type: "address" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "operator", type: "address" }, { internalType: "bool", name: "approved", type: "bool" }], name: "setApprovalForAll", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "string", name: "_uri", type: "string" }], name: "setContractURI", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "_royaltyRecipient", type: "address" }, { internalType: "uint256", name: "_royaltyBps", type: "uint256" }], name: "setDefaultRoyaltyInfo", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "_newOwner", type: "address" }], name: "setOwner", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "_platformFeeRecipient", type: "address" }, { internalType: "uint256", name: "_platformFeeBps", type: "uint256" }], name: "setPlatformFeeInfo", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "_saleRecipient", type: "address" }], name: "setPrimarySaleRecipient", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "uint256", name: "_tokenId", type: "uint256" }, { internalType: "address", name: "_recipient", type: "address" }, { internalType: "uint256", name: "_bps", type: "uint256" }], name: "setRoyaltyInfoForToken", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "bytes4", name: "interfaceId", type: "bytes4" }], name: "supportsInterface", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "view", type: "function" }, { inputs: [], name: "symbol", outputs: [{ internalType: "string", name: "", type: "string" }], stateMutability: "view", type: "function" }, { inputs: [], name: "thirdwebFee", outputs: [{ internalType: "contract ITWFee", name: "", type: "address" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "uint256", name: "", type: "uint256" }], name: "totalSupply", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "uint256", name: "_tokenId", type: "uint256" }], name: "uri", outputs: [{ internalType: "string", name: "", type: "string" }], stateMutability: "view", type: "function" }, { inputs: [{ components: [{ internalType: "address", name: "to", type: "address" }, { internalType: "address", name: "royaltyRecipient", type: "address" }, { internalType: "uint256", name: "royaltyBps", type: "uint256" }, { internalType: "address", name: "primarySaleRecipient", type: "address" }, { internalType: "uint256", name: "tokenId", type: "uint256" }, { internalType: "string", name: "uri", type: "string" }, { internalType: "uint256", name: "quantity", type: "uint256" }, { internalType: "uint256", name: "pricePerToken", type: "uint256" }, { internalType: "address", name: "currency", type: "address" }, { internalType: "uint128", name: "validityStartTimestamp", type: "uint128" }, { internalType: "uint128", name: "validityEndTimestamp", type: "uint128" }, { internalType: "bytes32", name: "uid", type: "bytes32" }], internalType: "struct ITokenERC1155.MintRequest", name: "_req", type: "tuple" }, { internalType: "bytes", name: "_signature", type: "bytes" }], name: "verify", outputs: [{ internalType: "bool", name: "", type: "bool" }, { internalType: "address", name: "", type: "address" }], stateMutability: "view", type: "function" }];
var Y1 = "0x60a06040523480156200001157600080fd5b50604051620059493803806200594983398101604081905262000034916200013b565b600054610100900460ff16620000515760005460ff16156200005b565b6200005b6200010e565b620000c35760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b600054610100900460ff16158015620000e6576000805461ffff19166101011790555b6001600160a01b038216608052801562000106576000805461ff00191690555b50506200016d565b600062000126306200012c60201b62001db71760201c565b15905090565b6001600160a01b03163b151590565b6000602082840312156200014e57600080fd5b81516001600160a01b03811681146200016657600080fd5b9392505050565b6080516157b962000190600039600081816108cd015261265001526157b96000f3fe6080604052600436106103075760003560e01c8063938e3d7b1161019a578063ca15c873116100e1578063e8a3d4851161008a578063eb13554f11610064578063eb13554f146109fb578063f242432a14610a1c578063f5298aca14610a3c57600080fd5b8063e8a3d48514610965578063e985e9c51461097a578063ea500d69146109c457600080fd5b8063d45573f6116100bb578063d45573f6146108ef578063d547741f14610925578063e15916341461094557600080fd5b8063ca15c87314610879578063cb2ef6f714610899578063cf8267b1146108bb57600080fd5b8063a22cb46511610143578063b17cd86f1161011d578063b17cd86f146107dd578063b24f2d391461081c578063bd85b0391461084b57600080fd5b8063a22cb46514610770578063ac9650d814610790578063b03f4528146107bd57600080fd5b80639bcf7a15116101745780639bcf7a151461071f578063a0a8e4601461073f578063a217fddf1461075b57600080fd5b8063938e3d7b146106d757806395d89b41146106f757806398a6e9931461070c57600080fd5b80632f2ff15d1161025e578063600dd5ea116102075780638da5cb5b116101e15780638da5cb5b1461065b5780639010d07c1461067057806391d148541461069057600080fd5b8063600dd5ea146105fb5780636b20c4541461061b5780636f4f28371461063b57600080fd5b80634cc157df116102385780634cc157df146105535780634e1273f414610595578063572b6c05146105c257600080fd5b80632f2ff15d146104fc57806336568abe1461051c5780633b1475a71461053c57600080fd5b806313af4035116102c0578063248a9ca31161029a578063248a9ca31461046c5780632a55205a1461049d5780632eb2c2d6146104dc57600080fd5b806313af4035146103ea5780631e7ac4881461040c57806322dcd13e1461042c57600080fd5b806306fdde03116102f157806306fdde031461036f578063079fe40e146103915780630e89341c146103ca57600080fd5b8062fdd58e1461030c57806301ffc9a71461033f575b600080fd5b34801561031857600080fd5b5061032c610327366004614674565b610a5c565b6040519081526020015b60405180910390f35b34801561034b57600080fd5b5061035f61035a3660046146b6565b610b0b565b6040519015158152602001610336565b34801561037b57600080fd5b50610384610b51565b604051610336919061472b565b34801561039d57600080fd5b506101c9546103b2906001600160a01b031681565b6040516001600160a01b039091168152602001610336565b3480156103d657600080fd5b506103846103e536600461473e565b610be0565b3480156103f657600080fd5b5061040a610405366004614757565b610c83565b005b34801561041857600080fd5b5061040a610427366004614674565b610d81565b34801561043857600080fd5b506101cc5461045490600160801b90046001600160801b031681565b6040516001600160801b039091168152602001610336565b34801561047857600080fd5b5061032c61048736600461473e565b600090815261012f602052604090206001015490565b3480156104a957600080fd5b506104bd6104b8366004614774565b610e58565b604080516001600160a01b039093168352602083019190915201610336565b3480156104e857600080fd5b5061040a6104f736600461490c565b610e95565b34801561050857600080fd5b5061040a6105173660046149ba565b610f49565b34801561052857600080fd5b5061040a6105373660046149ba565b610f77565b34801561054857600080fd5b5061032c6101c85481565b34801561055f57600080fd5b5061057361056e36600461473e565b611013565b604080516001600160a01b03909316835261ffff909116602083015201610336565b3480156105a157600080fd5b506105b56105b0366004614a59565b611083565b6040516103369190614af8565b3480156105ce57600080fd5b5061035f6105dd366004614757565b6001600160a01b031660009081526099602052604090205460ff1690565b34801561060757600080fd5b5061040a610616366004614674565b6111c1565b34801561062757600080fd5b5061040a610636366004614b0b565b61129b565b34801561064757600080fd5b5061040a610656366004614757565b611333565b34801561066757600080fd5b506103b261138d565b34801561067c57600080fd5b506103b261068b366004614774565b6113e8565b34801561069c57600080fd5b5061035f6106ab3660046149ba565b600091825261012f602090815260408084206001600160a01b0393909316845291905290205460ff1690565b3480156106e357600080fd5b5061040a6106f2366004614bc3565b611408565b34801561070357600080fd5b50610384611429565b61040a61071a366004614c05565b611437565b34801561072b57600080fd5b5061040a61073a366004614c77565b61165b565b34801561074b57600080fd5b5060405160018152602001610336565b34801561076757600080fd5b5061032c600081565b34801561077c57600080fd5b5061040a61078b366004614cbd565b611745565b34801561079c57600080fd5b506107b06107ab366004614ceb565b611757565b6040516103369190614d60565b3480156107c957600080fd5b5061040a6107d8366004614dc2565b61184c565b3480156107e957600080fd5b506107fd6107f8366004614c05565b6118fe565b6040805192151583526001600160a01b03909116602083015201610336565b34801561082857600080fd5b506101cb546101cc546001600160a01b03909116906001600160801b0316610573565b34801561085757600080fd5b5061032c61086636600461473e565b6101d06020526000908152604090205481565b34801561088557600080fd5b5061032c61089436600461473e565b611979565b3480156108a557600080fd5b506b546f6b656e4552433131353560a01b61032c565b3480156108c757600080fd5b506103b27f000000000000000000000000000000000000000000000000000000000000000081565b3480156108fb57600080fd5b506101ca546101cc546001600160a01b0390911690600160801b90046001600160801b0316610573565b34801561093157600080fd5b5061040a6109403660046149ba565b611991565b34801561095157600080fd5b5061040a610960366004614e3d565b6119ba565b34801561097157600080fd5b50610384611c64565b34801561098657600080fd5b5061035f610995366004614f50565b6001600160a01b0391821660009081526101946020908152604080832093909416825291909152205460ff1690565b3480156109d057600080fd5b506103b26109df36600461473e565b6101d1602052600090815260409020546001600160a01b031681565b348015610a0757600080fd5b506101ca546103b2906001600160a01b031681565b348015610a2857600080fd5b5061040a610a37366004614f7e565b611c72565b348015610a4857600080fd5b5061040a610a57366004614fe7565b611d1f565b60006001600160a01b038316610adf5760405162461bcd60e51b815260206004820152602b60248201527f455243313135353a2062616c616e636520717565727920666f7220746865207a60448201527f65726f206164647265737300000000000000000000000000000000000000000060648201526084015b60405180910390fd5b506000818152610193602090815260408083206001600160a01b03861684529091529020545b92915050565b6000610b1682611dc6565b80610b3157506001600160e01b03198216636cdb3d1360e11b145b80610b0557506001600160e01b0319821663152a902d60e11b1492915050565b6101c58054610b5f9061501c565b80601f0160208091040260200160405190810160405280929190818152602001828054610b8b9061501c565b8015610bd85780601f10610bad57610100808354040283529160200191610bd8565b820191906000526020600020905b815481529060010190602001808311610bbb57829003601f168201915b505050505081565b60008181526101cf60205260409020805460609190610bfe9061501c565b80601f0160208091040260200160405190810160405280929190818152602001828054610c2a9061501c565b8015610c775780601f10610c4c57610100808354040283529160200191610c77565b820191906000526020600020905b815481529060010190602001808311610c5a57829003601f168201915b50505050509050919050565b6000610c9681610c91611e06565b611e10565b6001600160a01b03821660009081527fe9104285c6851efcbc5e0e70440200efbdcab556a1c8784776780f8bb44f2931602052604090205460ff16610d1d5760405162461bcd60e51b815260206004820152601b60248201527f6e6577206f776e6572206e6f74206d6f64756c652061646d696e2e00000000006044820152606401610ad6565b6101c780546001600160a01b038481166001600160a01b031983168117909355604080519190921680825260208201939093527f8292fce18fa69edf4db7b94ea2e58241df0ae57f97e0a6c9b29067028bf92d7691015b60405180910390a1505050565b6000610d8f81610c91611e06565b612710821115610de15760405162461bcd60e51b815260206004820152600d60248201527f627073203c3d2031303030302e000000000000000000000000000000000000006044820152606401610ad6565b6101cc80546001600160801b031667ffffffffffffffff8416600160801b021790556101ca80546001600160a01b0319166001600160a01b03851690811790915560408051918252602082018490527fe2497bd806ec41a6e0dd992c29a72efc0ef8fec9092d1978fd4a1e00b2f183049101610d74565b600080600080610e6786611013565b90945084925061ffff169050612710610e80828761506d565b610e8a919061508c565b925050509250929050565b610e9d611e06565b6001600160a01b0316856001600160a01b03161480610ec35750610ec385610995611e06565b610f355760405162461bcd60e51b815260206004820152603260248201527f455243313135353a207472616e736665722063616c6c6572206973206e6f742060448201527f6f776e6572206e6f7220617070726f76656400000000000000000000000000006064820152608401610ad6565b610f428585858585611e91565b5050505050565b600082815261012f6020526040902060010154610f6881610c91611e06565b610f72838361210d565b505050565b610f7f611e06565b6001600160a01b0316816001600160a01b0316146110055760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c6600000000000000000000000000000000006064820152608401610ad6565b61100f8282612130565b5050565b60008181526101d260209081526040808320815180830190925280546001600160a01b03168083526001909101549282019290925282911561105b5780516020820151611079565b6101cb546101cc546001600160a01b03909116906001600160801b03165b9250925050915091565b606081518351146110fc5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e67746860448201527f206d69736d6174636800000000000000000000000000000000000000000000006064820152608401610ad6565b6000835167ffffffffffffffff81111561111857611118614796565b604051908082528060200260200182016040528015611141578160200160208202803683370190505b50905060005b84518110156111b95761118c858281518110611165576111656150ae565b602002602001015185838151811061117f5761117f6150ae565b6020026020010151610a5c565b82828151811061119e5761119e6150ae565b60209081029190910101526111b2816150c4565b9050611147565b509392505050565b60006111cf81610c91611e06565b6127108211156112215760405162461bcd60e51b815260206004820152601260248201527f65786365656420726f79616c74792062707300000000000000000000000000006044820152606401610ad6565b6101cb80546001600160a01b0319166001600160a01b0385169081179091556101cc80546fffffffffffffffffffffffffffffffff19166001600160801b03851617905560408051918252602082018490527f90d7ec04bcb8978719414f82e52e4cb651db41d0e6f8cea6118c2191e6183adb9101610d74565b6112a3611e06565b6001600160a01b0316836001600160a01b031614806112c957506112c983610995611e06565b6113285760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f726044820152691030b8383937bb32b21760b11b6064820152608401610ad6565b610f72838383612153565b600061134181610c91611e06565b6101c980546001600160a01b0319166001600160a01b0384169081179091556040517f299d17e95023f496e0ffc4909cff1a61f74bb5eb18de6f900f4155bfa1b3b33390600090a25050565b6101c7546001600160a01b031660009081527fe9104285c6851efcbc5e0e70440200efbdcab556a1c8784776780f8bb44f2931602052604081205460ff166113d55750600090565b6101c7546001600160a01b03165b905090565b60008281526101616020526040812061140190836123a6565b9392505050565b600061141681610c91611e06565b6114236101cd8484614542565b50505050565b6101c68054610b5f9061501c565b6002603554141561148a5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610ad6565b6002603555600061149c8484846123b2565b90506000806114ae6020870187614757565b6001600160a01b0316146114ce576114c96020860186614757565b6114d6565b6114d6611e06565b905060006000198660800135141561150957506101c880549060019060006114fe83856150df565b909155506115539050565b6101c85486608001351061154c5760405162461bcd60e51b815260206004820152600a6024820152691a5b9d985b1a59081a5960b21b6044820152606401610ad6565b5060808501355b60006115656040880160208901614757565b6001600160a01b0316146115d55760405180604001604052808760200160208101906115919190614757565b6001600160a01b03908116825260408981013560209384015260008581526101d2845220835181546001600160a01b03191692169190911781559101516001909101555b6115f1826115e660a08901896150f7565b848a60c001356124cd565b6116026115fd8761513e565b6125d1565b80826001600160a01b0316846001600160a01b03167f0b35afaf155daeef41cc46df86f058df2855c57d30ab134647a6b587e7cc8c39896040516116469190615291565b60405180910390a45050600160355550505050565b600061166981610c91611e06565b6127108211156116bb5760405162461bcd60e51b815260206004820152601260248201527f65786365656420726f79616c74792062707300000000000000000000000000006044820152606401610ad6565b6040805180820182526001600160a01b03858116808352602080840187815260008a81526101d28352869020945185546001600160a01b031916941693909317845591516001909301929092558251918252810184905285917f7365cf4122f072a3365c20d54eff9b38d73c096c28e1892ec8f5b0e403a0f12d910160405180910390a250505050565b61100f611750611e06565b83836127ec565b60608167ffffffffffffffff81111561177257611772614796565b6040519080825280602002602001820160405280156117a557816020015b60608152602001906001900390816117905790505b50905060005b8281101561184557611815308585848181106117c9576117c96150ae565b90506020028101906117db91906150f7565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506128e292505050565b828281518110611827576118276150ae565b6020026020010181905250808061183d906150c4565b9150506117ab565b5092915050565b7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a661187981610c91611e06565b60006000198614156118a657506101c8805490600190600061189b83856150df565b909155506118e89050565b6101c85486106118e55760405162461bcd60e51b815260206004820152600a6024820152691a5b9d985b1a59081a5960b21b6044820152606401610ad6565b50845b6118f587868684876124cd565b50505050505050565b600080600061190e8686866129ed565b61016087013560009081526101ce602052604090205490915060ff1615801561196e57506001600160a01b03811660009081527fa2a71de801f4f5af590dd1e71778408c512ca00170a88b45ca00ba943b31e98e602052604090205460ff165b969095509350505050565b600081815261016160205260408120610b0590612a51565b600082815261012f60205260409020600101546119b081610c91611e06565b610f728383612130565b600054610100900460ff166119d55760005460ff16156119d9565b303b155b611a4b5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610ad6565b600054610100900460ff16158015611a6d576000805461ffff19166101011790555b611a75612a5b565b611abc6040518060400160405280600c81526020016b546f6b656e4552433131353560a01b815250604051806040016040528060018152602001603160f81b815250612abe565b611ac587612b21565b611add60405180602001604052806000815250612b8e565b8951611af1906101c59060208d01906145c6565b508851611b06906101c69060208c01906145c6565b506101cb80546001600160a01b03199081166001600160a01b03888116919091179092556101cc80546fffffffffffffffffffffffffffffffff19166001600160801b0388161790556101ca805482168584161790556101c980549091169188169190911790558751611b81906101cd9060208b01906145c6565b506101cc80546001600160801b03808616600160801b0291161790556101c780546001600160a01b038d166001600160a01b0319909116179055611bc660008c612bf0565b611bf07f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a68c612bf0565b611c1a7f8502233096d909befbda0999bb8ea2f3a6be3c138b9fbf003752a4c8bce86f6c8c612bf0565b611c457f8502233096d909befbda0999bb8ea2f3a6be3c138b9fbf003752a4c8bce86f6c6000612bf0565b8015611c57576000805461ff00191690555b5050505050505050505050565b6101cd8054610b5f9061501c565b611c7a611e06565b6001600160a01b0316856001600160a01b03161480611ca05750611ca085610995611e06565b611d125760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260448201527f20617070726f76656400000000000000000000000000000000000000000000006064820152608401610ad6565b610f428585858585612bfa565b611d27611e06565b6001600160a01b0316836001600160a01b03161480611d4d5750611d4d83610995611e06565b611dac5760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f726044820152691030b8383937bb32b21760b11b6064820152608401610ad6565b610f72838383612daf565b6001600160a01b03163b151590565b60006001600160e01b03198216636cdb3d1360e11b1480611df757506001600160e01b031982166303a24d0760e21b145b80610b055750610b0582612f39565b60006113e3612f5e565b600082815261012f602090815260408083206001600160a01b038516845290915290205460ff1661100f57611e4f816001600160a01b03166014612f8b565b611e5a836020612f8b565b604051602001611e6b9291906153c0565b60408051601f198184030181529082905262461bcd60e51b8252610ad69160040161472b565b8151835114611ef35760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b6064820152608401610ad6565b6001600160a01b038416611f575760405162461bcd60e51b815260206004820152602560248201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604482015264647265737360d81b6064820152608401610ad6565b6000611f61611e06565b9050611f71818787878787613134565b60005b845181101561209f576000858281518110611f9157611f916150ae565b602002602001015190506000858381518110611faf57611faf6150ae565b6020908102919091018101516000848152610193835260408082206001600160a01b038e1683529093529190912054909150818110156120445760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60448201526939103a3930b739b332b960b11b6064820152608401610ad6565b6000838152610193602090815260408083206001600160a01b038e8116855292528083208585039055908b168252812080548492906120849084906150df565b9250508190555050505080612098906150c4565b9050611f74565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516120ef929190615441565b60405180910390a4612105818787878787613392565b505050505050565b6121178282613538565b600082815261016160205260409020610f7290826135dd565b61213a82826135f2565b600082815261016160205260409020610f729082613695565b6001600160a01b0383166121b55760405162461bcd60e51b815260206004820152602360248201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260448201526265737360e81b6064820152608401610ad6565b80518251146122175760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b6064820152608401610ad6565b6000612221611e06565b905061224181856000868660405180602001604052806000815250613134565b60005b8351811015612347576000848281518110612261576122616150ae565b60200260200101519050600084838151811061227f5761227f6150ae565b6020908102919091018101516000848152610193835260408082206001600160a01b038c16835290935291909120549091508181101561230d5760405162461bcd60e51b8152602060048201526024808201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604482015263616e636560e01b6064820152608401610ad6565b6000928352610193602090815260408085206001600160a01b038b168652909152909220910390558061233f816150c4565b915050612244565b5060006001600160a01b0316846001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8686604051612398929190615441565b60405180910390a450505050565b600061140183836136aa565b60008060006123c28686866118fe565b91509150816124135760405162461bcd60e51b815260206004820152601160248201527f696e76616c6964207369676e61747572650000000000000000000000000000006044820152606401610ad6565b4261242661014088016101208901615466565b6001600160801b03161115801561245757504261244b61016088016101408901615466565b6001600160801b031610155b6124a35760405162461bcd60e51b815260206004820152600f60248201527f72657175657374206578706972656400000000000000000000000000000000006044820152606401610ad6565b61016086013560009081526101ce60205260409020805460ff191660011790559150509392505050565b60008281526101cf6020526040902080546124e79061501c565b15159050612558578261253c5760405162461bcd60e51b815260206004820152600a60248201527f656d707479207572692e000000000000000000000000000000000000000000006044820152606401610ad6565b60008281526101cf60205260409020612556908585614542565b505b612573858383604051806020016040528060008152506136d4565b81856001600160a01b03167f04133ee4cb027e1c5fce5e3481289278a93bd16a65a3b65b428a6d239e706bfb6101cf6000868152602001908152602001600020846040516125c2929190615481565b60405180910390a35050505050565b60e08101516125dd5750565b60008160c001518260e001516125f3919061506d565b6101cc549091506000906127109061261b90600160801b90046001600160801b03168461506d565b612625919061508c565b60405163085b49ad60e41b815230600482015260006024820181905291925081906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906385b49ad0906044016040805180830381865afa158015612696573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126ba9190615531565b909250905060006127106126ce838761506d565b6126d8919061508c565b6101008701519091506001600160a01b031673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1415612754578434146127545760405162461bcd60e51b815260206004820152601660248201527f6d7573742073656e6420746f74616c2070726963652e000000000000000000006044820152606401610ad6565b60608601516000906001600160a01b031615612774578660600151612782565b6101c9546001600160a01b03165b90506127a8876101000151612795611e06565b6101ca546001600160a01b0316886137e3565b6127c08761010001516127b9611e06565b86856137e3565b6118f58761010001516127d1611e06565b83856127dd8a8c61555f565b6127e7919061555f565b6137e3565b816001600160a01b0316836001600160a01b031614156128745760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c2073746174757360448201527f20666f722073656c6600000000000000000000000000000000000000000000006064820152608401610ad6565b6001600160a01b0383811660008181526101946020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b60606001600160a01b0383163b6129615760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e747261637400000000000000000000000000000000000000000000000000006064820152608401610ad6565b600080846001600160a01b03168460405161297c9190615576565b600060405180830381855af49150503d80600081146129b7576040519150601f19603f3d011682016040523d82523d6000602084013e6129bc565b606091505b50915091506129e482826040518060600160405280602781526020016157866027913961382d565b95945050505050565b6000612a4983838080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612a439250612a379150889050613866565b805190602001206139bc565b90613a0a565b949350505050565b6000610b05825490565b600054610100900460ff16612ab45760405162461bcd60e51b815260206004820152602b602482015260008051602061576683398151915260448201526a6e697469616c697a696e6760a81b6064820152608401610ad6565b612abc613a26565b565b600054610100900460ff16612b175760405162461bcd60e51b815260206004820152602b602482015260008051602061576683398151915260448201526a6e697469616c697a696e6760a81b6064820152608401610ad6565b61100f8282613a86565b600054610100900460ff16612b7a5760405162461bcd60e51b815260206004820152602b602482015260008051602061576683398151915260448201526a6e697469616c697a696e6760a81b6064820152608401610ad6565b612b82613af9565b612b8b81613b52565b50565b600054610100900460ff16612be75760405162461bcd60e51b815260206004820152602b602482015260008051602061576683398151915260448201526a6e697469616c697a696e6760a81b6064820152608401610ad6565b612b8b81613c13565b61100f828261210d565b6001600160a01b038416612c5e5760405162461bcd60e51b815260206004820152602560248201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604482015264647265737360d81b6064820152608401610ad6565b6000612c68611e06565b9050612c88818787612c7988613c75565b612c8288613c75565b87613134565b6000848152610193602090815260408083206001600160a01b038a16845290915290205483811015612d0f5760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60448201526939103a3930b739b332b960b11b6064820152608401610ad6565b6000858152610193602090815260408083206001600160a01b038b8116855292528083208785039055908816825281208054869290612d4f9084906150df565b909155505060408051868152602081018690526001600160a01b03808916928a821692918616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46118f5828888888888613cc0565b6001600160a01b038316612e115760405162461bcd60e51b815260206004820152602360248201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260448201526265737360e81b6064820152608401610ad6565b6000612e1b611e06565b9050612e4b81856000612e2d87613c75565b612e3687613c75565b60405180602001604052806000815250613134565b6000838152610193602090815260408083206001600160a01b038816845290915290205482811015612ecb5760405162461bcd60e51b8152602060048201526024808201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604482015263616e636560e01b6064820152608401610ad6565b6000848152610193602090815260408083206001600160a01b03898116808652918452828520888703905582518981529384018890529092908616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a45050505050565b60006001600160e01b03198216635a05180f60e01b1480610b055750610b0582613dbc565b3360009081526099602052604081205460ff1615612f83575060131936013560601c90565b503390565b90565b60606000612f9a83600261506d565b612fa59060026150df565b67ffffffffffffffff811115612fbd57612fbd614796565b6040519080825280601f01601f191660200182016040528015612fe7576020820181803683370190505b509050600360fc1b81600081518110613002576130026150ae565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110613031576130316150ae565b60200101906001600160f81b031916908160001a905350600061305584600261506d565b6130609060016150df565b90505b60018111156130e5577f303132333435363738396162636465660000000000000000000000000000000085600f16601081106130a1576130a16150ae565b1a60f81b8282815181106130b7576130b76150ae565b60200101906001600160f81b031916908160001a90535060049490941c936130de81615592565b9050613063565b5083156114015760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610ad6565b600080527fdf45e191c6a8bff7d5b2484d5c1deccbd5b2abc06a2abf694394baf9d01cb5e56020527f2b85be2befc2dd713b2f771c3d841437400c04e85bacc15958c6dcadb2aa5c045460ff1615801561319657506001600160a01b03851615155b80156131aa57506001600160a01b03841615155b15613284576001600160a01b03851660009081527fdf45e191c6a8bff7d5b2484d5c1deccbd5b2abc06a2abf694394baf9d01cb5e5602052604090205460ff168061322c57506001600160a01b03841660009081527fdf45e191c6a8bff7d5b2484d5c1deccbd5b2abc06a2abf694394baf9d01cb5e5602052604090205460ff165b6132845760405162461bcd60e51b8152602060048201526024808201527f7265737472696374656420746f205452414e534645525f524f4c4520686f6c6460448201526332b9399760e11b6064820152608401610ad6565b6001600160a01b03851661330c5760005b835181101561330a578281815181106132b0576132b06150ae565b60200260200101516101d060008684815181106132cf576132cf6150ae565b6020026020010151815260200190815260200160002060008282546132f491906150df565b909155506133039050816150c4565b9050613295565b505b6001600160a01b0384166121055760005b83518110156118f557828181518110613338576133386150ae565b60200260200101516101d06000868481518110613357576133576150ae565b60200260200101518152602001908152602001600020600082825461337c919061555f565b9091555061338b9050816150c4565b905061331d565b6001600160a01b0384163b156121055760405163bc197c8160e01b81526001600160a01b0385169063bc197c81906133d690899089908890889088906004016155a9565b6020604051808303816000875af1925050508015613411575060408051601f3d908101601f1916820190925261340e91810190615607565b60015b6134c75761341d615624565b806308c379a01415613457575061343261563f565b8061343d5750613459565b8060405162461bcd60e51b8152600401610ad6919061472b565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e204552433131353560448201527f526563656976657220696d706c656d656e7465720000000000000000000000006064820152608401610ad6565b6001600160e01b0319811663bc197c8160e01b146118f55760405162461bcd60e51b815260206004820152602860248201527f455243313135353a204552433131353552656365697665722072656a656374656044820152676420746f6b656e7360c01b6064820152608401610ad6565b600082815261012f602090815260408083206001600160a01b038516845290915290205460ff1661100f57600082815261012f602090815260408083206001600160a01b03851684529091529020805460ff19166001179055613599611e06565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000611401836001600160a01b038416613df1565b600082815261012f602090815260408083206001600160a01b038516845290915290205460ff161561100f57600082815261012f602090815260408083206001600160a01b03851684529091529020805460ff19169055613651611e06565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b6000611401836001600160a01b038416613e40565b60008260000182815481106136c1576136c16150ae565b9060005260206000200154905092915050565b6001600160a01b0384166137345760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b6064820152608401610ad6565b600061373e611e06565b905061375081600087612c7988613c75565b6000848152610193602090815260408083206001600160a01b0389168452909152812080548592906137839084906150df565b909155505060408051858152602081018590526001600160a01b0380881692600092918516917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4610f4281600087878787613cc0565b806137ed57611423565b6001600160a01b03841673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee14156138215761381c8282613f33565b611423565b61142384848484613fd6565b6060831561383c575081611401565b82511561384c5782518084602001fd5b8160405162461bcd60e51b8152600401610ad6919061472b565b60607fc7a95ef88f83fa833ccfce325157b7111633b181b6a27181b86415d8d501134d6138966020840184614757565b6138a66040850160208601614757565b60408501356138bb6080870160608801614757565b60808701356138cd60a08901896150f7565b6040516138db9291906156c9565b60405190819003902060c089013560e08a01356139006101208c016101008d01614757565b6139126101408d016101208e01615466565b6139246101608e016101408f01615466565b60408051602081019d909d526001600160a01b039b8c16908d0152988a1660608c015260808b019790975294881660a08a015260c089019390935260e08801919091526101008701526101208601529092166101408401526001600160801b039182166101608085019190915291166101808301528301356101a08201526101c0016040516020818303038152906040529050919050565b6000610b056139c9614149565b8360405161190160f01b6020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b6000806000613a1985856141c4565b915091506111b981614234565b600054610100900460ff16613a7f5760405162461bcd60e51b815260206004820152602b602482015260008051602061576683398151915260448201526a6e697469616c697a696e6760a81b6064820152608401610ad6565b6001603555565b600054610100900460ff16613adf5760405162461bcd60e51b815260206004820152602b602482015260008051602061576683398151915260448201526a6e697469616c697a696e6760a81b6064820152608401610ad6565b815160209283012081519190920120600191909155600255565b600054610100900460ff16612abc5760405162461bcd60e51b815260206004820152602b602482015260008051602061576683398151915260448201526a6e697469616c697a696e6760a81b6064820152608401610ad6565b600054610100900460ff16613bab5760405162461bcd60e51b815260206004820152602b602482015260008051602061576683398151915260448201526a6e697469616c697a696e6760a81b6064820152608401610ad6565b60005b815181101561100f57600160996000848481518110613bcf57613bcf6150ae565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff191691151591909117905580613c0b816150c4565b915050613bae565b600054610100900460ff16613c6c5760405162461bcd60e51b815260206004820152602b602482015260008051602061576683398151915260448201526a6e697469616c697a696e6760a81b6064820152608401610ad6565b612b8b816143ef565b60408051600180825281830190925260609160009190602080830190803683370190505090508281600081518110613caf57613caf6150ae565b602090810291909101015292915050565b6001600160a01b0384163b156121055760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e6190613d0490899089908890889088906004016156d9565b6020604051808303816000875af1925050508015613d3f575060408051601f3d908101601f19168201909252613d3c91810190615607565b60015b613d4b5761341d615624565b6001600160e01b0319811663f23a6e6160e01b146118f55760405162461bcd60e51b815260206004820152602860248201527f455243313135353a204552433131353552656365697665722072656a656374656044820152676420746f6b656e7360c01b6064820152608401610ad6565b60006001600160e01b03198216637965db0b60e01b1480610b0557506301ffc9a760e01b6001600160e01b0319831614610b05565b6000818152600183016020526040812054613e3857508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610b05565b506000610b05565b60008181526001830160205260408120548015613f29576000613e6460018361555f565b8554909150600090613e789060019061555f565b9050818114613edd576000866000018281548110613e9857613e986150ae565b9060005260206000200154905080876000018481548110613ebb57613ebb6150ae565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080613eee57613eee61571c565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610b05565b6000915050610b05565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114613f80576040519150601f19603f3d011682016040523d82523d6000602084013e613f85565b606091505b5050905080610f725760405162461bcd60e51b815260206004820152601c60248201527f6e617469766520746f6b656e207472616e73666572206661696c6564000000006044820152606401610ad6565b816001600160a01b0316836001600160a01b03161415613ff557611423565b60006001600160a01b0384163014614087576040516323b872dd60e01b81526001600160a01b0385811660048301528481166024830152604482018490528616906323b872dd906064016020604051808303816000875af115801561405e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906140829190615732565b6140fa565b60405163a9059cbb60e01b81526001600160a01b0384811660048301526024820184905286169063a9059cbb906044016020604051808303816000875af11580156140d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906140fa9190615732565b905080610f425760405162461bcd60e51b815260206004820152601960248201527f63757272656e6379207472616e73666572206661696c65642e000000000000006044820152606401610ad6565b60006113e37f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f61417860015490565b6002546040805160208101859052908101839052606081018290524660808201523060a082015260009060c0016040516020818303038152906040528051906020012090509392505050565b6000808251604114156141fb5760208301516040840151606085015160001a6141ef87828585614403565b9450945050505061422d565b825160401415614225576020830151604084015161421a8683836144f0565b93509350505061422d565b506000905060025b9250929050565b60008160048111156142485761424861574f565b14156142515750565b60018160048111156142655761426561574f565b14156142b35760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610ad6565b60028160048111156142c7576142c761574f565b14156143155760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610ad6565b60038160048111156143295761432961574f565b14156143825760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610ad6565b60048160048111156143965761439661574f565b1415612b8b5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b6064820152608401610ad6565b805161100f906101959060208401906145c6565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111561443a57506000905060036144e7565b8460ff16601b1415801561445257508460ff16601c14155b1561446357506000905060046144e7565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa1580156144b7573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166144e0576000600192509250506144e7565b9150600090505b94509492505050565b6000807f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83168161452660ff86901c601b6150df565b905061453487828885614403565b935093505050935093915050565b82805461454e9061501c565b90600052602060002090601f01602090048101928261457057600085556145b6565b82601f106145895782800160ff198235161785556145b6565b828001600101855582156145b6579182015b828111156145b657823582559160200191906001019061459b565b506145c292915061463a565b5090565b8280546145d29061501c565b90600052602060002090601f0160209004810192826145f457600085556145b6565b82601f1061460d57805160ff19168380011785556145b6565b828001600101855582156145b6579182015b828111156145b657825182559160200191906001019061461f565b5b808211156145c2576000815560010161463b565b6001600160a01b0381168114612b8b57600080fd5b803561466f8161464f565b919050565b6000806040838503121561468757600080fd5b82356146928161464f565b946020939093013593505050565b6001600160e01b031981168114612b8b57600080fd5b6000602082840312156146c857600080fd5b8135611401816146a0565b60005b838110156146ee5781810151838201526020016146d6565b838111156114235750506000910152565b600081518084526147178160208601602086016146d3565b601f01601f19169290920160200192915050565b60208152600061140160208301846146ff565b60006020828403121561475057600080fd5b5035919050565b60006020828403121561476957600080fd5b81356114018161464f565b6000806040838503121561478757600080fd5b50508035926020909101359150565b634e487b7160e01b600052604160045260246000fd5b601f8201601f1916810167ffffffffffffffff811182821017156147d2576147d2614796565b6040525050565b604051610180810167ffffffffffffffff811182821017156147fd576147fd614796565b60405290565b600067ffffffffffffffff82111561481d5761481d614796565b5060051b60200190565b600082601f83011261483857600080fd5b8135602061484582614803565b60405161485282826147ac565b83815260059390931b850182019282810191508684111561487257600080fd5b8286015b8481101561488d5780358352918301918301614876565b509695505050505050565b600082601f8301126148a957600080fd5b813567ffffffffffffffff8111156148c3576148c3614796565b6040516148da601f8301601f1916602001826147ac565b8181528460208386010111156148ef57600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a0868803121561492457600080fd5b853561492f8161464f565b9450602086013561493f8161464f565b9350604086013567ffffffffffffffff8082111561495c57600080fd5b61496889838a01614827565b9450606088013591508082111561497e57600080fd5b61498a89838a01614827565b935060808801359150808211156149a057600080fd5b506149ad88828901614898565b9150509295509295909350565b600080604083850312156149cd57600080fd5b8235915060208301356149df8161464f565b809150509250929050565b600082601f8301126149fb57600080fd5b81356020614a0882614803565b604051614a1582826147ac565b83815260059390931b8501820192828101915086841115614a3557600080fd5b8286015b8481101561488d578035614a4c8161464f565b8352918301918301614a39565b60008060408385031215614a6c57600080fd5b823567ffffffffffffffff80821115614a8457600080fd5b614a90868387016149ea565b93506020850135915080821115614aa657600080fd5b50614ab385828601614827565b9150509250929050565b600081518084526020808501945080840160005b83811015614aed57815187529582019590820190600101614ad1565b509495945050505050565b6020815260006114016020830184614abd565b600080600060608486031215614b2057600080fd5b8335614b2b8161464f565b9250602084013567ffffffffffffffff80821115614b4857600080fd5b614b5487838801614827565b93506040860135915080821115614b6a57600080fd5b50614b7786828701614827565b9150509250925092565b60008083601f840112614b9357600080fd5b50813567ffffffffffffffff811115614bab57600080fd5b60208301915083602082850101111561422d57600080fd5b60008060208385031215614bd657600080fd5b823567ffffffffffffffff811115614bed57600080fd5b614bf985828601614b81565b90969095509350505050565b600080600060408486031215614c1a57600080fd5b833567ffffffffffffffff80821115614c3257600080fd5b908501906101808288031215614c4757600080fd5b90935060208501359080821115614c5d57600080fd5b50614c6a86828701614b81565b9497909650939450505050565b600080600060608486031215614c8c57600080fd5b833592506020840135614c9e8161464f565b929592945050506040919091013590565b8015158114612b8b57600080fd5b60008060408385031215614cd057600080fd5b8235614cdb8161464f565b915060208301356149df81614caf565b60008060208385031215614cfe57600080fd5b823567ffffffffffffffff80821115614d1657600080fd5b818501915085601f830112614d2a57600080fd5b813581811115614d3957600080fd5b8660208260051b8501011115614d4e57600080fd5b60209290920196919550909350505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015614db557603f19888603018452614da38583516146ff565b94509285019290850190600101614d87565b5092979650505050505050565b600080600080600060808688031215614dda57600080fd5b8535614de58161464f565b945060208601359350604086013567ffffffffffffffff811115614e0857600080fd5b614e1488828901614b81565b96999598509660600135949350505050565b80356001600160801b038116811461466f57600080fd5b6000806000806000806000806000806101408b8d031215614e5d57600080fd5b614e668b614664565b995060208b013567ffffffffffffffff80821115614e8357600080fd5b614e8f8e838f01614898565b9a5060408d0135915080821115614ea557600080fd5b614eb18e838f01614898565b995060608d0135915080821115614ec757600080fd5b614ed38e838f01614898565b985060808d0135915080821115614ee957600080fd5b50614ef68d828e016149ea565b965050614f0560a08c01614664565b9450614f1360c08c01614664565b9350614f2160e08c01614e26565b9250614f306101008c01614e26565b9150614f3f6101208c01614664565b90509295989b9194979a5092959850565b60008060408385031215614f6357600080fd5b8235614f6e8161464f565b915060208301356149df8161464f565b600080600080600060a08688031215614f9657600080fd5b8535614fa18161464f565b94506020860135614fb18161464f565b93506040860135925060608601359150608086013567ffffffffffffffff811115614fdb57600080fd5b6149ad88828901614898565b600080600060608486031215614ffc57600080fd5b83356150078161464f565b95602085013595506040909401359392505050565b600181811c9082168061503057607f821691505b6020821081141561505157634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b600081600019048311821515161561508757615087615057565b500290565b6000826150a957634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052603260045260246000fd5b60006000198214156150d8576150d8615057565b5060010190565b600082198211156150f2576150f2615057565b500190565b6000808335601e1984360301811261510e57600080fd5b83018035915067ffffffffffffffff82111561512957600080fd5b60200191503681900382131561422d57600080fd5b6000610180823603121561515157600080fd5b6151596147d9565b61516283614664565b815261517060208401614664565b60208201526040830135604082015261518b60608401614664565b60608201526080830135608082015260a083013567ffffffffffffffff8111156151b457600080fd5b6151c036828601614898565b60a08301525060c083013560c082015260e083013560e08201526101006151e8818501614664565b908201526101206151fa848201614e26565b9082015261014061520c848201614e26565b9082015261016092830135928101929092525090565b6000808335601e1984360301811261523957600080fd5b830160208101925035905067ffffffffffffffff81111561525957600080fd5b80360383131561422d57600080fd5b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b602081526152b2602082016152a584614664565b6001600160a01b03169052565b60006152c060208401614664565b6001600160a01b038116604084015250604083013560608301526152e660608401614664565b6001600160a01b038116608084015250608083013560a083015261530d60a0840184615222565b6101808060c08601526153256101a086018385615268565b925060c086013560e0860152610100915060e08601358286015261534a828701614664565b9150610120615363818701846001600160a01b03169052565b61536e818801614e26565b925050610140615388818701846001600160801b03169052565b615393818801614e26565b9250506101606153ad818701846001600160801b03169052565b9590950135939094019290925250919050565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516153f88160178501602088016146d3565b7f206973206d697373696e6720726f6c652000000000000000000000000000000060179184019182015283516154358160288401602088016146d3565b01602801949350505050565b6040815260006154546040830185614abd565b82810360208401526129e48185614abd565b60006020828403121561547857600080fd5b61140182614e26565b60408152600080845481600182811c9150808316806154a157607f831692505b60208084108214156154c157634e487b7160e01b86526022600452602486fd5b60408801849052606088018280156154e057600181146154f15761551c565b60ff1987168252828201975061551c565b60008c81526020902060005b87811015615516578154848201529086019084016154fd565b83019850505b50509690960196909652509095945050505050565b6000806040838503121561554457600080fd5b825161554f8161464f565b6020939093015192949293505050565b60008282101561557157615571615057565b500390565b600082516155888184602087016146d3565b9190910192915050565b6000816155a1576155a1615057565b506000190190565b60006001600160a01b03808816835280871660208401525060a060408301526155d560a0830186614abd565b82810360608401526155e78186614abd565b905082810360808401526155fb81856146ff565b98975050505050505050565b60006020828403121561561957600080fd5b8151611401816146a0565b600060033d1115612f885760046000803e5060005160e01c90565b600060443d101561564d5790565b6040516003193d81016004833e81513d67ffffffffffffffff816024840111818411171561567d57505050505090565b82850191508151818111156156955750505050505090565b843d87010160208285010111156156af5750505050505090565b6156be602082860101876147ac565b509095945050505050565b8183823760009101908152919050565b60006001600160a01b03808816835280871660208401525084604083015283606083015260a0608083015261571160a08301846146ff565b979650505050505050565b634e487b7160e01b600052603160045260246000fd5b60006020828403121561574457600080fd5b815161140181614caf565b634e487b7160e01b600052602160045260246000fdfe496e697469616c697a61626c653a20636f6e7472616374206973206e6f742069416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a164736f6c634300080c000a";
var H8 = (a) => a.length > 1;
var G = class extends ContractFactory {
  constructor(...e) {
    H8(e) ? super(...e) : super(L, Y1, e[0]), this.contractName = "TokenERC1155";
  }
  deploy(e, t) {
    return super.deploy(e, t || {});
  }
  getDeployTransaction(e, t) {
    return super.getDeployTransaction(e, t || {});
  }
  attach(e) {
    return super.attach(e);
  }
  connect(e) {
    return super.connect(e);
  }
  static createInterface() {
    return new utils_exports.Interface(L);
  }
  static connect(e, t) {
    return new Contract(e, L, t);
  }
};
G.bytecode = Y1, G.abi = L;
var H = [{ inputs: [{ internalType: "address", name: "_thirdwebFee", type: "address" }], stateMutability: "nonpayable", type: "constructor" }, { anonymous: false, inputs: [{ indexed: true, internalType: "address", name: "owner", type: "address" }, { indexed: true, internalType: "address", name: "spender", type: "address" }, { indexed: false, internalType: "uint256", name: "value", type: "uint256" }], name: "Approval", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "address", name: "delegator", type: "address" }, { indexed: true, internalType: "address", name: "fromDelegate", type: "address" }, { indexed: true, internalType: "address", name: "toDelegate", type: "address" }], name: "DelegateChanged", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "address", name: "delegate", type: "address" }, { indexed: false, internalType: "uint256", name: "previousBalance", type: "uint256" }, { indexed: false, internalType: "uint256", name: "newBalance", type: "uint256" }], name: "DelegateVotesChanged", type: "event" }, { anonymous: false, inputs: [{ indexed: false, internalType: "address", name: "account", type: "address" }], name: "Paused", type: "event" }, { anonymous: false, inputs: [{ indexed: false, internalType: "address", name: "platformFeeRecipient", type: "address" }, { indexed: false, internalType: "uint256", name: "platformFeeBps", type: "uint256" }], name: "PlatformFeeInfoUpdated", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "address", name: "recipient", type: "address" }], name: "PrimarySaleRecipientUpdated", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "bytes32", name: "role", type: "bytes32" }, { indexed: true, internalType: "bytes32", name: "previousAdminRole", type: "bytes32" }, { indexed: true, internalType: "bytes32", name: "newAdminRole", type: "bytes32" }], name: "RoleAdminChanged", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "bytes32", name: "role", type: "bytes32" }, { indexed: true, internalType: "address", name: "account", type: "address" }, { indexed: true, internalType: "address", name: "sender", type: "address" }], name: "RoleGranted", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "bytes32", name: "role", type: "bytes32" }, { indexed: true, internalType: "address", name: "account", type: "address" }, { indexed: true, internalType: "address", name: "sender", type: "address" }], name: "RoleRevoked", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "address", name: "mintedTo", type: "address" }, { indexed: false, internalType: "uint256", name: "quantityMinted", type: "uint256" }], name: "TokensMinted", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "address", name: "signer", type: "address" }, { indexed: true, internalType: "address", name: "mintedTo", type: "address" }, { components: [{ internalType: "address", name: "to", type: "address" }, { internalType: "address", name: "primarySaleRecipient", type: "address" }, { internalType: "uint256", name: "quantity", type: "uint256" }, { internalType: "uint256", name: "price", type: "uint256" }, { internalType: "address", name: "currency", type: "address" }, { internalType: "uint128", name: "validityStartTimestamp", type: "uint128" }, { internalType: "uint128", name: "validityEndTimestamp", type: "uint128" }, { internalType: "bytes32", name: "uid", type: "bytes32" }], indexed: false, internalType: "struct ITokenERC20.MintRequest", name: "mintRequest", type: "tuple" }], name: "TokensMintedWithSignature", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "address", name: "from", type: "address" }, { indexed: true, internalType: "address", name: "to", type: "address" }, { indexed: false, internalType: "uint256", name: "value", type: "uint256" }], name: "Transfer", type: "event" }, { anonymous: false, inputs: [{ indexed: false, internalType: "address", name: "account", type: "address" }], name: "Unpaused", type: "event" }, { inputs: [], name: "DEFAULT_ADMIN_ROLE", outputs: [{ internalType: "bytes32", name: "", type: "bytes32" }], stateMutability: "view", type: "function" }, { inputs: [], name: "DOMAIN_SEPARATOR", outputs: [{ internalType: "bytes32", name: "", type: "bytes32" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "owner", type: "address" }, { internalType: "address", name: "spender", type: "address" }], name: "allowance", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "spender", type: "address" }, { internalType: "uint256", name: "amount", type: "uint256" }], name: "approve", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "account", type: "address" }], name: "balanceOf", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "uint256", name: "amount", type: "uint256" }], name: "burn", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "account", type: "address" }, { internalType: "uint256", name: "amount", type: "uint256" }], name: "burnFrom", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "account", type: "address" }, { internalType: "uint32", name: "pos", type: "uint32" }], name: "checkpoints", outputs: [{ components: [{ internalType: "uint32", name: "fromBlock", type: "uint32" }, { internalType: "uint224", name: "votes", type: "uint224" }], internalType: "struct ERC20VotesUpgradeable.Checkpoint", name: "", type: "tuple" }], stateMutability: "view", type: "function" }, { inputs: [], name: "contractType", outputs: [{ internalType: "bytes32", name: "", type: "bytes32" }], stateMutability: "pure", type: "function" }, { inputs: [], name: "contractURI", outputs: [{ internalType: "string", name: "", type: "string" }], stateMutability: "view", type: "function" }, { inputs: [], name: "contractVersion", outputs: [{ internalType: "uint8", name: "", type: "uint8" }], stateMutability: "pure", type: "function" }, { inputs: [], name: "decimals", outputs: [{ internalType: "uint8", name: "", type: "uint8" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "spender", type: "address" }, { internalType: "uint256", name: "subtractedValue", type: "uint256" }], name: "decreaseAllowance", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "delegatee", type: "address" }], name: "delegate", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "delegatee", type: "address" }, { internalType: "uint256", name: "nonce", type: "uint256" }, { internalType: "uint256", name: "expiry", type: "uint256" }, { internalType: "uint8", name: "v", type: "uint8" }, { internalType: "bytes32", name: "r", type: "bytes32" }, { internalType: "bytes32", name: "s", type: "bytes32" }], name: "delegateBySig", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "account", type: "address" }], name: "delegates", outputs: [{ internalType: "address", name: "", type: "address" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "uint256", name: "blockNumber", type: "uint256" }], name: "getPastTotalSupply", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "account", type: "address" }, { internalType: "uint256", name: "blockNumber", type: "uint256" }], name: "getPastVotes", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [], name: "getPlatformFeeInfo", outputs: [{ internalType: "address", name: "", type: "address" }, { internalType: "uint16", name: "", type: "uint16" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "bytes32", name: "role", type: "bytes32" }], name: "getRoleAdmin", outputs: [{ internalType: "bytes32", name: "", type: "bytes32" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "bytes32", name: "role", type: "bytes32" }, { internalType: "uint256", name: "index", type: "uint256" }], name: "getRoleMember", outputs: [{ internalType: "address", name: "", type: "address" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "bytes32", name: "role", type: "bytes32" }], name: "getRoleMemberCount", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "account", type: "address" }], name: "getVotes", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "bytes32", name: "role", type: "bytes32" }, { internalType: "address", name: "account", type: "address" }], name: "grantRole", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "bytes32", name: "role", type: "bytes32" }, { internalType: "address", name: "account", type: "address" }], name: "hasRole", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "spender", type: "address" }, { internalType: "uint256", name: "addedValue", type: "uint256" }], name: "increaseAllowance", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "_defaultAdmin", type: "address" }, { internalType: "string", name: "_name", type: "string" }, { internalType: "string", name: "_symbol", type: "string" }, { internalType: "string", name: "_contractURI", type: "string" }, { internalType: "address[]", name: "_trustedForwarders", type: "address[]" }, { internalType: "address", name: "_primarySaleRecipient", type: "address" }, { internalType: "address", name: "_platformFeeRecipient", type: "address" }, { internalType: "uint256", name: "_platformFeeBps", type: "uint256" }], name: "initialize", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "forwarder", type: "address" }], name: "isTrustedForwarder", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "to", type: "address" }, { internalType: "uint256", name: "amount", type: "uint256" }], name: "mintTo", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ components: [{ internalType: "address", name: "to", type: "address" }, { internalType: "address", name: "primarySaleRecipient", type: "address" }, { internalType: "uint256", name: "quantity", type: "uint256" }, { internalType: "uint256", name: "price", type: "uint256" }, { internalType: "address", name: "currency", type: "address" }, { internalType: "uint128", name: "validityStartTimestamp", type: "uint128" }, { internalType: "uint128", name: "validityEndTimestamp", type: "uint128" }, { internalType: "bytes32", name: "uid", type: "bytes32" }], internalType: "struct ITokenERC20.MintRequest", name: "_req", type: "tuple" }, { internalType: "bytes", name: "_signature", type: "bytes" }], name: "mintWithSignature", outputs: [], stateMutability: "payable", type: "function" }, { inputs: [{ internalType: "bytes[]", name: "data", type: "bytes[]" }], name: "multicall", outputs: [{ internalType: "bytes[]", name: "results", type: "bytes[]" }], stateMutability: "nonpayable", type: "function" }, { inputs: [], name: "name", outputs: [{ internalType: "string", name: "", type: "string" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "owner", type: "address" }], name: "nonces", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "account", type: "address" }], name: "numCheckpoints", outputs: [{ internalType: "uint32", name: "", type: "uint32" }], stateMutability: "view", type: "function" }, { inputs: [], name: "pause", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [], name: "paused", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "owner", type: "address" }, { internalType: "address", name: "spender", type: "address" }, { internalType: "uint256", name: "value", type: "uint256" }, { internalType: "uint256", name: "deadline", type: "uint256" }, { internalType: "uint8", name: "v", type: "uint8" }, { internalType: "bytes32", name: "r", type: "bytes32" }, { internalType: "bytes32", name: "s", type: "bytes32" }], name: "permit", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [], name: "primarySaleRecipient", outputs: [{ internalType: "address", name: "", type: "address" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "bytes32", name: "role", type: "bytes32" }, { internalType: "address", name: "account", type: "address" }], name: "renounceRole", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "bytes32", name: "role", type: "bytes32" }, { internalType: "address", name: "account", type: "address" }], name: "revokeRole", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "string", name: "_uri", type: "string" }], name: "setContractURI", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "_platformFeeRecipient", type: "address" }, { internalType: "uint256", name: "_platformFeeBps", type: "uint256" }], name: "setPlatformFeeInfo", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "_saleRecipient", type: "address" }], name: "setPrimarySaleRecipient", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "bytes4", name: "interfaceId", type: "bytes4" }], name: "supportsInterface", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "view", type: "function" }, { inputs: [], name: "symbol", outputs: [{ internalType: "string", name: "", type: "string" }], stateMutability: "view", type: "function" }, { inputs: [], name: "totalSupply", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "to", type: "address" }, { internalType: "uint256", name: "amount", type: "uint256" }], name: "transfer", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "from", type: "address" }, { internalType: "address", name: "to", type: "address" }, { internalType: "uint256", name: "amount", type: "uint256" }], name: "transferFrom", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "nonpayable", type: "function" }, { inputs: [], name: "unpause", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ components: [{ internalType: "address", name: "to", type: "address" }, { internalType: "address", name: "primarySaleRecipient", type: "address" }, { internalType: "uint256", name: "quantity", type: "uint256" }, { internalType: "uint256", name: "price", type: "uint256" }, { internalType: "address", name: "currency", type: "address" }, { internalType: "uint128", name: "validityStartTimestamp", type: "uint128" }, { internalType: "uint128", name: "validityEndTimestamp", type: "uint128" }, { internalType: "bytes32", name: "uid", type: "bytes32" }], internalType: "struct ITokenERC20.MintRequest", name: "_req", type: "tuple" }, { internalType: "bytes", name: "_signature", type: "bytes" }], name: "verify", outputs: [{ internalType: "bool", name: "", type: "bool" }, { internalType: "address", name: "", type: "address" }], stateMutability: "view", type: "function" }];
var X1 = "0x60a06040523480156200001157600080fd5b5060405162004cce38038062004cce83398101604081905262000034916200013b565b600054610100900460ff16620000515760005460ff16156200005b565b6200005b6200010e565b620000c35760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b600054610100900460ff16158015620000e6576000805461ffff19166101011790555b6001600160a01b038216608052801562000106576000805461ff00191690555b50506200016d565b600062000126306200012c60201b62001b101760201c565b15905090565b6001600160a01b03163b151590565b6000602082840312156200014e57600080fd5b81516001600160a01b03811681146200016657600080fd5b9392505050565b608051614b456200018960003960006125150152614b456000f3fe6080604052600436106103295760003560e01c80637ecebe00116101a5578063a9059cbb116100ec578063d45573f611610095578063dd62ed3e1161006f578063dd62ed3e146109b6578063dfad80a6146109fc578063e8a3d48514610a1c578063f1127ed814610a3157600080fd5b8063d45573f61461093f578063d505accf14610976578063d547741f1461099657600080fd5b8063c3cda520116100c6578063c3cda520146108cc578063ca15c873146108ec578063cb2ef6f71461090c57600080fd5b8063a9059cbb14610840578063ac9650d814610860578063c1b606e21461088d57600080fd5b8063938e3d7b1161014e578063a0a8e46011610128578063a0a8e460146107f7578063a217fddf1461080b578063a457c2d71461082057600080fd5b8063938e3d7b146107a257806395d89b41146107c25780639ab24eb0146107d757600080fd5b80638f0fefbb1161017f5780638f0fefbb146107285780639010d07c1461073b57806391d148541461075b57600080fd5b80637ecebe00146106d35780638456cb59146106f35780638e539e8c1461070857600080fd5b80633950935111610274578063587cde1e1161021d5780636f4f2837116101f75780636f4f2837146106285780636fcfff451461064857806370a082311461067d57806379cc6790146106b357600080fd5b8063587cde1e146105b55780635c19a95c146105ef5780635c975abb1461060f57600080fd5b806342966c681161024e57806342966c681461053c578063449a52f81461055c578063572b6c051461057c57600080fd5b806339509351146104e75780633a46b1a8146105075780633f4ba83a1461052757600080fd5b806323b872dd116102d6578063313ce567116102b0578063313ce567146104905780633644e515146104b257806336568abe146104c757600080fd5b806323b872dd1461041f578063248a9ca31461043f5780632f2ff15d1461047057600080fd5b8063095ea7b311610307578063095ea7b3146103be57806318160ddd146103de5780631e7ac488146103fd57600080fd5b806301ffc9a71461032e57806306fdde0314610363578063079fe40e14610385575b600080fd5b34801561033a57600080fd5b5061034e61034936600461410c565b610a7b565b60405190151581526020015b60405180910390f35b34801561036f57600080fd5b50610378610aa6565b60405161035a919061418e565b34801561039157600080fd5b506102c3546103a6906001600160a01b031681565b6040516001600160a01b03909116815260200161035a565b3480156103ca57600080fd5b5061034e6103d93660046141c6565b610b38565b3480156103ea57600080fd5b5060cb545b60405190815260200161035a565b34801561040957600080fd5b5061041d6104183660046141c6565b610b5a565b005b34801561042b57600080fd5b5061034e61043a3660046141f2565b610c48565b34801561044b57600080fd5b506103ef61045a366004614233565b600090815261025c602052604090206001015490565b34801561047c57600080fd5b5061041d61048b36600461424c565b610c78565b34801561049c57600080fd5b5060125b60405160ff909116815260200161035a565b3480156104be57600080fd5b506103ef610ca6565b3480156104d357600080fd5b5061041d6104e236600461424c565b610cb5565b3480156104f357600080fd5b5061034e6105023660046141c6565b610d51565b34801561051357600080fd5b506103ef6105223660046141c6565b610d9d565b34801561053357600080fd5b5061041d610e11565b34801561054857600080fd5b5061041d610557366004614233565b610e81565b34801561056857600080fd5b5061041d6105773660046141c6565b610e95565b34801561058857600080fd5b5061034e61059736600461427c565b6001600160a01b031660009081526065602052604090205460ff1690565b3480156105c157600080fd5b506103a66105d036600461427c565b6001600160a01b0390811660009081526101f860205260409020541690565b3480156105fb57600080fd5b5061041d61060a36600461427c565b610f17565b34801561061b57600080fd5b5061012d5460ff1661034e565b34801561063457600080fd5b5061041d61064336600461427c565b610f28565b34801561065457600080fd5b5061066861066336600461427c565b610f82565b60405163ffffffff909116815260200161035a565b34801561068957600080fd5b506103ef61069836600461427c565b6001600160a01b0316600090815260c9602052604090205490565b3480156106bf57600080fd5b5061041d6106ce3660046141c6565b610fa5565b3480156106df57600080fd5b506103ef6106ee36600461427c565b610fc1565b3480156106ff57600080fd5b5061041d610fe0565b34801561071457600080fd5b506103ef610723366004614233565b61104e565b61041d6107363660046142db565b6110ab565b34801561074757600080fd5b506103a6610756366004614338565b611215565b34801561076757600080fd5b5061034e61077636600461424c565b600091825261025c602090815260408084206001600160a01b0393909316845291905290205460ff1690565b3480156107ae57600080fd5b5061041d6107bd36600461435a565b61122e565b3480156107ce57600080fd5b5061037861124f565b3480156107e357600080fd5b506103ef6107f236600461427c565b61125e565b34801561080357600080fd5b5060016104a0565b34801561081757600080fd5b506103ef600081565b34801561082c57600080fd5b5061034e61083b3660046141c6565b6112e7565b34801561084c57600080fd5b5061034e61085b3660046141c6565b6113a9565b34801561086c57600080fd5b5061088061087b36600461439c565b6113c1565b60405161035a9190614411565b34801561089957600080fd5b506108ad6108a83660046142db565b6114b6565b6040805192151583526001600160a01b0390911660208301520161035a565b3480156108d857600080fd5b5061041d6108e7366004614484565b611530565b3480156108f857600080fd5b506103ef610907366004614233565b611666565b34801561091857600080fd5b507f546f6b656e4552433230000000000000000000000000000000000000000000006103ef565b34801561094b57600080fd5b506102c2546102c154604080516001600160a01b03909316835261ffff90911660208301520161035a565b34801561098257600080fd5b5061041d6109913660046144de565b61167e565b3480156109a257600080fd5b5061041d6109b136600461424c565b6117c5565b3480156109c257600080fd5b506103ef6109d136600461454c565b6001600160a01b03918216600090815260ca6020908152604080832093909416825291909152205490565b348015610a0857600080fd5b5061041d610a173660046146ba565b6117ee565b348015610a2857600080fd5b506103786119fc565b348015610a3d57600080fd5b50610a51610a4c3660046147a3565b611a8b565b60408051825163ffffffff1681526020928301516001600160e01b0316928101929092520161035a565b60006001600160e01b03198216635a05180f60e01b1480610aa05750610aa082611b1f565b92915050565b606060cc8054610ab5906147da565b80601f0160208091040260200160405190810160405280929190818152602001828054610ae1906147da565b8015610b2e5780601f10610b0357610100808354040283529160200191610b2e565b820191906000526020600020905b815481529060010190602001808311610b1157829003601f168201915b5050505050905090565b600080610b43611b54565b9050610b50818585611b5e565b5060019392505050565b6000610b6d81610b68611b54565b611c82565b612710821115610bc45760405162461bcd60e51b815260206004820152600d60248201527f627073203c3d2031303030302e0000000000000000000000000000000000000060448201526064015b60405180910390fd5b6102c180546fffffffffffffffffffffffffffffffff191667ffffffffffffffff84161790556102c280546001600160a01b0385166001600160a01b0319909116811790915560408051918252602082018490527fe2497bd806ec41a6e0dd992c29a72efc0ef8fec9092d1978fd4a1e00b2f18304910160405180910390a1505050565b600080610c53611b54565b9050610c60858285611d03565b610c6b858585611d8f565b60019150505b9392505050565b600082815261025c6020526040902060010154610c9781610b68611b54565b610ca18383611f9d565b505050565b6000610cb0611fc0565b905090565b610cbd611b54565b6001600160a01b0316816001600160a01b031614610d435760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c6600000000000000000000000000000000006064820152608401610bbb565b610d4d828261203d565b5050565b600080610d5c611b54565b6001600160a01b03808216600090815260ca6020908152604080832093891683529290522054909150610b509082908690610d98908790614825565b611b5e565b6000438210610dee5760405162461bcd60e51b815260206004820152601f60248201527f4552433230566f7465733a20626c6f636b206e6f7420796574206d696e6564006044820152606401610bbb565b6001600160a01b03831660009081526101f960205260409020610c719083612060565b610e3d7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a610776611b54565b610e775760405162461bcd60e51b815260206004820152600b60248201526a3737ba103830bab9b2b91760a91b6044820152606401610bbb565b610e7f61211d565b565b610e92610e8c611b54565b826121c1565b50565b610ec17f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6610776611b54565b610f0d5760405162461bcd60e51b815260206004820152600b60248201527f6e6f74206d696e7465722e0000000000000000000000000000000000000000006044820152606401610bbb565b610d4d82826121cb565b610e92610f22611b54565b8261221c565b6000610f3681610b68611b54565b6102c380546001600160a01b0319166001600160a01b0384169081179091556040517f299d17e95023f496e0ffc4909cff1a61f74bb5eb18de6f900f4155bfa1b3b33390600090a25050565b6001600160a01b03811660009081526101f96020526040812054610aa090612297565b610fb782610fb1611b54565b83611d03565b610d4d82826121c1565b6001600160a01b03811660009081526101c56020526040812054610aa0565b61100c7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a610776611b54565b6110465760405162461bcd60e51b815260206004820152600b60248201526a3737ba103830bab9b2b91760a91b6044820152606401610bbb565b610e7f612317565b600043821061109f5760405162461bcd60e51b815260206004820152601f60248201527f4552433230566f7465733a20626c6f636b206e6f7420796574206d696e6564006044820152606401610bbb565b610aa06101fa83612060565b600260015414156110fe5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610bbb565b600260015560006111108484846123a2565b9050600080611122602087018761427c565b6001600160a01b0316146111425761113d602086018661427c565b61114a565b61114a611b54565b905060008061115f604088016020890161427c565b6001600160a01b0316146111825761117d604087016020880161427c565b611190565b6102c3546001600160a01b03165b90506111b0816111a660a0890160808a0161427c565b88606001356124b8565b6111be8287604001356121cb565b816001600160a01b0316836001600160a01b03167fc4d88b1adde72eb5acf63f3e219ef5b223262233acf507c3b171277c91973c67886040516112019190614854565b60405180910390a350506001805550505050565b600082815261028e60205260408120610c71908361266c565b600061123c81610b68611b54565b6112496102c08484614003565b50505050565b606060cd8054610ab5906147da565b6001600160a01b03811660009081526101f9602052604081205480156112d4576001600160a01b03831660009081526101f9602052604090206112a26001836148f6565b815481106112b2576112b261490d565b60009182526020909120015464010000000090046001600160e01b03166112d7565b60005b6001600160e01b03169392505050565b6000806112f2611b54565b6001600160a01b03808216600090815260ca6020908152604080832093891683529290522054909150838110156113915760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f0000000000000000000000000000000000000000000000000000006064820152608401610bbb565b61139e8286868403611b5e565b506001949350505050565b6000806113b4611b54565b9050610b50818585611d8f565b60608167ffffffffffffffff8111156113dc576113dc61457a565b60405190808252806020026020018201604052801561140f57816020015b60608152602001906001900390816113fa5790505b50905060005b828110156114af5761147f308585848181106114335761143361490d565b90506020028101906114459190614923565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061267892505050565b8282815181106114915761149161490d565b602002602001018190525080806114a79061496a565b915050611415565b5092915050565b60008060006114c6868686612783565b60e087013560009081526102c4602052604090205490915060ff1615801561152557506001600160a01b03811660009081527fcf538f10c1f1215bbb13c92e93f1a42742e59e1630f77a3f0756e058f253e6dd602052604090205460ff165b969095509350505050565b834211156115805760405162461bcd60e51b815260206004820152601d60248201527f4552433230566f7465733a207369676e617475726520657870697265640000006044820152606401610bbb565b604080517fe48329057bfd03d55e49b547132e39cffd9c1820ad7b9d4c5307691425d15adf60208201526001600160a01b0388169181019190915260608101869052608081018590526000906115fa906115f29060a001604051602081830303815290604052805190602001206127e7565b858585612835565b90506116058161285d565b86146116535760405162461bcd60e51b815260206004820152601960248201527f4552433230566f7465733a20696e76616c6964206e6f6e6365000000000000006044820152606401610bbb565b61165d818861221c565b50505050505050565b600081815261028e60205260408120610aa090612886565b834211156116ce5760405162461bcd60e51b815260206004820152601d60248201527f45524332305065726d69743a206578706972656420646561646c696e650000006044820152606401610bbb565b60006101c6548888886116e08c61285d565b6040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810186905260e001604051602081830303815290604052805190602001209050600061173b826127e7565b9050600061174b82878787612835565b9050896001600160a01b0316816001600160a01b0316146117ae5760405162461bcd60e51b815260206004820152601e60248201527f45524332305065726d69743a20696e76616c6964207369676e617475726500006044820152606401610bbb565b6117b98a8a8a611b5e565b50505050505050505050565b600082815261025c60205260409020600101546117e481610b68611b54565b610ca1838361203d565b600054610100900460ff166118095760005460ff161561180d565b303b155b61187f5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610bbb565b600054610100900460ff161580156118a1576000805461ffff19166101011790555b6118aa85612890565b6118b388612963565b6118bd88886129fa565b85516118d1906102c0906020890190614083565b506102c380546001600160a01b038087166001600160a01b0319928316179092556102c28054928616929091169190911790556102c180546001600160801b0384166fffffffffffffffffffffffffffffffff1990911617905561193660008a612a8c565b6119607f8502233096d909befbda0999bb8ea2f3a6be3c138b9fbf003752a4c8bce86f6c8a612a8c565b61198a7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a68a612a8c565b6119b47f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a8a612a8c565b6119df7f8502233096d909befbda0999bb8ea2f3a6be3c138b9fbf003752a4c8bce86f6c6000612a8c565b80156119f1576000805461ff00191690555b505050505050505050565b6102c08054611a0a906147da565b80601f0160208091040260200160405190810160405280929190818152602001828054611a36906147da565b8015611a835780601f10611a5857610100808354040283529160200191611a83565b820191906000526020600020905b815481529060010190602001808311611a6657829003601f168201915b505050505081565b60408051808201909152600080825260208201526001600160a01b03831660009081526101f960205260409020805463ffffffff8416908110611ad057611ad061490d565b60009182526020918290206040805180820190915291015463ffffffff8116825264010000000090046001600160e01b0316918101919091529392505050565b6001600160a01b03163b151590565b60006001600160e01b03198216637965db0b60e01b1480610aa057506301ffc9a760e01b6001600160e01b0319831614610aa0565b6000610cb0612a96565b6001600160a01b038316611bc05760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610bbb565b6001600160a01b038216611c215760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610bbb565b6001600160a01b03838116600081815260ca602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b600082815261025c602090815260408083206001600160a01b038516845290915290205460ff16610d4d57611cc1816001600160a01b03166014612ac0565b611ccc836020612ac0565b604051602001611cdd929190614985565b60408051601f198184030181529082905262461bcd60e51b8252610bbb9160040161418e565b6001600160a01b03838116600090815260ca602090815260408083209386168352929052205460001981146112495781811015611d825760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610bbb565b6112498484848403611b5e565b6001600160a01b038316611e0b5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f64726573730000000000000000000000000000000000000000000000000000006064820152608401610bbb565b6001600160a01b038216611e6d5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610bbb565b611e78838383612c69565b6001600160a01b038316600090815260c9602052604090205481811015611f075760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e636500000000000000000000000000000000000000000000000000006064820152608401610bbb565b6001600160a01b03808516600090815260c96020526040808220858503905591851681529081208054849290611f3e908490614825565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051611f8a91815260200190565b60405180910390a3611249848484612db8565b611fa78282612dc3565b600082815261028e60205260409020610ca19082612e68565b6000610cb07f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f611ff06101915490565b610192546040805160208101859052908101839052606081018290524660808201523060a082015260009060c0016040516020818303038152906040528051906020012090509392505050565b6120478282612e7d565b600082815261028e60205260409020610ca19082612f20565b8154600090815b818110156120c457600061207b8284612f35565b9050848682815481106120905761209061490d565b60009182526020909120015463ffffffff1611156120b0578092506120be565b6120bb816001614825565b91505b50612067565b811561210857846120d66001846148f6565b815481106120e6576120e661490d565b60009182526020909120015464010000000090046001600160e01b031661210b565b60005b6001600160e01b031695945050505050565b61012d5460ff166121705760405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f74207061757365640000000000000000000000006044820152606401610bbb565b61012d805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6121a4611b54565b6040516001600160a01b03909116815260200160405180910390a1565b610d4d8282612f50565b6121d58282612f69565b816001600160a01b03167f3f2c9d57c068687834f0de942a9babb9e5acab57d516d3480a3c16ee165a42738260405161221091815260200190565b60405180910390a25050565b6001600160a01b0382811660008181526101f860208181526040808420805460c9845282862054949093528787166001600160a01b03198416811790915590519190951694919391928592917f3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f9190a4611249828483612f73565b600063ffffffff8211156123135760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203360448201527f32206269747300000000000000000000000000000000000000000000000000006064820152608401610bbb565b5090565b61012d5460ff161561236b5760405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152606401610bbb565b61012d805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586121a4611b54565b60008060006123b28686866114b6565b91509150816124035760405162461bcd60e51b815260206004820152601160248201527f696e76616c6964207369676e61747572650000000000000000000000000000006044820152606401610bbb565b4261241460c0880160a08901614a06565b6001600160801b03161115801561244357504261243760e0880160c08901614a06565b6001600160801b031610155b61248f5760405162461bcd60e51b815260206004820152600f60248201527f72657175657374206578706972656400000000000000000000000000000000006044820152606401610bbb565b60e086013560009081526102c460205260409020805460ff191660011790559150509392505050565b806124c257505050565b6102c154600090612710906124e0906001600160801b031684614a21565b6124ea9190614a40565b60405163085b49ad60e41b815230600482015260006024820181905291925081906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906385b49ad0906044016040805180830381865afa15801561255b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061257f9190614a62565b909250905060006127106125938387614a21565b61259d9190614a40565b90506001600160a01b03861673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1415612613578434146126135760405162461bcd60e51b815260206004820152601660248201527f6d7573742073656e6420746f74616c2070726963652e000000000000000000006044820152606401610bbb565b6126328661261f611b54565b6102c2546001600160a01b0316876130b2565b6126458661263e611b54565b85846130b2565b61165d86612651611b54565b898461265d898b6148f6565b61266791906148f6565b6130b2565b6000610c7183836130fc565b60606001600160a01b0383163b6126f75760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e747261637400000000000000000000000000000000000000000000000000006064820152608401610bbb565b600080846001600160a01b0316846040516127129190614a90565b600060405180830381855af49150503d806000811461274d576040519150601f19603f3d011682016040523d82523d6000602084013e612752565b606091505b509150915061277a8282604051806060016040528060278152602001614b1260279139613126565b95945050505050565b60006127df83838080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506127d992506127cd915088905061315f565b805190602001206127e7565b90613253565b949350505050565b6000610aa06127f4611fc0565b8360405161190160f01b6020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b600080600061284687878787613277565b9150915061285381613364565b5095945050505050565b6001600160a01b03811660009081526101c5602052604090208054600181018255905b50919050565b6000610aa0825490565b600054610100900460ff166128fb5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610bbb565b60005b8151811015610d4d5760016065600084848151811061291f5761291f61490d565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff19169115159190911790558061295b8161496a565b9150506128fe565b600054610100900460ff166129ce5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610bbb565b6129f181604051806040016040528060018152602001603160f81b81525061351f565b610e92816135a6565b600054610100900460ff16612a655760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610bbb565b8151612a789060cc906020850190614083565b508051610ca19060cd906020840190614083565b610d4d8282611f9d565b3360009081526065602052604081205460ff1615612abb575060131936013560601c90565b503390565b60606000612acf836002614a21565b612ada906002614825565b67ffffffffffffffff811115612af257612af261457a565b6040519080825280601f01601f191660200182016040528015612b1c576020820181803683370190505b509050600360fc1b81600081518110612b3757612b3761490d565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110612b6657612b6661490d565b60200101906001600160f81b031916908160001a9053506000612b8a846002614a21565b612b95906001614825565b90505b6001811115612c1a577f303132333435363738396162636465660000000000000000000000000000000085600f1660108110612bd657612bd661490d565b1a60f81b828281518110612bec57612bec61490d565b60200101906001600160f81b031916908160001a90535060049490941c93612c1381614aac565b9050612b98565b508315610c715760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610bbb565b612c74838383613639565b600080527fb5795f43f55584b15429e81b8f953f506f3fda5f74ae532bfc787216c93b37366020527fd61a19a5865dc34bcdb6a4cbf3d3d73edfd2abc9fbcb992f6e6da26bc3a636695460ff16158015612cd657506001600160a01b03831615155b8015612cea57506001600160a01b03821615155b15610ca1576001600160a01b03831660009081527fb5795f43f55584b15429e81b8f953f506f3fda5f74ae532bfc787216c93b3736602052604090205460ff1680612d6c57506001600160a01b03821660009081527fb5795f43f55584b15429e81b8f953f506f3fda5f74ae532bfc787216c93b3736602052604090205460ff165b610ca15760405162461bcd60e51b815260206004820152601560248201527f7472616e736665727320726573747269637465642e00000000000000000000006044820152606401610bbb565b610ca18383836136b3565b600082815261025c602090815260408083206001600160a01b038516845290915290205460ff16610d4d57600082815261025c602090815260408083206001600160a01b03851684529091529020805460ff19166001179055612e24611b54565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000610c71836001600160a01b0384166136e6565b600082815261025c602090815260408083206001600160a01b038516845290915290205460ff1615610d4d57600082815261025c602090815260408083206001600160a01b03851684529091529020805460ff19169055612edc611b54565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b6000610c71836001600160a01b038416613735565b6000612f446002848418614a40565b610c7190848416614825565b612f5a8282613828565b6112496101fa61398983613995565b610d4d8282613b0e565b816001600160a01b0316836001600160a01b031614158015612f955750600081115b15610ca1576001600160a01b03831615613024576001600160a01b03831660009081526101f9602052604081208190612fd19061398985613995565b91509150846001600160a01b03167fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a7248383604051613019929190918252602082015260400190565b60405180910390a250505b6001600160a01b03821615610ca1576001600160a01b03821660009081526101f960205260408120819061305b90613ba685613995565b91509150836001600160a01b03167fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a72483836040516130a3929190918252602082015260400190565b60405180910390a25050505050565b806130bc57611249565b6001600160a01b03841673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee14156130f0576130eb8282613bb2565b611249565b61124984848484613c55565b60008260000182815481106131135761311361490d565b9060005260206000200154905092915050565b60608315613135575081610c71565b8251156131455782518084602001fd5b8160405162461bcd60e51b8152600401610bbb919061418e565b60607fbac245dbd9b8b2bb334c0675db20a7a7a8506de563990c4ce3207f4c3c5b75e161318f602084018461427c565b61319f604085016020860161427c565b604085013560608601356131b960a088016080890161427c565b6131c960c0890160a08a01614a06565b6131d960e08a0160c08b01614a06565b6040805160208101999099526001600160a01b03978816908901529486166060880152608087019390935260a086019190915290921660c08401526001600160801b0391821660e0808501919091529116610100830152830135610120820152610140016040516020818303038152906040529050919050565b60008060006132628585613dcf565b9150915061326f81613364565b509392505050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156132ae575060009050600361335b565b8460ff16601b141580156132c657508460ff16601c14155b156132d7575060009050600461335b565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa15801561332b573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166133545760006001925092505061335b565b9150600090505b94509492505050565b600081600481111561337857613378614ac3565b14156133815750565b600181600481111561339557613395614ac3565b14156133e35760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610bbb565b60028160048111156133f7576133f7614ac3565b14156134455760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610bbb565b600381600481111561345957613459614ac3565b14156134b25760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610bbb565b60048160048111156134c6576134c6614ac3565b1415610e925760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b6064820152608401610bbb565b600054610100900460ff1661358a5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610bbb565b8151602092830120815191909201206101919190915561019255565b600054610100900460ff166136115760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610bbb565b507f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c96101c655565b61012d5460ff1615610ca15760405162461bcd60e51b815260206004820152602a60248201527f45524332305061757361626c653a20746f6b656e207472616e7366657220776860448201527f696c6520706175736564000000000000000000000000000000000000000000006064820152608401610bbb565b6001600160a01b0383811660009081526101f86020526040808220548584168352912054610ca192918216911683612f73565b600081815260018301602052604081205461372d57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610aa0565b506000610aa0565b6000818152600183016020526040812054801561381e5760006137596001836148f6565b855490915060009061376d906001906148f6565b90508181146137d257600086600001828154811061378d5761378d61490d565b90600052602060002001549050808760000184815481106137b0576137b061490d565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806137e3576137e3614ad9565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610aa0565b6000915050610aa0565b6001600160a01b0382166138885760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610bbb565b61389482600083612c69565b6001600160a01b038216600090815260c96020526040902054818110156139085760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610bbb565b6001600160a01b038316600090815260c960205260408120838303905560cb80548492906139379084906148f6565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3610ca183600084612db8565b6000610c7182846148f6565b8254600090819080156139e057856139ae6001836148f6565b815481106139be576139be61490d565b60009182526020909120015464010000000090046001600160e01b03166139e3565b60005b6001600160e01b031692506139fc83858763ffffffff16565b9150600081118015613a3a57504386613a166001846148f6565b81548110613a2657613a2661490d565b60009182526020909120015463ffffffff16145b15613a9a57613a4882613e3f565b86613a546001846148f6565b81548110613a6457613a6461490d565b9060005260206000200160000160046101000a8154816001600160e01b0302191690836001600160e01b03160217905550613b05565b856040518060400160405280613aaf43612297565b63ffffffff168152602001613ac385613e3f565b6001600160e01b0390811690915282546001810184556000938452602093849020835194909301519091166401000000000263ffffffff909316929092179101555b50935093915050565b613b188282613ebe565b60cb546001600160e01b031015613b975760405162461bcd60e51b815260206004820152603060248201527f4552433230566f7465733a20746f74616c20737570706c79207269736b73206f60448201527f766572666c6f77696e6720766f746573000000000000000000000000000000006064820152608401610bbb565b6112496101fa613ba683613995565b6000610c718284614825565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114613bff576040519150601f19603f3d011682016040523d82523d6000602084013e613c04565b606091505b5050905080610ca15760405162461bcd60e51b815260206004820152601c60248201527f6e617469766520746f6b656e207472616e73666572206661696c6564000000006044820152606401610bbb565b816001600160a01b0316836001600160a01b03161415613c7457611249565b60006001600160a01b0384163014613d06576040516323b872dd60e01b81526001600160a01b0385811660048301528481166024830152604482018490528616906323b872dd906064016020604051808303816000875af1158015613cdd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d019190614aef565b613d79565b60405163a9059cbb60e01b81526001600160a01b0384811660048301526024820184905286169063a9059cbb906044016020604051808303816000875af1158015613d55573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d799190614aef565b905080613dc85760405162461bcd60e51b815260206004820152601960248201527f63757272656e6379207472616e73666572206661696c65642e000000000000006044820152606401610bbb565b5050505050565b600080825160411415613e065760208301516040840151606085015160001a613dfa87828585613277565b94509450505050613e38565b825160401415613e305760208301516040840151613e25868383613fb1565b935093505050613e38565b506000905060025b9250929050565b60006001600160e01b038211156123135760405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203260448201527f32342062697473000000000000000000000000000000000000000000000000006064820152608401610bbb565b6001600160a01b038216613f145760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610bbb565b613f2060008383612c69565b8060cb6000828254613f329190614825565b90915550506001600160a01b038216600090815260c9602052604081208054839290613f5f908490614825565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3610d4d60008383612db8565b6000807f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831681613fe760ff86901c601b614825565b9050613ff587828885613277565b935093505050935093915050565b82805461400f906147da565b90600052602060002090601f0160209004810192826140315760008555614077565b82601f1061404a5782800160ff19823516178555614077565b82800160010185558215614077579182015b8281111561407757823582559160200191906001019061405c565b506123139291506140f7565b82805461408f906147da565b90600052602060002090601f0160209004810192826140b15760008555614077565b82601f106140ca57805160ff1916838001178555614077565b82800160010185558215614077579182015b828111156140775782518255916020019190600101906140dc565b5b8082111561231357600081556001016140f8565b60006020828403121561411e57600080fd5b81356001600160e01b031981168114610c7157600080fd5b60005b83811015614151578181015183820152602001614139565b838111156112495750506000910152565b6000815180845261417a816020860160208601614136565b601f01601f19169290920160200192915050565b602081526000610c716020830184614162565b6001600160a01b0381168114610e9257600080fd5b80356141c1816141a1565b919050565b600080604083850312156141d957600080fd5b82356141e4816141a1565b946020939093013593505050565b60008060006060848603121561420757600080fd5b8335614212816141a1565b92506020840135614222816141a1565b929592945050506040919091013590565b60006020828403121561424557600080fd5b5035919050565b6000806040838503121561425f57600080fd5b823591506020830135614271816141a1565b809150509250929050565b60006020828403121561428e57600080fd5b8135610c71816141a1565b60008083601f8401126142ab57600080fd5b50813567ffffffffffffffff8111156142c357600080fd5b602083019150836020828501011115613e3857600080fd5b60008060008385036101208112156142f257600080fd5b6101008082121561430257600080fd5b859450840135905067ffffffffffffffff81111561431f57600080fd5b61432b86828701614299565b9497909650939450505050565b6000806040838503121561434b57600080fd5b50508035926020909101359150565b6000806020838503121561436d57600080fd5b823567ffffffffffffffff81111561438457600080fd5b61439085828601614299565b90969095509350505050565b600080602083850312156143af57600080fd5b823567ffffffffffffffff808211156143c757600080fd5b818501915085601f8301126143db57600080fd5b8135818111156143ea57600080fd5b8660208260051b85010111156143ff57600080fd5b60209290920196919550909350505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561446657603f19888603018452614454858351614162565b94509285019290850190600101614438565b5092979650505050505050565b803560ff811681146141c157600080fd5b60008060008060008060c0878903121561449d57600080fd5b86356144a8816141a1565b955060208701359450604087013593506144c460608801614473565b92506080870135915060a087013590509295509295509295565b600080600080600080600060e0888a0312156144f957600080fd5b8735614504816141a1565b96506020880135614514816141a1565b9550604088013594506060880135935061453060808901614473565b925060a0880135915060c0880135905092959891949750929550565b6000806040838503121561455f57600080fd5b823561456a816141a1565b91506020830135614271816141a1565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156145b9576145b961457a565b604052919050565b600082601f8301126145d257600080fd5b813567ffffffffffffffff8111156145ec576145ec61457a565b6145ff601f8201601f1916602001614590565b81815284602083860101111561461457600080fd5b816020850160208301376000918101602001919091529392505050565b600082601f83011261464257600080fd5b8135602067ffffffffffffffff82111561465e5761465e61457a565b8160051b61466d828201614590565b928352848101820192828101908785111561468757600080fd5b83870192505b848310156146af5782356146a0816141a1565b8252918301919083019061468d565b979650505050505050565b600080600080600080600080610100898b0312156146d757600080fd5b6146e0896141b6565b9750602089013567ffffffffffffffff808211156146fd57600080fd5b6147098c838d016145c1565b985060408b013591508082111561471f57600080fd5b61472b8c838d016145c1565b975060608b013591508082111561474157600080fd5b61474d8c838d016145c1565b965060808b013591508082111561476357600080fd5b506147708b828c01614631565b94505061477f60a08a016141b6565b925061478d60c08a016141b6565b915060e089013590509295985092959890939650565b600080604083850312156147b657600080fd5b82356147c1816141a1565b9150602083013563ffffffff8116811461427157600080fd5b600181811c908216806147ee57607f821691505b6020821081141561288057634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600082198211156148385761483861480f565b500190565b80356001600160801b03811681146141c157600080fd5b61010081018235614864816141a1565b6001600160a01b039081168352602084013590614880826141a1565b80821660208501526040850135604085015260608501356060850152608085013591506148ac826141a1565b1660808301526148be60a0840161483d565b6001600160801b031660a08301526148d860c0840161483d565b6001600160801b03811660c08401525060e092830135919092015290565b6000828210156149085761490861480f565b500390565b634e487b7160e01b600052603260045260246000fd5b6000808335601e1984360301811261493a57600080fd5b83018035915067ffffffffffffffff82111561495557600080fd5b602001915036819003821315613e3857600080fd5b600060001982141561497e5761497e61480f565b5060010190565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516149bd816017850160208801614136565b7f206973206d697373696e6720726f6c652000000000000000000000000000000060179184019182015283516149fa816028840160208801614136565b01602801949350505050565b600060208284031215614a1857600080fd5b610c718261483d565b6000816000190483118215151615614a3b57614a3b61480f565b500290565b600082614a5d57634e487b7160e01b600052601260045260246000fd5b500490565b60008060408385031215614a7557600080fd5b8251614a80816141a1565b6020939093015192949293505050565b60008251614aa2818460208701614136565b9190910192915050565b600081614abb57614abb61480f565b506000190190565b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603160045260246000fd5b600060208284031215614b0157600080fd5b81518015158114610c7157600080fdfe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a164736f6c634300080c000a";
var X8 = (a) => a.length > 1;
var Q = class extends ContractFactory {
  constructor(...e) {
    X8(e) ? super(...e) : super(H, X1, e[0]), this.contractName = "TokenERC20";
  }
  deploy(e, t) {
    return super.deploy(e, t || {});
  }
  getDeployTransaction(e, t) {
    return super.getDeployTransaction(e, t || {});
  }
  attach(e) {
    return super.attach(e);
  }
  connect(e) {
    return super.connect(e);
  }
  static createInterface() {
    return new utils_exports.Interface(H);
  }
  static connect(e, t) {
    return new Contract(e, H, t);
  }
};
Q.bytecode = X1, Q.abi = H;
var z = [{ inputs: [{ internalType: "address", name: "_thirdwebFee", type: "address" }], stateMutability: "nonpayable", type: "constructor" }, { anonymous: false, inputs: [{ indexed: true, internalType: "address", name: "owner", type: "address" }, { indexed: true, internalType: "address", name: "approved", type: "address" }, { indexed: true, internalType: "uint256", name: "tokenId", type: "uint256" }], name: "Approval", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "address", name: "owner", type: "address" }, { indexed: true, internalType: "address", name: "operator", type: "address" }, { indexed: false, internalType: "bool", name: "approved", type: "bool" }], name: "ApprovalForAll", type: "event" }, { anonymous: false, inputs: [{ indexed: false, internalType: "address", name: "newRoyaltyRecipient", type: "address" }, { indexed: false, internalType: "uint256", name: "newRoyaltyBps", type: "uint256" }], name: "DefaultRoyalty", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "address", name: "paymentReceiver", type: "address" }, { indexed: false, internalType: "address", name: "feeRecipient", type: "address" }, { indexed: false, internalType: "uint256", name: "totalAmount", type: "uint256" }, { indexed: false, internalType: "uint256", name: "feeCollected", type: "uint256" }], name: "FundsWithdrawn", type: "event" }, { anonymous: false, inputs: [{ indexed: false, internalType: "address", name: "prevOwner", type: "address" }, { indexed: false, internalType: "address", name: "newOwner", type: "address" }], name: "OwnerUpdated", type: "event" }, { anonymous: false, inputs: [{ indexed: false, internalType: "address", name: "platformFeeRecipient", type: "address" }, { indexed: false, internalType: "uint256", name: "platformFeeBps", type: "uint256" }], name: "PlatformFeeInfoUpdated", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "address", name: "recipient", type: "address" }], name: "PrimarySaleRecipientUpdated", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "bytes32", name: "role", type: "bytes32" }, { indexed: true, internalType: "bytes32", name: "previousAdminRole", type: "bytes32" }, { indexed: true, internalType: "bytes32", name: "newAdminRole", type: "bytes32" }], name: "RoleAdminChanged", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "bytes32", name: "role", type: "bytes32" }, { indexed: true, internalType: "address", name: "account", type: "address" }, { indexed: true, internalType: "address", name: "sender", type: "address" }], name: "RoleGranted", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "bytes32", name: "role", type: "bytes32" }, { indexed: true, internalType: "address", name: "account", type: "address" }, { indexed: true, internalType: "address", name: "sender", type: "address" }], name: "RoleRevoked", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "uint256", name: "tokenId", type: "uint256" }, { indexed: false, internalType: "address", name: "royaltyRecipient", type: "address" }, { indexed: false, internalType: "uint256", name: "royaltyBps", type: "uint256" }], name: "RoyaltyForToken", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "address", name: "mintedTo", type: "address" }, { indexed: true, internalType: "uint256", name: "tokenIdMinted", type: "uint256" }, { indexed: false, internalType: "string", name: "uri", type: "string" }], name: "TokensMinted", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "address", name: "signer", type: "address" }, { indexed: true, internalType: "address", name: "mintedTo", type: "address" }, { indexed: true, internalType: "uint256", name: "tokenIdMinted", type: "uint256" }, { components: [{ internalType: "address", name: "to", type: "address" }, { internalType: "address", name: "royaltyRecipient", type: "address" }, { internalType: "uint256", name: "royaltyBps", type: "uint256" }, { internalType: "address", name: "primarySaleRecipient", type: "address" }, { internalType: "string", name: "uri", type: "string" }, { internalType: "uint256", name: "price", type: "uint256" }, { internalType: "address", name: "currency", type: "address" }, { internalType: "uint128", name: "validityStartTimestamp", type: "uint128" }, { internalType: "uint128", name: "validityEndTimestamp", type: "uint128" }, { internalType: "bytes32", name: "uid", type: "bytes32" }], indexed: false, internalType: "struct ITokenERC721.MintRequest", name: "mintRequest", type: "tuple" }], name: "TokensMintedWithSignature", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "address", name: "from", type: "address" }, { indexed: true, internalType: "address", name: "to", type: "address" }, { indexed: true, internalType: "uint256", name: "tokenId", type: "uint256" }], name: "Transfer", type: "event" }, { inputs: [], name: "DEFAULT_ADMIN_ROLE", outputs: [{ internalType: "bytes32", name: "", type: "bytes32" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "to", type: "address" }, { internalType: "uint256", name: "tokenId", type: "uint256" }], name: "approve", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "owner", type: "address" }], name: "balanceOf", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "uint256", name: "tokenId", type: "uint256" }], name: "burn", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [], name: "contractType", outputs: [{ internalType: "bytes32", name: "", type: "bytes32" }], stateMutability: "pure", type: "function" }, { inputs: [], name: "contractURI", outputs: [{ internalType: "string", name: "", type: "string" }], stateMutability: "view", type: "function" }, { inputs: [], name: "contractVersion", outputs: [{ internalType: "uint8", name: "", type: "uint8" }], stateMutability: "pure", type: "function" }, { inputs: [{ internalType: "uint256", name: "tokenId", type: "uint256" }], name: "getApproved", outputs: [{ internalType: "address", name: "", type: "address" }], stateMutability: "view", type: "function" }, { inputs: [], name: "getDefaultRoyaltyInfo", outputs: [{ internalType: "address", name: "", type: "address" }, { internalType: "uint16", name: "", type: "uint16" }], stateMutability: "view", type: "function" }, { inputs: [], name: "getPlatformFeeInfo", outputs: [{ internalType: "address", name: "", type: "address" }, { internalType: "uint16", name: "", type: "uint16" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "bytes32", name: "role", type: "bytes32" }], name: "getRoleAdmin", outputs: [{ internalType: "bytes32", name: "", type: "bytes32" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "bytes32", name: "role", type: "bytes32" }, { internalType: "uint256", name: "index", type: "uint256" }], name: "getRoleMember", outputs: [{ internalType: "address", name: "", type: "address" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "bytes32", name: "role", type: "bytes32" }], name: "getRoleMemberCount", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "uint256", name: "_tokenId", type: "uint256" }], name: "getRoyaltyInfoForToken", outputs: [{ internalType: "address", name: "", type: "address" }, { internalType: "uint16", name: "", type: "uint16" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "bytes32", name: "role", type: "bytes32" }, { internalType: "address", name: "account", type: "address" }], name: "grantRole", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "bytes32", name: "role", type: "bytes32" }, { internalType: "address", name: "account", type: "address" }], name: "hasRole", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "_defaultAdmin", type: "address" }, { internalType: "string", name: "_name", type: "string" }, { internalType: "string", name: "_symbol", type: "string" }, { internalType: "string", name: "_contractURI", type: "string" }, { internalType: "address[]", name: "_trustedForwarders", type: "address[]" }, { internalType: "address", name: "_saleRecipient", type: "address" }, { internalType: "address", name: "_royaltyRecipient", type: "address" }, { internalType: "uint128", name: "_royaltyBps", type: "uint128" }, { internalType: "uint128", name: "_platformFeeBps", type: "uint128" }, { internalType: "address", name: "_platformFeeRecipient", type: "address" }], name: "initialize", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "owner", type: "address" }, { internalType: "address", name: "operator", type: "address" }], name: "isApprovedForAll", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "forwarder", type: "address" }], name: "isTrustedForwarder", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "_to", type: "address" }, { internalType: "string", name: "_uri", type: "string" }], name: "mintTo", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "nonpayable", type: "function" }, { inputs: [{ components: [{ internalType: "address", name: "to", type: "address" }, { internalType: "address", name: "royaltyRecipient", type: "address" }, { internalType: "uint256", name: "royaltyBps", type: "uint256" }, { internalType: "address", name: "primarySaleRecipient", type: "address" }, { internalType: "string", name: "uri", type: "string" }, { internalType: "uint256", name: "price", type: "uint256" }, { internalType: "address", name: "currency", type: "address" }, { internalType: "uint128", name: "validityStartTimestamp", type: "uint128" }, { internalType: "uint128", name: "validityEndTimestamp", type: "uint128" }, { internalType: "bytes32", name: "uid", type: "bytes32" }], internalType: "struct ITokenERC721.MintRequest", name: "_req", type: "tuple" }, { internalType: "bytes", name: "_signature", type: "bytes" }], name: "mintWithSignature", outputs: [{ internalType: "uint256", name: "tokenIdMinted", type: "uint256" }], stateMutability: "payable", type: "function" }, { inputs: [{ internalType: "bytes[]", name: "data", type: "bytes[]" }], name: "multicall", outputs: [{ internalType: "bytes[]", name: "results", type: "bytes[]" }], stateMutability: "nonpayable", type: "function" }, { inputs: [], name: "name", outputs: [{ internalType: "string", name: "", type: "string" }], stateMutability: "view", type: "function" }, { inputs: [], name: "nextTokenIdToMint", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [], name: "owner", outputs: [{ internalType: "address", name: "", type: "address" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "uint256", name: "tokenId", type: "uint256" }], name: "ownerOf", outputs: [{ internalType: "address", name: "", type: "address" }], stateMutability: "view", type: "function" }, { inputs: [], name: "platformFeeBps", outputs: [{ internalType: "uint128", name: "", type: "uint128" }], stateMutability: "view", type: "function" }, { inputs: [], name: "platformFeeRecipient", outputs: [{ internalType: "address", name: "", type: "address" }], stateMutability: "view", type: "function" }, { inputs: [], name: "primarySaleRecipient", outputs: [{ internalType: "address", name: "", type: "address" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "bytes32", name: "role", type: "bytes32" }, { internalType: "address", name: "account", type: "address" }], name: "renounceRole", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "bytes32", name: "role", type: "bytes32" }, { internalType: "address", name: "account", type: "address" }], name: "revokeRole", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "uint256", name: "tokenId", type: "uint256" }, { internalType: "uint256", name: "salePrice", type: "uint256" }], name: "royaltyInfo", outputs: [{ internalType: "address", name: "receiver", type: "address" }, { internalType: "uint256", name: "royaltyAmount", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "from", type: "address" }, { internalType: "address", name: "to", type: "address" }, { internalType: "uint256", name: "tokenId", type: "uint256" }], name: "safeTransferFrom", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "from", type: "address" }, { internalType: "address", name: "to", type: "address" }, { internalType: "uint256", name: "tokenId", type: "uint256" }, { internalType: "bytes", name: "_data", type: "bytes" }], name: "safeTransferFrom", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "operator", type: "address" }, { internalType: "bool", name: "approved", type: "bool" }], name: "setApprovalForAll", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "string", name: "_uri", type: "string" }], name: "setContractURI", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "_royaltyRecipient", type: "address" }, { internalType: "uint256", name: "_royaltyBps", type: "uint256" }], name: "setDefaultRoyaltyInfo", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "_newOwner", type: "address" }], name: "setOwner", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "_platformFeeRecipient", type: "address" }, { internalType: "uint256", name: "_platformFeeBps", type: "uint256" }], name: "setPlatformFeeInfo", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "_saleRecipient", type: "address" }], name: "setPrimarySaleRecipient", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "uint256", name: "_tokenId", type: "uint256" }, { internalType: "address", name: "_recipient", type: "address" }, { internalType: "uint256", name: "_bps", type: "uint256" }], name: "setRoyaltyInfoForToken", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "bytes4", name: "interfaceId", type: "bytes4" }], name: "supportsInterface", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "view", type: "function" }, { inputs: [], name: "symbol", outputs: [{ internalType: "string", name: "", type: "string" }], stateMutability: "view", type: "function" }, { inputs: [], name: "thirdwebFee", outputs: [{ internalType: "contract ITWFee", name: "", type: "address" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "uint256", name: "index", type: "uint256" }], name: "tokenByIndex", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "owner", type: "address" }, { internalType: "uint256", name: "index", type: "uint256" }], name: "tokenOfOwnerByIndex", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "uint256", name: "_tokenId", type: "uint256" }], name: "tokenURI", outputs: [{ internalType: "string", name: "", type: "string" }], stateMutability: "view", type: "function" }, { inputs: [], name: "totalSupply", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "from", type: "address" }, { internalType: "address", name: "to", type: "address" }, { internalType: "uint256", name: "tokenId", type: "uint256" }], name: "transferFrom", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ components: [{ internalType: "address", name: "to", type: "address" }, { internalType: "address", name: "royaltyRecipient", type: "address" }, { internalType: "uint256", name: "royaltyBps", type: "uint256" }, { internalType: "address", name: "primarySaleRecipient", type: "address" }, { internalType: "string", name: "uri", type: "string" }, { internalType: "uint256", name: "price", type: "uint256" }, { internalType: "address", name: "currency", type: "address" }, { internalType: "uint128", name: "validityStartTimestamp", type: "uint128" }, { internalType: "uint128", name: "validityEndTimestamp", type: "uint128" }, { internalType: "bytes32", name: "uid", type: "bytes32" }], internalType: "struct ITokenERC721.MintRequest", name: "_req", type: "tuple" }, { internalType: "bytes", name: "_signature", type: "bytes" }], name: "verify", outputs: [{ internalType: "bool", name: "", type: "bool" }, { internalType: "address", name: "", type: "address" }], stateMutability: "view", type: "function" }];
var K1 = "0x60a06040523480156200001157600080fd5b50604051620051a9380380620051a983398101604081905262000034916200013b565b600054610100900460ff16620000515760005460ff16156200005b565b6200005b6200010e565b620000c35760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b600054610100900460ff16158015620000e6576000805461ffff19166101011790555b6001600160a01b038216608052801562000106576000805461ff00191690555b50506200016d565b600062000126306200012c60201b62001ebb1760201c565b15905090565b6001600160a01b03163b151590565b6000602082840312156200014e57600080fd5b81516001600160a01b03811681146200016657600080fd5b9392505050565b608051615019620001906000396000818161094901526124b301526150196000f3fe6080604052600436106103285760003560e01c80636f4f2837116101a5578063b24f2d39116100ec578063d45573f611610095578063e15916341161006f578063e159163414610a00578063e8a3d48514610a20578063e985e9c514610a35578063eb13554f14610a7f57600080fd5b8063d45573f61461096b578063d547741f146109a1578063de903774146109c157600080fd5b8063ca15c873116100c6578063ca15c873146108f6578063cb2ef6f714610916578063cf8267b11461093757600080fd5b8063b24f2d3914610887578063b88d4fde146108b6578063c87b56dd146108d657600080fd5b806395d89b411161014e578063a217fddf11610128578063a217fddf14610825578063a22cb4651461083a578063ac9650d81461085a57600080fd5b806395d89b41146107d45780639bcf7a15146107e9578063a0a8e4601461080957600080fd5b80639010d07c1161017f5780639010d07c1461074d57806391d148541461076d578063938e3d7b146107b457600080fd5b80636f4f2837146106f857806370a08231146107185780638da5cb5b1461073857600080fd5b80632a55205a1161027457806342842e0e1161021d5780634f6ccce7116101f75780634f6ccce71461065f578063572b6c051461067f578063600dd5ea146106b85780636352211e146106d857600080fd5b806342842e0e146105dd57806342966c68146105fd5780634cc157df1461061d57600080fd5b80632f745c591161024e5780632f745c591461058657806336568abe146105a65780633b1475a7146105c657600080fd5b80632a55205a146105145780632c4510f8146105535780632f2ff15d1461056657600080fd5b806313af4035116102d657806322dcd13e116102b057806322dcd13e1461048357806323b872dd146104c3578063248a9ca3146104e357600080fd5b806313af40351461042d57806318160ddd1461044d5780631e7ac4881461046357600080fd5b8063079fe40e11610307578063079fe40e146103b2578063081812fc146103eb578063095ea7b31461040b57600080fd5b806275a3171461032d57806301ffc9a71461036057806306fdde0314610390575b600080fd5b34801561033957600080fd5b5061034d610348366004614369565b610aa0565b6040519081526020015b60405180910390f35b34801561036c57600080fd5b5061038061037b3660046143d4565b610ae8565b6040519015158152602001610357565b34801561039c57600080fd5b506103a5610b14565b6040516103579190614449565b3480156103be57600080fd5b506101f9546103d3906001600160a01b031681565b6040516001600160a01b039091168152602001610357565b3480156103f757600080fd5b506103d361040636600461445c565b610ba7565b34801561041757600080fd5b5061042b610426366004614475565b610c43565b005b34801561043957600080fd5b5061042b6104483660046144a1565b610d6b565b34801561045957600080fd5b506101c75461034d565b34801561046f57600080fd5b5061042b61047e366004614475565b610e64565b34801561048f57600080fd5b506101fc546104ab90600160801b90046001600160801b031681565b6040516001600160801b039091168152602001610357565b3480156104cf57600080fd5b5061042b6104de3660046144be565b610f3b565b3480156104ef57600080fd5b5061034d6104fe36600461445c565b600090815261012f602052604090206001015490565b34801561052057600080fd5b5061053461052f3660046144ff565b610fc9565b604080516001600160a01b039093168352602083019190915201610357565b61034d610561366004614521565b611006565b34801561057257600080fd5b5061042b610581366004614586565b6111ad565b34801561059257600080fd5b5061034d6105a1366004614475565b6111d6565b3480156105b257600080fd5b5061042b6105c1366004614586565b61127f565b3480156105d257600080fd5b5061034d6101f85481565b3480156105e957600080fd5b5061042b6105f83660046144be565b61131b565b34801561060957600080fd5b5061042b61061836600461445c565b611336565b34801561062957600080fd5b5061063d61063836600461445c565b6113bf565b604080516001600160a01b03909316835261ffff909116602083015201610357565b34801561066b57600080fd5b5061034d61067a36600461445c565b61142f565b34801561068b57600080fd5b5061038061069a3660046144a1565b6001600160a01b031660009081526099602052604090205460ff1690565b3480156106c457600080fd5b5061042b6106d3366004614475565b6114d5565b3480156106e457600080fd5b506103d36106f336600461445c565b6115af565b34801561070457600080fd5b5061042b6107133660046144a1565b61163b565b34801561072457600080fd5b5061034d6107333660046144a1565b611695565b34801561074457600080fd5b506103d3611730565b34801561075957600080fd5b506103d36107683660046144ff565b61178b565b34801561077957600080fd5b50610380610788366004614586565b600091825261012f602090815260408084206001600160a01b0393909316845291905290205460ff1690565b3480156107c057600080fd5b5061042b6107cf3660046145b6565b6117ab565b3480156107e057600080fd5b506103a56117cc565b3480156107f557600080fd5b5061042b6108043660046145f8565b6117dc565b34801561081557600080fd5b5060405160018152602001610357565b34801561083157600080fd5b5061034d600081565b34801561084657600080fd5b5061042b61085536600461462d565b6118c6565b34801561086657600080fd5b5061087a61087536600461465b565b6118d8565b60405161035791906146d0565b34801561089357600080fd5b506101fb546101fc546001600160a01b03909116906001600160801b031661063d565b3480156108c257600080fd5b5061042b6108d13660046147fb565b6119cd565b3480156108e257600080fd5b506103a56108f136600461445c565b611a5c565b34801561090257600080fd5b5061034d61091136600461445c565b611aff565b34801561092257600080fd5b506a546f6b656e45524337323160a81b61034d565b34801561094357600080fd5b506103d37f000000000000000000000000000000000000000000000000000000000000000081565b34801561097757600080fd5b506101fa546101fc546001600160a01b0390911690600160801b90046001600160801b031661063d565b3480156109ad57600080fd5b5061042b6109bc366004614586565b611b17565b3480156109cd57600080fd5b506109e16109dc366004614521565b611b40565b6040805192151583526001600160a01b03909116602083015201610357565b348015610a0c57600080fd5b5061042b610a1b36600461493b565b611bbb565b348015610a2c57600080fd5b506103a5611e2c565b348015610a4157600080fd5b50610380610a50366004614a4e565b6001600160a01b0391821660009081526101986020908152604080832093909416825291909152205460ff1690565b348015610a8b57600080fd5b506101fa546103d3906001600160a01b031681565b60007f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6610ad481610acf611eca565b611ed4565b610adf858585611f55565b95945050505050565b6000610af382611fdf565b80610b0e57506001600160e01b0319821663152a902d60e11b145b92915050565b60606101938054610b2490614a7c565b80601f0160208091040260200160405190810160405280929190818152602001828054610b5090614a7c565b8015610b9d5780601f10610b7257610100808354040283529160200191610b9d565b820191906000526020600020905b815481529060010190602001808311610b8057829003601f168201915b5050505050905090565b600081815261019560205260408120546001600160a01b0316610c265760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b50600090815261019760205260409020546001600160a01b031690565b6000610c4e826115af565b9050806001600160a01b0316836001600160a01b03161415610cbc5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401610c1d565b806001600160a01b0316610cce611eca565b6001600160a01b03161480610cea5750610cea81610a50611eca565b610d5c5760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610c1d565b610d668383612004565b505050565b6000610d7981610acf611eca565b6001600160a01b03821660009081527fe9104285c6851efcbc5e0e70440200efbdcab556a1c8784776780f8bb44f2931602052604090205460ff16610e005760405162461bcd60e51b815260206004820152601b60248201527f6e6577206f776e6572206e6f74206d6f64756c652061646d696e2e00000000006044820152606401610c1d565b6101f780546001600160a01b038481166001600160a01b031983168117909355604080519190921680825260208201939093527f8292fce18fa69edf4db7b94ea2e58241df0ae57f97e0a6c9b29067028bf92d7691015b60405180910390a1505050565b6000610e7281610acf611eca565b612710821115610ec45760405162461bcd60e51b815260206004820152600d60248201527f627073203c3d2031303030302e000000000000000000000000000000000000006044820152606401610c1d565b6101fc80546001600160801b031667ffffffffffffffff8416600160801b021790556101fa80546001600160a01b0319166001600160a01b03851690811790915560408051918252602082018490527fe2497bd806ec41a6e0dd992c29a72efc0ef8fec9092d1978fd4a1e00b2f183049101610e57565b610f4c610f46611eca565b82612073565b610fbe5760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f7665640000000000000000000000000000006064820152608401610c1d565b610d6683838361216c565b600080600080610fd8866113bf565b90945084925061ffff169050612710610ff18287614acd565b610ffb9190614aec565b925050509250929050565b60006002600154141561105b5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610c1d565b6002600155600061106d85858561232e565b905060008061107f60208801886144a1565b6001600160a01b03161461109f5761109a60208701876144a1565b6110a7565b6110a7611eca565b90506110bf816110ba6080890189614b0e565b611f55565b925060006110d360408801602089016144a1565b6001600160a01b0316146111435760405180604001604052808760200160208101906110ff91906144a1565b6001600160a01b0390811682526040898101356020938401526000878152610200845220835181546001600160a01b03191692169190911781559101516001909101555b61115461114f87614b55565b612448565b82816001600160a01b0316836001600160a01b03167f110d160a1bedeea919a88fbc4b2a9fb61b7e664084391b6ca2740db66fef80fe896040516111989190614c92565b60405180910390a45050600180559392505050565b600082815261012f60205260409020600101546111cc81610acf611eca565b610d668383612654565b60006111e183611695565b82106112555760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201527f74206f6620626f756e64730000000000000000000000000000000000000000006064820152608401610c1d565b506001600160a01b039190911660009081526101c560209081526040808320938352929052205490565b611287611eca565b6001600160a01b0316816001600160a01b03161461130d5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c6600000000000000000000000000000000006064820152608401610c1d565b6113178282612677565b5050565b610d66838383604051806020016040528060008152506119cd565b611341610f46611eca565b6113b35760405162461bcd60e51b815260206004820152603060248201527f4552433732314275726e61626c653a2063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f766564000000000000000000000000000000006064820152608401610c1d565b6113bc8161269a565b50565b600081815261020060209081526040808320815180830190925280546001600160a01b0316808352600190910154928201929092528291156114075780516020820151611425565b6101fb546101fc546001600160a01b03909116906001600160801b03165b9250925050915091565b600061143b6101c75490565b82106114af5760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201527f7574206f6620626f756e647300000000000000000000000000000000000000006064820152608401610c1d565b6101c782815481106114c3576114c3614da2565b90600052602060002001549050919050565b60006114e381610acf611eca565b6127108211156115355760405162461bcd60e51b815260206004820152601260248201527f65786365656420726f79616c74792062707300000000000000000000000000006044820152606401610c1d565b6101fb80546001600160a01b0319166001600160a01b0385169081179091556101fc80546fffffffffffffffffffffffffffffffff19166001600160801b03851617905560408051918252602082018490527f90d7ec04bcb8978719414f82e52e4cb651db41d0e6f8cea6118c2191e6183adb9101610e57565b600081815261019560205260408120546001600160a01b031680610b0e5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201527f656e7420746f6b656e00000000000000000000000000000000000000000000006064820152608401610c1d565b600061164981610acf611eca565b6101f980546001600160a01b0319166001600160a01b0384169081179091556040517f299d17e95023f496e0ffc4909cff1a61f74bb5eb18de6f900f4155bfa1b3b33390600090a25050565b60006001600160a01b0382166117135760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a6560448201527f726f2061646472657373000000000000000000000000000000000000000000006064820152608401610c1d565b506001600160a01b03166000908152610196602052604090205490565b6101f7546001600160a01b031660009081527fe9104285c6851efcbc5e0e70440200efbdcab556a1c8784776780f8bb44f2931602052604081205460ff166117785750600090565b6101f7546001600160a01b03165b905090565b6000828152610161602052604081206117a49083612743565b9392505050565b60006117b981610acf611eca565b6117c66101fd84846141f5565b50505050565b60606101948054610b2490614a7c565b60006117ea81610acf611eca565b61271082111561183c5760405162461bcd60e51b815260206004820152601260248201527f65786365656420726f79616c74792062707300000000000000000000000000006044820152606401610c1d565b6040805180820182526001600160a01b03858116808352602080840187815260008a81526102008352869020945185546001600160a01b031916941693909317845591516001909301929092558251918252810184905285917f7365cf4122f072a3365c20d54eff9b38d73c096c28e1892ec8f5b0e403a0f12d910160405180910390a250505050565b6113176118d1611eca565b838361274f565b60608167ffffffffffffffff8111156118f3576118f3614732565b60405190808252806020026020018201604052801561192657816020015b60608152602001906001900390816119115790505b50905060005b828110156119c6576119963085858481811061194a5761194a614da2565b905060200281019061195c9190614b0e565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061281f92505050565b8282815181106119a8576119a8614da2565b602002602001018190525080806119be90614db8565b91505061192c565b5092915050565b6119de6119d8611eca565b83612073565b611a505760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f7665640000000000000000000000000000006064820152608401610c1d565b6117c684848484612921565b60008181526101ff60205260409020805460609190611a7a90614a7c565b80601f0160208091040260200160405190810160405280929190818152602001828054611aa690614a7c565b8015611af35780601f10611ac857610100808354040283529160200191611af3565b820191906000526020600020905b815481529060010190602001808311611ad657829003601f168201915b50505050509050919050565b600081815261016160205260408120610b0e906129aa565b600082815261012f6020526040902060010154611b3681610acf611eca565b610d668383612677565b6000806000611b508686866129b4565b61012087013560009081526101fe602052604090205490915060ff16158015611bb057506001600160a01b03811660009081527fa2a71de801f4f5af590dd1e71778408c512ca00170a88b45ca00ba943b31e98e602052604090205460ff165b969095509350505050565b600054610100900460ff16611bd65760005460ff1615611bda565b303b155b611c4c5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610c1d565b600054610100900460ff16158015611c6e576000805461ffff19166101011790555b611c76612a10565b611cbc6040518060400160405280600b81526020016a546f6b656e45524337323160a81b815250604051806040016040528060018152602001603160f81b815250612a73565b611cc587612ad6565b611ccf8a8a612b40565b6101fb80546001600160a01b03199081166001600160a01b03888116919091179092556101fc80546fffffffffffffffffffffffffffffffff19166001600160801b0388161790556101fa805482168584161790556101f980549091169188169190911790558751611d49906101fd9060208b0190614279565b506101fc80546001600160801b03808616600160801b0291161790556101f780546001600160a01b038d166001600160a01b0319909116179055611d8e60008c612ba3565b611db87f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a68c612ba3565b611de27f8502233096d909befbda0999bb8ea2f3a6be3c138b9fbf003752a4c8bce86f6c8c612ba3565b611e0d7f8502233096d909befbda0999bb8ea2f3a6be3c138b9fbf003752a4c8bce86f6c6000612ba3565b8015611e1f576000805461ff00191690555b5050505050505050505050565b6101fd8054611e3a90614a7c565b80601f0160208091040260200160405190810160405280929190818152602001828054611e6690614a7c565b8015611eb35780601f10611e8857610100808354040283529160200191611eb3565b820191906000526020600020905b815481529060010190602001808311611e9657829003601f168201915b505050505081565b6001600160a01b03163b151590565b6000611786612bad565b600082815261012f602090815260408083206001600160a01b038516845290915290205460ff1661131757611f13816001600160a01b03166014612bd7565b611f1e836020612bd7565b604051602001611f2f929190614dd3565b60408051601f198184030181529082905262461bcd60e51b8252610c1d91600401614449565b6101f88054906001906000611f6a8385614e54565b909155505060008181526101ff60205260409020611f899084846141f5565b50611f948482612d80565b80846001600160a01b03167f9d89e36eadf856db0ad9ffb5a569e07f95634dddd9501141ecf04820484ad0dc8585604051611fd0929190614e6c565b60405180910390a39392505050565b60006001600160e01b0319821663780e9d6360e01b1480610b0e5750610b0e82612ed1565b60008181526101976020526040902080546001600160a01b0319166001600160a01b038416908117909155819061203a826115af565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600081815261019560205260408120546001600160a01b03166120ed5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610c1d565b60006120f8836115af565b9050806001600160a01b0316846001600160a01b031614806121335750836001600160a01b031661212884610ba7565b6001600160a01b0316145b8061216457506001600160a01b038082166000908152610198602090815260408083209388168352929052205460ff165b949350505050565b826001600160a01b031661217f826115af565b6001600160a01b0316146121fb5760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201527f6f776e65720000000000000000000000000000000000000000000000000000006064820152608401610c1d565b6001600160a01b03821661225d5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610c1d565b612268838383612f11565b612273600082612004565b6001600160a01b03831660009081526101966020526040812080546001929061229d908490614e80565b90915550506001600160a01b0382166000908152610196602052604081208054600192906122cc908490614e54565b90915550506000818152610195602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b600080600061233e868686611b40565b915091508161238f5760405162461bcd60e51b815260206004820152601160248201527f696e76616c6964207369676e61747572650000000000000000000000000000006044820152606401610c1d565b426123a1610100880160e08901614e97565b6001600160801b0316111580156123d25750426123c661012088016101008901614e97565b6001600160801b031610155b61241e5760405162461bcd60e51b815260206004820152600f60248201527f72657175657374206578706972656400000000000000000000000000000000006044820152606401610c1d565b61012086013560009081526101fe60205260409020805460ff191660011790559150509392505050565b60a08101516124545750565b60a08101516101fc546000906127109061247e90600160801b90046001600160801b031684614acd565b6124889190614aec565b60405163085b49ad60e41b815230600482015260006024820181905291925081906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906385b49ad0906044016040805180830381865afa1580156124f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061251d9190614eb2565b909250905060006127106125318387614acd565b61253b9190614aec565b60c08701519091506001600160a01b031673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee14156125b6578434146125b65760405162461bcd60e51b815260206004820152601660248201527f6d7573742073656e6420746f74616c2070726963652e000000000000000000006044820152606401610c1d565b60608601516000906001600160a01b0316156125d65786606001516125e4565b6101f9546001600160a01b03165b90506126098760c001516125f6611eca565b6101fa546001600160a01b03168861306c565b6126208760c00151612619611eca565b868561306c565b61264b8760c00151612630611eca565b838561263c8a8c614e80565b6126469190614e80565b61306c565b50505050505050565b61265e82826130b6565b600082815261016160205260409020610d66908261315b565b6126818282613170565b600082815261016160205260409020610d669082613213565b60006126a5826115af565b90506126b381600084612f11565b6126be600083612004565b6001600160a01b0381166000908152610196602052604081208054600192906126e8908490614e80565b90915550506000828152610195602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b60006117a48383613228565b816001600160a01b0316836001600160a01b031614156127b15760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610c1d565b6001600160a01b0383811660008181526101986020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b60606001600160a01b0383163b61289e5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e747261637400000000000000000000000000000000000000000000000000006064820152608401610c1d565b600080846001600160a01b0316846040516128b99190614ee0565b600060405180830381855af49150503d80600081146128f4576040519150601f19603f3d011682016040523d82523d6000602084013e6128f9565b606091505b5091509150610adf8282604051806060016040528060278152602001614fe660279139613252565b61292c84848461216c565b6129388484848461328b565b6117c65760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608401610c1d565b6000610b0e825490565b600061216483838080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612a0a92506129fe91508890506133e6565b80519060200120613520565b9061356e565b600054610100900460ff16612a695760405162461bcd60e51b815260206004820152602b6024820152600080516020614fc683398151915260448201526a6e697469616c697a696e6760a81b6064820152608401610c1d565b612a71613592565b565b600054610100900460ff16612acc5760405162461bcd60e51b815260206004820152602b6024820152600080516020614fc683398151915260448201526a6e697469616c697a696e6760a81b6064820152608401610c1d565b61131782826135f1565b600054610100900460ff16612b2f5760405162461bcd60e51b815260206004820152602b6024820152600080516020614fc683398151915260448201526a6e697469616c697a696e6760a81b6064820152608401610c1d565b612b37613664565b6113bc816136bd565b600054610100900460ff16612b995760405162461bcd60e51b815260206004820152602b6024820152600080516020614fc683398151915260448201526a6e697469616c697a696e6760a81b6064820152608401610c1d565b611317828261377e565b6113178282612654565b3360009081526099602052604081205460ff1615612bd2575060131936013560601c90565b503390565b60606000612be6836002614acd565b612bf1906002614e54565b67ffffffffffffffff811115612c0957612c09614732565b6040519080825280601f01601f191660200182016040528015612c33576020820181803683370190505b509050600360fc1b81600081518110612c4e57612c4e614da2565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110612c7d57612c7d614da2565b60200101906001600160f81b031916908160001a9053506000612ca1846002614acd565b612cac906001614e54565b90505b6001811115612d31577f303132333435363738396162636465660000000000000000000000000000000085600f1660108110612ced57612ced614da2565b1a60f81b828281518110612d0357612d03614da2565b60200101906001600160f81b031916908160001a90535060049490941c93612d2a81614efc565b9050612caf565b5083156117a45760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610c1d565b6001600160a01b038216612dd65760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610c1d565b600081815261019560205260409020546001600160a01b031615612e3c5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610c1d565b612e4860008383612f11565b6001600160a01b038216600090815261019660205260408120805460019290612e72908490614e54565b90915550506000818152610195602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b60006001600160e01b031982166380ac58cd60e01b1480612f0257506001600160e01b03198216635b5e139f60e01b145b80610b0e5750610b0e82613800565b612f1c838383613825565b600080527fdf45e191c6a8bff7d5b2484d5c1deccbd5b2abc06a2abf694394baf9d01cb5e56020527f2b85be2befc2dd713b2f771c3d841437400c04e85bacc15958c6dcadb2aa5c045460ff16158015612f7e57506001600160a01b03831615155b8015612f9257506001600160a01b03821615155b15610d66576001600160a01b03831660009081527fdf45e191c6a8bff7d5b2484d5c1deccbd5b2abc06a2abf694394baf9d01cb5e5602052604090205460ff168061301457506001600160a01b03821660009081527fdf45e191c6a8bff7d5b2484d5c1deccbd5b2abc06a2abf694394baf9d01cb5e5602052604090205460ff165b610d665760405162461bcd60e51b815260206004820152602360248201527f7265737472696374656420746f205452414e534645525f524f4c4520686f6c6460448201526265727360e81b6064820152608401610c1d565b80613076576117c6565b6001600160a01b03841673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee14156130aa576130a582826138df565b6117c6565b6117c684848484613982565b600082815261012f602090815260408083206001600160a01b038516845290915290205460ff1661131757600082815261012f602090815260408083206001600160a01b03851684529091529020805460ff19166001179055613117611eca565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60006117a4836001600160a01b038416613afc565b600082815261012f602090815260408083206001600160a01b038516845290915290205460ff161561131757600082815261012f602090815260408083206001600160a01b03851684529091529020805460ff191690556131cf611eca565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b60006117a4836001600160a01b038416613b4b565b600082600001828154811061323f5761323f614da2565b9060005260206000200154905092915050565b606083156132615750816117a4565b8251156132715782518084602001fd5b8160405162461bcd60e51b8152600401610c1d9190614449565b60006001600160a01b0384163b156133db57836001600160a01b031663150b7a026132b4611eca565b8786866040518563ffffffff1660e01b81526004016132d69493929190614f13565b6020604051808303816000875af1925050508015613311575060408051601f3d908101601f1916820190925261330e91810190614f4f565b60015b6133c1573d80801561333f576040519150601f19603f3d011682016040523d82523d6000602084013e613344565b606091505b5080516133b95760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608401610c1d565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050612164565b506001949350505050565b60607f86633b4ffa94b7c3d316ca70d7d2700f3fdfa7a7806efd31499b513d9176692e61341660208401846144a1565b61342660408501602086016144a1565b604085013561343b60808701606088016144a1565b6134486080880188614b0e565b604051613456929190614f6c565b60405190819003902060a088013561347460e08a0160c08b016144a1565b6134856101008b0160e08c01614e97565b6134976101208c016101008d01614e97565b60408051602081019b909b526001600160a01b03998a16908b015296881660608a0152608089019590955292861660a088015260c087019190915260e08601529092166101008401526001600160801b03918216610120808501919091529116610140830152830135610160820152610180016040516020818303038152906040529050919050565b6000610b0e61352d613c3e565b8360405161190160f01b6020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b600080600061357d8585613cb9565b9150915061358a81613d29565b509392505050565b600054610100900460ff166135eb5760405162461bcd60e51b815260206004820152602b6024820152600080516020614fc683398151915260448201526a6e697469616c697a696e6760a81b6064820152608401610c1d565b60018055565b600054610100900460ff1661364a5760405162461bcd60e51b815260206004820152602b6024820152600080516020614fc683398151915260448201526a6e697469616c697a696e6760a81b6064820152608401610c1d565b815160209283012081519190920120603391909155603455565b600054610100900460ff16612a715760405162461bcd60e51b815260206004820152602b6024820152600080516020614fc683398151915260448201526a6e697469616c697a696e6760a81b6064820152608401610c1d565b600054610100900460ff166137165760405162461bcd60e51b815260206004820152602b6024820152600080516020614fc683398151915260448201526a6e697469616c697a696e6760a81b6064820152608401610c1d565b60005b81518110156113175760016099600084848151811061373a5761373a614da2565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff19169115159190911790558061377681614db8565b915050613719565b600054610100900460ff166137d75760405162461bcd60e51b815260206004820152602b6024820152600080516020614fc683398151915260448201526a6e697469616c697a696e6760a81b6064820152608401610c1d565b81516137eb90610193906020850190614279565b508051610d6690610194906020840190614279565b60006001600160e01b03198216635a05180f60e01b1480610b0e5750610b0e82613ee4565b6001600160a01b0383166138825761387d816101c7805460008381526101c860205260408120829055600182018355919091527fff6df30967a6a678f565c59a19e91e5c0dbb20cfe9f9bf26d7da6dea0fffa24c0155565b6138a5565b816001600160a01b0316836001600160a01b0316146138a5576138a58382613f19565b6001600160a01b0382166138bc57610d6681613fbb565b826001600160a01b0316826001600160a01b031614610d6657610d668282614070565b6000826001600160a01b03168260405160006040518083038185875af1925050503d806000811461392c576040519150601f19603f3d011682016040523d82523d6000602084013e613931565b606091505b5050905080610d665760405162461bcd60e51b815260206004820152601c60248201527f6e617469766520746f6b656e207472616e73666572206661696c6564000000006044820152606401610c1d565b816001600160a01b0316836001600160a01b031614156139a1576117c6565b60006001600160a01b0384163014613a33576040516323b872dd60e01b81526001600160a01b0385811660048301528481166024830152604482018490528616906323b872dd906064016020604051808303816000875af1158015613a0a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a2e9190614f7c565b613aa6565b60405163a9059cbb60e01b81526001600160a01b0384811660048301526024820184905286169063a9059cbb906044016020604051808303816000875af1158015613a82573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613aa69190614f7c565b905080613af55760405162461bcd60e51b815260206004820152601960248201527f63757272656e6379207472616e73666572206661696c65642e000000000000006044820152606401610c1d565b5050505050565b6000818152600183016020526040812054613b4357508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610b0e565b506000610b0e565b60008181526001830160205260408120548015613c34576000613b6f600183614e80565b8554909150600090613b8390600190614e80565b9050818114613be8576000866000018281548110613ba357613ba3614da2565b9060005260206000200154905080876000018481548110613bc657613bc6614da2565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080613bf957613bf9614f99565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610b0e565b6000915050610b0e565b60006117867f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f613c6d60335490565b6034546040805160208101859052908101839052606081018290524660808201523060a082015260009060c0016040516020818303038152906040528051906020012090509392505050565b600080825160411415613cf05760208301516040840151606085015160001a613ce4878285856140b6565b94509450505050613d22565b825160401415613d1a5760208301516040840151613d0f8683836141a3565b935093505050613d22565b506000905060025b9250929050565b6000816004811115613d3d57613d3d614faf565b1415613d465750565b6001816004811115613d5a57613d5a614faf565b1415613da85760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610c1d565b6002816004811115613dbc57613dbc614faf565b1415613e0a5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610c1d565b6003816004811115613e1e57613e1e614faf565b1415613e775760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610c1d565b6004816004811115613e8b57613e8b614faf565b14156113bc5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b6064820152608401610c1d565b60006001600160e01b03198216637965db0b60e01b1480610b0e57506301ffc9a760e01b6001600160e01b0319831614610b0e565b60006001613f2684611695565b613f309190614e80565b60008381526101c66020526040902054909150808214613f86576001600160a01b03841660009081526101c56020908152604080832085845282528083205484845281842081905583526101c690915290208190555b5060009182526101c6602090815260408084208490556001600160a01b0390941683526101c581528383209183525290812055565b6101c754600090613fce90600190614e80565b60008381526101c860205260408120546101c78054939450909284908110613ff857613ff8614da2565b90600052602060002001549050806101c7838154811061401a5761401a614da2565b60009182526020808320909101929092558281526101c890915260408082208490558582528120556101c780548061405457614054614f99565b6001900381819060005260206000200160009055905550505050565b600061407b83611695565b6001600160a01b0390931660009081526101c56020908152604080832086845282528083208590559382526101c69052919091209190915550565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156140ed575060009050600361419a565b8460ff16601b1415801561410557508460ff16601c14155b15614116575060009050600461419a565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa15801561416a573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166141935760006001925092505061419a565b9150600090505b94509492505050565b6000807f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8316816141d960ff86901c601b614e54565b90506141e7878288856140b6565b935093505050935093915050565b82805461420190614a7c565b90600052602060002090601f0160209004810192826142235760008555614269565b82601f1061423c5782800160ff19823516178555614269565b82800160010185558215614269579182015b8281111561426957823582559160200191906001019061424e565b506142759291506142ed565b5090565b82805461428590614a7c565b90600052602060002090601f0160209004810192826142a75760008555614269565b82601f106142c057805160ff1916838001178555614269565b82800160010185558215614269579182015b828111156142695782518255916020019190600101906142d2565b5b8082111561427557600081556001016142ee565b6001600160a01b03811681146113bc57600080fd5b803561432281614302565b919050565b60008083601f84011261433957600080fd5b50813567ffffffffffffffff81111561435157600080fd5b602083019150836020828501011115613d2257600080fd5b60008060006040848603121561437e57600080fd5b833561438981614302565b9250602084013567ffffffffffffffff8111156143a557600080fd5b6143b186828701614327565b9497909650939450505050565b6001600160e01b0319811681146113bc57600080fd5b6000602082840312156143e657600080fd5b81356117a4816143be565b60005b8381101561440c5781810151838201526020016143f4565b838111156117c65750506000910152565b600081518084526144358160208601602086016143f1565b601f01601f19169290920160200192915050565b6020815260006117a4602083018461441d565b60006020828403121561446e57600080fd5b5035919050565b6000806040838503121561448857600080fd5b823561449381614302565b946020939093013593505050565b6000602082840312156144b357600080fd5b81356117a481614302565b6000806000606084860312156144d357600080fd5b83356144de81614302565b925060208401356144ee81614302565b929592945050506040919091013590565b6000806040838503121561451257600080fd5b50508035926020909101359150565b60008060006040848603121561453657600080fd5b833567ffffffffffffffff8082111561454e57600080fd5b90850190610140828803121561456357600080fd5b9093506020850135908082111561457957600080fd5b506143b186828701614327565b6000806040838503121561459957600080fd5b8235915060208301356145ab81614302565b809150509250929050565b600080602083850312156145c957600080fd5b823567ffffffffffffffff8111156145e057600080fd5b6145ec85828601614327565b90969095509350505050565b60008060006060848603121561460d57600080fd5b8335925060208401356144ee81614302565b80151581146113bc57600080fd5b6000806040838503121561464057600080fd5b823561464b81614302565b915060208301356145ab8161461f565b6000806020838503121561466e57600080fd5b823567ffffffffffffffff8082111561468657600080fd5b818501915085601f83011261469a57600080fd5b8135818111156146a957600080fd5b8660208260051b85010111156146be57600080fd5b60209290920196919550909350505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561472557603f1988860301845261471385835161441d565b945092850192908501906001016146f7565b5092979650505050505050565b634e487b7160e01b600052604160045260246000fd5b604051610140810167ffffffffffffffff8111828210171561476c5761476c614732565b60405290565b604051601f8201601f1916810167ffffffffffffffff8111828210171561479b5761479b614732565b604052919050565b600067ffffffffffffffff8311156147bd576147bd614732565b6147d0601f8401601f1916602001614772565b90508281528383830111156147e457600080fd5b828260208301376000602084830101529392505050565b6000806000806080858703121561481157600080fd5b843561481c81614302565b9350602085013561482c81614302565b925060408501359150606085013567ffffffffffffffff81111561484f57600080fd5b8501601f8101871361486057600080fd5b61486f878235602084016147a3565b91505092959194509250565b600082601f83011261488c57600080fd5b6117a4838335602085016147a3565b600082601f8301126148ac57600080fd5b8135602067ffffffffffffffff8211156148c8576148c8614732565b8160051b6148d7828201614772565b92835284810182019282810190878511156148f157600080fd5b83870192505b8483101561491957823561490a81614302565b825291830191908301906148f7565b979650505050505050565b80356001600160801b038116811461432257600080fd5b6000806000806000806000806000806101408b8d03121561495b57600080fd5b6149648b614317565b995060208b013567ffffffffffffffff8082111561498157600080fd5b61498d8e838f0161487b565b9a5060408d01359150808211156149a357600080fd5b6149af8e838f0161487b565b995060608d01359150808211156149c557600080fd5b6149d18e838f0161487b565b985060808d01359150808211156149e757600080fd5b506149f48d828e0161489b565b965050614a0360a08c01614317565b9450614a1160c08c01614317565b9350614a1f60e08c01614924565b9250614a2e6101008c01614924565b9150614a3d6101208c01614317565b90509295989b9194979a5092959850565b60008060408385031215614a6157600080fd5b8235614a6c81614302565b915060208301356145ab81614302565b600181811c90821680614a9057607f821691505b60208210811415614ab157634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615614ae757614ae7614ab7565b500290565b600082614b0957634e487b7160e01b600052601260045260246000fd5b500490565b6000808335601e19843603018112614b2557600080fd5b83018035915067ffffffffffffffff821115614b4057600080fd5b602001915036819003821315613d2257600080fd5b60006101408236031215614b6857600080fd5b614b70614748565b614b7983614317565b8152614b8760208401614317565b602082015260408301356040820152614ba260608401614317565b6060820152608083013567ffffffffffffffff811115614bc157600080fd5b614bcd3682860161487b565b60808301525060a083013560a0820152614be960c08401614317565b60c0820152614bfa60e08401614924565b60e0820152610100614c0d818501614924565b9082015261012092830135928101929092525090565b6000808335601e19843603018112614c3a57600080fd5b830160208101925035905067ffffffffffffffff811115614c5a57600080fd5b803603831315613d2257600080fd5b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60208152614cb360208201614ca684614317565b6001600160a01b03169052565b6000614cc160208401614317565b6001600160a01b03811660408401525060408301356060830152614ce760608401614317565b6001600160a01b038116608084015250614d046080840184614c23565b6101408060a0860152614d1c61016086018385614c69565b925060a086013560c0860152614d3460c08701614317565b6001600160a01b03811660e08701529150614d5160e08701614924565b9150610100614d6a818701846001600160801b03169052565b614d75818801614924565b925050610120614d8f818701846001600160801b03169052565b9590950135939094019290925250919050565b634e487b7160e01b600052603260045260246000fd5b6000600019821415614dcc57614dcc614ab7565b5060010190565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351614e0b8160178501602088016143f1565b7f206973206d697373696e6720726f6c65200000000000000000000000000000006017918401918201528351614e488160288401602088016143f1565b01602801949350505050565b60008219821115614e6757614e67614ab7565b500190565b602081526000612164602083018486614c69565b600082821015614e9257614e92614ab7565b500390565b600060208284031215614ea957600080fd5b6117a482614924565b60008060408385031215614ec557600080fd5b8251614ed081614302565b6020939093015192949293505050565b60008251614ef28184602087016143f1565b9190910192915050565b600081614f0b57614f0b614ab7565b506000190190565b60006001600160a01b03808716835280861660208401525083604083015260806060830152614f45608083018461441d565b9695505050505050565b600060208284031215614f6157600080fd5b81516117a4816143be565b8183823760009101908152919050565b600060208284031215614f8e57600080fd5b81516117a48161461f565b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052602160045260246000fdfe496e697469616c697a61626c653a20636f6e7472616374206973206e6f742069416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a164736f6c634300080c000a";
var Z8 = (a) => a.length > 1;
var Y = class extends ContractFactory {
  constructor(...e) {
    Z8(e) ? super(...e) : super(z, K1, e[0]), this.contractName = "TokenERC721";
  }
  deploy(e, t) {
    return super.deploy(e, t || {});
  }
  getDeployTransaction(e, t) {
    return super.getDeployTransaction(e, t || {});
  }
  attach(e) {
    return super.attach(e);
  }
  connect(e) {
    return super.connect(e);
  }
  static createInterface() {
    return new utils_exports.Interface(z);
  }
  static connect(e, t) {
    return new Contract(e, z, t);
  }
};
Y.bytecode = K1, Y.abi = z;
var X = [{ inputs: [{ internalType: "address", name: "_trustedForwarder", type: "address" }, { internalType: "address", name: "_registry", type: "address" }], stateMutability: "nonpayable", type: "constructor" }, { anonymous: false, inputs: [{ indexed: false, internalType: "address", name: "implementation", type: "address" }, { indexed: true, internalType: "bytes32", name: "contractType", type: "bytes32" }, { indexed: false, internalType: "uint256", name: "version", type: "uint256" }], name: "ImplementationAdded", type: "event" }, { anonymous: false, inputs: [{ indexed: false, internalType: "address", name: "implementation", type: "address" }, { indexed: false, internalType: "bool", name: "isApproved", type: "bool" }], name: "ImplementationApproved", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "address", name: "implementation", type: "address" }, { indexed: false, internalType: "address", name: "proxy", type: "address" }, { indexed: true, internalType: "address", name: "deployer", type: "address" }], name: "ProxyDeployed", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "bytes32", name: "role", type: "bytes32" }, { indexed: true, internalType: "bytes32", name: "previousAdminRole", type: "bytes32" }, { indexed: true, internalType: "bytes32", name: "newAdminRole", type: "bytes32" }], name: "RoleAdminChanged", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "bytes32", name: "role", type: "bytes32" }, { indexed: true, internalType: "address", name: "account", type: "address" }, { indexed: true, internalType: "address", name: "sender", type: "address" }], name: "RoleGranted", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "bytes32", name: "role", type: "bytes32" }, { indexed: true, internalType: "address", name: "account", type: "address" }, { indexed: true, internalType: "address", name: "sender", type: "address" }], name: "RoleRevoked", type: "event" }, { inputs: [], name: "DEFAULT_ADMIN_ROLE", outputs: [{ internalType: "bytes32", name: "", type: "bytes32" }], stateMutability: "view", type: "function" }, { inputs: [], name: "FACTORY_ROLE", outputs: [{ internalType: "bytes32", name: "", type: "bytes32" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "_implementation", type: "address" }], name: "addImplementation", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "", type: "address" }], name: "approval", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "_implementation", type: "address" }, { internalType: "bool", name: "_toApprove", type: "bool" }], name: "approveImplementation", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "bytes32", name: "", type: "bytes32" }], name: "currentVersion", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "bytes32", name: "_type", type: "bytes32" }, { internalType: "bytes", name: "_data", type: "bytes" }], name: "deployProxy", outputs: [{ internalType: "address", name: "", type: "address" }], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "_implementation", type: "address" }, { internalType: "bytes", name: "_data", type: "bytes" }, { internalType: "bytes32", name: "_salt", type: "bytes32" }], name: "deployProxyByImplementation", outputs: [{ internalType: "address", name: "deployedProxy", type: "address" }], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "bytes32", name: "_type", type: "bytes32" }, { internalType: "bytes", name: "_data", type: "bytes" }, { internalType: "bytes32", name: "_salt", type: "bytes32" }], name: "deployProxyDeterministic", outputs: [{ internalType: "address", name: "", type: "address" }], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "", type: "address" }], name: "deployer", outputs: [{ internalType: "address", name: "", type: "address" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "bytes32", name: "_type", type: "bytes32" }, { internalType: "uint256", name: "_version", type: "uint256" }], name: "getImplementation", outputs: [{ internalType: "address", name: "", type: "address" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "bytes32", name: "role", type: "bytes32" }], name: "getRoleAdmin", outputs: [{ internalType: "bytes32", name: "", type: "bytes32" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "bytes32", name: "role", type: "bytes32" }, { internalType: "uint256", name: "index", type: "uint256" }], name: "getRoleMember", outputs: [{ internalType: "address", name: "", type: "address" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "bytes32", name: "role", type: "bytes32" }], name: "getRoleMemberCount", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "bytes32", name: "role", type: "bytes32" }, { internalType: "address", name: "account", type: "address" }], name: "grantRole", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "bytes32", name: "role", type: "bytes32" }, { internalType: "address", name: "account", type: "address" }], name: "hasRole", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "bytes32", name: "", type: "bytes32" }, { internalType: "uint256", name: "", type: "uint256" }], name: "implementation", outputs: [{ internalType: "address", name: "", type: "address" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "forwarder", type: "address" }], name: "isTrustedForwarder", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "bytes[]", name: "data", type: "bytes[]" }], name: "multicall", outputs: [{ internalType: "bytes[]", name: "results", type: "bytes[]" }], stateMutability: "nonpayable", type: "function" }, { inputs: [], name: "registry", outputs: [{ internalType: "contract TWRegistry", name: "", type: "address" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "bytes32", name: "role", type: "bytes32" }, { internalType: "address", name: "account", type: "address" }], name: "renounceRole", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "bytes32", name: "role", type: "bytes32" }, { internalType: "address", name: "account", type: "address" }], name: "revokeRole", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "bytes4", name: "interfaceId", type: "bytes4" }], name: "supportsInterface", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "view", type: "function" }];
var j1 = "0x60c06040523480156200001157600080fd5b5060405162001f8738038062001f87833981016040819052620000349162000276565b6001600160a01b0382166080526200005760006200005162000099565b620000b5565b620000867fdfbefbf47cfe66b701d8cfdbce1de81c821590819cb07e71cb01b6602fb0ee276200005162000099565b6001600160a01b031660a05250620002ae565b6000620000b0620000c560201b62000d411760201c565b905090565b620000c18282620000fe565b5050565b6080516000906001600160a01b0316331415620000e9575060131936013560601c90565b620000b06200014160201b62000d8b1760201c565b6200011582826200014560201b62000d8f1760201c565b60008281526001602090815260409091206200013c91839062000e2e620001e7821b17901c565b505050565b3390565b6000828152602081815260408083206001600160a01b038516845290915290205460ff16620000c1576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055620001a362000099565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000620001fe836001600160a01b03841662000207565b90505b92915050565b6000818152600183016020526040812054620002505750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915562000201565b50600062000201565b80516001600160a01b03811681146200027157600080fd5b919050565b600080604083850312156200028a57600080fd5b620002958362000259565b9150620002a56020840162000259565b90509250929050565b60805160a051611c9e620002e9600039600081816102f00152818161060b0152610c8f0152600081816102bb0152610d450152611c9e6000f3fe608060405234801561001057600080fd5b506004361061018d5760003560e01c80639010d07c116100e3578063c6e2a4001161008c578063dd47595a11610066578063dd47595a14610409578063e92016a41461043d578063ec54d72f1461047157600080fd5b8063c6e2a400146103d0578063ca15c873146103e3578063d547741f146103f657600080fd5b8063a217fddf116100bd578063a217fddf1461037f578063ac9650d814610387578063b9caf9d9146103a757600080fd5b80639010d07c1461031257806391d14854146103255780639430b4961461035c57600080fd5b80632f2ff15d1161014557806356fb09581161011f57806356fb095814610298578063572b6c05146102ab5780637b103999146102eb57600080fd5b80632f2ff15d1461025057806336568abe146102655780633b426d3f1461027857600080fd5b806311b804ab1161017657806311b804ab146101ef5780631e5e1e991461021a578063248a9ca31461022d57600080fd5b806301ffc9a71461019257806304a0fb17146101ba575b600080fd5b6101a56101a03660046116c3565b610484565b60405190151581526020015b60405180910390f35b6101e17fdfbefbf47cfe66b701d8cfdbce1de81c821590819cb07e71cb01b6602fb0ee2781565b6040519081526020016101b1565b6102026101fd3660046117ac565b6104af565b6040516001600160a01b0390911681526020016101b1565b610202610228366004611803565b6106bf565b6101e161023b366004611836565b60009081526020819052604090206001015490565b61026361025e36600461184f565b6106ff565b005b61026361027336600461184f565b610731565b6101e1610286366004611836565b60036020526000908152604090205481565b6102636102a636600461187b565b6107cd565b6101a56102b93660046118b7565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0390811691161490565b6102027f000000000000000000000000000000000000000000000000000000000000000081565b6102026103203660046118d2565b610895565b6101a561033336600461184f565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b6101a561036a3660046118b7565b60026020526000908152604090205460ff1681565b6101e1600081565b61039a6103953660046118f4565b6108ad565b6040516101b191906119c5565b6102026103b53660046118b7565b6005602052600090815260409020546001600160a01b031681565b6102636103de3660046118b7565b6109a2565b6101e16103f1366004611836565b610c4b565b61026361040436600461184f565b610c62565b6102026104173660046118d2565b60009182526004602090815260408084209284529190529020546001600160a01b031690565b61020261044b3660046118d2565b60046020908152600092835260408084209091529082529020546001600160a01b031681565b61020261047f366004611a27565b610c8a565b60006001600160e01b03198216635a05180f60e01b14806104a957506104a982610e43565b92915050565b6001600160a01b03831660009081526002602052604081205460ff1661051c5760405162461bcd60e51b815260206004820152601b60248201527f696d706c656d656e746174696f6e206e6f7420617070726f766564000000000060448201526064015b60405180910390fd5b6000610526610e78565b8360405160200161055592919060609290921b6bffffffffffffffffffffffff19168252601482015260340190565b6040516020818303038152906040528051906020012090506105778582610e82565b9150610581610e78565b6001600160a01b038381166000908152600560205260409020805473ffffffffffffffffffffffffffffffffffffffff1916929091169190911790556105c5610e78565b6040516001600160a01b038481168252918216918716907f9e0862c4ebff2150fbbfd3f8547483f55bdec0c34fd977d3fccaa55d6c4ce7849060200160405180910390a37f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166352c28fab610640610e78565b6040516001600160e01b031960e084901b1681526001600160a01b0391821660048201529085166024820152604401600060405180830381600087803b15801561068957600080fd5b505af115801561069d573d6000803e3d6000fd5b505050506000845111156106b7576106b58285610f39565b505b509392505050565b6000838152600460209081526040808320600383528184205484529091528120546001600160a01b03166106f48185856104af565b9150505b9392505050565b6000828152602081905260409020600101546107228161071d610e78565b610f7b565b61072c8383610ff9565b505050565b610739610e78565b6001600160a01b0316816001600160a01b0316146107bf5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c6600000000000000000000000000000000006064820152608401610513565b6107c9828261101b565b5050565b6107f97fdfbefbf47cfe66b701d8cfdbce1de81c821590819cb07e71cb01b6602fb0ee27610333610e78565b6108325760405162461bcd60e51b815260206004820152600a6024820152693737ba1030b236b4b71760b11b6044820152606401610513565b6001600160a01b038216600081815260026020908152604091829020805460ff19168515159081179091558251938452908301527f46c2f0868ef35772e9324a42eb6fa484490cca8494538a909cf05c897d7d4108910160405180910390a15050565b60008281526001602052604081206106f8908361103d565b60608167ffffffffffffffff8111156108c8576108c8611709565b6040519080825280602002602001820160405280156108fb57816020015b60608152602001906001900390816108e65790505b50905060005b8281101561099b5761096b3085858481811061091f5761091f611a6e565b90506020028101906109319190611a84565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061104992505050565b82828151811061097d5761097d611a6e565b6020026020010181905250808061099390611ae8565b915050610901565b5092915050565b6109ce7fdfbefbf47cfe66b701d8cfdbce1de81c821590819cb07e71cb01b6602fb0ee27610333610e78565b610a075760405162461bcd60e51b815260206004820152600a6024820152693737ba1030b236b4b71760b11b6044820152606401610513565b60008190506000816001600160a01b031663cb2ef6f76040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a4c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a709190611b03565b90506000826001600160a01b031663a0a8e4606040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ab2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad69190611b1c565b905060008160ff1611610b2b5760405162461bcd60e51b815260206004820152600e60248201527f696e76616c6964206d6f64756c650000000000000000000000000000000000006044820152606401610513565b6000828152600360205260408120805460019290610b4a908490611b3f565b909155505060008281526003602052604090205460ff821614610baf5760405162461bcd60e51b815260206004820152601460248201527f77726f6e67206d6f64756c652076657273696f6e0000000000000000000000006044820152606401610513565b600082815260046020908152604080832060ff8516808552908352818420805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038a169081179091558085526002845293829020805460ff1916600117905581519384529183019190915283917fc39db2d47bafbb20367a9c840abffa57a2bc243c1f1e67c939ea0e89e59ed01a910160405180910390a250505050565b60008181526001602052604081206104a99061106e565b600082815260208190526040902060010154610c808161071d610e78565b61072c838361101b565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166305d85eda610cc4610e78565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015610d08573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d2c9190611b03565b9050610d398484836106bf565b949350505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316331415610d81575060131936013560601c90565b503390565b905090565b3390565b6000828152602081815260408083206001600160a01b038516845290915290205460ff166107c9576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055610dea610e78565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60006106f8836001600160a01b038416611078565b60006001600160e01b03198216637965db0b60e01b14806104a957506301ffc9a760e01b6001600160e01b03198316146104a9565b6000610d86610d41565b60006040517f3d602d80600a3d3981f3363d3d373d3d3d363d7300000000000000000000000081528360601b60148201527f5af43d82803e903d91602b57fd5bf300000000000000000000000000000000006028820152826037826000f59150506001600160a01b0381166104a95760405162461bcd60e51b815260206004820152601760248201527f455243313136373a2063726561746532206661696c65640000000000000000006044820152606401610513565b60606106f883836040518060400160405280601e81526020017f416464726573733a206c6f772d6c6576656c2063616c6c206661696c656400008152506110c7565b6000828152602081815260408083206001600160a01b038516845290915290205460ff166107c957610fb7816001600160a01b031660146110d6565b610fc28360206110d6565b604051602001610fd3929190611b57565b60408051601f198184030181529082905262461bcd60e51b825261051391600401611bd8565b6110038282610d8f565b600082815260016020526040902061072c9082610e2e565b611025828261127f565b600082815260016020526040902061072c908261131c565b60006106f88383611331565b60606106f88383604051806060016040528060278152602001611c6b6027913961135b565b60006104a9825490565b60008181526001830160205260408120546110bf575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556104a9565b5060006104a9565b6060610d39848460008561144f565b606060006110e5836002611beb565b6110f0906002611b3f565b67ffffffffffffffff81111561110857611108611709565b6040519080825280601f01601f191660200182016040528015611132576020820181803683370190505b509050600360fc1b8160008151811061114d5761114d611a6e565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061117c5761117c611a6e565b60200101906001600160f81b031916908160001a90535060006111a0846002611beb565b6111ab906001611b3f565b90505b6001811115611230577f303132333435363738396162636465660000000000000000000000000000000085600f16601081106111ec576111ec611a6e565b1a60f81b82828151811061120257611202611a6e565b60200101906001600160f81b031916908160001a90535060049490941c9361122981611c0a565b90506111ae565b5083156106f85760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610513565b6000828152602081815260408083206001600160a01b038516845290915290205460ff16156107c9576000828152602081815260408083206001600160a01b03851684529091529020805460ff191690556112d8610e78565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b60006106f8836001600160a01b038416611597565b600082600001828154811061134857611348611a6e565b9060005260206000200154905092915050565b60606001600160a01b0384163b6113da5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e747261637400000000000000000000000000000000000000000000000000006064820152608401610513565b600080856001600160a01b0316856040516113f59190611c21565b600060405180830381855af49150503d8060008114611430576040519150601f19603f3d011682016040523d82523d6000602084013e611435565b606091505b509150915061144582828661168a565b9695505050505050565b6060824710156114c75760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610513565b6001600160a01b0385163b61151e5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610513565b600080866001600160a01b0316858760405161153a9190611c21565b60006040518083038185875af1925050503d8060008114611577576040519150601f19603f3d011682016040523d82523d6000602084013e61157c565b606091505b509150915061158c82828661168a565b979650505050505050565b600081815260018301602052604081205480156116805760006115bb600183611c3d565b85549091506000906115cf90600190611c3d565b90508181146116345760008660000182815481106115ef576115ef611a6e565b906000526020600020015490508087600001848154811061161257611612611a6e565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061164557611645611c54565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506104a9565b60009150506104a9565b606083156116995750816106f8565b8251156116a95782518084602001fd5b8160405162461bcd60e51b81526004016105139190611bd8565b6000602082840312156116d557600080fd5b81356001600160e01b0319811681146106f857600080fd5b80356001600160a01b038116811461170457600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261173057600080fd5b813567ffffffffffffffff8082111561174b5761174b611709565b604051601f8301601f19908116603f0116810190828211818310171561177357611773611709565b8160405283815286602085880101111561178c57600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000806000606084860312156117c157600080fd5b6117ca846116ed565b9250602084013567ffffffffffffffff8111156117e657600080fd5b6117f28682870161171f565b925050604084013590509250925092565b60008060006060848603121561181857600080fd5b83359250602084013567ffffffffffffffff8111156117e657600080fd5b60006020828403121561184857600080fd5b5035919050565b6000806040838503121561186257600080fd5b82359150611872602084016116ed565b90509250929050565b6000806040838503121561188e57600080fd5b611897836116ed565b9150602083013580151581146118ac57600080fd5b809150509250929050565b6000602082840312156118c957600080fd5b6106f8826116ed565b600080604083850312156118e557600080fd5b50508035926020909101359150565b6000806020838503121561190757600080fd5b823567ffffffffffffffff8082111561191f57600080fd5b818501915085601f83011261193357600080fd5b81358181111561194257600080fd5b8660208260051b850101111561195757600080fd5b60209290920196919550909350505050565b60005b8381101561198457818101518382015260200161196c565b83811115611993576000848401525b50505050565b600081518084526119b1816020860160208601611969565b601f01601f19169290920160200192915050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015611a1a57603f19888603018452611a08858351611999565b945092850192908501906001016119ec565b5092979650505050505050565b60008060408385031215611a3a57600080fd5b82359150602083013567ffffffffffffffff811115611a5857600080fd5b611a648582860161171f565b9150509250929050565b634e487b7160e01b600052603260045260246000fd5b6000808335601e19843603018112611a9b57600080fd5b83018035915067ffffffffffffffff821115611ab657600080fd5b602001915036819003821315611acb57600080fd5b9250929050565b634e487b7160e01b600052601160045260246000fd5b6000600019821415611afc57611afc611ad2565b5060010190565b600060208284031215611b1557600080fd5b5051919050565b600060208284031215611b2e57600080fd5b815160ff811681146106f857600080fd5b60008219821115611b5257611b52611ad2565b500190565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351611b8f816017850160208801611969565b7f206973206d697373696e6720726f6c65200000000000000000000000000000006017918401918201528351611bcc816028840160208801611969565b01602801949350505050565b6020815260006106f86020830184611999565b6000816000190483118215151615611c0557611c05611ad2565b500290565b600081611c1957611c19611ad2565b506000190190565b60008251611c33818460208701611969565b9190910192915050565b600082821015611c4f57611c4f611ad2565b500390565b634e487b7160e01b600052603160045260246000fdfe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a164736f6c634300080c000a";
var at = (a) => a.length > 1;
var K = class extends ContractFactory {
  constructor(...e) {
    at(e) ? super(...e) : super(X, j1, e[0]), this.contractName = "TWFactory";
  }
  deploy(e, t, f3) {
    return super.deploy(e, t, f3 || {});
  }
  getDeployTransaction(e, t, f3) {
    return super.getDeployTransaction(e, t, f3 || {});
  }
  attach(e) {
    return super.attach(e);
  }
  connect(e) {
    return super.connect(e);
  }
  static createInterface() {
    return new utils_exports.Interface(X);
  }
  static connect(e, t) {
    return new Contract(e, X, t);
  }
};
K.bytecode = j1, K.abi = X;
var E1 = [{ inputs: [{ internalType: "address", name: "deployer", type: "address" }, { internalType: "address", name: "proxy", type: "address" }], name: "getFeeTier", outputs: [{ internalType: "uint128", name: "tierId", type: "uint128" }, { internalType: "uint128", name: "validUntilTimestamp", type: "uint128" }], stateMutability: "view", type: "function" }];
var k1 = class {
  static createInterface() {
    return new utils_exports.Interface(E1);
  }
  static connect(e, t) {
    return new Contract(e, E1, t);
  }
};
k1.abi = E1;
var j = [{ inputs: [{ internalType: "address", name: "_trustedForwarder", type: "address" }, { internalType: "address", name: "_factory", type: "address" }], stateMutability: "nonpayable", type: "constructor" }, { anonymous: false, inputs: [{ indexed: true, internalType: "uint256", name: "tierId", type: "uint256" }, { indexed: true, internalType: "uint256", name: "feeType", type: "uint256" }, { indexed: false, internalType: "address", name: "recipient", type: "address" }, { indexed: false, internalType: "uint256", name: "bps", type: "uint256" }], name: "FeeTierUpdated", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "bytes32", name: "role", type: "bytes32" }, { indexed: true, internalType: "bytes32", name: "previousAdminRole", type: "bytes32" }, { indexed: true, internalType: "bytes32", name: "newAdminRole", type: "bytes32" }], name: "RoleAdminChanged", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "bytes32", name: "role", type: "bytes32" }, { indexed: true, internalType: "address", name: "account", type: "address" }, { indexed: true, internalType: "address", name: "sender", type: "address" }], name: "RoleGranted", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "bytes32", name: "role", type: "bytes32" }, { indexed: true, internalType: "address", name: "account", type: "address" }, { indexed: true, internalType: "address", name: "sender", type: "address" }], name: "RoleRevoked", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "address", name: "proxyOrDeployer", type: "address" }, { indexed: false, internalType: "uint256", name: "tierId", type: "uint256" }, { indexed: false, internalType: "uint256", name: "validUntilTimestamp", type: "uint256" }], name: "TierUpdated", type: "event" }, { inputs: [], name: "DEFAULT_ADMIN_ROLE", outputs: [{ internalType: "bytes32", name: "", type: "bytes32" }], stateMutability: "view", type: "function" }, { inputs: [], name: "MAX_FEE_BPS", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [], name: "factory", outputs: [{ internalType: "contract TWFactory", name: "", type: "address" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "uint256", name: "", type: "uint256" }, { internalType: "uint256", name: "", type: "uint256" }], name: "feeInfo", outputs: [{ internalType: "uint256", name: "bps", type: "uint256" }, { internalType: "address", name: "recipient", type: "address" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "_proxy", type: "address" }, { internalType: "uint256", name: "_feeType", type: "uint256" }], name: "getFeeInfo", outputs: [{ internalType: "address", name: "recipient", type: "address" }, { internalType: "uint256", name: "bps", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "_deployer", type: "address" }, { internalType: "address", name: "_proxy", type: "address" }], name: "getFeeTier", outputs: [{ internalType: "uint128", name: "tierId", type: "uint128" }, { internalType: "uint128", name: "validUntilTimestamp", type: "uint128" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "bytes32", name: "role", type: "bytes32" }], name: "getRoleAdmin", outputs: [{ internalType: "bytes32", name: "", type: "bytes32" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "bytes32", name: "role", type: "bytes32" }, { internalType: "uint256", name: "index", type: "uint256" }], name: "getRoleMember", outputs: [{ internalType: "address", name: "", type: "address" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "bytes32", name: "role", type: "bytes32" }], name: "getRoleMemberCount", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "bytes32", name: "role", type: "bytes32" }, { internalType: "address", name: "account", type: "address" }], name: "grantRole", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "bytes32", name: "role", type: "bytes32" }, { internalType: "address", name: "account", type: "address" }], name: "hasRole", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "forwarder", type: "address" }], name: "isTrustedForwarder", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "bytes[]", name: "data", type: "bytes[]" }], name: "multicall", outputs: [{ internalType: "bytes[]", name: "results", type: "bytes[]" }], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "bytes32", name: "role", type: "bytes32" }, { internalType: "address", name: "account", type: "address" }], name: "renounceRole", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "bytes32", name: "role", type: "bytes32" }, { internalType: "address", name: "account", type: "address" }], name: "revokeRole", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "uint256", name: "_tierId", type: "uint256" }, { internalType: "uint256", name: "_feeBps", type: "uint256" }, { internalType: "address", name: "_feeRecipient", type: "address" }, { internalType: "uint256", name: "_feeType", type: "uint256" }], name: "setFeeInfoForTier", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "_extension", type: "address" }], name: "setFeeTierPlacementExtension", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "_proxyOrDeployer", type: "address" }, { internalType: "uint128", name: "_tierId", type: "uint128" }, { internalType: "uint128", name: "_validUntilTimestamp", type: "uint128" }], name: "setTier", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "bytes4", name: "interfaceId", type: "bytes4" }], name: "supportsInterface", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "view", type: "function" }, { inputs: [], name: "tierPlacementExtension", outputs: [{ internalType: "contract IFeeTierPlacementExtension", name: "", type: "address" }], stateMutability: "view", type: "function" }];
var J1 = "";
var rt = (a) => a.length > 1;
var J = class extends ContractFactory {
  constructor(...e) {
    rt(e) ? super(...e) : super(j, J1, e[0]), this.contractName = "TWFee";
  }
  deploy(e, t, f3) {
    return super.deploy(e, t, f3 || {});
  }
  getDeployTransaction(e, t, f3) {
    return super.getDeployTransaction(e, t, f3 || {});
  }
  attach(e) {
    return super.attach(e);
  }
  connect(e) {
    return super.connect(e);
  }
  static createInterface() {
    return new utils_exports.Interface(j);
  }
  static connect(e, t) {
    return new Contract(e, j, t);
  }
};
J.bytecode = J1, J.abi = j;
var Z = [{ inputs: [{ internalType: "address", name: "_logic", type: "address" }, { internalType: "bytes", name: "_data", type: "bytes" }], stateMutability: "payable", type: "constructor" }, { stateMutability: "payable", type: "fallback" }, { stateMutability: "payable", type: "receive" }];
var Z1 = "0x60806040526040516106c03803806106c083398101604081905261002291610261565b61004d60017f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbd61032f565b6000805160206106798339815191521461006957610069610354565b8161008e60008051602061067983398151915260001b6100d060201b61005f1760201c565b80546001600160a01b0319166001600160a01b03929092169190911790558051156100c9576100c782826100d360201b6100621760201c565b505b50506103b9565b90565b60606100f88383604051806060016040528060278152602001610699602791396100ff565b9392505050565b60606001600160a01b0384163b61016c5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084015b60405180910390fd5b600080856001600160a01b031685604051610187919061036a565b600060405180830381855af49150503d80600081146101c2576040519150601f19603f3d011682016040523d82523d6000602084013e6101c7565b606091505b5090925090506101d88282866101e2565b9695505050505050565b606083156101f15750816100f8565b8251156102015782518084602001fd5b8160405162461bcd60e51b81526004016101639190610386565b634e487b7160e01b600052604160045260246000fd5b60005b8381101561024c578181015183820152602001610234565b8381111561025b576000848401525b50505050565b6000806040838503121561027457600080fd5b82516001600160a01b038116811461028b57600080fd5b60208401519092506001600160401b03808211156102a857600080fd5b818501915085601f8301126102bc57600080fd5b8151818111156102ce576102ce61021b565b604051601f8201601f19908116603f011681019083821181831017156102f6576102f661021b565b8160405282815288602084870101111561030f57600080fd5b610320836020830160208801610231565b80955050505050509250929050565b60008282101561034f57634e487b7160e01b600052601160045260246000fd5b500390565b634e487b7160e01b600052600160045260246000fd5b6000825161037c818460208701610231565b9190910192915050565b60208152600082518060208401526103a5816040850160208701610231565b601f01601f19169190910160400192915050565b6102b1806103c86000396000f3fe60806040523661001357610011610017565b005b6100115b61005d6100587f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5473ffffffffffffffffffffffffffffffffffffffff1690565b61008e565b565b90565b6060610087838360405180606001604052806027815260200161027e602791396100b2565b9392505050565b3660008037600080366000845af43d6000803e8080156100ad573d6000f35b3d6000fd5b606073ffffffffffffffffffffffffffffffffffffffff84163b6101435760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e7472616374000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6000808573ffffffffffffffffffffffffffffffffffffffff168560405161016b919061022e565b600060405180830381855af49150503d80600081146101a6576040519150601f19603f3d011682016040523d82523d6000602084013e6101ab565b606091505b50915091506101bb8282866101c5565b9695505050505050565b606083156101d4575081610087565b8251156101e45782518084602001fd5b8160405162461bcd60e51b815260040161013a919061024a565b60005b83811015610219578181015183820152602001610201565b83811115610228576000848401525b50505050565b600082516102408184602087016101fe565b9190910192915050565b60208152600082518060208401526102698160408501602087016101fe565b601f01601f1916919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a164736f6c634300080c000a360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564";
var ut = (a) => a.length > 1;
var $ = class extends ContractFactory {
  constructor(...e) {
    ut(e) ? super(...e) : super(Z, Z1, e[0]), this.contractName = "TWProxy";
  }
  deploy(e, t, f3) {
    return super.deploy(e, t, f3 || {});
  }
  getDeployTransaction(e, t, f3) {
    return super.getDeployTransaction(e, t, f3 || {});
  }
  attach(e) {
    return super.attach(e);
  }
  connect(e) {
    return super.connect(e);
  }
  static createInterface() {
    return new utils_exports.Interface(Z);
  }
  static connect(e, t) {
    return new Contract(e, Z, t);
  }
};
$.bytecode = Z1, $.abi = Z;
var e0 = [{ inputs: [{ internalType: "address", name: "_trustedForwarder", type: "address" }], stateMutability: "nonpayable", type: "constructor" }, { anonymous: false, inputs: [{ indexed: true, internalType: "address", name: "deployer", type: "address" }, { indexed: true, internalType: "address", name: "deployment", type: "address" }], name: "Added", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "address", name: "deployer", type: "address" }, { indexed: true, internalType: "address", name: "deployment", type: "address" }], name: "Deleted", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "bytes32", name: "role", type: "bytes32" }, { indexed: true, internalType: "bytes32", name: "previousAdminRole", type: "bytes32" }, { indexed: true, internalType: "bytes32", name: "newAdminRole", type: "bytes32" }], name: "RoleAdminChanged", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "bytes32", name: "role", type: "bytes32" }, { indexed: true, internalType: "address", name: "account", type: "address" }, { indexed: true, internalType: "address", name: "sender", type: "address" }], name: "RoleGranted", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "bytes32", name: "role", type: "bytes32" }, { indexed: true, internalType: "address", name: "account", type: "address" }, { indexed: true, internalType: "address", name: "sender", type: "address" }], name: "RoleRevoked", type: "event" }, { inputs: [], name: "DEFAULT_ADMIN_ROLE", outputs: [{ internalType: "bytes32", name: "", type: "bytes32" }], stateMutability: "view", type: "function" }, { inputs: [], name: "OPERATOR_ROLE", outputs: [{ internalType: "bytes32", name: "", type: "bytes32" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "_deployer", type: "address" }, { internalType: "address", name: "_deployment", type: "address" }], name: "add", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "_deployer", type: "address" }], name: "count", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "_deployer", type: "address" }], name: "getAll", outputs: [{ internalType: "address[]", name: "", type: "address[]" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "bytes32", name: "role", type: "bytes32" }], name: "getRoleAdmin", outputs: [{ internalType: "bytes32", name: "", type: "bytes32" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "bytes32", name: "role", type: "bytes32" }, { internalType: "uint256", name: "index", type: "uint256" }], name: "getRoleMember", outputs: [{ internalType: "address", name: "", type: "address" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "bytes32", name: "role", type: "bytes32" }], name: "getRoleMemberCount", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "bytes32", name: "role", type: "bytes32" }, { internalType: "address", name: "account", type: "address" }], name: "grantRole", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "bytes32", name: "role", type: "bytes32" }, { internalType: "address", name: "account", type: "address" }], name: "hasRole", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "forwarder", type: "address" }], name: "isTrustedForwarder", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "bytes[]", name: "data", type: "bytes[]" }], name: "multicall", outputs: [{ internalType: "bytes[]", name: "results", type: "bytes[]" }], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "_deployer", type: "address" }, { internalType: "address", name: "_deployment", type: "address" }], name: "remove", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "bytes32", name: "role", type: "bytes32" }, { internalType: "address", name: "account", type: "address" }], name: "renounceRole", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "bytes32", name: "role", type: "bytes32" }, { internalType: "address", name: "account", type: "address" }], name: "revokeRole", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "bytes4", name: "interfaceId", type: "bytes4" }], name: "supportsInterface", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "view", type: "function" }];
var $1 = "0x60a06040523480156200001157600080fd5b50604051620016b4380380620016b483398101604081905262000034916200021e565b6001600160a01b038116608052620000576000620000516200005e565b6200007a565b5062000250565b6000620000756200008a60201b6200082e1760201c565b905090565b620000868282620000c3565b5050565b6080516000906001600160a01b0316331415620000ae575060131936013560601c90565b620000756200010660201b620008781760201c565b620000da82826200010a60201b6200087c1760201c565b6000828152600160209081526040909120620001019183906200091b620001ac821b17901c565b505050565b3390565b6000828152602081815260408083206001600160a01b038516845290915290205460ff1662000086576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055620001686200005e565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000620001c3836001600160a01b038416620001cc565b90505b92915050565b60008181526001830160205260408120546200021557508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155620001c6565b506000620001c6565b6000602082840312156200023157600080fd5b81516001600160a01b03811681146200024957600080fd5b9392505050565b60805161144162000273600039600081816101bc015261083201526114416000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c80639010d07c11610097578063ca15c87311610066578063ca15c87314610289578063d547741f1461029c578063eb077342146102af578063f5b541a6146102cf57600080fd5b80639010d07c146101ff57806391d148541461022a578063a217fddf14610261578063ac9650d81461026957600080fd5b806336568abe116100d357806336568abe1461018657806352c28fab14610199578063572b6c05146101ac5780637f7c1491146101ec57600080fd5b806301ffc9a71461010557806305d85eda1461012d578063248a9ca31461014e5780632f2ff15d14610171575b600080fd5b610118610113366004610fc5565b6102f6565b60405190151581526020015b60405180910390f35b61014061013b36600461100b565b610321565b604051908152602001610124565b61014061015c366004611026565b60009081526020819052604090206001015490565b61018461017f36600461103f565b610342565b005b61018461019436600461103f565b610374565b6101846101a736600461106b565b610415565b6101186101ba36600461100b565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0390811691161490565b6101846101fa36600461106b565b610566565b61021261020d366004611095565b6106b7565b6040516001600160a01b039091168152602001610124565b61011861023836600461103f565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b610140600081565b61027c6102773660046110b7565b6106d6565b6040516101249190611188565b610140610297366004611026565b6107cb565b6101846102aa36600461103f565b6107e2565b6102c26102bd36600461100b565b61080a565b60405161012491906111ea565b6101407f97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b92981565b60006001600160e01b03198216635a05180f60e01b148061031b575061031b82610930565b92915050565b6001600160a01b038116600090815260026020526040812061031b90610965565b6000828152602081905260409020600101546103658161036061096f565b610979565b61036f83836109f7565b505050565b61037c61096f565b6001600160a01b0316816001600160a01b0316146104075760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c66000000000000000000000000000000000060648201526084015b60405180910390fd5b6104118282610a19565b5050565b6104417f97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b92961023861096f565b80610464575061044f61096f565b6001600160a01b0316826001600160a01b0316145b6104b05760405162461bcd60e51b815260206004820152601960248201527f6e6f74206f70657261746f72206f72206465706c6f7965722e0000000000000060448201526064016103fe565b6001600160a01b03821660009081526002602052604081206104d2908361091b565b9050806105215760405162461bcd60e51b815260206004820152600d60248201527f6661696c656420746f206164640000000000000000000000000000000000000060448201526064016103fe565b816001600160a01b0316836001600160a01b03167f938c63ac3d228b23f6bee7618fefc6790522e338ac202c958a2ea9eb9706c5d160405160405180910390a3505050565b6105927f97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b92961023861096f565b806105b557506105a061096f565b6001600160a01b0316826001600160a01b0316145b6106015760405162461bcd60e51b815260206004820152601960248201527f6e6f74206f70657261746f72206f72206465706c6f7965722e0000000000000060448201526064016103fe565b6001600160a01b03821660009081526002602052604081206106239083610a37565b9050806106725760405162461bcd60e51b815260206004820152601060248201527f6661696c656420746f2072656d6f76650000000000000000000000000000000060448201526064016103fe565b816001600160a01b0316836001600160a01b03167ffc5ffe2160301e6b21a86f66febb30fe4e9e6932ac1afc0348fb2fd5daa18b1360405160405180910390a3505050565b60008281526001602052604081206106cf9083610a4c565b9392505050565b60608167ffffffffffffffff8111156106f1576106f1611237565b60405190808252806020026020018201604052801561072457816020015b606081526020019060019003908161070f5790505b50905060005b828110156107c457610794308585848181106107485761074861124d565b905060200281019061075a9190611263565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610a5892505050565b8282815181106107a6576107a661124d565b602002602001018190525080806107bc906112c7565b91505061072a565b5092915050565b600081815260016020526040812061031b90610965565b6000828152602081905260409020600101546108008161036061096f565b61036f8383610a19565b6001600160a01b038116600090815260026020526040902060609061031b90610a7d565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031633141561086e575060131936013560601c90565b503390565b905090565b3390565b6000828152602081815260408083206001600160a01b038516845290915290205460ff16610411576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556108d761096f565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60006106cf836001600160a01b038416610a8a565b60006001600160e01b03198216637965db0b60e01b148061031b57506301ffc9a760e01b6001600160e01b031983161461031b565b600061031b825490565b600061087361082e565b6000828152602081815260408083206001600160a01b038516845290915290205460ff16610411576109b5816001600160a01b03166014610ad9565b6109c0836020610ad9565b6040516020016109d19291906112e2565b60408051601f198184030181529082905262461bcd60e51b82526103fe91600401611363565b610a01828261087c565b600082815260016020526040902061036f908261091b565b610a238282610c82565b600082815260016020526040902061036f90825b60006106cf836001600160a01b038416610d1f565b60006106cf8383610e12565b60606106cf838360405180606001604052806027815260200161140e60279139610e3c565b606060006106cf83610f30565b6000818152600183016020526040812054610ad15750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915561031b565b50600061031b565b60606000610ae8836002611376565b610af3906002611395565b67ffffffffffffffff811115610b0b57610b0b611237565b6040519080825280601f01601f191660200182016040528015610b35576020820181803683370190505b509050600360fc1b81600081518110610b5057610b5061124d565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110610b7f57610b7f61124d565b60200101906001600160f81b031916908160001a9053506000610ba3846002611376565b610bae906001611395565b90505b6001811115610c33577f303132333435363738396162636465660000000000000000000000000000000085600f1660108110610bef57610bef61124d565b1a60f81b828281518110610c0557610c0561124d565b60200101906001600160f81b031916908160001a90535060049490941c93610c2c816113ad565b9050610bb1565b5083156106cf5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016103fe565b6000828152602081815260408083206001600160a01b038516845290915290205460ff1615610411576000828152602081815260408083206001600160a01b03851684529091529020805460ff19169055610cdb61096f565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b60008181526001830160205260408120548015610e08576000610d436001836113c4565b8554909150600090610d57906001906113c4565b9050818114610dbc576000866000018281548110610d7757610d7761124d565b9060005260206000200154905080876000018481548110610d9a57610d9a61124d565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080610dcd57610dcd6113db565b60019003818190600052602060002001600090559055856001016000868152602001908152602001600020600090556001935050505061031b565b600091505061031b565b6000826000018281548110610e2957610e2961124d565b9060005260206000200154905092915050565b60606001600160a01b0384163b610ebb5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e7472616374000000000000000000000000000000000000000000000000000060648201526084016103fe565b600080856001600160a01b031685604051610ed691906113f1565b600060405180830381855af49150503d8060008114610f11576040519150601f19603f3d011682016040523d82523d6000602084013e610f16565b606091505b5091509150610f26828286610f8c565b9695505050505050565b606081600001805480602002602001604051908101604052809291908181526020018280548015610f8057602002820191906000526020600020905b815481526020019060010190808311610f6c575b50505050509050919050565b60608315610f9b5750816106cf565b825115610fab5782518084602001fd5b8160405162461bcd60e51b81526004016103fe9190611363565b600060208284031215610fd757600080fd5b81356001600160e01b0319811681146106cf57600080fd5b80356001600160a01b038116811461100657600080fd5b919050565b60006020828403121561101d57600080fd5b6106cf82610fef565b60006020828403121561103857600080fd5b5035919050565b6000806040838503121561105257600080fd5b8235915061106260208401610fef565b90509250929050565b6000806040838503121561107e57600080fd5b61108783610fef565b915061106260208401610fef565b600080604083850312156110a857600080fd5b50508035926020909101359150565b600080602083850312156110ca57600080fd5b823567ffffffffffffffff808211156110e257600080fd5b818501915085601f8301126110f657600080fd5b81358181111561110557600080fd5b8660208260051b850101111561111a57600080fd5b60209290920196919550909350505050565b60005b8381101561114757818101518382015260200161112f565b83811115611156576000848401525b50505050565b6000815180845261117481602086016020860161112c565b601f01601f19169290920160200192915050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b828110156111dd57603f198886030184526111cb85835161115c565b945092850192908501906001016111af565b5092979650505050505050565b6020808252825182820181905260009190848201906040850190845b8181101561122b5783516001600160a01b031683529284019291840191600101611206565b50909695505050505050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b6000808335601e1984360301811261127a57600080fd5b83018035915067ffffffffffffffff82111561129557600080fd5b6020019150368190038213156112aa57600080fd5b9250929050565b634e487b7160e01b600052601160045260246000fd5b60006000198214156112db576112db6112b1565b5060010190565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161131a81601785016020880161112c565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000601791840191820152835161135781602884016020880161112c565b01602801949350505050565b6020815260006106cf602083018461115c565b6000816000190483118215151615611390576113906112b1565b500290565b600082198211156113a8576113a86112b1565b500190565b6000816113bc576113bc6112b1565b506000190190565b6000828210156113d6576113d66112b1565b500390565b634e487b7160e01b600052603160045260246000fd5b6000825161140381846020870161112c565b919091019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a164736f6c634300080c000a";
var mt = (a) => a.length > 1;
var t0 = class extends ContractFactory {
  constructor(...e) {
    mt(e) ? super(...e) : super(e0, $1, e[0]), this.contractName = "TWRegistry";
  }
  deploy(e, t) {
    return super.deploy(e, t || {});
  }
  getDeployTransaction(e, t) {
    return super.getDeployTransaction(e, t || {});
  }
  attach(e) {
    return super.attach(e);
  }
  connect(e) {
    return super.connect(e);
  }
  static createInterface() {
    return new utils_exports.Interface(e0);
  }
  static connect(e, t) {
    return new Contract(e, e0, t);
  }
};
t0.bytecode = $1, t0.abi = e0;
var a0 = [{ inputs: [], stateMutability: "nonpayable", type: "constructor" }, { anonymous: false, inputs: [{ indexed: false, internalType: "uint256", name: "proposalId", type: "uint256" }], name: "ProposalCanceled", type: "event" }, { anonymous: false, inputs: [{ indexed: false, internalType: "uint256", name: "proposalId", type: "uint256" }, { indexed: false, internalType: "address", name: "proposer", type: "address" }, { indexed: false, internalType: "address[]", name: "targets", type: "address[]" }, { indexed: false, internalType: "uint256[]", name: "values", type: "uint256[]" }, { indexed: false, internalType: "string[]", name: "signatures", type: "string[]" }, { indexed: false, internalType: "bytes[]", name: "calldatas", type: "bytes[]" }, { indexed: false, internalType: "uint256", name: "startBlock", type: "uint256" }, { indexed: false, internalType: "uint256", name: "endBlock", type: "uint256" }, { indexed: false, internalType: "string", name: "description", type: "string" }], name: "ProposalCreated", type: "event" }, { anonymous: false, inputs: [{ indexed: false, internalType: "uint256", name: "proposalId", type: "uint256" }], name: "ProposalExecuted", type: "event" }, { anonymous: false, inputs: [{ indexed: false, internalType: "uint256", name: "oldProposalThreshold", type: "uint256" }, { indexed: false, internalType: "uint256", name: "newProposalThreshold", type: "uint256" }], name: "ProposalThresholdSet", type: "event" }, { anonymous: false, inputs: [{ indexed: false, internalType: "uint256", name: "oldQuorumNumerator", type: "uint256" }, { indexed: false, internalType: "uint256", name: "newQuorumNumerator", type: "uint256" }], name: "QuorumNumeratorUpdated", type: "event" }, { anonymous: false, inputs: [{ indexed: true, internalType: "address", name: "voter", type: "address" }, { indexed: false, internalType: "uint256", name: "proposalId", type: "uint256" }, { indexed: false, internalType: "uint8", name: "support", type: "uint8" }, { indexed: false, internalType: "uint256", name: "weight", type: "uint256" }, { indexed: false, internalType: "string", name: "reason", type: "string" }], name: "VoteCast", type: "event" }, { anonymous: false, inputs: [{ indexed: false, internalType: "uint256", name: "oldVotingDelay", type: "uint256" }, { indexed: false, internalType: "uint256", name: "newVotingDelay", type: "uint256" }], name: "VotingDelaySet", type: "event" }, { anonymous: false, inputs: [{ indexed: false, internalType: "uint256", name: "oldVotingPeriod", type: "uint256" }, { indexed: false, internalType: "uint256", name: "newVotingPeriod", type: "uint256" }], name: "VotingPeriodSet", type: "event" }, { inputs: [], name: "BALLOT_TYPEHASH", outputs: [{ internalType: "bytes32", name: "", type: "bytes32" }], stateMutability: "view", type: "function" }, { inputs: [], name: "COUNTING_MODE", outputs: [{ internalType: "string", name: "", type: "string" }], stateMutability: "pure", type: "function" }, { inputs: [{ internalType: "uint256", name: "proposalId", type: "uint256" }, { internalType: "uint8", name: "support", type: "uint8" }], name: "castVote", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "uint256", name: "proposalId", type: "uint256" }, { internalType: "uint8", name: "support", type: "uint8" }, { internalType: "uint8", name: "v", type: "uint8" }, { internalType: "bytes32", name: "r", type: "bytes32" }, { internalType: "bytes32", name: "s", type: "bytes32" }], name: "castVoteBySig", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "uint256", name: "proposalId", type: "uint256" }, { internalType: "uint8", name: "support", type: "uint8" }, { internalType: "string", name: "reason", type: "string" }], name: "castVoteWithReason", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "nonpayable", type: "function" }, { inputs: [], name: "contractType", outputs: [{ internalType: "bytes32", name: "", type: "bytes32" }], stateMutability: "pure", type: "function" }, { inputs: [], name: "contractURI", outputs: [{ internalType: "string", name: "", type: "string" }], stateMutability: "view", type: "function" }, { inputs: [], name: "contractVersion", outputs: [{ internalType: "uint8", name: "", type: "uint8" }], stateMutability: "pure", type: "function" }, { inputs: [{ internalType: "address[]", name: "targets", type: "address[]" }, { internalType: "uint256[]", name: "values", type: "uint256[]" }, { internalType: "bytes[]", name: "calldatas", type: "bytes[]" }, { internalType: "bytes32", name: "descriptionHash", type: "bytes32" }], name: "execute", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "payable", type: "function" }, { inputs: [], name: "getAllProposals", outputs: [{ components: [{ internalType: "uint256", name: "proposalId", type: "uint256" }, { internalType: "address", name: "proposer", type: "address" }, { internalType: "address[]", name: "targets", type: "address[]" }, { internalType: "uint256[]", name: "values", type: "uint256[]" }, { internalType: "string[]", name: "signatures", type: "string[]" }, { internalType: "bytes[]", name: "calldatas", type: "bytes[]" }, { internalType: "uint256", name: "startBlock", type: "uint256" }, { internalType: "uint256", name: "endBlock", type: "uint256" }, { internalType: "string", name: "description", type: "string" }], internalType: "struct VoteERC20.Proposal[]", name: "allProposals", type: "tuple[]" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "account", type: "address" }, { internalType: "uint256", name: "blockNumber", type: "uint256" }], name: "getVotes", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "uint256", name: "proposalId", type: "uint256" }, { internalType: "address", name: "account", type: "address" }], name: "hasVoted", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address[]", name: "targets", type: "address[]" }, { internalType: "uint256[]", name: "values", type: "uint256[]" }, { internalType: "bytes[]", name: "calldatas", type: "bytes[]" }, { internalType: "bytes32", name: "descriptionHash", type: "bytes32" }], name: "hashProposal", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "pure", type: "function" }, { inputs: [{ internalType: "string", name: "_name", type: "string" }, { internalType: "string", name: "_contractURI", type: "string" }, { internalType: "address[]", name: "_trustedForwarders", type: "address[]" }, { internalType: "address", name: "_token", type: "address" }, { internalType: "uint256", name: "_initialVotingDelay", type: "uint256" }, { internalType: "uint256", name: "_initialVotingPeriod", type: "uint256" }, { internalType: "uint256", name: "_initialProposalThreshold", type: "uint256" }, { internalType: "uint256", name: "_initialVoteQuorumFraction", type: "uint256" }], name: "initialize", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "forwarder", type: "address" }], name: "isTrustedForwarder", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "view", type: "function" }, { inputs: [], name: "name", outputs: [{ internalType: "string", name: "", type: "string" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "", type: "address" }, { internalType: "address", name: "", type: "address" }, { internalType: "uint256[]", name: "", type: "uint256[]" }, { internalType: "uint256[]", name: "", type: "uint256[]" }, { internalType: "bytes", name: "", type: "bytes" }], name: "onERC1155BatchReceived", outputs: [{ internalType: "bytes4", name: "", type: "bytes4" }], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "", type: "address" }, { internalType: "address", name: "", type: "address" }, { internalType: "uint256", name: "", type: "uint256" }, { internalType: "uint256", name: "", type: "uint256" }, { internalType: "bytes", name: "", type: "bytes" }], name: "onERC1155Received", outputs: [{ internalType: "bytes4", name: "", type: "bytes4" }], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "", type: "address" }, { internalType: "address", name: "", type: "address" }, { internalType: "uint256", name: "", type: "uint256" }, { internalType: "bytes", name: "", type: "bytes" }], name: "onERC721Received", outputs: [{ internalType: "bytes4", name: "", type: "bytes4" }], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "uint256", name: "proposalId", type: "uint256" }], name: "proposalDeadline", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [], name: "proposalIndex", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "uint256", name: "proposalId", type: "uint256" }], name: "proposalSnapshot", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [], name: "proposalThreshold", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "uint256", name: "proposalId", type: "uint256" }], name: "proposalVotes", outputs: [{ internalType: "uint256", name: "againstVotes", type: "uint256" }, { internalType: "uint256", name: "forVotes", type: "uint256" }, { internalType: "uint256", name: "abstainVotes", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "uint256", name: "", type: "uint256" }], name: "proposals", outputs: [{ internalType: "uint256", name: "proposalId", type: "uint256" }, { internalType: "address", name: "proposer", type: "address" }, { internalType: "uint256", name: "startBlock", type: "uint256" }, { internalType: "uint256", name: "endBlock", type: "uint256" }, { internalType: "string", name: "description", type: "string" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address[]", name: "targets", type: "address[]" }, { internalType: "uint256[]", name: "values", type: "uint256[]" }, { internalType: "bytes[]", name: "calldatas", type: "bytes[]" }, { internalType: "string", name: "description", type: "string" }], name: "propose", outputs: [{ internalType: "uint256", name: "proposalId", type: "uint256" }], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "uint256", name: "blockNumber", type: "uint256" }], name: "quorum", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [], name: "quorumDenominator", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [], name: "quorumNumerator", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "target", type: "address" }, { internalType: "uint256", name: "value", type: "uint256" }, { internalType: "bytes", name: "data", type: "bytes" }], name: "relay", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "string", name: "uri", type: "string" }], name: "setContractURI", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "uint256", name: "newProposalThreshold", type: "uint256" }], name: "setProposalThreshold", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "uint256", name: "newVotingDelay", type: "uint256" }], name: "setVotingDelay", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "uint256", name: "newVotingPeriod", type: "uint256" }], name: "setVotingPeriod", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "uint256", name: "proposalId", type: "uint256" }], name: "state", outputs: [{ internalType: "enum IGovernorUpgradeable.ProposalState", name: "", type: "uint8" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "bytes4", name: "interfaceId", type: "bytes4" }], name: "supportsInterface", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "view", type: "function" }, { inputs: [], name: "token", outputs: [{ internalType: "contract IVotesUpgradeable", name: "", type: "address" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "uint256", name: "newQuorumNumerator", type: "uint256" }], name: "updateQuorumNumerator", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [], name: "version", outputs: [{ internalType: "string", name: "", type: "string" }], stateMutability: "view", type: "function" }, { inputs: [], name: "votingDelay", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [], name: "votingPeriod", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { stateMutability: "payable", type: "receive" }];
var e5 = "0x60806040523480156200001157600080fd5b50600054610100900460ff166200002f5760005460ff161562000039565b62000039620000de565b620000a15760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b600054610100900460ff16158015620000c4576000805461ffff19166101011790555b8015620000d7576000805461ff00191690555b506200010b565b6000620000f630620000fc60201b620019e01760201c565b15905090565b6001600160a01b03163b151590565b613f59806200011b6000396000f3fe6080604052600436106102ca5760003560e01c80637d5e81e211610179578063cb2ef6f7116100d6578063ea0217cf1161008a578063f23a6e6111610064578063f23a6e6114610884578063f8ce560a146108b0578063fc0c546a146108d057600080fd5b8063ea0217cf14610824578063eb9019d414610844578063ece40cc11461086457600080fd5b8063dd4e2ba5116100bb578063dd4e2ba514610795578063deaaa7cc146107db578063e8a3d4851461080f57600080fd5b8063cb2ef6f714610740578063cceb68f51461077357600080fd5b8063b58131b01161012d578063c01f9e3711610112578063c01f9e37146106e0578063c28bc2fa14610700578063c59057e41461072057600080fd5b8063b58131b01461069f578063bc197c81146106b457600080fd5b806397c3d3341161015e57806397c3d33414610659578063a0a8e4601461066d578063a7713a701461068957600080fd5b80637d5e81e214610619578063938e3d7b1461063957600080fd5b80633e4f49e611610227578063572b6c05116101db57806370b0f660116101c057806370b0f660146105b95780637b3c71d3146105d95780637cf43f8d146105f957600080fd5b8063572b6c05146105695780635977e0f2146105a257600080fd5b8063544ffc9c1161020c578063544ffc9c146104c957806354fd4d501461051f578063567813881461054957600080fd5b80633e4f49e614610451578063438596321461047e57600080fd5b8063150b7a021161027e5780632d63f693116102635780632d63f693146103fb5780633932abb11461041b5780633bccf4fd1461043157600080fd5b8063150b7a02146103a45780632656227d146103e857600080fd5b806302a251a3116102af57806302a251a31461034257806306f3f9e61461036257806306fdde031461038257600080fd5b8063013cf08b146102d857806301ffc9a71461031257600080fd5b366102d357005b005b600080fd5b3480156102e457600080fd5b506102f86102f33660046131b4565b610909565b604051610309959493929190613229565b60405180910390f35b34801561031e57600080fd5b5061033261032d36600461325d565b6109cd565b6040519015158152602001610309565b34801561034e57600080fd5b506101c6545b604051908152602001610309565b34801561036e57600080fd5b506102d161037d3660046131b4565b610a13565b34801561038e57600080fd5b50610397610a7e565b6040516103099190613287565b3480156103b057600080fd5b506103cf6103bf36600461336d565b630a85bd0160e11b949350505050565b6040516001600160e01b03199091168152602001610309565b6103546103f6366004613546565b610b11565b34801561040757600080fd5b506103546104163660046131b4565b610c24565b34801561042757600080fd5b506101c554610354565b34801561043d57600080fd5b5061035461044c3660046135e7565b610c5e565b34801561045d57600080fd5b5061047161046c3660046131b4565b610cf2565b604051610309919061364b565b34801561048a57600080fd5b50610332610499366004613673565b60008281526101f7602090815260408083206001600160a01b038516845260030190915290205460ff1692915050565b3480156104d557600080fd5b506105046104e43660046131b4565b60009081526101f760205260409020805460018201546002909201549092565b60408051938452602084019290925290820152606001610309565b34801561052b57600080fd5b506040805180820190915260018152603160f81b6020820152610397565b34801561055557600080fd5b5061035461056436600461369f565b610e00565b34801561057557600080fd5b506103326105843660046136c2565b6001600160a01b031660009081526033602052604090205460ff1690565b3480156105ae57600080fd5b5061035461028f5481565b3480156105c557600080fd5b506102d16105d43660046131b4565b610e30565b3480156105e557600080fd5b506103546105f4366004613726565b610e93565b34801561060557600080fd5b506102d1610614366004613780565b610eec565b34801561062557600080fd5b5061035461063436600461383d565b611000565b34801561064557600080fd5b506102d16106543660046138de565b6111cd565b34801561066557600080fd5b506064610354565b34801561067957600080fd5b5060405160018152602001610309565b34801561069557600080fd5b5061025c54610354565b3480156106ab57600080fd5b50610354611239565b3480156106c057600080fd5b506103cf6106cf366004613920565b63bc197c8160e01b95945050505050565b3480156106ec57600080fd5b506103546106fb3660046131b4565b61124a565b34801561070c57600080fd5b506102d161071b3660046139ca565b61127b565b34801561072c57600080fd5b5061035461073b366004613546565b61131e565b34801561074c57600080fd5b507f566f746545524332300000000000000000000000000000000000000000000000610354565b34801561077f57600080fd5b50610788611358565b6040516103099190613ad5565b3480156107a157600080fd5b506040805180820190915260208082527f737570706f72743d627261766f2671756f72756d3d666f722c6162737461696e90820152610397565b3480156107e757600080fd5b506103547f150214d74d59b7d1e90c73fc22ef3d991dd0a76b046543d4d80ab92d2a50328f81565b34801561081b57600080fd5b50610397611783565b34801561083057600080fd5b506102d161083f3660046131b4565b611812565b34801561085057600080fd5b5061035461085f366004613be5565b611875565b34801561087057600080fd5b506102d161087f3660046131b4565b6118f3565b34801561089057600080fd5b506103cf61089f366004613c0f565b63f23a6e6160e01b95945050505050565b3480156108bc57600080fd5b506103546108cb3660046131b4565b611956565b3480156108dc57600080fd5b50610229546108f1906001600160a01b031681565b6040516001600160a01b039091168152602001610309565b610290602052600090815260409020805460018201546006830154600784015460088501805494956001600160a01b03909416949293919261094a90613c74565b80601f016020809104026020016040519081016040528092919081815260200182805461097690613c74565b80156109c35780601f10610998576101008083540402835291602001916109c3565b820191906000526020600020905b8154815290600101906020018083116109a657829003601f168201915b5050505050905085565b60006001600160e01b03198216630271189760e51b14806109fe57506001600160e01b03198216630a85bd0160e11b145b80610a0d5750610a0d826119ef565b92915050565b30610a1c611a14565b6001600160a01b031614610a725760405162461bcd60e51b8152602060048201526018602482015277476f7665726e6f723a206f6e6c79476f7665726e616e636560401b60448201526064015b60405180910390fd5b610a7b81611a1e565b50565b60606101938054610a8e90613c74565b80601f0160208091040260200160405190810160405280929190818152602001828054610aba90613c74565b8015610b075780601f10610adc57610100808354040283529160200191610b07565b820191906000526020600020905b815481529060010190602001808311610aea57829003601f168201915b5050505050905090565b600080610b208686868661131e565b90506000610b2d82610cf2565b90506004816007811115610b4357610b43613635565b1480610b6057506005816007811115610b5e57610b5e613635565b145b610bb65760405162461bcd60e51b815260206004820152602160248201527f476f7665726e6f723a2070726f706f73616c206e6f74207375636365737366756044820152601b60fa1b6064820152608401610a69565b6000828152610194602052604090819020600201805460ff19166001179055517f712ae1383f79ac853f8d882153778e0260ef8f03b504e2866e0593e04d2b291f90610c059084815260200190565b60405180910390a1610c1a8288888888611ae7565b5095945050505050565b60008181526101946020908152604080832081519283019091525467ffffffffffffffff16908190525b67ffffffffffffffff1692915050565b604080517f150214d74d59b7d1e90c73fc22ef3d991dd0a76b046543d4d80ab92d2a50328f602082015290810186905260ff851660608201526000908190610cca90610cc29060800160405160208183030381529060405280519060200120611be6565b868686611c34565b9050610ce787828860405180602001604052806000815250611c52565b979650505050505050565b600081815261019460205260408120600281015460ff1615610d175750600792915050565b6002810154610100900460ff1615610d325750600292915050565b6000610d3d84610c24565b905080610d8c5760405162461bcd60e51b815260206004820152601d60248201527f476f7665726e6f723a20756e6b6e6f776e2070726f706f73616c2069640000006044820152606401610a69565b438110610d9d575060009392505050565b6000610da88561124a565b9050438110610dbc57506001949350505050565b610dc585611d5e565b8015610de5575060008581526101f7602052604090208054600190910154115b15610df557506004949350505050565b506003949350505050565b600080610e0b611a14565b9050610e2884828560405180602001604052806000815250611c52565b949350505050565b30610e39611a14565b6001600160a01b031614610e8a5760405162461bcd60e51b8152602060048201526018602482015277476f7665726e6f723a206f6e6c79476f7665726e616e636560401b6044820152606401610a69565b610a7b81611d96565b600080610e9e611a14565b9050610ee286828787878080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611c5292505050565b9695505050505050565b600054610100900460ff16610f075760005460ff1615610f0b565b303b155b610f7d5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610a69565b600054610100900460ff16158015610f9f576000805461ffff19166101011790555b610fa887611dd9565b610fb189611e43565b610fbc858585611ecc565b610fc586611f30565b610fce82611f92565b8751610fe29061028e9060208b0190612ee9565b508015610ff5576000805461ff00191690555b505050505050505050565b600061100e85858585611ff4565b905060405180610120016040528082815260200161102a611a14565b6001600160a01b03168152602001868152602001858152602001865167ffffffffffffffff81111561105e5761105e6132b6565b60405190808252806020026020018201604052801561109157816020015b606081526020019060019003908161107c5790505b5081526020018481526020016110a683610c24565b81526020016110b48361124a565b8152602090810184905261028f5460009081526102908252604090819020835181558383015160018201805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03909216919091179055908301518051919261112292600285019290910190612f69565b506060820151805161113e916003840191602090910190612fcb565b506080820151805161115a916004840191602090910190613005565b5060a0820151805161117691600584019160209091019061305e565b5060c0820151600682015560e0820151600782015561010082015180516111a7916008840191602090910190612ee9565b50905050600161028f60008282546111bf9190613cc5565b909155509095945050505050565b306111d6611a14565b6001600160a01b0316146112275760405162461bcd60e51b8152602060048201526018602482015277476f7665726e6f723a206f6e6c79476f7665726e616e636560401b6044820152606401610a69565b61123461028e83836130b7565b505050565b60006112456101c75490565b905090565b60008181526101946020908152604080832081519283019091526001015467ffffffffffffffff1690819052610c4e565b30611284611a14565b6001600160a01b0316146112d55760405162461bcd60e51b8152602060048201526018602482015277476f7665726e6f723a206f6e6c79476f7665726e616e636560401b6044820152606401610a69565b6113178483838080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250889250612353915050565b5050505050565b6000848484846040516020016113379493929190613cdd565b60408051601f19818403018152919052805160209091012095945050505050565b61028f546060908067ffffffffffffffff811115611378576113786132b6565b60405190808252806020026020018201604052801561140157816020015b6113ee6040518061012001604052806000815260200160006001600160a01b03168152602001606081526020016060815260200160608152602001606081526020016000815260200160008152602001606081525090565b8152602001906001900390816113965790505b50915060005b8181101561177e57600081815261029060209081526040918290208251610120810184528154815260018201546001600160a01b0316818401526002820180548551818602810186018752818152929593949386019383018282801561149657602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611478575b50505050508152602001600382018054806020026020016040519081016040528092919081815260200182805480156114ee57602002820191906000526020600020905b8154815260200190600101908083116114da575b5050505050815260200160048201805480602002602001604051908101604052809291908181526020016000905b828210156115c857838290600052602060002001805461153b90613c74565b80601f016020809104026020016040519081016040528092919081815260200182805461156790613c74565b80156115b45780601f10611589576101008083540402835291602001916115b4565b820191906000526020600020905b81548152906001019060200180831161159757829003601f168201915b50505050508152602001906001019061151c565b50505050815260200160058201805480602002602001604051908101604052809291908181526020016000905b828210156116a157838290600052602060002001805461161490613c74565b80601f016020809104026020016040519081016040528092919081815260200182805461164090613c74565b801561168d5780601f106116625761010080835404028352916020019161168d565b820191906000526020600020905b81548152906001019060200180831161167057829003601f168201915b5050505050815260200190600101906115f5565b50505050815260200160068201548152602001600782015481526020016008820180546116cd90613c74565b80601f01602080910402602001604051908101604052809291908181526020018280546116f990613c74565b80156117465780601f1061171b57610100808354040283529160200191611746565b820191906000526020600020905b81548152906001019060200180831161172957829003601f168201915b50505050508152505083828151811061176157611761613d28565b6020908102919091010152611777600182613cc5565b9050611407565b505090565b61028e805461179190613c74565b80601f01602080910402602001604051908101604052809291908181526020018280546117bd90613c74565b801561180a5780601f106117df5761010080835404028352916020019161180a565b820191906000526020600020905b8154815290600101906020018083116117ed57829003601f168201915b505050505081565b3061181b611a14565b6001600160a01b03161461186c5760405162461bcd60e51b8152602060048201526018602482015277476f7665726e6f723a206f6e6c79476f7665726e616e636560401b6044820152606401610a69565b610a7b81612379565b61022954604051630748d63560e31b81526001600160a01b038481166004830152602482018490526000921690633a46b1a890604401602060405180830381865afa1580156118c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118ec9190613d3e565b9392505050565b306118fc611a14565b6001600160a01b03161461194d5760405162461bcd60e51b8152602060048201526018602482015277476f7665726e6f723a206f6e6c79476f7665726e616e636560401b6044820152606401610a69565b610a7b81612432565b6000606461025c5461022954604051632394e7a360e21b8152600481018690526001600160a01b0390911690638e539e8c90602401602060405180830381865afa1580156119a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119cc9190613d3e565b6119d69190613d57565b610a0d9190613d76565b6001600160a01b03163b151590565b60006001600160e01b0319821663bf26d89760e01b1480610a0d5750610a0d82612475565b60006112456124aa565b6064811115611aa15760405162461bcd60e51b815260206004820152604360248201527f476f7665726e6f72566f74657351756f72756d4672616374696f6e3a2071756f60448201527f72756d4e756d657261746f72206f7665722071756f72756d44656e6f6d696e616064820152623a37b960e91b608482015260a401610a69565b61025c80549082905560408051828152602081018490527f0553476bf02ef2726e8ce5ced78d63e26e602e4a2257b1f559418e24b4633997910160405180910390a15050565b6000604051806060016040528060278152602001613edd60279139905060005b8551811015611bdd57600080878381518110611b2557611b25613d28565b60200260200101516001600160a01b0316878481518110611b4857611b48613d28565b6020026020010151878581518110611b6257611b62613d28565b6020026020010151604051611b779190613d98565b60006040518083038185875af1925050503d8060008114611bb4576040519150601f19603f3d011682016040523d82523d6000602084013e611bb9565b606091505b5091509150611bc98282866124d4565b50505080611bd690613db4565b9050611b07565b50505050505050565b6000610a0d611bf361250d565b8360405161190160f01b6020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b6000806000611c458787878761258a565b91509150610c1a81612677565b6000848152610194602052604081206001611c6c87610cf2565b6007811115611c7d57611c7d613635565b14611cd65760405162461bcd60e51b815260206004820152602360248201527f476f7665726e6f723a20766f7465206e6f742063757272656e746c792061637460448201526269766560e81b6064820152608401610a69565b6040805160208101909152815467ffffffffffffffff1690819052600090611cff908790611875565b9050611d0d87878784612832565b856001600160a01b03167fb8e138887d0aa13bab447e82de9d5c1777041ecd21ca36ba824ff1e6c07ddda488878488604051611d4c9493929190613dcf565b60405180910390a29695505050505050565b60008181526101f76020526040812060028101546001820154611d819190613cc5565b611d8d6108cb85610c24565b11159392505050565b6101c55460408051918252602082018390527fc565b045403dc03c2eea82b81a0465edad9e2e7fc4d97e11421c209da93d7a93910160405180910390a16101c555565b600054610100900460ff16611e325760405162461bcd60e51b815260206004820152602b6024820152600080516020613f0483398151915260448201526a6e697469616c697a696e6760a81b6064820152608401610a69565b611e3a6129d0565b610a7b81612a2b565b600054610100900460ff16611e9c5760405162461bcd60e51b815260206004820152602b6024820152600080516020613f0483398151915260448201526a6e697469616c697a696e6760a81b6064820152608401610a69565b611ec381611ebe6040805180820190915260018152603160f81b602082015290565b612af0565b610a7b81612b65565b600054610100900460ff16611f255760405162461bcd60e51b815260206004820152602b6024820152600080516020613f0483398151915260448201526a6e697469616c697a696e6760a81b6064820152608401610a69565b611234838383612bd2565b600054610100900460ff16611f895760405162461bcd60e51b815260206004820152602b6024820152600080516020613f0483398151915260448201526a6e697469616c697a696e6760a81b6064820152608401610a69565b610a7b81612c46565b600054610100900460ff16611feb5760405162461bcd60e51b815260206004820152602b6024820152600080516020613f0483398151915260448201526a6e697469616c697a696e6760a81b6064820152608401610a69565b610a7b81612ccf565b6000611ffe611239565b61200d3361085f600143613df7565b101561208d5760405162461bcd60e51b815260206004820152604360248201527f476f7665726e6f72436f6d7061746962696c697479427261766f3a2070726f7060448201527f6f73657220766f7465732062656c6f772070726f706f73616c207468726573686064820152621bdb1960ea1b608482015260a401610a69565b60006120a2868686868051906020012061131e565b905084518651146120ff5760405162461bcd60e51b815260206004820152602160248201527f476f7665726e6f723a20696e76616c69642070726f706f73616c206c656e67746044820152600d60fb1b6064820152608401610a69565b835186511461215a5760405162461bcd60e51b815260206004820152602160248201527f476f7665726e6f723a20696e76616c69642070726f706f73616c206c656e67746044820152600d60fb1b6064820152608401610a69565b60008651116121ab5760405162461bcd60e51b815260206004820152601860248201527f476f7665726e6f723a20656d7074792070726f706f73616c00000000000000006044820152606401610a69565b600081815261019460209081526040918290208251918201909252815467ffffffffffffffff16908190521561222d5760405162461bcd60e51b815260206004820152602160248201527f476f7665726e6f723a2070726f706f73616c20616c72656164792065786973746044820152607360f81b6064820152608401610a69565b600061224161223c6101c55490565b612d28565b61224a43612d28565b6122549190613e0e565b9050600061226561223c6101c65490565b61226f9083613e0e565b835467ffffffffffffffff191667ffffffffffffffff8416178455905060018301805467ffffffffffffffff191667ffffffffffffffff83161790557f7d84a6263ae0d98d3329bd7b46bb4e8d6f98cd35a7adb45c274c8b7fd5ebd5e0846122d5611a14565b8b8b8d5167ffffffffffffffff8111156122f1576122f16132b6565b60405190808252806020026020018201604052801561232457816020015b606081526020019060019003908161230f5790505b508c88888e60405161233e99989796959493929190613e3a565b60405180910390a15091979650505050505050565b6060610e28848484604051806060016040528060298152602001613f2460299139612dac565b600081116123ef5760405162461bcd60e51b815260206004820152602760248201527f476f7665726e6f7253657474696e67733a20766f74696e6720706572696f642060448201527f746f6f206c6f77000000000000000000000000000000000000000000000000006064820152608401610a69565b6101c65460408051918252602082018390527f7e3f7f0708a84de9203036abaa450dccc85ad5ff52f78c170f3edb55cf5e8828910160405180910390a16101c655565b6101c75460408051918252602082018390527fccb45da8d5717e6c4544694297c4ba5cf151d455c9bb0ed4fc7a38411bc05461910160405180910390a16101c755565b60006001600160e01b03198216630271189760e51b1480610a0d57506301ffc9a760e01b6001600160e01b0319831614610a0d565b3360009081526033602052604081205460ff16156124cf575060131936013560601c90565b503390565b606083156124e35750816118ec565b8251156124f35782518084602001fd5b8160405162461bcd60e51b8152600401610a699190613287565b60006112457f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f61253d61012d5490565b61012e546040805160208101859052908101839052606081018290524660808201523060a082015260009060c0016040516020818303038152906040528051906020012090509392505050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156125c1575060009050600361266e565b8460ff16601b141580156125d957508460ff16601c14155b156125ea575060009050600461266e565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa15801561263e573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166126675760006001925092505061266e565b9150600090505b94509492505050565b600081600481111561268b5761268b613635565b14156126945750565b60018160048111156126a8576126a8613635565b14156126f65760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610a69565b600281600481111561270a5761270a613635565b14156127585760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610a69565b600381600481111561276c5761276c613635565b14156127c55760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610a69565b60048160048111156127d9576127d9613635565b1415610a7b5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b6064820152608401610a69565b60008481526101f7602090815260408083206001600160a01b0387168452600381019092529091205460ff16156128d15760405162461bcd60e51b815260206004820152602760248201527f476f7665726e6f72566f74696e6753696d706c653a20766f746520616c72656160448201527f64792063617374000000000000000000000000000000000000000000000000006064820152608401610a69565b6001600160a01b03841660009081526003820160205260408120805460ff1916600117905560ff168360ff16141561292257818160000160008282546129179190613cc5565b909155506113179050565b60ff83166001141561294257818160010160008282546129179190613cc5565b60ff83166002141561296257818160020160008282546129179190613cc5565b60405162461bcd60e51b815260206004820152603560248201527f476f7665726e6f72566f74696e6753696d706c653a20696e76616c696420766160448201527f6c756520666f7220656e756d20566f74655479706500000000000000000000006064820152608401610a69565b600054610100900460ff16612a295760405162461bcd60e51b815260206004820152602b6024820152600080516020613f0483398151915260448201526a6e697469616c697a696e6760a81b6064820152608401610a69565b565b600054610100900460ff16612a845760405162461bcd60e51b815260206004820152602b6024820152600080516020613f0483398151915260448201526a6e697469616c697a696e6760a81b6064820152608401610a69565b60005b8151811015612aec57600160336000848481518110612aa857612aa8613d28565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff191691151591909117905580612ae481613db4565b915050612a87565b5050565b600054610100900460ff16612b495760405162461bcd60e51b815260206004820152602b6024820152600080516020613f0483398151915260448201526a6e697469616c697a696e6760a81b6064820152608401610a69565b81516020928301208151919092012061012d9190915561012e55565b600054610100900460ff16612bbe5760405162461bcd60e51b815260206004820152602b6024820152600080516020613f0483398151915260448201526a6e697469616c697a696e6760a81b6064820152608401610a69565b8051612aec90610193906020840190612ee9565b600054610100900460ff16612c2b5760405162461bcd60e51b815260206004820152602b6024820152600080516020613f0483398151915260448201526a6e697469616c697a696e6760a81b6064820152608401610a69565b612c3483611d96565b612c3d82612379565b61123481612432565b600054610100900460ff16612c9f5760405162461bcd60e51b815260206004820152602b6024820152600080516020613f0483398151915260448201526a6e697469616c697a696e6760a81b6064820152608401610a69565b610229805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b600054610100900460ff16610a725760405162461bcd60e51b815260206004820152602b6024820152600080516020613f0483398151915260448201526a6e697469616c697a696e6760a81b6064820152608401610a69565b600067ffffffffffffffff821115612da85760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203660448201527f34206269747300000000000000000000000000000000000000000000000000006064820152608401610a69565b5090565b606082471015612e245760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610a69565b6001600160a01b0385163b612e7b5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610a69565b600080866001600160a01b03168587604051612e979190613d98565b60006040518083038185875af1925050503d8060008114612ed4576040519150601f19603f3d011682016040523d82523d6000602084013e612ed9565b606091505b5091509150610ce78282866124d4565b828054612ef590613c74565b90600052602060002090601f016020900481019282612f175760008555612f5d565b82601f10612f3057805160ff1916838001178555612f5d565b82800160010185558215612f5d579182015b82811115612f5d578251825591602001919060010190612f42565b50612da892915061312b565b828054828255906000526020600020908101928215612f5d579160200282015b82811115612f5d578251825473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03909116178255602090920191600190910190612f89565b828054828255906000526020600020908101928215612f5d5791602002820182811115612f5d578251825591602001919060010190612f42565b828054828255906000526020600020908101928215613052579160200282015b828111156130525782518051613042918491602090910190612ee9565b5091602001919060010190613025565b50612da8929150613140565b8280548282559060005260206000209081019282156130ab579160200282015b828111156130ab578251805161309b918491602090910190612ee9565b509160200191906001019061307e565b50612da892915061315d565b8280546130c390613c74565b90600052602060002090601f0160209004810192826130e55760008555612f5d565b82601f106130fe5782800160ff19823516178555612f5d565b82800160010185558215612f5d579182015b82811115612f5d578235825591602001919060010190613110565b5b80821115612da8576000815560010161312c565b80821115612da8576000613154828261317a565b50600101613140565b80821115612da8576000613171828261317a565b5060010161315d565b50805461318690613c74565b6000825580601f10613196575050565b601f016020900490600052602060002090810190610a7b919061312b565b6000602082840312156131c657600080fd5b5035919050565b60005b838110156131e85781810151838201526020016131d0565b838111156131f7576000848401525b50505050565b600081518084526132158160208601602086016131cd565b601f01601f19169290920160200192915050565b8581526001600160a01b038516602082015283604082015282606082015260a060808201526000610ce760a08301846131fd565b60006020828403121561326f57600080fd5b81356001600160e01b0319811681146118ec57600080fd5b6020815260006118ec60208301846131fd565b80356001600160a01b03811681146132b157600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156132f5576132f56132b6565b604052919050565b600082601f83011261330e57600080fd5b813567ffffffffffffffff811115613328576133286132b6565b61333b601f8201601f19166020016132cc565b81815284602083860101111561335057600080fd5b816020850160208301376000918101602001919091529392505050565b6000806000806080858703121561338357600080fd5b61338c8561329a565b935061339a6020860161329a565b925060408501359150606085013567ffffffffffffffff8111156133bd57600080fd5b6133c9878288016132fd565b91505092959194509250565b600067ffffffffffffffff8211156133ef576133ef6132b6565b5060051b60200190565b600082601f83011261340a57600080fd5b8135602061341f61341a836133d5565b6132cc565b82815260059290921b8401810191818101908684111561343e57600080fd5b8286015b84811015613460576134538161329a565b8352918301918301613442565b509695505050505050565b600082601f83011261347c57600080fd5b8135602061348c61341a836133d5565b82815260059290921b840181019181810190868411156134ab57600080fd5b8286015b8481101561346057803583529183019183016134af565b600082601f8301126134d757600080fd5b813560206134e761341a836133d5565b82815260059290921b8401810191818101908684111561350657600080fd5b8286015b8481101561346057803567ffffffffffffffff81111561352a5760008081fd5b6135388986838b01016132fd565b84525091830191830161350a565b6000806000806080858703121561355c57600080fd5b843567ffffffffffffffff8082111561357457600080fd5b613580888389016133f9565b9550602087013591508082111561359657600080fd5b6135a28883890161346b565b945060408701359150808211156135b857600080fd5b506135c5878288016134c6565b949793965093946060013593505050565b803560ff811681146132b157600080fd5b600080600080600060a086880312156135ff57600080fd5b8535945061360f602087016135d6565b935061361d604087016135d6565b94979396509394606081013594506080013592915050565b634e487b7160e01b600052602160045260246000fd5b602081016008831061366d57634e487b7160e01b600052602160045260246000fd5b91905290565b6000806040838503121561368657600080fd5b823591506136966020840161329a565b90509250929050565b600080604083850312156136b257600080fd5b82359150613696602084016135d6565b6000602082840312156136d457600080fd5b6118ec8261329a565b60008083601f8401126136ef57600080fd5b50813567ffffffffffffffff81111561370757600080fd5b60208301915083602082850101111561371f57600080fd5b9250929050565b6000806000806060858703121561373c57600080fd5b8435935061374c602086016135d6565b9250604085013567ffffffffffffffff81111561376857600080fd5b613774878288016136dd565b95989497509550505050565b600080600080600080600080610100898b03121561379d57600080fd5b883567ffffffffffffffff808211156137b557600080fd5b6137c18c838d016132fd565b995060208b01359150808211156137d757600080fd5b6137e38c838d016132fd565b985060408b01359150808211156137f957600080fd5b506138068b828c016133f9565b96505061381560608a0161329a565b979a969950949760808101359660a0820135965060c0820135955060e0909101359350915050565b6000806000806080858703121561385357600080fd5b843567ffffffffffffffff8082111561386b57600080fd5b613877888389016133f9565b9550602087013591508082111561388d57600080fd5b6138998883890161346b565b945060408701359150808211156138af57600080fd5b6138bb888389016134c6565b935060608701359150808211156138d157600080fd5b506133c9878288016132fd565b600080602083850312156138f157600080fd5b823567ffffffffffffffff81111561390857600080fd5b613914858286016136dd565b90969095509350505050565b600080600080600060a0868803121561393857600080fd5b6139418661329a565b945061394f6020870161329a565b9350604086013567ffffffffffffffff8082111561396c57600080fd5b61397889838a0161346b565b9450606088013591508082111561398e57600080fd5b61399a89838a0161346b565b935060808801359150808211156139b057600080fd5b506139bd888289016132fd565b9150509295509295909350565b600080600080606085870312156139e057600080fd5b6139e98561329a565b935060208501359250604085013567ffffffffffffffff81111561376857600080fd5b600081518084526020808501945080840160005b83811015613a455781516001600160a01b031687529582019590820190600101613a20565b509495945050505050565b600081518084526020808501945080840160005b83811015613a4557815187529582019590820190600101613a64565b600081518084526020808501808196508360051b8101915082860160005b85811015613ac8578284038952613ab68483516131fd565b98850198935090840190600101613a9e565b5091979650505050505050565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b83811015613bd757603f19898403018552815180518452878101516001600160a01b0316888501528681015161012088860181905290613b3e82870182613a0c565b91505060608083015186830382880152613b588382613a50565b9250505060808083015186830382880152613b738382613a80565b9250505060a08083015186830382880152613b8e8382613a80565b9250505060c080830151818701525060e08083015181870152506101008083015192508582038187015250613bc381836131fd565b968901969450505090860190600101613afc565b509098975050505050505050565b60008060408385031215613bf857600080fd5b613c018361329a565b946020939093013593505050565b600080600080600060a08688031215613c2757600080fd5b613c308661329a565b9450613c3e6020870161329a565b93506040860135925060608601359150608086013567ffffffffffffffff811115613c6857600080fd5b6139bd888289016132fd565b600181811c90821680613c8857607f821691505b60208210811415613ca957634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b60008219821115613cd857613cd8613caf565b500190565b608081526000613cf06080830187613a0c565b8281036020840152613d028187613a50565b90508281036040840152613d168186613a80565b91505082606083015295945050505050565b634e487b7160e01b600052603260045260246000fd5b600060208284031215613d5057600080fd5b5051919050565b6000816000190483118215151615613d7157613d71613caf565b500290565b600082613d9357634e487b7160e01b600052601260045260246000fd5b500490565b60008251613daa8184602087016131cd565b9190910192915050565b6000600019821415613dc857613dc8613caf565b5060010190565b84815260ff84166020820152826040820152608060608201526000610ee260808301846131fd565b600082821015613e0957613e09613caf565b500390565b600067ffffffffffffffff808316818516808303821115613e3157613e31613caf565b01949350505050565b60006101208b83526001600160a01b038b166020840152806040840152613e638184018b613a0c565b90508281036060840152613e77818a613a50565b90508281036080840152613e8b8189613a80565b905082810360a0840152613e9f8188613a80565b67ffffffffffffffff87811660c0860152861660e08501528381036101008501529050613ecc81856131fd565b9c9b50505050505050505050505056fe476f7665726e6f723a2063616c6c20726576657274656420776974686f7574206d657373616765496e697469616c697a61626c653a20636f6e7472616374206973206e6f742069416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564a164736f6c634300080c000a";
var xt = (a) => a.length > 1;
var n0 = class extends ContractFactory {
  constructor(...e) {
    xt(e) ? super(...e) : super(a0, e5, e[0]), this.contractName = "VoteERC20";
  }
  deploy(e) {
    return super.deploy(e || {});
  }
  getDeployTransaction(e) {
    return super.getDeployTransaction(e || {});
  }
  attach(e) {
    return super.attach(e);
  }
  connect(e) {
    return super.connect(e);
  }
  static createInterface() {
    return new utils_exports.Interface(a0);
  }
  static connect(e, t) {
    return new Contract(e, a0, t);
  }
};
n0.bytecode = e5, n0.abi = a0;

// node_modules/@thirdweb-dev/sdk/dist/index.mjs
init_lib8();
var import_eventemitter2 = __toModule(require_eventemitter2());
init_lib8();
var import_utils6 = __toModule(require_utils2());
var import_merkletreejs = __toModule(require_dist());
var import_keccak25613 = __toModule(require_keccak256());
var import_utils7 = __toModule(require_utils2());
var import_deep_equal = __toModule(require_deep_equal());
init_lib2();
init_lib8();
init_lib8();
var import_deep_equal2 = __toModule(require_deep_equal());
init_lib8();
init_lib8();
init_lib8();
init_lib8();
init_lib8();
init_lib8();
var import_utils8 = __toModule(require_utils2());
init_lib8();
var import_utils9 = __toModule(require_utils2());
init_lib8();
var import_utils10 = __toModule(require_utils2());
var import_deep_equal3 = __toModule(require_deep_equal());
init_lib8();
init_lib2();
init_lib8();
var Be = Object.defineProperty;
var Fo = Object.defineProperties;
var Io = Object.getOwnPropertyDescriptors;
var Oe = Object.getOwnPropertySymbols;
var _o = Object.prototype.hasOwnProperty;
var Do = Object.prototype.propertyIsEnumerable;
var ie = (o2, t, r2) => t in o2 ? Be(o2, t, { enumerable: true, configurable: true, writable: true, value: r2 }) : o2[t] = r2;
var T2 = (o2, t) => {
  for (var r2 in t || (t = {}))
    _o.call(t, r2) && ie(o2, r2, t[r2]);
  if (Oe)
    for (var r2 of Oe(t))
      Do.call(t, r2) && ie(o2, r2, t[r2]);
  return o2;
};
var R2 = (o2, t) => Fo(o2, Io(t));
var p2 = (o2, t) => Be(o2, "name", { value: t, configurable: true });
var Me = ((o2) => typeof __require != "undefined" ? __require : typeof Proxy != "undefined" ? new Proxy(o2, { get: (t, r2) => (typeof __require != "undefined" ? __require : t)[r2] }) : o2)(function(o2) {
  if (typeof __require != "undefined")
    return __require.apply(this, arguments);
  throw new Error('Dynamic require of "' + o2 + '" is not supported');
});
var g2 = (o2, t, r2) => (ie(o2, typeof t != "symbol" ? t + "" : t, r2), r2);
var x3 = class {
  constructor(t) {
    this.contractWrapper = t;
  }
  encode(t, r2) {
    return this.contractWrapper.readContract.interface.encodeFunctionData(t, r2);
  }
  decode(t, r2) {
    return this.contractWrapper.readContract.interface.decodeFunctionData(t, r2);
  }
};
p2(x3, "ContractEncoder");
var W2 = class {
  constructor(t, r2, e) {
    this.contractWrapper = t, this.schema = r2, this.storage = e;
  }
  parseOutputMetadata(t) {
    return this.schema.output.parse(t);
  }
  parseInputMetadata(t) {
    return this.schema.input.parse(t);
  }
  async get() {
    let t = await this.contractWrapper.readContract.contractURI(), r2 = await this.storage.get(t);
    return this.parseOutputMetadata(r2);
  }
  async set(t) {
    let r2 = await this._parseAndUploadMetadata(t);
    return { receipt: await this.contractWrapper.sendTransaction("setContractURI", [r2]), data: this.get };
  }
  async update(t) {
    return await this.set(T2(T2({}, await this.get()), t));
  }
  async _parseAndUploadMetadata(t) {
    let r2 = this.parseInputMetadata(t);
    return this.storage.uploadMetadata(r2);
  }
};
p2(W2, "ContractMetadata");
var No = { admin: "", transfer: "TRANSFER_ROLE", minter: "MINTER_ROLE", pauser: "PAUSER_ROLE", editor: "EDITOR_ROLE", lister: "LISTER_ROLE", asset: "ASSET_ROLE" };
function D2(o2) {
  return o2 === "admin" ? ethers_exports.utils.hexZeroPad([0], 32) : ethers_exports.utils.id(No[o2]);
}
p2(D2, "getRoleHash");
var dt = class extends Error {
  constructor(t) {
    super(t ? `Object with id ${t} NOT FOUND` : "NOT_FOUND");
  }
};
p2(dt, "NotFoundError");
var Ue = class extends Error {
  constructor(t) {
    super(t ? `'${t}' is an invalid address` : "Invalid address passed");
  }
};
p2(Ue, "InvalidAddressError");
var Tr = class extends Error {
  constructor(t, r2) {
    super(`MISSING ROLE: ${t} does not have the '${r2}' role`);
  }
};
p2(Tr, "MissingRoleError");
var $e = class extends Error {
  constructor(t = "The asset you're trying to use could not be found.") {
    super(`message: ${t}`);
  }
};
p2($e, "AssetNotFoundError");
var br = class extends Error {
  constructor(t) {
    super(`UPLOAD_FAILED: ${t}`);
  }
};
p2(br, "UploadError");
var Ve = class extends Error {
  constructor() {
    super("File name is required when object is not a `File` type object.");
  }
};
p2(Ve, "FileNameMissingError");
var Ar = class extends Error {
  constructor(t) {
    super(`DUPLICATE_FILE_NAME_ERROR: File name ${t} was passed for more than one file.`);
  }
};
p2(Ar, "DuplicateFileNameError");
var Ge = class extends Error {
  constructor(t, r2, e) {
    super(`BALANCE ERROR: you do not have enough balance on contract ${t} to use ${r2} tokens. You have ${e} tokens available.`);
  }
};
p2(Ge, "NotEnoughTokensError");
var He = class extends Error {
  constructor() {
    super("LIST ERROR: you should be the owner of the token to list it.");
  }
};
p2(He, "MissingOwnerRoleError");
var je = class extends Error {
  constructor(t) {
    super(`BUY ERROR: You cannot buy more than ${t} tokens`);
  }
};
p2(je, "QuantityAboveLimitError");
var Wr = class extends Error {
  constructor(t, r2) {
    super(`FETCH_FAILED: ${t}`);
    this.innerError = r2;
  }
};
p2(Wr, "FetchError");
var vr = class extends Error {
  constructor(t) {
    super(`DUPLICATE_LEAFS${t ? ` : ${t}` : ""}`);
  }
};
p2(vr, "DuplicateLeafsError");
var xr = class extends Error {
  constructor(t) {
    super(`Auction already started with existing bid${t ? `, id: ${t}` : ""}`);
  }
};
p2(xr, "AuctionAlreadyStartedError");
var ze = class extends Error {
  constructor(t) {
    super(`FUNCTION DEPRECATED. ${t ? `Use ${t} instead` : ""}`);
  }
};
p2(ze, "FunctionDeprecatedError");
var yt = class extends Error {
  constructor(t, r2) {
    super(`Could not find listing.${t ? ` marketplace address: ${t}` : ""}${r2 ? ` listing id: ${r2}` : ""}`);
  }
};
p2(yt, "ListingNotFoundError");
var Mt = class extends Error {
  constructor(t, r2, e, a) {
    super(`Incorrect listing type. Are you sure you're using the right method?.${t ? ` marketplace address: ${t}` : ""}${r2 ? ` listing id: ${r2}` : ""}${a ? ` expected type: ${a}` : ""}${e ? ` actual type: ${e}` : ""}`);
  }
};
p2(Mt, "WrongListingTypeError");
var Ze2 = class extends Error {
  constructor(t) {
    super(`Failed to transfer asset, transfer is restricted.${t ? ` Address : ${t}` : ""}`);
  }
};
p2(Ze2, "RestrictedTransferError");
var Ke = class extends Error {
  constructor(t, r2, e = "Failed to execute transaction") {
    super(`${e}, admin role is missing${t ? ` on address: ${t}` : ""}${r2 ? ` on contract: ${r2}` : ""}`);
  }
};
p2(Ke, "AdminRoleMissingError");
var Er = class extends Error {
  constructor(t, r2) {
    super(`Auction has not ended yet${t ? `, id: ${t}` : ""}${r2 ? `, end time: ${r2.toString()}` : ""}`);
  }
};
p2(Er, "AuctionHasNotEndedError");
var ce = class extends Error {
  constructor(t, r2, e, a, n, s2, i2) {
    let c2 = `Contract transaction failed

`;
    c2 += `Message: ${t}`, c2 += `

| Transaction info |
`, c2 += Xt("from", r2), c2 += Xt("to", e), c2 += Xt("data", a), c2 += Xt("chain", `${n.name} (${n.chainId})`);
    try {
      let d2 = new URL(s2);
      c2 += Xt("RPC", d2.hostname);
    } catch {
    }
    c2 += `

`, c2 += "Need help with this error? Join our community: https://discord.gg/thirdweb", c2 += `



`, c2 += "| Raw error |", c2 += `

`, c2 += i2;
    super(c2);
    this.reason = t, this.from = r2, this.to = e, this.data = a, this.chain = n, this.rpcUrl = s2;
  }
};
p2(ce, "TransactionError");
async function qe(o2, t, r2, e) {
  let a;
  if (o2.data)
    a = JSON.stringify(o2.data);
  else if (o2 instanceof Error)
    a = o2.message;
  else
    return o2;
  let n = tr(/.*?"message[^a-zA-Z0-9]*([^"\\]*).*?/, a), s2 = tr(/.*?"data[^a-zA-Z0-9]*([^"\\]*).*?/, a), i2 = tr(/.*?"url[^a-zA-Z0-9]*([^"\\]*).*?/, a), c2 = tr(/.*?"from[^a-zA-Z0-9]*([^"\\]*).*?/, a), d2 = tr(/.*?"to[^a-zA-Z0-9]*([^"\\]*).*?/, a);
  return d2 === "" && (d2 = e), c2 === "" && (c2 = r2), new ce(n, c2, d2, s2, t, i2, a);
}
p2(qe, "convertToTWError");
function Xt(o2, t) {
  if (t === "")
    return t;
  let r2 = Array(10 - o2.length).fill(" ").join("");
  return `
${o2}:${r2}${t}`;
}
p2(Xt, "withSpaces");
function tr(o2, t) {
  let r2 = t.match(o2) || [], e = "";
  return (r2 == null ? void 0 : r2.length) > 0 && (e += r2[1]), e;
}
p2(tr, "parseMessageParts");
var K2 = class {
  constructor(t, r2) {
    this.contractWrapper = t, this.roles = r2;
  }
  async getAll() {
    invariant(this.roles.length, "this contract has no support for roles");
    let t = {};
    for (let r2 of this.roles)
      t[r2] = await this.get(r2);
    return t;
  }
  async get(t) {
    invariant(this.roles.includes(t), `this contract does not support the "${t}" role`);
    let r2 = D2(t), e = (await this.contractWrapper.readContract.getRoleMemberCount(r2)).toNumber();
    return await Promise.all(Array.from(Array(e).keys()).map((a) => this.contractWrapper.readContract.getRoleMember(r2, a)));
  }
  async setAll(t) {
    let r2 = Object.keys(t);
    invariant(r2.length, "you must provide at least one role to set"), invariant(r2.every((n) => this.roles.includes(n)), "this contract does not support the given role");
    let e = await this.getAll(), a = [];
    return r2.sort((n) => n === "admin" ? 1 : -1).forEach(async (n) => {
      let s2 = t[n] || [], i2 = e[n] || [], c2 = s2.filter((m3) => !i2.includes(m3)), d2 = i2.filter((m3) => !s2.includes(m3));
      c2.length && c2.forEach((m3) => {
        a.push(this.contractWrapper.readContract.interface.encodeFunctionData("grantRole", [D2(n), m3]));
      }), d2.length && d2.forEach(async (m3) => {
        let h2 = await this.getRevokeRoleFunctionName(m3);
        a.push(this.contractWrapper.readContract.interface.encodeFunctionData(h2, [D2(n), m3]));
      });
    }), { receipt: await this.contractWrapper.multiCall(a) };
  }
  async verify(t, r2) {
    await Promise.all(t.map(async (e) => {
      if (!(await this.get(e)).map((n) => n.toLowerCase()).includes(r2.toLowerCase()))
        throw new Tr(r2, e);
    }));
  }
  async grant(t, r2) {
    return invariant(this.roles.includes(t), `this contract does not support the "${t}" role`), { receipt: await this.contractWrapper.sendTransaction("grantRole", [D2(t), r2]) };
  }
  async revoke(t, r2) {
    invariant(this.roles.includes(t), `this contract does not support the "${t}" role`);
    let e = await this.getRevokeRoleFunctionName(r2);
    return { receipt: await this.contractWrapper.sendTransaction(e, [D2(t), r2]) };
  }
  async getRevokeRoleFunctionName(t) {
    return (await this.contractWrapper.getSignerAddress()).toLowerCase() === t.toLowerCase() ? "renounceRole" : "revokeRole";
  }
};
p2(K2, "ContractRoles");
globalThis.File || (globalThis.File = Me("@web-std/file").File);
var de = 1e4;
var Bo = p2(() => typeof window < "u", "isBrowser");
var Mo = Bo() ? [mod.instanceof(File), mod.string()] : [mod.instanceof(Buffer), mod.string()];
var At = mod.union(Mo);
var Je = mod.union([mod.array(mod.number()), mod.string()]);
var b = mod.union([mod.string(), mod.number(), mod.bigint(), mod.instanceof(BigNumber)]).transform((o2) => BigNumber.from(o2));
var at2 = b.transform((o2) => o2.toString());
var Wt = mod.number().max(de, "Cannot exeed 100%").min(0, "Cannot be below 0%");
var Qe = mod.number().max(100, "Cannot exeed 100%").min(0, "Cannot be below 0%");
var Lo = mod.union([mod.string(), mod.number(), mod.boolean(), mod.null()]);
var wt = mod.lazy(() => mod.union([Lo, mod.array(wt), mod.record(wt)]));
var Ye = mod.record(wt);
var Xe = mod.union([mod.string().regex(/^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/, "Invalid hex color").transform((o2) => o2.replace("#", "")), mod.string().length(0)]);
var ot = mod.string().refine((o2) => (0, import_utils3.isAddress)(o2), (o2) => ({ message: `${o2} is not a valid address` }));
var vt = mod.union([mod.string().regex(/^([0-9]+\.?[0-9]*|\.[0-9]+)$/, "Invalid price"), mod.number().min(0, "Price cannot be negative")]).transform((o2) => typeof o2 == "number" ? o2.toString() : o2);
var ta = mod.date().transform((o2) => BigNumber.from(Math.floor(o2.getTime() / 1e3)));
var kr = ta.default(new Date());
var ra = ta.default(new Date(Date.now() + 1e3 * 60 * 60 * 24 * 365 * 10));
var f2;
(function(o2) {
  o2[o2.Mainnet = 1] = "Mainnet", o2[o2.Ropsten = 3] = "Ropsten", o2[o2.Rinkeby = 4] = "Rinkeby", o2[o2.Goerli = 5] = "Goerli", o2[o2.Kovan = 42] = "Kovan", o2[o2.BSC = 56] = "BSC", o2[o2.xDai = 100] = "xDai", o2[o2.Polygon = 137] = "Polygon", o2[o2.Moonriver = 1285] = "Moonriver", o2[o2.Mumbai = 80001] = "Mumbai", o2[o2.Harmony = 16666e5] = "Harmony", o2[o2.Localhost = 1337] = "Localhost", o2[o2.Hardhat = 31337] = "Hardhat", o2[o2.Fantom = 250] = "Fantom", o2[o2.FantomTestnet = 4002] = "FantomTestnet", o2[o2.Avalanche = 43114] = "Avalanche", o2[o2.AvalancheFujiTestnet = 43113] = "AvalancheFujiTestnet";
})(f2 || (f2 = {}));
var ea = [f2.Mainnet, f2.Rinkeby, f2.Goerli, f2.Polygon, f2.Mumbai, f2.Fantom, f2.FantomTestnet, f2.Avalanche, f2.AvalancheFujiTestnet];
var xt2 = "0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee";
var Uo = { [f2.Mainnet]: { name: "Ether", symbol: "ETH", decimals: 18, wrapped: { address: "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2", name: "Wrapped Ether", symbol: "WETH" } }, [f2.Rinkeby]: { name: "Ether", symbol: "ETH", decimals: 18, wrapped: { address: "0xc778417E063141139Fce010982780140Aa0cD5Ab", name: "Wrapped Ether", symbol: "WETH" } }, [f2.Goerli]: { name: "Ether", symbol: "ETH", decimals: 18, wrapped: { address: "0x0bb7509324ce409f7bbc4b701f932eaca9736ab7", name: "Wrapped Ether", symbol: "WETH" } }, [f2.Polygon]: { name: "Matic", symbol: "MATIC", decimals: 18, wrapped: { address: "0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270", name: "Wrapped Matic", symbol: "WMATIC" } }, [f2.Mumbai]: { name: "Matic", symbol: "MATIC", decimals: 18, wrapped: { address: "0x9c3C9283D3e44854697Cd22D3Faa240Cfb032889", name: "Wrapped Matic", symbol: "WMATIC" } }, [f2.Avalanche]: { name: "Avalanche", symbol: "AVAX", decimals: 18, wrapped: { address: "0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7", name: "Wrapped AVAX", symbol: "WAVAX" } }, [f2.AvalancheFujiTestnet]: { name: "Avalanche", symbol: "AVAX", decimals: 18, wrapped: { address: "0xd00ae08403B9bbb9124bB305C09058E32C39A48c", name: "Wrapped AVAX", symbol: "WAVAX" } }, [f2.Fantom]: { name: "Fantom", symbol: "FTM", decimals: 18, wrapped: { address: "0x21be370D5312f44cB42ce377BC9b8a0cEF1A4C83", name: "Wrapped Fantom", symbol: "WFTM" } }, [f2.FantomTestnet]: { name: "Fantom", symbol: "FTM", decimals: 18, wrapped: { address: "0xf1277d1Ed8AD466beddF92ef448A132661956621", name: "Wrapped Fantom", symbol: "WFTM" } }, [f2.Hardhat]: { name: "Ether", symbol: "ETH", decimals: 18, wrapped: { address: "0x5FbDB2315678afecb367f032d93F642f64180aa3", name: "Wrapped Ether", symbol: "WETH" } } };
function aa(o2) {
  return Uo[o2];
}
p2(aa, "getNativeTokenByChainId");
var $o = mod.object({ name: mod.string(), symbol: mod.string(), decimals: mod.number() });
var oa = $o.extend({ value: b, displayValue: mod.string() });
var Ut = mod.object({ merkle: mod.record(mod.string()).default({}) });
var me = mod.object({ address: mod.string(), maxClaimable: mod.number().default(0) });
var $t = mod.union([mod.array(mod.string()).transform((o2) => o2.map((t) => me.parse({ address: t }))), mod.array(me)]);
var er = mod.object({ merkleRoot: mod.string(), claims: mod.array(me.extend({ proof: mod.array(mod.string()) })) });
var fi = mod.object({ merkleRoot: mod.string(), snapshotUri: mod.string(), snapshot: er });
var or = mod.object({ startTime: kr, currencyAddress: mod.string().default(xt2), price: vt.default(0), maxQuantity: at2.default(ethers_exports.constants.MaxUint256), quantityLimitPerTransaction: at2.default(ethers_exports.constants.MaxUint256), waitInSeconds: at2.default(0), merkleRootHash: Je.default((0, import_utils4.hexZeroPad)([0], 32)), snapshot: mod.optional($t) });
var sa = mod.array(or);
var Wi = or.partial();
var le = or.extend({ availableSupply: mod.string().default(""), currencyMetadata: oa.default({ value: BigNumber.from("0"), displayValue: "0", symbol: "", decimals: 18, name: "" }), price: b, maxQuantity: b, quantityLimitPerTransaction: b, waitInSeconds: b, startTime: b.transform((o2) => new Date(o2.toNumber() * 1e3)) });
var ia = wt.or(At);
var Ho = mod.union([mod.array(mod.object({ key: mod.string(), value: ia })).superRefine((o2, t) => {
  if (!o2)
    return;
  let r2 = {};
  o2.forEach(({ key: e }, a) => {
    r2[e] || (r2[e] = 0), r2[e]++, r2[e] > 1 && t.addIssue({ code: mod.ZodIssueCode.custom, message: `Duplicate key: ${e}`, path: [a, "key"] });
  });
}), mod.record(ia)]).optional();
var ca = mod.preprocess((o2) => {
  let t = o2;
  return Array.isArray(t) ? t.filter((r2) => r2.value) : t;
}, Ho).transform((o2) => Array.isArray(o2) ? o2.reduce((t, r2) => R2(T2({}, t), { [r2.key]: r2.value }), {}) : o2);
var pa = Ye.optional();
var da = mod.object({ name: mod.string().nonempty({ message: "A name is required." }), description: mod.string().optional(), image: At.optional(), external_url: At.optional() }).catchall(mod.lazy(() => wt));
var jo = da.extend({ id: b, uri: mod.string(), image: mod.string().optional(), external_url: mod.string().optional() });
var Y2 = da.extend({ animation_url: At.optional(), background_color: Xe.optional(), properties: ca });
var Pr = mod.union([Y2, mod.string()]);
var Rr = jo.extend({ animation_url: mod.string().optional(), properties: pa });
function la(o2) {
  if (o2 === void 0) {
    let t = Buffer.alloc(16);
    return v4_default({}, t), (0, import_utils5.hexlify)((0, import_utils5.toUtf8Bytes)(t.toString("hex")));
  } else
    return (0, import_utils5.hexlify)(o2);
}
p2(la, "resolveOrGenerateId");
var Fr = mod.object({ metadata: Pr, to: mod.string().default(AddressZero), price: vt.default(0), currencyAddress: mod.string().default(xt2), mintStartTime: kr, mintEndTime: ra, uid: mod.string().optional().transform((o2) => la(o2)), royaltyRecipient: mod.string().default(AddressZero), royaltyBps: Wt.default(0), primarySaleRecipient: mod.string().default(AddressZero) });
var he = Fr.extend({ uri: mod.string(), royaltyBps: b, mintStartTime: b, mintEndTime: b });
var ua = Fr.extend({ tokenId: at2.default(ethers_exports.constants.MaxUint256), quantity: at2 });
var ha = he.extend({ tokenId: b, quantity: b });
var fa = [{ name: "to", type: "address" }, { name: "royaltyRecipient", type: "address" }, { name: "royaltyBps", type: "uint256" }, { name: "primarySaleRecipient", type: "address" }, { name: "uri", type: "string" }, { name: "price", type: "uint256" }, { name: "currency", type: "address" }, { name: "validityStartTimestamp", type: "uint128" }, { name: "validityEndTimestamp", type: "uint128" }, { name: "uid", type: "bytes32" }];
var ga = [{ name: "to", type: "address" }, { name: "royaltyRecipient", type: "address" }, { name: "royaltyBps", type: "uint256" }, { name: "primarySaleRecipient", type: "address" }, { name: "tokenId", type: "uint256" }, { name: "uri", type: "string" }, { name: "quantity", type: "uint256" }, { name: "pricePerToken", type: "uint256" }, { name: "currency", type: "address" }, { name: "validityStartTimestamp", type: "uint128" }, { name: "validityEndTimestamp", type: "uint128" }, { name: "uid", type: "bytes32" }];
var v2 = mod.object({ name: mod.string(), description: mod.string().optional(), image: At.optional(), external_link: mod.string().url().optional() });
var E2 = v2.extend({ image: mod.string().optional() }).catchall(mod.lazy(() => wt));
var O2 = mod.object({ seller_fee_basis_points: Wt.default(0), fee_recipient: ot.default(AddressZero) });
var lt = mod.object({ primary_sale_recipient: ot });
var q2 = mod.object({ platform_fee_basis_points: Wt.default(0), platform_fee_recipient: ot.default(AddressZero) });
var B2 = mod.object({ trusted_forwarders: mod.array(ot).default([]) });
var J2 = mod.object({ symbol: mod.string().optional().default("") });
var nt = class {
  constructor(t, r2) {
    this.contractWrapper = t, this.metadata = r2;
  }
  async getDefaultRoyaltyInfo() {
    let [t, r2] = await this.contractWrapper.readContract.getDefaultRoyaltyInfo();
    return O2.parse({ fee_recipient: t, seller_fee_basis_points: r2 });
  }
  async getTokenRoyaltyInfo(t) {
    let [r2, e] = await this.contractWrapper.readContract.getRoyaltyInfoForToken(t);
    return O2.parse({ fee_recipient: r2, seller_fee_basis_points: e });
  }
  async setDefaultRoyaltyInfo(t) {
    let r2 = await this.metadata.get(), e = this.metadata.parseInputMetadata(T2(T2({}, r2), t)), a = await this.metadata._parseAndUploadMetadata(e), n = [this.contractWrapper.readContract.interface.encodeFunctionData("setDefaultRoyaltyInfo", [e.fee_recipient, e.seller_fee_basis_points]), this.contractWrapper.readContract.interface.encodeFunctionData("setContractURI", [a])];
    return { receipt: await this.contractWrapper.multiCall(n), data: () => this.getDefaultRoyaltyInfo() };
  }
  async setTokenRoyaltyInfo(t, r2) {
    return { receipt: await this.contractWrapper.sendTransaction("setRoyaltyInfoForToken", [t, r2.fee_recipient, r2.seller_fee_basis_points]), data: () => this.getDefaultRoyaltyInfo() };
  }
};
p2(nt, "ContractRoyalty");
var ut2 = class {
  constructor(t) {
    this.contractWrapper = t;
  }
  async getRecipient() {
    return await this.contractWrapper.readContract.primarySaleRecipient();
  }
  async setRecipient(t) {
    return { receipt: await this.contractWrapper.sendTransaction("setPrimarySaleRecipient", [t]) };
  }
};
p2(ut2, "ContractPrimarySale");
var nr = "0xc82BbE41f2cF04e3a8efA18F7032BDD7f6d98a81";
var Ct = "0x7c487845f98938Bb955B1D5AD069d9a30e4131fd";
var St = "0x11c34F062Cb10a20B9F463E12Ff9dA62D76FDf65";
var fe = { [f2.Mainnet]: { biconomyForwarder: "0x84a0856b038eaAd1cC7E297cF34A7e72685A8693", twFactory: St, twRegistry: Ct }, [f2.Rinkeby]: { biconomyForwarder: "0xFD4973FeB2031D4409fB57afEE5dF2051b171104", twFactory: St, twRegistry: Ct }, [f2.Goerli]: { biconomyForwarder: AddressZero, twFactory: St, twRegistry: Ct }, [f2.Polygon]: { biconomyForwarder: "0x86C80a8aa58e0A4fa09A69624c31Ab2a6CAD56b8", twFactory: St, twRegistry: Ct }, [f2.Mumbai]: { biconomyForwarder: "0x9399BB24DBB5C4b782C70c2969F58716Ebbd6a3b", twFactory: St, twRegistry: Ct }, [f2.Avalanche]: { biconomyForwarder: "0x64CD353384109423a966dCd3Aa30D884C9b2E057", twFactory: St, twRegistry: Ct }, [f2.AvalancheFujiTestnet]: { biconomyForwarder: "0x6271Ca63D30507f2Dcbf99B52787032506D75BBF", twFactory: St, twRegistry: Ct }, [f2.Fantom]: { biconomyForwarder: AddressZero, twFactory: St, twRegistry: Ct }, [f2.FantomTestnet]: { biconomyForwarder: AddressZero, twFactory: St, twRegistry: Ct } };
function sr(o2, t) {
  return o2 === f2.Hardhat ? t === "twFactory" ? define_process_default.env.factoryAddress : t === "twRegistry" ? define_process_default.env.registryAddress : AddressZero : fe[o2][t];
}
p2(sr, "getContractAddressByChainId");
var st = mod.object({ readonlySettings: mod.object({ rpcUrl: mod.string().url(), chainId: mod.number().optional() }).optional(), gasSettings: mod.object({ maxPriceInGwei: mod.number().min(1, "gas price cannot be less than 1").default(300), speed: mod.enum(["standard", "fast", "fastest"]).default("fastest") }).default({ maxPriceInGwei: 300, speed: "fastest" }), gasless: mod.union([mod.object({ openzeppelin: mod.object({ relayerUrl: mod.string().url(), relayerForwarderAddress: mod.string().default(nr) }) }), mod.object({ biconomy: mod.object({ apiId: mod.string(), apiKey: mod.string(), deadlineSeconds: mod.number().min(1, "deadlineSeconds cannot be les than 1").default(3600) }) })]).optional() }).default({ gasSettings: { maxPriceInGwei: 300, speed: "fastest" } });
var Et = class extends import_eventemitter2.EventEmitter2 {
  constructor(t, r2) {
    super();
    let [e, a] = this.getSignerAndProvider(t, r2);
    this.signer = e, this.provider = a;
    try {
      this.options = st.parse(r2);
    } catch (n) {
      console.error("invalid sdk options object passed, falling back to default options", n), this.options = st.parse({});
    }
  }
  updateSignerOrProvider(t) {
    let [r2, e] = this.getSignerAndProvider(t, this.options);
    this.signer = r2, this.provider = e;
  }
  isReadOnly() {
    return !Signer.isSigner(this.signer);
  }
  getSigner() {
    return this.signer;
  }
  getProvider() {
    return this.provider;
  }
  getSignerOrProvider() {
    return this.getSigner() || this.getProvider();
  }
  getSignerAndProvider(t, r2) {
    var n;
    let e, a;
    return Signer.isSigner(t) && (e = t, t.provider && (a = t.provider)), r2 != null && r2.readonlySettings && (a = this.getReadOnlyProvider(r2.readonlySettings.rpcUrl, r2.readonlySettings.chainId)), a || (Provider.isProvider(t) ? a = t : Signer.isSigner(t) || (typeof t == "string" ? a = this.getReadOnlyProvider(t, (n = r2 == null ? void 0 : r2.readonlySettings) == null ? void 0 : n.chainId) : a = ethers_exports.getDefaultProvider(t))), a || (a = ethers_exports.getDefaultProvider(), console.error("No provider found, using default provider on default chain!")), [e, a];
  }
  getReadOnlyProvider(t, r2) {
    try {
      let e = t.match(/^(ws|http)s?:/i);
      if (e)
        switch (e[1]) {
          case "http":
            return new JsonRpcBatchProvider(t, r2);
          case "ws":
            return new WebSocketProvider(t, r2);
          default:
            return ethers_exports.getDefaultProvider(t);
        }
      else
        return ethers_exports.getDefaultProvider(t);
    } catch {
      return ethers_exports.getDefaultProvider(t);
    }
  }
};
p2(Et, "RPCConnectionHandler");
var ht;
(function(o2) {
  o2.Transaction = "transaction", o2.Signature = "signature";
})(ht || (ht = {}));
var Ca = [{ name: "from", type: "address" }, { name: "to", type: "address" }, { name: "value", type: "uint256" }, { name: "gas", type: "uint256" }, { name: "nonce", type: "uint256" }, { name: "data", type: "bytes" }];
var Sa = [{ inputs: [{ internalType: "address", name: "from", type: "address" }, { internalType: "uint256", name: "batchId", type: "uint256" }], name: "getNonce", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }];
var Vt = {};
var wa = {};
async function we(o2, t, r2) {
  let e = r2.join("|"), a = wa[e], n = Date.now() - a >= 2e3;
  if (!(e in Vt) || n) {
    let i2 = await o2.functions[t](...r2);
    Array.isArray(i2) && i2.length > 0 ? Vt[e] = BigNumber.from(i2[0]) : Vt[e] = BigNumber.from(i2), wa[e] = Date.now();
  }
  let s2 = Vt[e];
  return Vt[e] = BigNumber.from(Vt[e]).add(1), s2;
}
p2(we, "getAndIncrementNonce");
async function cr(o2, t, r2, e) {
  var i2, c2;
  let a = o2 == null ? void 0 : o2.provider;
  if (!a)
    throw new Error("missing provider");
  let n = ethers_exports.utils._TypedDataEncoder.getPayload(t, r2, e), s2 = "";
  if ((i2 = a == null ? void 0 : a.provider) != null && i2.isWalletConnect)
    s2 = await a.send("eth_signTypedData", [(await o2.getAddress()).toLowerCase(), JSON.stringify(n)]);
  else
    try {
      s2 = await o2._signTypedData(t, r2, e);
    } catch (d2) {
      if ((c2 = d2 == null ? void 0 : d2.message) != null && c2.includes("Method eth_signTypedData_v4 not supported"))
        s2 = await a.send("eth_signTypedData", [(await o2.getAddress()).toLowerCase(), JSON.stringify(n)]);
      else
        throw d2;
    }
  return { payload: n, signature: ethers_exports.utils.joinSignature(ethers_exports.utils.splitSignature(s2)) };
}
p2(cr, "signTypedDataInternal");
var tn = [{ inputs: [], name: "name", outputs: [{ internalType: "string", name: "", type: "string" }], stateMutability: "view", type: "function" }];
var rn = [{ constant: true, inputs: [], name: "DOMAIN_SEPARATOR", outputs: [{ internalType: "bytes32", name: "", type: "bytes32" }], payable: false, stateMutability: "view", type: "function" }, { inputs: [], name: "getDomainSeperator", outputs: [{ internalType: "bytes32", name: "", type: "bytes32" }], stateMutability: "view", type: "function" }];
var en = [{ inputs: [{ internalType: "address", name: "owner", type: "address" }], name: "nonces", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "user", type: "address" }], name: "getNonce", outputs: [{ internalType: "uint256", name: "nonce", type: "uint256" }], stateMutability: "view", type: "function" }];
async function an(o2, t) {
  let r2 = new Contract(t, en, o2);
  try {
    return await r2.nonces(await o2.getAddress());
  } catch {
    return await r2.getNonce(await o2.getAddress());
  }
}
p2(an, "getSignerNonce");
async function on(o2, t) {
  let r2 = new Contract(t, rn, o2);
  try {
    return await r2.DOMAIN_SEPARATOR();
  } catch {
    return await r2.getDomainSeperator();
  }
}
p2(on, "getDomainSeperator");
async function nn(o2, t) {
  return new Contract(t, tn, o2).name();
}
p2(nn, "getTokenName");
async function sn(o2, t) {
  let r2 = await on(o2, t.verifyingContract), e = { name: t.name, version: t.version, verifyingContract: t.verifyingContract, salt: ethers_exports.utils.hexZeroPad(BigNumber.from(t.chainId).toHexString(), 32) };
  return ethers_exports.utils._TypedDataEncoder.hashDomain(e) === r2 ? e : t;
}
p2(sn, "getChainDomainSeperator");
async function Ta(o2, t, r2, e, a, n, s2) {
  let i2 = await sn(o2, { name: await nn(o2, t), version: "1", chainId: await o2.getChainId(), verifyingContract: t });
  s2 = s2 != null ? s2 : (await an(o2, t)).toString(), n = n != null ? n : ethers_exports.constants.MaxUint256;
  let c2 = { owner: r2, spender: e, value: a, nonce: s2, deadline: n }, d2 = { Permit: [{ name: "owner", type: "address" }, { name: "spender", type: "address" }, { name: "value", type: "uint256" }, { name: "nonce", type: "uint256" }, { name: "deadline", type: "uint256" }] }, { signature: m3 } = await cr(o2, i2, d2, c2);
  return { message: c2, signature: m3 };
}
p2(Ta, "signEIP2612Permit");
function cn(o2) {
  switch (o2) {
    case f2.Polygon:
      return "https://gasstation-mainnet.matic.network/v2";
    case f2.Mumbai:
      return "https://gasstation-mumbai.matic.today/v2";
  }
}
p2(cn, "getGasStationUrl");
var pn = ethers_exports.utils.parseUnits("31", "gwei");
var dn = ethers_exports.utils.parseUnits("1", "gwei");
function mn(o2) {
  switch (o2) {
    case f2.Polygon:
      return pn;
    case f2.Mumbai:
      return dn;
  }
}
p2(mn, "getDefaultGasFee");
async function ba(o2) {
  let t = cn(o2);
  try {
    let e = (await (await fetch(t)).json()).standard.maxPriorityFee;
    if (e > 0) {
      let a = parseFloat(e).toFixed(9);
      return ethers_exports.utils.parseUnits(a, "gwei");
    }
  } catch (r2) {
    console.error("failed to fetch gas", r2);
  }
  return mn(o2);
}
p2(ba, "getPolygonGasPriorityFee");
var dr = { [f2.Polygon]: { vrfCoordinator: "0x3d2341ADb2D31f1c5530cDC622016af293177AE0", linkTokenAddress: "0xb0897686c545045aFc77CF20eC7A532E3120E0F1", keyHash: "0xf86195cf7690c55907b2b611ebb7343a6f649bff128701cc542f0569e2c549da", fees: ethers_exports.utils.parseEther("0.0001") }, [f2.Mumbai]: { vrfCoordinator: "0x8C7382F9D8f56b33781fE506E897a4F1e2d17255", linkTokenAddress: "0x326C977E6efc84E512bB9C30f76E30c160eD06FB", keyHash: "0x6e75b569a01ef56d18cab6a8e71e6600d6ce853834d4a5748b720d06f878b3a4", fees: ethers_exports.utils.parseEther("0.0001") }, [f2.Rinkeby]: { vrfCoordinator: "0xb3dCcb4Cf7a26f6cf6B120Cf5A73875B7BBc655B", linkTokenAddress: "0x01be23585060835e02b77ef475b0cc51aa1e0709", keyHash: "0x2ed0feb3e7fd2022120aa84fab1945545a9f2ffc9076fd6156fa96eaff4c1311", fees: ethers_exports.utils.parseEther("0.1") }, [f2.Mainnet]: { vrfCoordinator: "0xf0d54349aDdcf704F77AE15b96510dEA15cb7952", linkTokenAddress: "0x514910771AF9Ca656af840dff83E8264EcF986CA", keyHash: "0xAA77729D3466CA35AE8D28B3BBAC7CC36A5031EFDC430821C02BC31A238AF445", fees: ethers_exports.utils.parseEther("2") }, [f2.Hardhat]: { vrfCoordinator: "0x8C7382F9D8f56b33781fE506E897a4F1e2d17255", linkTokenAddress: "0x326C977E6efc84E512bB9C30f76E30c160eD06FB", keyHash: "0x6e75b569a01ef56d18cab6a8e71e6600d6ce853834d4a5748b720d06f878b3a4", fees: ethers_exports.utils.parseEther("0.0001") } };
var _t = (0, import_utils6.arrayify)("0x80ac58cd");
var Dt = (0, import_utils6.arrayify)("0xd9b67a26");
var Wa = "https://gateway.ipfscdn.io/ipfs/";
var va = "https://upload.nftlabs.co";
var xa = "https://api.pinata.cloud/pinning/pinFileToIPFS";
async function Ea(o2, t) {
  let r2 = $t.parse(o2), e = r2.map((d2) => d2.address);
  if (new Set(e).size < e.length)
    throw new vr();
  let n = r2.map((d2) => gn(d2.address, d2.maxClaimable)), s2 = new import_merkletreejs.default(n, import_keccak25613.default, { sort: true }), i2 = er.parse({ merkleRoot: s2.getHexRoot(), claims: r2.map((d2, m3) => {
    let h2 = s2.getHexProof(n[m3]);
    return { address: d2.address, maxClaimable: d2.maxClaimable, proof: h2 };
  }) }), c2 = await t.uploadMetadata(i2);
  return { merkleRoot: s2.getHexRoot(), snapshotUri: c2, snapshot: i2 };
}
p2(Ea, "createSnapshot");
function gn(o2, t) {
  return ethers_exports.utils.solidityKeccak256(["address", "uint256"], [o2, BigNumber.from(t)]);
}
p2(gn, "hashLeafNode");
var C2 = class extends Et {
  constructor(t, r2, e, a) {
    super(t, a);
    this.writeContract = new Contract(r2, e, this.getSignerOrProvider()), this.readContract = this.writeContract.connect(this.getProvider());
  }
  updateSignerOrProvider(t) {
    super.updateSignerOrProvider(t), this.writeContract = this.writeContract.connect(this.getSignerOrProvider()), this.readContract = this.writeContract.connect(this.getProvider());
  }
  async getChainID() {
    let t = this.getProvider(), { chainId: r2 } = await t.getNetwork();
    return r2;
  }
  async getSignerAddress() {
    let t = this.getSigner();
    if (!t)
      throw new Error("This action requires a connected wallet to sign the transaction. Please pass a valid signer to the SDK.");
    return await t.getAddress();
  }
  callStatic() {
    return this.writeContract.callStatic;
  }
  async getCallOverrides() {
    let t = await this.getProvider().getFeeData();
    if (t.maxFeePerGas && t.maxPriorityFeePerGas) {
      let e = await this.getChainID(), a = await this.getProvider().getBlock("latest"), n = a && a.baseFeePerGas ? a.baseFeePerGas : ethers_exports.utils.parseUnits("1", "gwei"), s2;
      e === f2.Mumbai || e === f2.Polygon ? s2 = await ba(e) : s2 = BigNumber.from(t.maxPriorityFeePerGas);
      let i2 = this.getPreferredPriorityFee(s2);
      return { maxFeePerGas: n.mul(2).add(i2), maxPriorityFeePerGas: i2 };
    } else
      return { gasPrice: await this.getPreferredGasPrice() };
  }
  getPreferredPriorityFee(t) {
    let r2 = this.options.gasSettings.speed, e = this.options.gasSettings.maxPriceInGwei, a;
    switch (r2) {
      case "standard":
        a = BigNumber.from(0);
        break;
      case "fast":
        a = t.div(100).mul(5);
        break;
      case "fastest":
        a = t.div(100).mul(10);
        break;
    }
    let n = t.add(a), s2 = ethers_exports.utils.parseUnits(e.toString(), "gwei"), i2 = ethers_exports.utils.parseUnits("2.5", "gwei");
    return n.gt(s2) && (n = s2), n.lt(i2) && (n = i2), n;
  }
  async getPreferredGasPrice() {
    let t = await this.getProvider().getGasPrice(), r2 = this.options.gasSettings.speed, e = this.options.gasSettings.maxPriceInGwei, a = t, n;
    switch (r2) {
      case "standard":
        n = BigNumber.from(1);
        break;
      case "fast":
        n = t.div(100).mul(5);
        break;
      case "fastest":
        n = t.div(100).mul(10);
        break;
    }
    a = a.add(n);
    let s2 = ethers_exports.utils.parseUnits(e.toString(), "gwei");
    return a.gt(s2) && (a = s2), a;
  }
  emitTransactionEvent(t, r2) {
    this.emit(ht.Transaction, { status: t, transactionHash: r2 });
  }
  async multiCall(t) {
    return this.sendTransaction("multicall", [t]);
  }
  async estimateGas(t, r2) {
    return this.writeContract.estimateGas[t](...r2);
  }
  async sendTransaction(t, r2, e) {
    var a;
    if (e || (e = await this.getCallOverrides()), ((a = this.options) == null ? void 0 : a.gasless) && ("openzeppelin" in this.options.gasless || "biconomy" in this.options.gasless)) {
      let n = this.getProvider(), s2 = await this.sendGaslessTransaction(t, r2, e);
      this.emitTransactionEvent("submitted", s2);
      let i2 = await n.waitForTransaction(s2);
      return this.emitTransactionEvent("completed", s2), i2;
    } else {
      let n = await this.sendTransactionByFunction(t, r2, e);
      this.emitTransactionEvent("submitted", n.hash);
      let s2 = n.wait();
      return this.emitTransactionEvent("completed", n.hash), s2;
    }
  }
  async sendTransactionByFunction(t, r2, e) {
    let a = this.writeContract.functions[t];
    if (!a)
      throw new Error("invalid function");
    try {
      return await a(...r2, e);
    } catch (n) {
      let s2 = await this.getProvider().getNetwork(), i2 = await this.getSignerAddress(), c2 = await this.readContract.address;
      throw await qe(n, s2, i2, c2);
    }
  }
  async sendGaslessTransaction(t, r2 = [], e) {
    let a = this.getSigner();
    invariant(a, "Cannot execute gasless transaction without valid signer");
    let n = await this.getChainID(), s2 = await this.getSignerAddress(), i2 = this.writeContract.address, c2 = (e == null ? void 0 : e.value) || 0;
    if (BigNumber.from(c2).gt(0))
      throw new Error("Cannot send native token value with gasless transaction");
    let d2 = this.writeContract.interface.encodeFunctionData(t, r2), m3 = await this.writeContract.estimateGas[t](...r2), h2 = m3.mul(2);
    m3.lt(25e3) && (h2 = BigNumber.from(5e5));
    let y2 = { from: s2, to: i2, data: d2, chainId: n, gasLimit: h2, functionName: t.toString(), functionArgs: r2, callOverrides: e };
    return await this.defaultGaslessSendFunction(y2);
  }
  async signTypedData(t, r2, e, a) {
    this.emit(ht.Signature, { status: "submitted", message: a, signature: "" });
    let { signature: n } = await cr(t, r2, e, a);
    return this.emit(ht.Signature, { status: "completed", message: a, signature: n }), n;
  }
  parseLogs(t, r2) {
    if (!r2 || r2.length === 0)
      return [];
    let e = this.writeContract.interface.getEventTopic(t);
    return r2.filter((n) => n.topics.indexOf(e) >= 0).map((n) => this.writeContract.interface.parseLog(n));
  }
  async defaultGaslessSendFunction(t) {
    return this.options.gasless && "biconomy" in this.options.gasless ? this.biconomySendFunction(t) : this.defenderSendFunction(t);
  }
  async biconomySendFunction(t) {
    var h2, y2;
    invariant(this.options.gasless && "biconomy" in this.options.gasless, "calling biconomySendFunction without biconomy");
    let r2 = this.getSigner(), e = this.getProvider();
    invariant(r2 && e, "signer and provider must be set");
    let a = new ethers_exports.Contract(sr(t.chainId, "biconomyForwarder"), Sa, e), n = 0, s2 = await we(a, "getNonce", [t.from, n]), i2 = { from: t.from, to: t.to, token: ethers_exports.constants.AddressZero, txGas: t.gasLimit.toNumber(), tokenGasPrice: "0", batchId: n, batchNonce: s2.toNumber(), deadline: Math.floor(Date.now() / 1e3 + (((h2 = this.options) == null ? void 0 : h2.gasless) && "biconomy" in this.options.gasless && ((y2 = this.options.gasless.biconomy) == null ? void 0 : y2.deadlineSeconds) || 3600)), data: t.data }, c2 = ethers_exports.utils.arrayify(ethers_exports.utils.solidityKeccak256(["address", "address", "address", "uint256", "uint256", "uint256", "uint256", "uint256", "bytes32"], [i2.from, i2.to, i2.token, i2.txGas, i2.tokenGasPrice, i2.batchId, i2.batchNonce, i2.deadline, ethers_exports.utils.keccak256(i2.data)]));
    this.emit(ht.Signature, { status: "submitted", message: c2, signature: "" });
    let d2 = await r2.signMessage(c2);
    this.emit(ht.Signature, { status: "completed", message: c2, signature: d2 });
    let m3 = await fetch("https://api.biconomy.io/api/v2/meta-tx/native", { method: "POST", body: JSON.stringify({ from: t.from, apiId: this.options.gasless.biconomy.apiId, params: [i2, d2], to: t.to, gasLimit: t.gasLimit.toHexString() }), headers: { "x-api-key": this.options.gasless.biconomy.apiKey, "Content-Type": "application/json;charset=utf-8" } });
    if (m3.ok) {
      let w3 = await m3.json();
      if (!w3.txHash)
        throw new Error(`relay transaction failed: ${w3.log}`);
      return w3.txHash;
    }
    throw new Error(`relay transaction failed with status: ${m3.status} (${m3.statusText})`);
  }
  async defenderSendFunction(t) {
    invariant(this.options.gasless && "openzeppelin" in this.options.gasless, "calling biconomySendFunction without biconomy");
    let r2 = this.getSigner(), e = this.getProvider();
    invariant(r2, "provider is not set"), invariant(e, "provider is not set");
    let a = this.options.gasless.openzeppelin.relayerForwarderAddress, n = C.connect(a, e), s2 = await we(n, "getNonce", [t.from]), i2 = { name: "GSNv2 Forwarder", version: "0.0.1", chainId: t.chainId, verifyingContract: a }, c2 = { ForwardRequest: Ca }, d2 = { from: t.from, to: t.to, value: BigNumber.from(0).toString(), gas: BigNumber.from(t.gasLimit).toString(), nonce: BigNumber.from(s2).toString(), data: t.data }, m3;
    if (this.emit(ht.Signature, { status: "submitted", message: d2, signature: "" }), t.functionName === "approve" && t.functionArgs.length === 2) {
      let _2 = t.functionArgs[0], pt = t.functionArgs[1], { message: it, signature: et } = await Ta(r2, this.writeContract.address, t.from, _2, pt), { r: ko, s: Po, v: Ro } = ethers_exports.utils.splitSignature(et);
      d2 = { to: this.readContract.address, owner: it.owner, spender: it.spender, value: BigNumber.from(it.value).toString(), nonce: BigNumber.from(it.nonce).toString(), deadline: BigNumber.from(it.deadline).toString(), r: ko, s: Po, v: Ro }, m3 = et;
    } else {
      let { signature: _2 } = await cr(r2, i2, c2, d2);
      m3 = _2;
    }
    let h2 = "forward";
    d2 != null && d2.owner && (h2 = "permit");
    let y2 = JSON.stringify({ request: d2, signature: m3, type: h2 });
    this.emit(ht.Signature, { status: "completed", message: d2, signature: m3 });
    let w3 = await fetch(this.options.gasless.openzeppelin.relayerUrl, { method: "POST", body: y2 });
    if (w3.ok) {
      let _2 = await w3.json();
      return JSON.parse(_2.result).txHash;
    }
    throw new Error(`relay transaction failed with status: ${w3.status} (${w3.statusText})`);
  }
};
p2(C2, "ContractWrapper");
function gt(o2) {
  return o2.toLowerCase() === xt2 || o2.toLowerCase() === AddressZero;
}
p2(gt, "isNativeToken");
async function tt(o2, t, r2) {
  let e = await kt(o2, r2);
  return ethers_exports.utils.parseUnits(vt.parse(t), e.decimals);
}
p2(tt, "normalizePriceValue");
async function kt(o2, t) {
  if (gt(t)) {
    let r2 = await o2.getNetwork(), e = aa(r2.chainId);
    return { name: e.name, symbol: e.symbol, decimals: e.decimals };
  } else {
    let r2 = Q.connect(t, o2), [e, a, n] = await Promise.all([r2.name(), r2.symbol(), r2.decimals()]);
    return { name: e, symbol: a, decimals: n };
  }
}
p2(kt, "fetchCurrencyMetadata");
async function F2(o2, t, r2) {
  let e = await kt(o2, t);
  return R2(T2({}, e), { value: BigNumber.from(r2), displayValue: (0, import_utils7.formatUnits)(r2, e.decimals) });
}
p2(F2, "fetchCurrencyValue");
async function Tt(o2, t, r2, e) {
  if (gt(r2))
    e.value = t;
  else {
    let a = o2.getSigner(), n = o2.getProvider(), s2 = new C2(a || n, r2, V6.abi, {}), i2 = await o2.getSignerAddress(), c2 = o2.readContract.address;
    return (await s2.readContract.allowance(i2, c2)).lt(t) && await s2.sendTransaction("approve", [c2, t]), e;
  }
}
p2(Tt, "setErc20Allowance");
async function Pa(o2, t, r2, e) {
  let a = o2.getSigner(), n = o2.getProvider(), s2 = new C2(a || n, t, V6.abi, {}), i2 = await o2.getSignerAddress(), c2 = o2.readContract.address, d2 = await s2.readContract.allowance(i2, c2), m3 = BigNumber.from(r2).mul(BigNumber.from(e));
  d2.lt(m3) && await s2.sendTransaction("approve", [c2, d2.add(m3)]);
}
p2(Pa, "approveErc20Allowance");
var M2;
(function(o2) {
  o2[o2.Direct = 0] = "Direct", o2[o2.Auction = 1] = "Auction";
})(M2 || (M2 = {}));
var Ra;
(function(o2) {
  o2[o2.Pending = 0] = "Pending", o2[o2.Active = 1] = "Active", o2[o2.Canceled = 2] = "Canceled", o2[o2.Defeated = 3] = "Defeated", o2[o2.Succeeded = 4] = "Succeeded", o2[o2.Queued = 5] = "Queued", o2[o2.Expired = 6] = "Expired", o2[o2.Executed = 7] = "Executed";
})(Ra || (Ra = {}));
var Ht;
(function(o2) {
  o2[o2.Against = 0] = "Against", o2[o2.For = 1] = "For", o2[o2.Abstain = 2] = "Abstain";
})(Ht || (Ht = {}));
var A2;
(function(o2) {
  o2.NotEnoughSupply = "There is not enough supply to claim.", o2.AddressNotAllowed = "This address is not on the allowlist.", o2.WaitBeforeNextClaimTransaction = "Not enough time since last claim transaction. Please wait.", o2.AlreadyClaimed = "You have already claimed the token.", o2.NotEnoughTokens = "There are not enough tokens in the wallet to pay for the claim.", o2.NoActiveClaimPhase = "There is no active claim phase at the moment. Please check back in later.", o2.NoClaimConditionSet = "There is no claim condition set.", o2.Unknown = "No claim conditions found.";
})(A2 || (A2 = {}));
async function _r(o2, t, r2, e, a, n = [hexZeroPad([0], 32)]) {
  let s2 = await e.getSignerAddress(), i2 = 0;
  try {
    if (!t.merkleRootHash.toString().startsWith(AddressZero)) {
      let h2 = await We(t.merkleRootHash.toString(), r2, a), y2 = h2 && h2.find((w3) => w3.address.toLowerCase() === s2.toLowerCase());
      if (y2 === void 0)
        throw new Error("No claim found for this address");
      n = y2.proof, i2 = y2.maxClaimable;
    }
  } catch (h2) {
    if ((h2 == null ? void 0 : h2.message) === "No claim found for this address")
      throw h2;
    console.warn("failed to check claim condition merkle root hash, continuing anyways", h2);
  }
  let c2 = await e.getCallOverrides() || {}, d2 = t.price, m3 = t.currencyAddress;
  return d2.gt(0) && (gt(m3) ? c2.value = BigNumber.from(d2).mul(o2) : await Pa(e, m3, d2, o2)), { overrides: c2, proofs: n, maxQuantityPerTransaction: BigNumber.from(i2), price: d2, currencyAddress: m3 };
}
p2(_r, "prepareClaim");
async function We(o2, t, r2) {
  let e = t[o2], a;
  if (e) {
    let n = await r2.get(e), s2 = er.parse(n);
    o2 === s2.merkleRoot && (a = s2.claims);
  }
  return a;
}
p2(We, "fetchSnapshot");
function Dr(o2, t, r2) {
  if (o2 >= r2.length)
    throw Error(`Index out of bounds - got index: ${o2} with ${r2.length} conditions`);
  let e = or.parse(T2(R2(T2({}, r2[o2]), { price: r2[o2].price.toString() }), t)), a = le.parse(e);
  return r2.map((n, s2) => {
    let i2;
    return s2 === o2 ? i2 = a : i2 = n, R2(T2({}, i2), { price: i2.price.toString() });
  });
}
p2(Dr, "updateExsitingClaimConditions");
async function Nr(o2, t, r2, e) {
  let a = await We(t, r2, e);
  if (a === void 0)
    return { proof: [], maxClaimable: 0 };
  let n = a.find((s2) => s2.address.toLowerCase() === (o2 == null ? void 0 : o2.toLowerCase()));
  return n === void 0 ? { proof: [], maxClaimable: 0 } : { proof: n.proof, maxClaimable: n.maxClaimable };
}
p2(Nr, "getClaimerProofs");
async function Or(o2, t, r2) {
  let e = [], a = await Promise.all(o2.map(async (i2) => {
    if (i2.snapshot) {
      let c2 = await Ea($t.parse(i2.snapshot), r2);
      e.push(c2), i2.merkleRootHash = c2.merkleRoot;
    }
    return i2;
  })), n = sa.parse(a), s2 = (await Promise.all(n.map((i2) => Wn(i2, t)))).sort((i2, c2) => {
    let d2 = BigNumber.from(i2.startTimestamp), m3 = BigNumber.from(c2.startTimestamp);
    return d2.eq(m3) ? 0 : d2.gt(m3) ? 1 : -1;
  });
  return { snapshotInfos: e, sortedConditions: s2 };
}
p2(Or, "processClaimConditionInputs");
async function Wn(o2, t) {
  let r2 = o2.currencyAddress === AddressZero ? xt2 : o2.currencyAddress;
  return { startTimestamp: o2.startTime, maxClaimableSupply: o2.maxQuantity, supplyClaimed: 0, quantityLimitPerTransaction: o2.quantityLimitPerTransaction, waitTimeInSecondsBetweenClaims: o2.waitInSeconds, pricePerToken: await tt(t, o2.price, r2), currency: r2, merkleRoot: o2.merkleRootHash };
}
p2(Wn, "convertToContractModel");
async function zt(o2, t, r2, e) {
  let a = await F2(t, o2.currency, o2.pricePerToken), n = await We(o2.merkleRoot, r2, e);
  return le.parse({ startTime: o2.startTimestamp, maxQuantity: o2.maxClaimableSupply.toString(), currentMintSupply: o2.supplyClaimed.toString(), availableSupply: BigNumber.from(o2.maxClaimableSupply).sub(o2.supplyClaimed).toString(), quantityLimitPerTransaction: o2.quantityLimitPerTransaction.toString(), waitInSeconds: o2.waitTimeInSecondsBetweenClaims.toString(), price: BigNumber.from(o2.pricePerToken), currency: o2.currency, currencyAddress: o2.currency, currencyMetadata: a, merkleRootHash: o2.merkleRoot, snapshot: n });
}
p2(zt, "transformResultToClaimCondition");
var Br = class {
  constructor(t, r2, e) {
    this.storage = e, this.contractWrapper = t, this.metadata = r2;
  }
  async getActive() {
    let t = await this.contractWrapper.readContract.getActiveClaimConditionId(), r2 = await this.contractWrapper.readContract.getClaimConditionById(t), e = await this.metadata.get();
    return await zt(r2, this.contractWrapper.getProvider(), e.merkle, this.storage);
  }
  async getAll() {
    let t = await this.contractWrapper.readContract.claimCondition(), r2 = t.currentStartId.toNumber(), e = t.count.toNumber(), a = [];
    for (let s2 = r2; s2 < r2 + e; s2++)
      a.push(await this.contractWrapper.readContract.getClaimConditionById(s2));
    let n = await this.metadata.get();
    return Promise.all(a.map((s2) => zt(s2, this.contractWrapper.getProvider(), n.merkle, this.storage)));
  }
  async canClaim(t, r2) {
    return r2 === void 0 && (r2 = await this.contractWrapper.getSignerAddress()), (await this.getClaimIneligibilityReasons(t, r2)).length === 0;
  }
  async getClaimIneligibilityReasons(t, r2) {
    let e = [], a, n;
    if (r2 === void 0)
      throw new Error("addressToCheck is required");
    try {
      [a, n] = await Promise.all([this.contractWrapper.readContract.getActiveClaimConditionId(), this.getActive()]);
    } catch (m3) {
      return m3.message.includes("no public mint condition.") ? (e.push(A2.NoClaimConditionSet), e) : m3.message.includes("no active mint condition.") ? (e.push(A2.NoActiveClaimPhase), e) : (e.push(A2.Unknown), e);
    }
    if (BigNumber.from(n.availableSupply).lt(t) && e.push(A2.NotEnoughSupply), ethers_exports.utils.stripZeros(n.merkleRootHash).length > 0) {
      let m3 = n.merkleRootHash.toString(), h2 = await this.metadata.get(), y2 = await Nr(r2, m3, h2.merkle, this.storage);
      try {
        let [w3] = await this.contractWrapper.readContract.verifyClaimMerkleProof(a, r2, t, y2.proof, y2.maxClaimable);
        if (!w3)
          return e.push(A2.AddressNotAllowed), e;
      } catch {
        return e.push(A2.AddressNotAllowed), e;
      }
    }
    let [i2, c2] = await this.contractWrapper.readContract.getClaimTimestamp(a, r2), d2 = BigNumber.from(Date.now()).div(1e3);
    if (i2.gt(0) && d2.lt(c2) && (c2.eq(MaxUint256) ? e.push(A2.AlreadyClaimed) : e.push(A2.WaitBeforeNextClaimTransaction)), n.price.gt(0)) {
      let m3 = n.price.mul(t), h2 = this.contractWrapper.getProvider();
      gt(n.currencyAddress) ? (await h2.getBalance(r2)).lt(m3) && e.push(A2.NotEnoughTokens) : (await new C2(h2, n.currencyAddress, V6.abi, {}).readContract.balanceOf(r2)).lt(m3) && e.push(A2.NotEnoughTokens);
    }
    return e;
  }
  async set(t, r2 = false) {
    let { snapshotInfos: e, sortedConditions: a } = await Or(t, this.contractWrapper.getProvider(), this.storage), n = {};
    e.forEach((c2) => {
      n[c2.merkleRoot] = c2.snapshotUri;
    });
    let s2 = await this.metadata.get(), i2 = [];
    if (!(0, import_deep_equal.default)(s2.merkle, n)) {
      let c2 = this.metadata.parseInputMetadata(R2(T2({}, s2), { merkle: n })), d2 = await this.metadata._parseAndUploadMetadata(c2);
      i2.push(this.contractWrapper.readContract.interface.encodeFunctionData("setContractURI", [d2]));
    }
    return i2.push(this.contractWrapper.readContract.interface.encodeFunctionData("setClaimConditions", [a, r2])), { receipt: await this.contractWrapper.multiCall(i2) };
  }
  async update(t, r2) {
    let e = await this.getAll(), a = Dr(t, r2, e);
    return await this.set(a);
  }
};
p2(Br, "DropErc721ClaimConditions");
var Mr = class {
  constructor(t, r2, e) {
    this.storage = e, this.contractWrapper = t, this.metadata = r2;
  }
  async getActive(t) {
    let r2 = await this.contractWrapper.readContract.getActiveClaimConditionId(t), e = await this.contractWrapper.readContract.getClaimConditionById(t, r2), a = await this.metadata.get();
    return await zt(e, this.contractWrapper.getProvider(), a.merkle, this.storage);
  }
  async getAll(t) {
    let r2 = await this.contractWrapper.readContract.claimCondition(t), e = r2.currentStartId.toNumber(), a = r2.count.toNumber(), n = [];
    for (let i2 = e; i2 < e + a; i2++)
      n.push(await this.contractWrapper.readContract.getClaimConditionById(t, i2));
    let s2 = await this.metadata.get();
    return Promise.all(n.map((i2) => zt(i2, this.contractWrapper.getProvider(), s2.merkle, this.storage)));
  }
  async canClaim(t, r2, e) {
    return e === void 0 && (e = await this.contractWrapper.getSignerAddress()), (await this.getClaimIneligibilityReasons(t, r2, e)).length === 0;
  }
  async getClaimIneligibilityReasons(t, r2, e) {
    let a = [], n, s2;
    if (e === void 0)
      throw new Error("addressToCheck is required");
    try {
      [n, s2] = await Promise.all([this.contractWrapper.readContract.getActiveClaimConditionId(t), this.getActive(t)]);
    } catch (h2) {
      return h2.message.includes("no active mint condition.") ? (a.push(A2.NoActiveClaimPhase), a) : (a.push(A2.Unknown), a);
    }
    if (BigNumber.from(s2.availableSupply).lt(r2) && a.push(A2.NotEnoughSupply), ethers_exports.utils.stripZeros(s2.merkleRootHash).length > 0) {
      let h2 = s2.merkleRootHash.toString(), y2 = await this.metadata.get(), w3 = await Nr(e, h2, y2.merkle, this.storage);
      try {
        let [_2] = await this.contractWrapper.readContract.verifyClaimMerkleProof(n, e, t, r2, w3.proof, w3.maxClaimable);
        if (!_2)
          return a.push(A2.AddressNotAllowed), a;
      } catch {
        return a.push(A2.AddressNotAllowed), a;
      }
    }
    let [c2, d2] = await this.contractWrapper.readContract.getClaimTimestamp(t, n, e), m3 = BigNumber.from(Date.now()).div(1e3);
    if (c2.gt(0) && m3.lt(d2) && (d2.eq(MaxUint256) ? a.push(A2.AlreadyClaimed) : a.push(A2.WaitBeforeNextClaimTransaction)), s2.price.gt(0)) {
      let h2 = s2.price.mul(r2), y2 = this.contractWrapper.getProvider();
      gt(s2.currencyAddress) ? (await y2.getBalance(e)).lt(h2) && a.push(A2.NotEnoughTokens) : (await new C2(y2, s2.currencyAddress, V6.abi, {}).readContract.balanceOf(e)).lt(h2) && a.push(A2.NotEnoughTokens);
    }
    return a;
  }
  async set(t, r2, e = false) {
    let { snapshotInfos: a, sortedConditions: n } = await Or(r2, this.contractWrapper.getProvider(), this.storage), s2 = {};
    a.forEach((d2) => {
      s2[d2.merkleRoot] = d2.snapshotUri;
    });
    let i2 = await this.metadata.get(), c2 = [];
    for (let d2 of Object.keys(i2.merkle))
      s2[d2] = i2.merkle[d2];
    if (!(0, import_deep_equal2.default)(i2.merkle, s2)) {
      let d2 = this.metadata.parseInputMetadata(R2(T2({}, i2), { merkle: s2 })), m3 = await this.metadata._parseAndUploadMetadata(d2);
      c2.push(this.contractWrapper.readContract.interface.encodeFunctionData("setContractURI", [m3]));
    }
    return c2.push(this.contractWrapper.readContract.interface.encodeFunctionData("setClaimConditions", [t, n, e])), { receipt: await this.contractWrapper.multiCall(c2) };
  }
  async update(t, r2, e) {
    let a = await this.getAll(t), n = Dr(r2, e, a);
    return await this.set(t, n);
  }
};
p2(Mr, "DropErc1155ClaimConditions");
var Lr = class {
  constructor(t) {
    this.contractWrapper = t;
  }
  async getAllClaimerAddresses(t) {
    let r2 = await this.contractWrapper.readContract.queryFilter(this.contractWrapper.readContract.filters.TokensClaimed(null, BigNumber.from(t)));
    return Array.from(new Set(r2.map((e) => e.args.claimer)));
  }
};
p2(Lr, "DropErc1155History");
var Ur = class {
  constructor(t, r2, e = {}) {
    this.contractWrapper = t, this.storage = r2;
    try {
      this.options = st.parse(e);
    } catch (a) {
      console.error("invalid contract options object passed, falling back to default options", a), this.options = st.parse({});
    }
  }
  onNetworkUpdated(t) {
    this.contractWrapper.updateSignerOrProvider(t);
  }
  getAddress() {
    return this.contractWrapper.readContract.address;
  }
  async get() {
    return await kt(this.contractWrapper.getProvider(), this.getAddress());
  }
  async balance() {
    return await this.balanceOf(await this.contractWrapper.getSignerAddress());
  }
  async balanceOf(t) {
    return this.getValue(await this.contractWrapper.readContract.balanceOf(t));
  }
  async totalSupply() {
    return await this.getValue(await this.contractWrapper.readContract.totalSupply());
  }
  async allowance(t) {
    return await this.allowanceOf(await this.contractWrapper.getSignerAddress(), t);
  }
  async allowanceOf(t, r2) {
    return await this.getValue(await this.contractWrapper.readContract.allowance(t, r2));
  }
  async isTransferRestricted() {
    return !await this.contractWrapper.readContract.hasRole(D2("transfer"), AddressZero);
  }
  async transfer(t, r2) {
    let e = ethers_exports.utils.parseUnits(BigNumber.from(r2).toString(), await this.contractWrapper.readContract.decimals());
    return { receipt: await this.contractWrapper.sendTransaction("transfer", [t, e]) };
  }
  async transferFrom(t, r2, e) {
    let a = ethers_exports.utils.parseUnits(BigNumber.from(e).toString(), await this.contractWrapper.readContract.decimals());
    return { receipt: await this.contractWrapper.sendTransaction("transferFrom", [t, r2, a]) };
  }
  async setAllowance(t, r2) {
    let e = ethers_exports.utils.parseUnits(BigNumber.from(r2).toString(), await this.contractWrapper.readContract.decimals());
    return { receipt: await this.contractWrapper.sendTransaction("approve", [t, e]) };
  }
  async transferBatch(t) {
    let r2 = await this.contractWrapper.readContract.decimals(), e = t.map((a) => {
      let n = ethers_exports.utils.parseUnits(BigNumber.from(a.amount).toString(), r2);
      return this.contractWrapper.readContract.interface.encodeFunctionData("transfer", [a.toAddress, n]);
    });
    await this.contractWrapper.multiCall(e);
  }
  async burn(t) {
    let r2 = ethers_exports.utils.parseUnits(BigNumber.from(t).toString(), await this.contractWrapper.readContract.decimals());
    return { receipt: await this.contractWrapper.sendTransaction("burn", [r2]) };
  }
  async burnFrom(t, r2) {
    let e = ethers_exports.utils.parseUnits(BigNumber.from(r2).toString(), await this.contractWrapper.readContract.decimals());
    return { receipt: await this.contractWrapper.sendTransaction("burnFrom", [t, e]) };
  }
  async getValue(t) {
    return await F2(this.contractWrapper.getProvider(), this.getAddress(), BigNumber.from(t));
  }
};
p2(Ur, "Erc20");
var $r = class {
  constructor(t) {
    this.contractWrapper = t;
  }
  async getAllHolderBalances() {
    let r2 = (await this.contractWrapper.readContract.queryFilter(this.contractWrapper.readContract.filters.Transfer())).map((a) => a.args), e = {};
    return r2.forEach((a) => {
      let n = a.from, s2 = a.to, i2 = a.value;
      n !== AddressZero && (n in e || (e[n] = BigNumber.from(0)), e[n] = e[n].sub(i2)), s2 !== AddressZero && (s2 in e || (e[s2] = BigNumber.from(0)), e[s2] = e[s2].add(i2));
    }), Promise.all(Object.keys(e).map(async (a) => ({ holder: a, balance: await F2(this.contractWrapper.getProvider(), this.contractWrapper.readContract.address, e[a]) })));
  }
};
p2($r, "TokenERC20History");
var mr = 100;
async function Ot(o2, t, r2) {
  let e = await r2.get(t);
  return Rr.parse(T2({ id: BigNumber.from(o2), uri: t }, e));
}
p2(Ot, "fetchTokenMetadata");
async function Pt(o2, t, r2, e) {
  let a, n = L6.connect(o2, t), s2 = await n.supportsInterface(_t), i2 = await n.supportsInterface(Dt);
  if (s2)
    a = await Y.connect(o2, t).tokenURI(r2);
  else if (i2)
    a = await G.connect(o2, t).uri(r2);
  else
    throw Error("Contract must implement ERC 1155 or ERC 721.");
  if (!a)
    throw new dt();
  return Ot(r2, a, e);
}
p2(Pt, "fetchTokenMetadataForContract");
async function Vr(o2, t) {
  return typeof o2 == "string" ? o2 : await t.uploadMetadata(Y2.parse(o2));
}
p2(Vr, "uploadOrExtractURI");
async function Rt(o2, t) {
  if (Ln(o2))
    return o2;
  if (Un(o2)) {
    let { metadataUris: r2 } = await t.uploadMetadataBatch(o2.map((e) => Y2.parse(e)));
    return r2;
  } else
    throw new Error("NFT metadatas must all be of the same type (all URI or all NFTMetadataInput)");
}
p2(Rt, "uploadOrExtractURIs");
function Ln(o2) {
  return o2.find((t) => typeof t != "string") === void 0;
}
p2(Ln, "isUriList");
function Un(o2) {
  return o2.find((t) => typeof t != "object") === void 0;
}
p2(Un, "isMetadataList");
var Kt = class {
  constructor(t, r2, e = {}) {
    this.contractWrapper = t, this.storage = r2;
    try {
      this.options = st.parse(e);
    } catch (a) {
      console.error("invalid contract options object passed, falling back to default options", a), this.options = st.parse({});
    }
  }
  onNetworkUpdated(t) {
    this.contractWrapper.updateSignerOrProvider(t);
  }
  getAddress() {
    return this.contractWrapper.readContract.address;
  }
  async get(t) {
    let [r2, e] = await Promise.all([this.ownerOf(t).catch(() => AddressZero), this.getTokenMetadata(t)]);
    return { owner: r2, metadata: e };
  }
  async getAll(t) {
    let r2 = BigNumber.from((t == null ? void 0 : t.start) || 0).toNumber(), e = BigNumber.from((t == null ? void 0 : t.count) || 100).toNumber(), a = Math.min((await this.getTotalCount()).toNumber(), r2 + e);
    return await Promise.all([...Array(a - r2).keys()].map((n) => this.get((r2 + n).toString())));
  }
  async getTotalCount() {
    return await this.contractWrapper.readContract.nextTokenIdToMint();
  }
  async getOwned(t) {
    let r2 = t || await this.contractWrapper.getSignerAddress(), e = await this.contractWrapper.readContract.balanceOf(r2), a = Array.from(Array(e.toNumber()).keys()), n = await Promise.all(a.map((s2) => this.contractWrapper.readContract.tokenOfOwnerByIndex(r2, s2)));
    return await Promise.all(n.map((s2) => this.get(s2.toString())));
  }
  async ownerOf(t) {
    return await this.contractWrapper.readContract.ownerOf(t);
  }
  async totalSupply() {
    return await this.contractWrapper.readContract.nextTokenIdToMint();
  }
  async balanceOf(t) {
    return await this.contractWrapper.readContract.balanceOf(t);
  }
  async balance() {
    return await this.balanceOf(await this.contractWrapper.getSignerAddress());
  }
  async isTransferRestricted() {
    return !await this.contractWrapper.readContract.hasRole(D2("transfer"), AddressZero);
  }
  async isApproved(t, r2) {
    return await this.contractWrapper.readContract.isApprovedForAll(t, r2);
  }
  async transfer(t, r2) {
    let e = await this.contractWrapper.getSignerAddress();
    return { receipt: await this.contractWrapper.sendTransaction("safeTransferFrom(address,address,uint256)", [e, t, r2]) };
  }
  async burn(t) {
    return { receipt: await this.contractWrapper.sendTransaction("burn", [t]) };
  }
  async setApprovalForAll(t, r2) {
    return { receipt: await this.contractWrapper.sendTransaction("setApprovalForAll", [t, r2]) };
  }
  async getTokenMetadata(t) {
    let r2 = await this.contractWrapper.readContract.tokenURI(t);
    if (!r2)
      throw new dt();
    return Ot(t, r2, this.storage);
  }
};
p2(Kt, "Erc721");
var ve2 = mod.object({ supply: b, metadata: Rr });
var cd = ve2.extend({ owner: mod.string(), quantityOwned: b });
var pd = mod.object({ supply: at2, metadata: Y2 });
var dd = mod.object({ supply: at2, metadata: Pr });
var Ma;
(function(o2) {
  o2[o2.None = 0] = "None", o2[o2.ERC20 = 1] = "ERC20", o2[o2.ERC721 = 2] = "ERC721";
})(Ma || (Ma = {}));
var qt = class {
  constructor(t, r2, e = {}) {
    this.contractWrapper = t, this.storage = r2;
    try {
      this.options = st.parse(e);
    } catch (a) {
      console.error("invalid contract options object passed, falling back to default options", a), this.options = st.parse({});
    }
  }
  onNetworkUpdated(t) {
    this.contractWrapper.updateSignerOrProvider(t);
  }
  getAddress() {
    return this.contractWrapper.readContract.address;
  }
  async get(t) {
    let [r2, e] = await Promise.all([this.contractWrapper.readContract.totalSupply(t).catch(() => BigNumber.from(0)), this.getTokenMetadata(t)]);
    return ve2.parse({ supply: r2, metadata: e });
  }
  async getAll(t) {
    let r2 = BigNumber.from((t == null ? void 0 : t.start) || 0).toNumber(), e = BigNumber.from((t == null ? void 0 : t.count) || 100).toNumber(), a = Math.min((await this.getTotalCount()).toNumber(), r2 + e);
    return await Promise.all([...Array(a - r2).keys()].map((n) => this.get((r2 + n).toString())));
  }
  async getTotalCount() {
    return await this.contractWrapper.readContract.nextTokenIdToMint();
  }
  async getOwned(t) {
    let r2 = t || await this.contractWrapper.getSignerAddress(), e = await this.contractWrapper.readContract.nextTokenIdToMint(), n = (await this.contractWrapper.readContract.balanceOfBatch(Array(e.toNumber()).fill(r2), Array.from(Array(e.toNumber()).keys()))).map((s2, i2) => ({ tokenId: i2, balance: s2 })).filter((s2) => s2.balance.gt(0));
    return await Promise.all(n.map(async (s2) => {
      let i2 = await this.get(s2.tokenId.toString());
      return R2(T2({}, i2), { owner: r2, quantityOwned: s2.balance });
    }));
  }
  async totalSupply(t) {
    return await this.contractWrapper.readContract.totalSupply(t);
  }
  async balanceOf(t, r2) {
    return await this.contractWrapper.readContract.balanceOf(t, r2);
  }
  async balance(t) {
    return await this.balanceOf(await this.contractWrapper.getSignerAddress(), t);
  }
  async isTransferRestricted() {
    return !await this.contractWrapper.readContract.hasRole(D2("transfer"), AddressZero);
  }
  async isApproved(t, r2) {
    return await this.contractWrapper.readContract.isApprovedForAll(t, r2);
  }
  async transfer(t, r2, e, a = [0]) {
    let n = await this.contractWrapper.getSignerAddress();
    return { receipt: await this.contractWrapper.sendTransaction("safeTransferFrom", [n, t, r2, e, a]) };
  }
  async burn(t, r2) {
    let e = await this.contractWrapper.getSignerAddress();
    return { receipt: await this.contractWrapper.sendTransaction("burn", [e, t, r2]) };
  }
  async setApprovalForAll(t, r2) {
    return { receipt: await this.contractWrapper.sendTransaction("setApprovalForAll", [t, r2]) };
  }
  async getTokenMetadata(t) {
    let r2 = await this.contractWrapper.readContract.uri(t);
    if (!r2)
      throw new dt();
    return Ot(t, r2, this.storage);
  }
};
p2(qt, "Erc1155");
var Hr = class {
  constructor(t, r2, e) {
    this.contractWrapper = t, this.storage = e, this.roles = r2;
  }
  async mint(t) {
    let r2 = t.payload, e = t.signature, a = await this.mapPayloadToContractStruct(r2), n = await this.contractWrapper.getCallOverrides();
    await Tt(this.contractWrapper, BigNumber.from(a.price), r2.currencyAddress, n);
    let s2 = await this.contractWrapper.sendTransaction("mintWithSignature", [a, e], n), i2 = this.contractWrapper.parseLogs("TokensMintedWithSignature", s2.logs);
    if (i2.length === 0)
      throw new Error("No MintWithSignature event found");
    return { id: i2[0].args.tokenIdMinted, receipt: s2 };
  }
  async mintBatch(t) {
    let e = (await Promise.all(t.map(async (s2) => {
      let i2 = await this.mapPayloadToContractStruct(s2.payload), c2 = s2.signature, d2 = s2.payload.price;
      if (BigNumber.from(d2).gt(0))
        throw new Error("Can only batch free mints. For mints with a price, use regular mint()");
      return { message: i2, signature: c2 };
    }))).map((s2) => this.contractWrapper.readContract.interface.encodeFunctionData("mintWithSignature", [s2.message, s2.signature])), a = await this.contractWrapper.multiCall(e), n = this.contractWrapper.parseLogs("TokensMintedWithSignature", a.logs);
    if (n.length === 0)
      throw new Error("No MintWithSignature event found");
    return n.map((s2) => ({ id: s2.args.tokenIdMinted, receipt: a }));
  }
  async verify(t) {
    let r2 = t.payload, e = t.signature, a = await this.mapPayloadToContractStruct(r2);
    return (await this.contractWrapper.readContract.verify(a, e))[0];
  }
  async generate(t) {
    return (await this.generateBatch([t]))[0];
  }
  async generateBatch(t) {
    await this.roles.verify(["minter"], await this.contractWrapper.getSignerAddress());
    let r2 = t.map((i2) => Fr.parse(i2)), e = r2.map((i2) => i2.metadata), a = await Rt(e, this.storage), n = await this.contractWrapper.getChainID(), s2 = this.contractWrapper.getSigner();
    return invariant(s2, "No signer available"), await Promise.all(r2.map(async (i2, c2) => {
      let d2 = a[c2], m3 = he.parse(R2(T2({}, i2), { uri: d2 })), h2 = await this.contractWrapper.signTypedData(s2, { name: "TokenERC721", version: "1", chainId: n, verifyingContract: this.contractWrapper.readContract.address }, { MintRequest: fa }, await this.mapPayloadToContractStruct(m3));
      return { payload: m3, signature: h2.toString() };
    }));
  }
  async mapPayloadToContractStruct(t) {
    let r2 = await tt(this.contractWrapper.getProvider(), t.price, t.currencyAddress);
    return { to: t.to, price: r2, uri: t.uri, currency: t.currencyAddress, validityEndTimestamp: t.mintEndTime, validityStartTimestamp: t.mintStartTime, uid: t.uid, royaltyRecipient: t.royaltyRecipient, royaltyBps: t.royaltyBps, primarySaleRecipient: t.primarySaleRecipient };
  }
};
p2(Hr, "Erc721SignatureMinting");
var jr = class {
  constructor(t, r2, e) {
    this.contractWrapper = t, this.storage = e, this.roles = r2;
  }
  async mint(t) {
    let r2 = t.payload, e = t.signature, a = await this.mapPayloadToContractStruct(r2), n = await this.contractWrapper.getCallOverrides();
    await Tt(this.contractWrapper, a.pricePerToken.mul(a.quantity), r2.currencyAddress, n);
    let s2 = await this.contractWrapper.sendTransaction("mintWithSignature", [a, e], n), i2 = this.contractWrapper.parseLogs("TokensMintedWithSignature", s2.logs);
    if (i2.length === 0)
      throw new Error("No MintWithSignature event found");
    return { id: i2[0].args.tokenIdMinted, receipt: s2 };
  }
  async mintBatch(t) {
    let e = (await Promise.all(t.map(async (s2) => {
      let i2 = await this.mapPayloadToContractStruct(s2.payload), c2 = s2.signature, d2 = s2.payload.price;
      if (BigNumber.from(d2).gt(0))
        throw new Error("Can only batch free mints. For mints with a price, use regular mint()");
      return { message: i2, signature: c2 };
    }))).map((s2) => this.contractWrapper.readContract.interface.encodeFunctionData("mintWithSignature", [s2.message, s2.signature])), a = await this.contractWrapper.multiCall(e), n = this.contractWrapper.parseLogs("TokensMintedWithSignature", a.logs);
    if (n.length === 0)
      throw new Error("No MintWithSignature event found");
    return n.map((s2) => ({ id: s2.args.tokenIdMinted, receipt: a }));
  }
  async verify(t) {
    let r2 = t.payload, e = t.signature, a = await this.mapPayloadToContractStruct(r2);
    return (await this.contractWrapper.readContract.verify(a, e))[0];
  }
  async generate(t) {
    return (await this.generateBatch([t]))[0];
  }
  async generateBatch(t) {
    await this.roles.verify(["minter"], await this.contractWrapper.getSignerAddress());
    let r2 = t.map((i2) => ua.parse(i2)), e = r2.map((i2) => i2.metadata), a = await Rt(e, this.storage), n = await this.contractWrapper.getChainID(), s2 = this.contractWrapper.getSigner();
    return invariant(s2, "No signer available"), await Promise.all(r2.map(async (i2, c2) => {
      let d2 = a[c2], m3 = ha.parse(R2(T2({}, i2), { uri: d2 })), h2 = await this.contractWrapper.signTypedData(s2, { name: "TokenERC1155", version: "1", chainId: n, verifyingContract: this.contractWrapper.readContract.address }, { MintRequest: ga }, await this.mapPayloadToContractStruct(m3));
      return { payload: m3, signature: h2.toString() };
    }));
  }
  async mapPayloadToContractStruct(t) {
    let r2 = await tt(this.contractWrapper.getProvider(), t.price, t.currencyAddress);
    return { to: t.to, tokenId: t.tokenId, uri: t.uri, quantity: t.quantity, pricePerToken: r2, currency: t.currencyAddress, validityStartTimestamp: t.mintStartTime, validityEndTimestamp: t.mintEndTime, uid: t.uid, royaltyRecipient: t.royaltyRecipient, royaltyBps: t.royaltyBps, primarySaleRecipient: t.primarySaleRecipient };
  }
};
p2(jr, "Erc1155SignatureMinting");
async function Ga(o2, t, r2, e, a) {
  try {
    let n = L6.connect(r2, o2), s2 = await n.supportsInterface(_t), i2 = await n.supportsInterface(Dt);
    if (s2) {
      let c2 = q6.connect(r2, o2);
      return await c2.isApprovedForAll(a, t) ? true : (await c2.getApproved(e)).toLowerCase() === t.toLowerCase();
    } else
      return i2 ? await B6.connect(r2, o2).isApprovedForAll(a, t) : (console.error("Contract does not implement ERC 1155 or ERC 721."), false);
  } catch (n) {
    return console.error("Failed to check if token is approved", n), false;
  }
}
p2(Ga, "isTokenApprovedForMarketplace");
async function zr(o2, t, r2, e, a) {
  let n = L6.connect(r2, o2), s2 = await n.supportsInterface(_t), i2 = await n.supportsInterface(Dt);
  if (s2) {
    let c2 = new C2(o2, r2, q6.abi, {});
    await c2.readContract.isApprovedForAll(a, t) || (await c2.readContract.getApproved(e)).toLowerCase() === t.toLowerCase() || await c2.sendTransaction("setApprovalForAll", [t, true]);
  } else if (i2) {
    let c2 = new C2(o2, r2, B6.abi, {});
    await c2.readContract.isApprovedForAll(a, t) || await c2.sendTransaction("setApprovalForAll", [t, true]);
  } else
    throw Error("Contract must implement ERC 1155 or ERC 721.");
}
p2(zr, "handleTokenApproval");
function Zr(o2) {
  switch (invariant(o2.assetContractAddress !== void 0 && o2.assetContractAddress !== null, "Asset contract address is required"), invariant(o2.buyoutPricePerToken !== void 0 && o2.buyoutPricePerToken !== null, "Buyout price is required"), invariant(o2.listingDurationInSeconds !== void 0 && o2.listingDurationInSeconds !== null, "Listing duration is required"), invariant(o2.startTimeInSeconds !== void 0 && o2.startTimeInSeconds !== null, "Start time is required"), invariant(o2.tokenId !== void 0 && o2.tokenId !== null, "Token ID is required"), invariant(o2.quantity !== void 0 && o2.quantity !== null, "Quantity is required"), o2.type) {
    case "NewAuctionListing":
      invariant(o2.reservePricePerToken !== void 0 && o2.reservePricePerToken !== null, "Reserve price is required");
  }
}
p2(Zr, "validateNewListingParam");
async function Kr(o2, t, r2) {
  return { quantity: r2.quantityDesired, pricePerToken: r2.pricePerToken, currencyContractAddress: r2.currency, buyerAddress: r2.offeror, quantityDesired: r2.quantityWanted, currencyValue: await F2(o2, r2.currency, r2.quantityWanted.mul(r2.pricePerToken)), listingId: t };
}
p2(Kr, "mapOffer");
function Ha(o2, t, r2) {
  return r2 = BigNumber.from(r2), o2 = BigNumber.from(o2), t = BigNumber.from(t), t.sub(o2).mul(de).div(o2).gte(r2);
}
p2(Ha, "isWinningBid");
var qr = class {
  constructor(t, r2) {
    this.contractWrapper = t, this.storage = r2;
  }
  getAddress() {
    return this.contractWrapper.readContract.address;
  }
  async getListing(t) {
    let r2 = await this.contractWrapper.readContract.listings(t);
    if (r2.assetContract === AddressZero)
      throw new yt(this.getAddress(), t.toString());
    if (r2.listingType !== M2.Direct)
      throw new Mt(this.getAddress(), t.toString(), "Auction", "Direct");
    return await this.mapListing(r2);
  }
  async getActiveOffer(t, r2) {
    await this.validateListing(BigNumber.from(t)), invariant((0, import_utils8.isAddress)(r2), "Address must be a valid address");
    let e = await this.contractWrapper.readContract.offers(t, r2);
    if (e.offeror !== AddressZero)
      return await Kr(this.contractWrapper.getProvider(), BigNumber.from(t), e);
  }
  async createListing(t) {
    Zr(t), await zr(this.contractWrapper.getSignerOrProvider(), this.getAddress(), t.assetContractAddress, t.tokenId, await this.contractWrapper.getSignerAddress());
    let r2 = await tt(this.contractWrapper.getProvider(), t.buyoutPricePerToken, t.currencyContractAddress), e = await this.contractWrapper.sendTransaction("createListing", [{ assetContract: t.assetContractAddress, tokenId: t.tokenId, buyoutPricePerToken: r2, currencyToAccept: t.currencyContractAddress, listingType: M2.Direct, quantityToList: t.quantity, reservePricePerToken: r2, secondsUntilEndTime: t.listingDurationInSeconds, startTime: t.startTimeInSeconds }]);
    return { id: this.contractWrapper.parseLogs("ListingAdded", e == null ? void 0 : e.logs)[0].args.listingId, receipt: e };
  }
  async makeOffer(t, r2, e, a) {
    if (gt(e))
      throw new Error("You must use the wrapped native token address when making an offer with a native token");
    let n = await tt(this.contractWrapper.getProvider(), a, e);
    try {
      await this.getListing(t);
    } catch (d2) {
      throw console.error("Failed to get listing, err =", d2), new Error(`Error getting the listing with id ${t}`);
    }
    let s2 = BigNumber.from(r2), i2 = BigNumber.from(n).mul(s2), c2 = await this.contractWrapper.getCallOverrides() || {};
    return await Tt(this.contractWrapper, i2, e, c2), { receipt: await this.contractWrapper.sendTransaction("offer", [t, r2, e, n], c2) };
  }
  async acceptOffer(t, r2) {
    await this.validateListing(BigNumber.from(t));
    let e = await this.contractWrapper.readContract.offers(t, r2);
    return { receipt: await this.contractWrapper.sendTransaction("acceptOffer", [t, r2, e.currency, e.pricePerToken]) };
  }
  async buyoutListing(t, r2, e) {
    let a = await this.validateListing(BigNumber.from(t));
    if (!await this.isStillValidListing(a, r2))
      throw new Error("The asset on this listing has been moved from the lister's wallet, this listing is now invalid");
    let s2 = e || await this.contractWrapper.getSignerAddress(), i2 = BigNumber.from(r2), c2 = BigNumber.from(a.buyoutPrice).mul(i2), d2 = await this.contractWrapper.getCallOverrides() || {};
    return await Tt(this.contractWrapper, c2, a.currencyContractAddress, d2), { receipt: await this.contractWrapper.sendTransaction("buy", [t, s2, i2, a.currencyContractAddress, c2], d2) };
  }
  async updateListing(t) {
    return { receipt: await this.contractWrapper.sendTransaction("updateListing", [t.id, t.quantity, t.buyoutPrice, t.buyoutPrice, t.currencyContractAddress, t.startTimeInSeconds, t.secondsUntilEnd]) };
  }
  async cancelListing(t) {
    return { receipt: await this.contractWrapper.sendTransaction("cancelDirectListing", [t]) };
  }
  async validateListing(t) {
    try {
      return await this.getListing(t);
    } catch (r2) {
      throw console.error(`Error getting the listing with id ${t}`), r2;
    }
  }
  async mapListing(t) {
    return { assetContractAddress: t.assetContract, buyoutPrice: BigNumber.from(t.buyoutPricePerToken), currencyContractAddress: t.currency, buyoutCurrencyValuePerToken: await F2(this.contractWrapper.getProvider(), t.currency, t.buyoutPricePerToken), id: t.listingId.toString(), tokenId: t.tokenId, quantity: t.quantity, startTimeInSeconds: t.startTime, asset: await Pt(t.assetContract, this.contractWrapper.getProvider(), t.tokenId, this.storage), secondsUntilEnd: t.endTime, sellerAddress: t.tokenOwner, type: M2.Direct };
  }
  async isStillValidListing(t, r2) {
    if (!await Ga(this.contractWrapper.getProvider(), this.getAddress(), t.assetContractAddress, t.tokenId, t.sellerAddress))
      return false;
    let a = this.contractWrapper.getProvider(), n = L6.connect(t.assetContractAddress, a), s2 = await n.supportsInterface(_t), i2 = await n.supportsInterface(Dt);
    return s2 ? (await q6.connect(t.assetContractAddress, a).ownerOf(t.tokenId)).toLowerCase() === t.sellerAddress.toLowerCase() : i2 ? (await B6.connect(t.assetContractAddress, a).balanceOf(t.sellerAddress, t.tokenId)).gte(r2 || t.quantity) : (console.error("Contract does not implement ERC 1155 or ERC 721."), false);
  }
};
p2(qr, "MarketplaceDirect");
var Jr = class {
  constructor(t, r2) {
    this.contractWrapper = t, this.storage = r2;
  }
  getAddress() {
    return this.contractWrapper.readContract.address;
  }
  async getListing(t) {
    let r2 = await this.contractWrapper.readContract.listings(t);
    if (r2.listingId.toString() !== t.toString())
      throw new yt(this.getAddress(), t.toString());
    if (r2.listingType !== M2.Auction)
      throw new Mt(this.getAddress(), t.toString(), "Direct", "Auction");
    return await this.mapListing(r2);
  }
  async getWinningBid(t) {
    await this.validateListing(BigNumber.from(t));
    let r2 = await this.contractWrapper.readContract.winningBid(t);
    if (r2.offeror !== AddressZero)
      return await Kr(this.contractWrapper.getProvider(), BigNumber.from(t), r2);
  }
  async getWinner(t) {
    let e = (await this.contractWrapper.readContract.queryFilter(this.contractWrapper.readContract.filters.AuctionClosed())).find((a) => a.args.listingId.eq(BigNumber.from(t)));
    if (!e)
      throw new Error(`Could not find auction with listingId ${t} in closed auctions`);
    return e.args.winningBidder;
  }
  async createListing(t) {
    Zr(t), await zr(this.contractWrapper.getSignerOrProvider(), this.getAddress(), t.assetContractAddress, t.tokenId, await this.contractWrapper.getSignerAddress());
    let r2 = await tt(this.contractWrapper.getProvider(), t.buyoutPricePerToken, t.currencyContractAddress), e = await tt(this.contractWrapper.getProvider(), t.reservePricePerToken, t.currencyContractAddress), a = await this.contractWrapper.sendTransaction("createListing", [{ assetContract: t.assetContractAddress, tokenId: t.tokenId, buyoutPricePerToken: r2, currencyToAccept: t.currencyContractAddress, listingType: M2.Auction, quantityToList: t.quantity, reservePricePerToken: e, secondsUntilEndTime: t.listingDurationInSeconds, startTime: t.startTimeInSeconds }]);
    return { id: this.contractWrapper.parseLogs("ListingAdded", a == null ? void 0 : a.logs)[0].args.listingId, receipt: a };
  }
  async buyoutListing(t) {
    let r2 = await this.validateListing(BigNumber.from(t)), e = await kt(this.contractWrapper.getProvider(), r2.currencyContractAddress);
    return this.makeBid(t, ethers_exports.utils.formatUnits(r2.buyoutPrice, e.decimals));
  }
  async makeBid(t, r2) {
    let e = await this.validateListing(BigNumber.from(t)), a = await tt(this.contractWrapper.getProvider(), r2, e.currencyContractAddress), n = await this.contractWrapper.readContract.bidBufferBps(), s2 = await this.getWinningBid(t);
    if (s2) {
      let m3 = Ha(s2.pricePerToken, a, n);
      invariant(m3, "Bid price is too low based on the current winning bid and the bid buffer");
    } else {
      let m3 = a, h2 = BigNumber.from(e.reservePrice);
      invariant(m3.gte(h2), "Bid price is too low based on reserve price");
    }
    let i2 = BigNumber.from(e.quantity), c2 = a.mul(i2), d2 = await this.contractWrapper.getCallOverrides() || {};
    return await Tt(this.contractWrapper, c2, e.currencyContractAddress, d2), { receipt: await this.contractWrapper.sendTransaction("offer", [t, e.quantity, e.currencyContractAddress, a], d2) };
  }
  async cancelListing(t) {
    let r2 = await this.validateListing(BigNumber.from(t)), e = BigNumber.from(Math.floor(Date.now() / 1e3)), a = BigNumber.from(r2.startTimeInEpochSeconds), n = await this.contractWrapper.readContract.winningBid(t);
    if (e.gt(a) && n.offeror !== AddressZero)
      throw new xr(t.toString());
    return { receipt: await this.contractWrapper.sendTransaction("closeAuction", [BigNumber.from(t), await this.contractWrapper.getSignerAddress()]) };
  }
  async closeListing(t, r2) {
    r2 || (r2 = await this.contractWrapper.getSignerAddress());
    let e = await this.validateListing(BigNumber.from(t));
    try {
      return { receipt: await this.contractWrapper.sendTransaction("closeAuction", [BigNumber.from(t), r2]) };
    } catch (a) {
      throw a.message.includes("cannot close auction before it has ended") ? new Er(t.toString(), e.endTimeInEpochSeconds.toString()) : a;
    }
  }
  async updateListing(t) {
    return { receipt: await this.contractWrapper.sendTransaction("updateListing", [t.id, t.quantity, t.reservePrice, t.buyoutPrice, t.currencyContractAddress, t.startTimeInEpochSeconds, t.endTimeInEpochSeconds]) };
  }
  async validateListing(t) {
    try {
      return await this.getListing(t);
    } catch (r2) {
      throw console.error(`Error getting the listing with id ${t}`), r2;
    }
  }
  async mapListing(t) {
    return { assetContractAddress: t.assetContract, buyoutPrice: BigNumber.from(t.buyoutPricePerToken), currencyContractAddress: t.currency, buyoutCurrencyValuePerToken: await F2(this.contractWrapper.getProvider(), t.currency, t.buyoutPricePerToken), id: t.listingId.toString(), tokenId: t.tokenId, quantity: t.quantity, startTimeInEpochSeconds: t.startTime, asset: await Pt(t.assetContract, this.contractWrapper.getProvider(), t.tokenId, this.storage), reservePriceCurrencyValuePerToken: await F2(this.contractWrapper.getProvider(), t.currency, t.reservePricePerToken), reservePrice: BigNumber.from(t.reservePricePerToken), endTimeInEpochSeconds: t.endTime, sellerAddress: t.tokenOwner, type: M2.Auction };
  }
};
p2(Jr, "MarketplaceAuction");
var Qr = class extends C2 {
  constructor(t, r2, e) {
    super(r2, t, t0.abi, e);
  }
  async getContractAddresses(t) {
    return (await this.readContract.getAll(t)).filter((r2) => (0, import_utils9.isAddress)(r2) && r2.toLowerCase() !== AddressZero);
  }
};
p2(Qr, "ContractRegistry");
var Ka = v2.merge(O2).merge(J2);
var ts = E2.merge(O2).merge(J2);
var rs = Ka.merge(q2).merge(lt).merge(B2);
var qa = { deploy: rs, output: ts, input: Ka };
var k3 = class {
  constructor(t) {
    this.contractWrapper = t;
  }
  addListener(t, r2) {
    let e = this.contractWrapper.readContract.interface.getEvent(t);
    this.contractWrapper.readContract.on(e.name, (...a) => {
      let n = {};
      e.inputs.map((s2) => s2.name).forEach((s2, i2) => {
        n[s2] = a[i2];
      }), r2(n);
    });
  }
  removeListener(t, r2) {
    let e = this.contractWrapper.readContract.interface.getEvent(t);
    this.contractWrapper.readContract.off(e.name, r2);
  }
  removeAllListeners() {
    this.contractWrapper.readContract.removeAllListeners();
  }
};
p2(k3, "ContractEvents");
var lr = class extends Kt {
  constructor(t, r2, e, a = {}, n = new C2(t, r2, lr.contractFactory.abi, a)) {
    super(n, e, a);
    this.metadata = new W2(this.contractWrapper, lr.schema, this.storage), this.roles = new K2(this.contractWrapper, lr.contractRoles), this.royalty = new nt(this.contractWrapper, this.metadata), this.primarySale = new ut2(this.contractWrapper), this.encoder = new x3(this.contractWrapper), this.estimator = new P2(this.contractWrapper), this.signature = new Hr(this.contractWrapper, this.roles, this.storage), this.events = new k3(this.contractWrapper);
  }
  async mint(t) {
    return this.mintTo(await this.contractWrapper.getSignerAddress(), t);
  }
  async mintTo(t, r2) {
    let e = await Vr(r2, this.storage), a = await this.contractWrapper.sendTransaction("mintTo", [t, e]), n = this.contractWrapper.parseLogs("TokensMinted", a == null ? void 0 : a.logs);
    if (n.length === 0)
      throw new Error("TokenMinted event not found");
    let s2 = n[0].args.tokenIdMinted;
    return { id: s2, receipt: a, data: () => this.get(s2.toString()) };
  }
  async mintBatch(t) {
    return this.mintBatchTo(await this.contractWrapper.getSignerAddress(), t);
  }
  async mintBatchTo(t, r2) {
    let a = (await Rt(r2, this.storage)).map((i2) => this.contractWrapper.readContract.interface.encodeFunctionData("mintTo", [t, i2])), n = await this.contractWrapper.multiCall(a), s2 = this.contractWrapper.parseLogs("TokensMinted", n.logs);
    if (s2.length === 0 || s2.length < r2.length)
      throw new Error("TokenMinted event not found, minting failed");
    return s2.map((i2) => {
      let c2 = i2.args.tokenIdMinted;
      return { id: c2, receipt: n, data: () => this.get(c2) };
    });
  }
};
var H2 = lr;
p2(H2, "NFTCollection"), g2(H2, "contractType", "nft-collection"), g2(H2, "contractRoles", ["admin", "minter", "transfer"]), g2(H2, "contractFactory", Y), g2(H2, "schema", qa);
var Ja = v2.merge(O2).merge(Ut).merge(J2);
var as = E2.merge(O2).merge(Ut).merge(J2);
var os = Ja.merge(q2).merge(lt).merge(B2);
var Qa = { deploy: os, output: as, input: Ja };
var P2 = class {
  constructor(t) {
    this.contractWrapper = t;
  }
  async gasCostOf(t, r2) {
    let e = await this.contractWrapper.getPreferredGasPrice(), a = await this.contractWrapper.estimateGas(t, r2);
    return ethers_exports.utils.formatEther(a.mul(e));
  }
  async currentGasPriceInGwei() {
    let t = await this.contractWrapper.getProvider().getGasPrice();
    return ethers_exports.utils.formatUnits(t, "gwei");
  }
};
p2(P2, "GasCostEstimator");
var ur = class extends qt {
  constructor(t, r2, e, a = {}, n = new C2(t, r2, ur.contractFactory.abi, a)) {
    super(n, e, a);
    this.metadata = new W2(this.contractWrapper, ur.schema, this.storage), this.roles = new K2(this.contractWrapper, ur.contractRoles), this.royalty = new nt(this.contractWrapper, this.metadata), this.primarySale = new ut2(this.contractWrapper), this.claimConditions = new Mr(this.contractWrapper, this.metadata, this.storage), this.history = new Lr(this.contractWrapper), this.encoder = new x3(this.contractWrapper), this.events = new k3(this.contractWrapper), this.estimator = new P2(this.contractWrapper);
  }
  async createBatch(t) {
    var d2;
    let r2 = await this.contractWrapper.readContract.nextTokenIdToMint(), e = await this.storage.uploadMetadataBatch(t.map((m3) => Y2.parse(m3)), r2.toNumber(), this.contractWrapper.readContract.address, await ((d2 = this.contractWrapper.getSigner()) == null ? void 0 : d2.getAddress())), a = await this.contractWrapper.sendTransaction("lazyMint", [e.metadataUris.length, `${e.baseUri.endsWith("/") ? e.baseUri : `${e.baseUri}/`}`]), n = this.contractWrapper.parseLogs("TokensLazyMinted", a == null ? void 0 : a.logs), s2 = n[0].args.startTokenId, i2 = n[0].args.endTokenId, c2 = [];
    for (let m3 = s2; m3.lte(i2); m3 = m3.add(1))
      c2.push({ id: m3, receipt: a, data: () => this.getTokenMetadata(m3) });
    return c2;
  }
  async claimTo(t, r2, e, a = [(0, import_utils10.hexZeroPad)([0], 32)]) {
    let n = await this.prepareClaim(r2, e, a);
    return { receipt: await this.contractWrapper.sendTransaction("claim", [t, r2, e, n.currencyAddress, n.price, n.proofs, n.maxQuantityPerTransaction], n.overrides) };
  }
  async claim(t, r2, e = [(0, import_utils10.hexZeroPad)([0], 32)]) {
    let a = await this.contractWrapper.getSignerAddress();
    return this.claimTo(a, t, r2, e);
  }
  async prepareClaim(t, r2, e = [(0, import_utils10.hexZeroPad)([0], 32)]) {
    return _r(r2, await this.claimConditions.getActive(t), (await this.metadata.get()).merkle, this.contractWrapper, this.storage, e);
  }
};
var I2 = ur;
p2(I2, "EditionDrop"), g2(I2, "contractType", "edition-drop"), g2(I2, "contractRoles", ["admin", "minter", "transfer"]), g2(I2, "contractFactory", g), g2(I2, "schema", Qa);
var Xa = v2.merge(O2);
var ss = E2.merge(O2);
var is = Xa.merge(q2).merge(lt).merge(B2);
var to = { deploy: is, output: ss, input: Xa };
var hr = class extends qt {
  constructor(t, r2, e, a = {}, n = new C2(t, r2, hr.contractFactory.abi, a)) {
    super(n, e, a);
    this.metadata = new W2(this.contractWrapper, hr.schema, this.storage), this.roles = new K2(this.contractWrapper, hr.contractRoles), this.royalty = new nt(this.contractWrapper, this.metadata), this.primarySale = new ut2(this.contractWrapper), this.encoder = new x3(this.contractWrapper), this.estimator = new P2(this.contractWrapper), this.events = new k3(this.contractWrapper), this.signature = new jr(this.contractWrapper, this.roles, this.storage);
  }
  async mint(t) {
    return this.mintTo(await this.contractWrapper.getSignerAddress(), t);
  }
  async mintTo(t, r2) {
    let e = await Vr(r2.metadata, this.storage), a = await this.contractWrapper.sendTransaction("mintTo", [t, ethers_exports.constants.MaxUint256, e, r2.supply]), n = this.contractWrapper.parseLogs("TokensMinted", a == null ? void 0 : a.logs);
    if (n.length === 0)
      throw new Error("TokenMinted event not found");
    let s2 = n[0].args.tokenIdMinted;
    return { id: s2, receipt: a, data: () => this.get(s2.toString()) };
  }
  async mintAdditionalSupply(t, r2) {
    return this.mintAdditionalSupplyTo(await this.contractWrapper.getSignerAddress(), t, r2);
  }
  async mintAdditionalSupplyTo(t, r2, e) {
    let a = await this.getTokenMetadata(r2), n = await this.contractWrapper.sendTransaction("mintTo", [t, r2, a.uri, e]);
    return { id: BigNumber.from(r2), receipt: n, data: () => this.get(r2) };
  }
  async mintBatch(t) {
    return this.mintBatchTo(await this.contractWrapper.getSignerAddress(), t);
  }
  async mintBatchTo(t, r2) {
    let e = r2.map((d2) => d2.metadata), a = r2.map((d2) => d2.supply), s2 = (await Rt(e, this.storage)).map((d2, m3) => this.contractWrapper.readContract.interface.encodeFunctionData("mintTo", [t, ethers_exports.constants.MaxUint256, d2, a[m3]])), i2 = await this.contractWrapper.multiCall(s2), c2 = this.contractWrapper.parseLogs("TokensMinted", i2.logs);
    if (c2.length === 0 || c2.length < e.length)
      throw new Error("TokenMinted event not found, minting failed");
    return c2.map((d2) => {
      let m3 = d2.args.tokenIdMinted;
      return { id: m3, receipt: i2, data: () => this.get(m3) };
    });
  }
};
var j2 = hr;
p2(j2, "Edition"), g2(j2, "contractType", "edition"), g2(j2, "contractRoles", ["admin", "minter", "transfer"]), g2(j2, "contractFactory", G), g2(j2, "schema", to);
var eo = v2.merge(J2);
var ds = E2.merge(J2);
var ms = eo.merge(q2).merge(lt).merge(B2);
var ao = { deploy: ms, output: ds, input: eo };
var fr = class extends Ur {
  constructor(t, r2, e, a = {}, n = new C2(t, r2, fr.contractFactory.abi, a)) {
    super(n, e, a);
    this.metadata = new W2(this.contractWrapper, fr.schema, this.storage), this.roles = new K2(this.contractWrapper, fr.contractRoles), this.history = new $r(this.contractWrapper), this.encoder = new x3(this.contractWrapper), this.estimator = new P2(this.contractWrapper), this.events = new k3(this.contractWrapper);
  }
  async getVoteBalance() {
    return await this.getVoteBalanceOf(await this.contractWrapper.getSignerAddress());
  }
  async getVoteBalanceOf(t) {
    return await this.getValue(await this.contractWrapper.readContract.getVotes(t));
  }
  async getDelegation() {
    return await this.getDelegationOf(await this.contractWrapper.getSignerAddress());
  }
  async getDelegationOf(t) {
    return await this.contractWrapper.readContract.delegates(t);
  }
  async mint(t) {
    return this.mintTo(await this.contractWrapper.getSignerAddress(), t);
  }
  async mintTo(t, r2) {
    let e = ethers_exports.utils.parseUnits(BigNumber.from(r2).toString(), await this.contractWrapper.readContract.decimals());
    return { receipt: await this.contractWrapper.sendTransaction("mintTo", [t, e]) };
  }
  async mintBatchTo(t) {
    let r2 = [];
    for (let e of t) {
      let a = ethers_exports.utils.parseUnits(BigNumber.from(e.amount).toString(), await this.contractWrapper.readContract.decimals());
      r2.push(this.contractWrapper.readContract.interface.encodeFunctionData("mintTo", [e.toAddress, a]));
    }
    return { receipt: await this.contractWrapper.multiCall(r2) };
  }
  async delegateTo(t) {
    return { receipt: await this.contractWrapper.sendTransaction("delegate", [t]) };
  }
};
var L2 = fr;
p2(L2, "Token"), g2(L2, "contractType", "token"), g2(L2, "contractRoles", ["admin", "minter", "transfer"]), g2(L2, "contractFactory", Q), g2(L2, "schema", ao);
var so = mod.object({ voting_delay_in_blocks: mod.number().min(0).default(0), voting_period_in_blocks: mod.number().min(1).default(1), voting_token_address: ot, voting_quorum_fraction: Qe.default(0), proposal_token_threshold: at2.default(1) });
var us = so.extend({ proposal_token_threshold: b });
var io = v2.merge(so);
var hs = E2.merge(us);
var fs = io.merge(B2);
var co = { deploy: fs, output: hs, input: io };
var Il = mod.object({ proposalId: b, proposer: mod.string(), targets: mod.array(mod.string()), values: mod.array(b), signatures: mod.array(mod.string()), calldatas: mod.array(mod.string()), startBlock: b, endBlock: b, description: mod.string() });
var Yr = class {
  constructor(t, r2, e, a = {}, n = new C2(t, r2, Yr.contractFactory.abi, a)) {
    this.contractWrapper = n, this.storage = e, this.metadata = new W2(this.contractWrapper, Yr.schema, this.storage), this.encoder = new x3(this.contractWrapper), this.estimator = new P2(this.contractWrapper), this.events = new k3(this.contractWrapper);
  }
  onNetworkUpdated(t) {
    this.contractWrapper.updateSignerOrProvider(t);
  }
  getAddress() {
    return this.contractWrapper.readContract.address;
  }
  async get(t) {
    let e = (await this.getAll()).filter((a) => (0, import_deep_equal3.default)(BigNumber.from(a.proposalId), BigNumber.from(t)));
    if (e.length === 0)
      throw new Error("proposal not found");
    return e[0];
  }
  async getAll() {
    return Promise.all((await this.contractWrapper.readContract.getAllProposals()).map(async (t) => ({ proposalId: t.proposalId, proposer: t.proposer, description: t.description, startBlock: t.startBlock, endBlock: t.endBlock, state: await this.contractWrapper.readContract.state(t.proposalId), votes: await this.getProposalVotes(t.proposalId), executions: t[3].map((r2, e) => ({ toAddress: t.targets[e], nativeTokenValue: r2, transactionData: t.calldatas[e] })) })));
  }
  async getProposalVotes(t) {
    let r2 = await this.contractWrapper.readContract.proposalVotes(t);
    return [{ type: Ht.Against, label: "Against", count: r2.againstVotes }, { type: Ht.For, label: "For", count: r2.forVotes }, { type: Ht.Abstain, label: "Abstain", count: r2.abstainVotes }];
  }
  async hasVoted(t, r2) {
    return r2 || (r2 = await this.contractWrapper.getSignerAddress()), this.contractWrapper.readContract.hasVoted(t, r2);
  }
  async canExecute(t) {
    await this.ensureExists(t);
    let r2 = await this.get(t), e = r2.executions.map((i2) => i2.toAddress), a = r2.executions.map((i2) => i2.nativeTokenValue), n = r2.executions.map((i2) => i2.transactionData), s2 = ethers_exports.utils.id(r2.description);
    try {
      return await this.contractWrapper.callStatic().execute(e, a, n, s2), true;
    } catch {
      return false;
    }
  }
  async balance() {
    let t = await this.contractWrapper.readContract.provider.getBalance(this.contractWrapper.readContract.address);
    return { name: "", symbol: "", decimals: 18, value: t, displayValue: ethers_exports.utils.formatUnits(t, 18) };
  }
  async balanceOfToken(t) {
    let r2 = V6.connect(t, this.contractWrapper.getProvider());
    return await F2(this.contractWrapper.getProvider(), t, await r2.balanceOf(this.contractWrapper.readContract.address));
  }
  async ensureExists(t) {
    try {
      await this.contractWrapper.readContract.state(t);
    } catch {
      throw Error(`Proposal ${t} not found`);
    }
  }
  async settings() {
    let [t, r2, e, a, n] = await Promise.all([this.contractWrapper.readContract.votingDelay(), this.contractWrapper.readContract.votingPeriod(), this.contractWrapper.readContract.token(), this.contractWrapper.readContract.quorumNumerator(), this.contractWrapper.readContract.proposalThreshold()]), s2 = await kt(this.contractWrapper.getProvider(), e);
    return { votingDelay: t.toString(), votingPeriod: r2.toString(), votingTokenAddress: e, votingTokenMetadata: s2, votingQuorumFraction: a.toString(), proposalTokenThreshold: n.toString() };
  }
  async propose(t, r2) {
    r2 || (r2 = [{ toAddress: this.contractWrapper.readContract.address, nativeTokenValue: 0, transactionData: "0x" }]);
    let e = r2.map((c2) => c2.toAddress), a = r2.map((c2) => c2.nativeTokenValue), n = r2.map((c2) => c2.transactionData), s2 = await this.contractWrapper.sendTransaction("propose", [e, a, n, t]);
    return { id: this.contractWrapper.parseLogs("ProposalCreated", s2 == null ? void 0 : s2.logs)[0].args.proposalId, receipt: s2 };
  }
  async vote(t, r2, e = "") {
    return await this.ensureExists(t), { receipt: await this.contractWrapper.sendTransaction("castVoteWithReason", [t, r2, e]) };
  }
  async execute(t) {
    await this.ensureExists(t);
    let r2 = await this.get(t), e = r2.executions.map((i2) => i2.toAddress), a = r2.executions.map((i2) => i2.nativeTokenValue), n = r2.executions.map((i2) => i2.transactionData), s2 = ethers_exports.utils.id(r2.description);
    return { receipt: await this.contractWrapper.sendTransaction("execute", [e, a, n, s2]) };
  }
};
var z2 = Yr;
p2(z2, "Vote"), g2(z2, "contractType", "vote"), g2(z2, "contractFactory", n0), g2(z2, "schema", co);
var mo = mod.object({ address: ot, sharesBps: Wt.gt(0, "Shares must be greater than 0") });
var Cs = mo.extend({ address: ot, sharesBps: Wt });
var Re = v2.extend({ recipients: mod.array(mo).default([]).superRefine((o2, t) => {
  let r2 = {}, e = 0;
  for (let a = 0; a < o2.length; a++) {
    let n = o2[a];
    r2[n.address] && t.addIssue({ code: mod.ZodIssueCode.custom, message: "Duplicate address.", path: [a, "address"] }), r2[n.address] = true, e += n.sharesBps, e > 1e4 && t.addIssue({ code: mod.ZodIssueCode.custom, message: "Total shares cannot go over 100%.", path: [a, "sharesBps"] });
  }
  e !== 1e4 && t.addIssue({ code: mod.ZodIssueCode.custom, message: `Total shares need to add up to 100%. Total shares are currently ${e / 100}%`, path: [] });
}) });
var Ss = E2.extend({ recipients: mod.array(Cs) });
var Ts = Re.merge(q2).merge(Re).merge(B2);
var lo = { deploy: Ts, output: Ss, input: Re };
var Xr = class {
  constructor(t, r2, e, a = {}, n = new C2(t, r2, Xr.contractFactory.abi, a)) {
    this.contractWrapper = n, this.storage = e, this.metadata = new W2(this.contractWrapper, Xr.schema, this.storage), this.encoder = new x3(this.contractWrapper), this.estimator = new P2(this.contractWrapper), this.events = new k3(this.contractWrapper);
  }
  onNetworkUpdated(t) {
    this.contractWrapper.updateSignerOrProvider(t);
  }
  getAddress() {
    return this.contractWrapper.readContract.address;
  }
  async getAllRecipients() {
    let t = [], r2 = BigNumber.from(0), e = await this.contractWrapper.readContract.payeeCount();
    for (; r2.lt(e); )
      try {
        let a = await this.contractWrapper.readContract.payee(r2);
        t.push(await this.getRecipientSplitPercentage(a)), r2 = r2.add(1);
      } catch (a) {
        if ("method" in a && a.method.toLowerCase().includes("payee(uint256)"))
          break;
        throw a;
      }
    return t;
  }
  async balanceOfAllRecipients() {
    let t = await this.getAllRecipients(), r2 = {};
    for (let e of t)
      r2[e.address] = await this.balanceOf(e.address);
    return r2;
  }
  async balanceOfTokenAllRecipients(t) {
    let r2 = await this.getAllRecipients(), e = {};
    for (let a of r2)
      e[a.address] = await this.balanceOfToken(a.address, t);
    return e;
  }
  async balanceOf(t) {
    let r2 = await this.contractWrapper.readContract.provider.getBalance(this.getAddress()), e = await this.contractWrapper.readContract["totalReleased()"](), a = r2.add(e);
    return this._pendingPayment(t, a, await this.contractWrapper.readContract["released(address)"](t));
  }
  async balanceOfToken(t, r2) {
    let a = await V6.connect(r2, this.contractWrapper.getProvider()).balanceOf(this.getAddress()), n = await this.contractWrapper.readContract["totalReleased(address)"](r2), s2 = a.add(n), i2 = await this._pendingPayment(t, s2, await this.contractWrapper.readContract["released(address,address)"](r2, t));
    return await F2(this.contractWrapper.getProvider(), r2, i2);
  }
  async getRecipientSplitPercentage(t) {
    let [r2, e] = await Promise.all([this.contractWrapper.readContract.totalShares(), this.contractWrapper.readContract.shares(t)]);
    return { address: t, splitPercentage: e.mul(BigNumber.from(1e7)).div(r2).toNumber() / 1e5 };
  }
  async withdraw(t) {
    return { receipt: await this.contractWrapper.sendTransaction("release(address)", [t]) };
  }
  async withdrawToken(t, r2) {
    return { receipt: await this.contractWrapper.sendTransaction("release(address,address)", [r2, t]) };
  }
  async distribute() {
    return { receipt: await this.contractWrapper.sendTransaction("distribute()", []) };
  }
  async distributeToken(t) {
    return { receipt: await this.contractWrapper.sendTransaction("distribute(address)", [t]) };
  }
  async _pendingPayment(t, r2, e) {
    return r2.mul(await this.contractWrapper.readContract.shares(t)).div(await this.contractWrapper.readContract.totalShares()).sub(e);
  }
};
var Z2 = Xr;
p2(Z2, "Split"), g2(Z2, "contractType", "split"), g2(Z2, "contractFactory", N2), g2(Z2, "schema", lo);
var ho = v2;
var Ws = E2;
var vs = ho.merge(q2).merge(B2);
var fo = { deploy: vs, output: Ws, input: ho };
var yr = class {
  constructor(t, r2, e, a = {}, n = new C2(t, r2, yr.contractFactory.abi, a)) {
    this.contractWrapper = n, this.storage = e, this.metadata = new W2(this.contractWrapper, yr.schema, this.storage), this.roles = new K2(this.contractWrapper, yr.contractRoles), this.encoder = new x3(this.contractWrapper), this.estimator = new P2(this.contractWrapper), this.direct = new qr(this.contractWrapper, this.storage), this.auction = new Jr(this.contractWrapper, this.storage), this.events = new k3(this.contractWrapper);
  }
  onNetworkUpdated(t) {
    this.contractWrapper.updateSignerOrProvider(t);
  }
  getAddress() {
    return this.contractWrapper.readContract.address;
  }
  async getListing(t) {
    let r2 = await this.contractWrapper.readContract.listings(t);
    if (r2.assetContract === AddressZero)
      throw new yt(this.getAddress(), t.toString());
    switch (r2.listingType) {
      case M2.Auction:
        return await this.auction.mapListing(r2);
      case M2.Direct:
        return await this.direct.mapListing(r2);
      default:
        throw new Error(`Unknown listing type: ${r2.listingType}`);
    }
  }
  async getActiveListings() {
    return (await this.getAllListingsNoFilter()).filter((r2) => r2.type === M2.Auction && BigNumber.from(r2.endTimeInEpochSeconds).gt(BigNumber.from(Math.floor(Date.now() / 1e3))) || r2.type === M2.Direct && r2.quantity > 0);
  }
  async getAllListings(t) {
    let r2 = BigNumber.from((t == null ? void 0 : t.start) || 0).toNumber(), e = BigNumber.from((t == null ? void 0 : t.count) || 100).toNumber(), a = await this.getAllListingsNoFilter();
    return t && (t.seller && (a = a.filter((n) => {
      var s2;
      return n.sellerAddress.toString().toLowerCase() === ((s2 = t == null ? void 0 : t.seller) == null ? void 0 : s2.toString().toLowerCase());
    })), t.tokenContract && (t.tokenId ? a = a.filter((n) => {
      var s2, i2;
      return n.assetContractAddress.toString().toLowerCase() === ((s2 = t == null ? void 0 : t.tokenContract) == null ? void 0 : s2.toString().toLowerCase()) && n.tokenId.toString() === ((i2 = t == null ? void 0 : t.tokenId) == null ? void 0 : i2.toString());
    }) : a = a.filter((n) => {
      var s2;
      return n.assetContractAddress.toString().toLowerCase() === ((s2 = t == null ? void 0 : t.tokenContract) == null ? void 0 : s2.toString().toLowerCase());
    })), a = a.filter((n, s2) => s2 >= r2), a = a.slice(0, e)), a.filter((n) => n !== void 0);
  }
  getAll = this.getAllListings;
  async getTotalCount() {
    return await this.contractWrapper.readContract.totalListings();
  }
  async isRestrictedToListerRoleOnly() {
    return !await this.contractWrapper.readContract.hasRole(D2("lister"), AddressZero);
  }
  async getBidBufferBps() {
    return this.contractWrapper.readContract.bidBufferBps();
  }
  async getTimeBufferInSeconds() {
    return this.contractWrapper.readContract.timeBuffer();
  }
  async buyoutListing(t, r2, e) {
    let a = await this.contractWrapper.readContract.listings(t);
    if (a.listingId.toString() !== t.toString())
      throw new yt(this.getAddress(), t.toString());
    switch (a.listingType) {
      case M2.Direct:
        return invariant(r2 !== void 0, "quantityDesired is required when buying out a direct listing"), await this.direct.buyoutListing(t, r2, e);
      case M2.Auction:
        return await this.auction.buyoutListing(t);
      default:
        throw Error(`Unknown listing type: ${a.listingType}`);
    }
  }
  async setBidBufferBps(t) {
    await this.roles.verify(["admin"], await this.contractWrapper.getSignerAddress());
    let r2 = await this.getTimeBufferInSeconds();
    await this.contractWrapper.sendTransaction("setAuctionBuffers", [r2, BigNumber.from(t)]);
  }
  async setTimeBufferInSeconds(t) {
    await this.roles.verify(["admin"], await this.contractWrapper.getSignerAddress());
    let r2 = await this.getBidBufferBps();
    await this.contractWrapper.sendTransaction("setAuctionBuffers", [BigNumber.from(t), r2]);
  }
  async allowListingFromSpecificAssetOnly(t) {
    let r2 = [];
    (await this.roles.get("asset")).includes(AddressZero) && r2.push(this.encoder.encode("revokeRole", [D2("asset"), AddressZero])), r2.push(this.encoder.encode("grantRole", [D2("asset"), t])), await this.contractWrapper.multiCall(r2);
  }
  async allowListingFromAnyAsset() {
    let t = [], r2 = await this.roles.get("asset");
    for (let e in r2)
      t.push(this.encoder.encode("revokeRole", [D2("asset"), e]));
    t.push(this.encoder.encode("grantRole", [D2("asset"), AddressZero])), await this.contractWrapper.multiCall(t);
  }
  async getAllListingsNoFilter() {
    return (await Promise.all(Array.from(Array((await this.contractWrapper.readContract.totalListings()).toNumber()).keys()).map(async (r2) => {
      let e;
      try {
        e = await this.getListing(r2);
      } catch {
        return;
      }
      if (e.type === M2.Auction)
        return e;
      if (!!await this.direct.isStillValidListing(e))
        return e;
    }))).filter((r2) => r2 !== void 0);
  }
};
var U2 = yr;
p2(U2, "Marketplace"), g2(U2, "contractType", "marketplace"), g2(U2, "contractRoles", ["admin", "lister", "asset"]), g2(U2, "contractFactory", _), g2(U2, "schema", fo);
var go = v2.merge(O2).merge(J2);
var ks = E2.merge(O2).merge(J2);
var Ps = go.merge(q2).merge(B2);
var yo = { deploy: Ps, output: ks, input: go };
var wr = class {
  constructor(t, r2, e, a = {}, n = new C2(t, r2, wr.contractFactory.abi, a)) {
    this.contractWrapper = n, this.storage = e, this.metadata = new W2(this.contractWrapper, wr.schema, this.storage), this.roles = new K2(this.contractWrapper, wr.contractRoles), this.royalty = new nt(this.contractWrapper, this.metadata), this.encoder = new x3(this.contractWrapper), this.estimator = new P2(this.contractWrapper), this.events = new k3(this.contractWrapper);
  }
  onNetworkUpdated(t) {
    this.contractWrapper.updateSignerOrProvider(t);
  }
  getAddress() {
    return this.contractWrapper.readContract.address;
  }
  async get(t) {
    let [r2, e, a] = await Promise.all([Pt(this.getAddress(), this.contractWrapper.getProvider(), t, this.storage), this.contractWrapper.readContract.packs(t), this.contractWrapper.readContract.totalSupply(t).catch(() => BigNumber.from("0"))]);
    return { id: BigNumber.from(t).toString(), metadata: r2, creator: e.creator, currentSupply: a, openStart: e.openStart.gt(0) ? new Date(e.openStart.toNumber() * 1e3) : null };
  }
  async getAll() {
    let t = (await this.contractWrapper.readContract.nextTokenId()).toNumber();
    return await Promise.all(Array.from(Array(t).keys()).map((r2) => this.get(r2.toString())));
  }
  async getNFTs(t) {
    let r2 = await this.contractWrapper.readContract.getPackWithRewards(t);
    if (!r2.source)
      throw new dt();
    return (await Promise.all(r2.tokenIds.map((a) => Pt(r2.source, this.contractWrapper.getProvider(), a.toString(), this.storage)))).map((a, n) => ({ supply: r2.amountsPacked[n], metadata: a }));
  }
  async balanceOf(t, r2) {
    return await this.contractWrapper.readContract.balanceOf(t, r2);
  }
  async balance(t) {
    return await this.balanceOf(await this.contractWrapper.getSignerAddress(), t);
  }
  async isApproved(t, r2) {
    return await this.contractWrapper.readContract.isApprovedForAll(t, r2);
  }
  async getLinkBalance() {
    let t = await this.contractWrapper.getChainID(), r2 = dr[t], e = V6.connect(r2.linkTokenAddress, this.contractWrapper.getProvider());
    return await F2(this.contractWrapper.getProvider(), r2.linkTokenAddress, await e.balanceOf(this.getAddress()));
  }
  async getOwned(t) {
    let r2 = t || await this.contractWrapper.getSignerAddress(), e = await this.contractWrapper.readContract.nextTokenId(), n = (await this.contractWrapper.readContract.balanceOfBatch(Array(e.toNumber()).fill(r2), Array.from(Array(e.toNumber()).keys()))).map((s2, i2) => ({ tokenId: i2, balance: s2 })).filter((s2) => s2.balance.gt(0));
    return await Promise.all(n.map(async ({ tokenId: s2, balance: i2 }) => {
      let c2 = await this.get(s2.toString());
      return R2(T2({}, c2), { ownedByAddress: i2 });
    }));
  }
  async open(t) {
    let r2 = await this.contractWrapper.sendTransaction("openPack", [t]), e = this.contractWrapper.parseLogs("PackOpenRequested", r2 == null ? void 0 : r2.logs);
    if (e.length === 0)
      throw new Error("Failed to open pack");
    let a = e[0], n = a.args.requestId, s2 = a.args.opener, i2 = await new Promise((m3) => {
      this.contractWrapper.readContract.once(this.contractWrapper.readContract.filters.PackOpenFulfilled(null, s2), (h2, y2, w3, _2, pt) => {
        n === w3 && m3({ packId: h2, opener: y2, requestId: n, rewardContract: _2, rewardIds: pt });
      });
    }), { rewardIds: c2, rewardContract: d2 } = i2;
    return c2.map((m3) => ({ id: t, receipt: r2, data: () => Pt(d2, this.contractWrapper.getProvider(), m3.toString(), this.storage) }));
  }
  async create(t) {
    let r2 = B6.connect(t.assetContract, this.contractWrapper.getSigner() || this.contractWrapper.getProvider()), e = await this.contractWrapper.getSignerAddress(), a = t.assets.map((y2) => y2.tokenId), n = t.assets.map((y2) => y2.amount), s2 = await this.storage.uploadMetadata(t.metadata), i2 = ethers_exports.utils.defaultAbiCoder.encode(["string", "uint256", "uint256"], [s2, t.secondsUntilOpenStart || 0, t.rewardsPerOpen || 1]), d2 = await (await r2.safeBatchTransferFrom(e, this.getAddress(), a, n, i2, await this.contractWrapper.getCallOverrides())).wait(), m3 = this.contractWrapper.parseLogs("PackAdded", d2.logs);
    if (m3.length === 0)
      throw new Error("PackCreated event not found");
    let h2 = m3[0].args.packId;
    return { id: h2, receipt: d2, data: () => this.get(h2.toString()) };
  }
  async transfer(t, r2, e) {
    return { receipt: await this.contractWrapper.sendTransaction("safeTransferFrom", [await this.contractWrapper.getSignerAddress(), t, r2, e, [0]]) };
  }
  async transferFrom(t, r2, e, a = [0]) {
    return { receipt: await this.contractWrapper.sendTransaction("safeTransferFrom", [t, r2, e.tokenId, e.amount, a]) };
  }
  async transferBatchFrom(t, r2, e, a = [0]) {
    let n = e.map((i2) => i2.tokenId), s2 = e.map((i2) => i2.amount);
    return { receipt: await this.contractWrapper.sendTransaction("safeBatchTransferFrom", [t, r2, n, s2, a]) };
  }
  async setApproval(t, r2 = true) {
    return { receipt: await this.contractWrapper.sendTransaction("setApprovalForAll", [t, r2]) };
  }
  async depositLink(t) {
    let r2 = await this.contractWrapper.getChainID(), e = dr[r2];
    return { receipt: await (await V6.connect(e.linkTokenAddress, this.contractWrapper.getProvider()).transfer(this.getAddress(), t, await this.contractWrapper.getCallOverrides())).wait() };
  }
};
var $2 = wr;
p2($2, "Pack"), g2($2, "contractType", "pack"), g2($2, "contractRoles", ["admin", "minter", "pauser", "transfer"]), g2($2, "contractFactory", W), g2($2, "schema", yo);
var So = v2.merge(O2).merge(Ut).merge(J2);
var _s = E2.merge(O2).merge(Ut).merge(J2);
var Ds = So.merge(q2).merge(lt).merge(B2);
var To = { deploy: Ds, output: _s, input: So };
var te = class {
  constructor(t, r2) {
    this.contractWrapper = t, this.storage = r2;
  }
  async createDelayedRevealBatch(t, r2, e) {
    var pt, it;
    if (!e)
      throw new Error("Password is required");
    let { baseUri: a } = await this.storage.uploadMetadataBatch([Y2.parse(t)], 0, this.contractWrapper.readContract.address, await ((pt = this.contractWrapper.getSigner()) == null ? void 0 : pt.getAddress())), n = await this.contractWrapper.readContract.nextTokenIdToMint(), s2 = await this.storage.uploadMetadataBatch(r2.map((et) => Y2.parse(et)), n.toNumber(), this.contractWrapper.readContract.address, await ((it = this.contractWrapper.getSigner()) == null ? void 0 : it.getAddress())), i2 = s2.baseUri, c2 = await this.contractWrapper.readContract.getBaseURICount(), d2 = await this.contractWrapper.readContract.encryptDecrypt(ethers_exports.utils.toUtf8Bytes(i2.endsWith("/") ? i2 : `${i2}/`), await this.hashDelayRevealPasword(c2, e)), m3 = await this.contractWrapper.sendTransaction("lazyMint", [s2.metadataUris.length, a.endsWith("/") ? a : `${a}/`, d2]), h2 = this.contractWrapper.parseLogs("TokensLazyMinted", m3 == null ? void 0 : m3.logs), y2 = h2[0].args.startTokenId, w3 = h2[0].args.endTokenId, _2 = [];
    for (let et = y2; et.lte(w3); et = et.add(1))
      _2.push({ id: et, receipt: m3 });
    return _2;
  }
  async reveal(t, r2) {
    if (!r2)
      throw new Error("Password is required");
    let e = await this.hashDelayRevealPasword(t, r2);
    try {
      let a = await this.contractWrapper.callStatic().reveal(t, e);
      if (!a.includes("://") || !a.endsWith("/"))
        throw new Error("invalid password");
    } catch {
      throw new Error("invalid password");
    }
    return { receipt: await this.contractWrapper.sendTransaction("reveal", [t, e]) };
  }
  async getBatchesToReveal() {
    let t = await this.contractWrapper.readContract.getBaseURICount();
    if (t.isZero())
      return [];
    let r2 = Array.from(Array(t.toNumber()).keys()), e = await Promise.all(r2.map((c2) => this.contractWrapper.readContract.baseURIIndices(c2))), a = e.slice(0, e.length - 1), n = await Promise.all(Array.from([0, ...a]).map((c2) => this.contractWrapper.readContract.tokenURI(c2))), s2 = await Promise.all(Array.from([0, ...a]).map((c2) => this.getNftMetadata(c2.toString()))), i2 = await Promise.all(Array.from([...e]).map((c2) => this.contractWrapper.readContract.encryptedBaseURI(c2)));
    return n.map((c2, d2) => ({ batchId: BigNumber.from(d2), batchUri: c2, placeholderMetadata: s2[d2] })).filter((c2, d2) => ethers_exports.utils.hexDataLength(i2[d2]) > 0);
  }
  async hashDelayRevealPasword(t, r2) {
    let e = await this.contractWrapper.getChainID(), a = this.contractWrapper.readContract.address;
    return ethers_exports.utils.solidityKeccak256(["string", "uint256", "uint256", "address"], [r2, e, t, a]);
  }
  async getNftMetadata(t) {
    let r2 = await this.contractWrapper.readContract.tokenURI(t);
    return Ot(t, r2, this.storage);
  }
};
p2(te, "DelayedReveal");
var Sr = class extends Kt {
  constructor(t, r2, e, a = {}, n = new C2(t, r2, Sr.contractFactory.abi, a)) {
    super(n, e, a);
    this.metadata = new W2(this.contractWrapper, Sr.schema, this.storage), this.roles = new K2(this.contractWrapper, Sr.contractRoles), this.royalty = new nt(this.contractWrapper, this.metadata), this.primarySale = new ut2(this.contractWrapper), this.claimConditions = new Br(this.contractWrapper, this.metadata, this.storage), this.encoder = new x3(this.contractWrapper), this.estimator = new P2(this.contractWrapper), this.events = new k3(this.contractWrapper), this.revealer = new te(this.contractWrapper, this.storage);
  }
  async getAllClaimed(t) {
    let r2 = BigNumber.from((t == null ? void 0 : t.start) || 0).toNumber(), e = BigNumber.from((t == null ? void 0 : t.count) || 100).toNumber(), a = Math.min((await this.contractWrapper.readContract.nextTokenIdToClaim()).toNumber(), r2 + e);
    return await Promise.all(Array.from(Array(a).keys()).map((n) => this.get(n.toString())));
  }
  async getAllUnclaimed(t) {
    let r2 = BigNumber.from((t == null ? void 0 : t.start) || 0).toNumber(), e = BigNumber.from((t == null ? void 0 : t.count) || 100).toNumber(), a = BigNumber.from(Math.min((await this.contractWrapper.readContract.nextTokenIdToMint()).toNumber(), r2 + e)), n = await this.contractWrapper.readContract.nextTokenIdToClaim();
    return await Promise.all(Array.from(Array(a.sub(n).toNumber()).keys()).map((s2) => this.getTokenMetadata(n.add(s2).toString())));
  }
  async totalClaimedSupply() {
    return await this.contractWrapper.readContract.nextTokenIdToClaim();
  }
  async totalUnclaimedSupply() {
    return (await this.contractWrapper.readContract.nextTokenIdToMint()).sub(await this.totalClaimedSupply());
  }
  async createBatch(t) {
    var m3;
    let r2 = await this.contractWrapper.readContract.nextTokenIdToMint(), e = await this.storage.uploadMetadataBatch(t.map((h2) => Y2.parse(h2)), r2.toNumber(), this.contractWrapper.readContract.address, await ((m3 = this.contractWrapper.getSigner()) == null ? void 0 : m3.getAddress())), a = e.baseUri, n = await this.contractWrapper.sendTransaction("lazyMint", [e.metadataUris.length, a.endsWith("/") ? a : `${a}/`, ethers_exports.utils.toUtf8Bytes("")]), s2 = this.contractWrapper.parseLogs("TokensLazyMinted", n == null ? void 0 : n.logs), i2 = s2[0].args.startTokenId, c2 = s2[0].args.endTokenId, d2 = [];
    for (let h2 = i2; h2.lte(c2); h2 = h2.add(1))
      d2.push({ id: h2, receipt: n, data: () => this.getTokenMetadata(h2) });
    return d2;
  }
  async claimTo(t, r2, e = [hexZeroPad([0], 32)]) {
    let a = await this.prepareClaim(r2, e), n = await this.contractWrapper.sendTransaction("claim", [t, r2, a.currencyAddress, a.price, a.proofs, a.maxQuantityPerTransaction], a.overrides), i2 = this.contractWrapper.parseLogs("TokensClaimed", n == null ? void 0 : n.logs)[0].args.startTokenId, c2 = i2.add(r2), d2 = [];
    for (let m3 = i2; m3.lt(c2); m3 = m3.add(1))
      d2.push({ id: m3, receipt: n, data: () => this.get(m3) });
    return d2;
  }
  async claim(t, r2 = [hexZeroPad([0], 32)]) {
    return this.claimTo(await this.contractWrapper.getSignerAddress(), t, r2);
  }
  async prepareClaim(t, r2 = [hexZeroPad([0], 32)]) {
    return _r(t, await this.claimConditions.getActive(), (await this.metadata.get()).merkle, this.contractWrapper, this.storage, r2);
  }
};
var V2 = Sr;
p2(V2, "NFTDrop"), g2(V2, "contractType", "nft-drop"), g2(V2, "contractRoles", ["admin", "minter", "transfer"]), g2(V2, "contractFactory", R), g2(V2, "schema", To);
var re = { [V2.contractType]: V2, [H2.contractType]: H2, [I2.contractType]: I2, [j2.contractType]: j2, [L2.contractType]: L2, [z2.contractType]: z2, [Z2.contractType]: Z2, [U2.contractType]: U2, [$2.contractType]: $2 };
var bo = { [V2.contractType]: "DropERC721", [H2.contractType]: "TokenERC721", [I2.contractType]: "DropERC1155", [j2.contractType]: "TokenERC1155", [L2.contractType]: "TokenERC20", [z2.contractType]: "VoteERC20", [Z2.contractType]: "Split", [U2.contractType]: "Marketplace", [$2.contractType]: "Pack" };
var _e = { DropERC721: V2.contractType, TokenERC721: H2.contractType, DropERC1155: I2.contractType, TokenERC1155: j2.contractType, TokenERC20: L2.contractType, VoteERC20: z2.contractType, Split: Z2.contractType, Marketplace: U2.contractType, Pack: $2.contractType };
var Ao = v2;
var Ms = E2;
var Ls = Ao;
var Wo = { deploy: Ls, output: Ms, input: Ao };
var De = class {
  constructor(t, r2, e, a = {}, n = b1.abi, s2 = new C2(t, r2, n, a)) {
    this.storage = e, this.contractWrapper = s2, $s(this.contractWrapper) && (this.metadata = new W2(this.contractWrapper, De.schema, this.storage));
  }
  onNetworkUpdated(t) {
    this.contractWrapper.updateSignerOrProvider(t);
  }
  getAddress() {
    return this.contractWrapper.readContract.address;
  }
};
var Yt = De;
p2(Yt, "CustomContract"), g2(Yt, "contractType", "custom"), g2(Yt, "schema", Wo);
function $s(o2) {
  return "contractURI" in o2.readContract && "setContractURI" in o2.readContract.functions;
}
p2($s, "supportsContractMetadata");
var ee2 = class extends C2 {
  constructor(t, r2, e, a) {
    super(r2, t, K.abi, a);
    this.storage = e;
  }
  async deploy(t, r2) {
    var y2;
    let e = re[t], a = e.schema.deploy.parse(r2), n = e.contractFactory, s2 = await this.storage.uploadMetadata(a, this.readContract.address, await ((y2 = this.getSigner()) == null ? void 0 : y2.getAddress())), i2 = n.getInterface(n.abi).encodeFunctionData("initialize", await this.getDeployArguments(t, a, s2)), c2 = bo[t];
    console.log(`Remote contractName : ${c2}`);
    let d2 = ethers_exports.utils.formatBytes32String(c2);
    console.log(`Deploying ${t} proxy`);
    let m3 = await this.sendTransaction("deployProxy", [d2, i2]);
    console.log(`${t} proxy deployed successfully`);
    let h2 = this.parseLogs("ProxyDeployed", m3.logs);
    if (h2.length < 1)
      throw new Error("No ProxyDeployed event found");
    return h2[0].args.proxy;
  }
  async getDeployArguments(t, r2, e) {
    let a = await this.getDefaultTrustedForwarders();
    switch (r2.trusted_forwarders && r2.trusted_forwarders.length > 0 && (a = r2.trusted_forwarders), t) {
      case V2.contractType:
      case H2.contractType:
        let n = V2.schema.deploy.parse(r2);
        return [await this.getSignerAddress(), n.name, n.symbol, e, a, n.primary_sale_recipient, n.fee_recipient, n.seller_fee_basis_points, n.platform_fee_basis_points, n.platform_fee_recipient];
      case I2.contractType:
      case j2.contractType:
        let s2 = I2.schema.deploy.parse(r2);
        return [await this.getSignerAddress(), s2.name, s2.symbol, e, a, s2.primary_sale_recipient, s2.fee_recipient, s2.seller_fee_basis_points, s2.platform_fee_basis_points, s2.platform_fee_recipient];
      case L2.contractType:
        let i2 = L2.schema.deploy.parse(r2);
        return [await this.getSignerAddress(), i2.name, i2.symbol, e, a, i2.primary_sale_recipient, i2.platform_fee_recipient, i2.platform_fee_basis_points];
      case z2.contractType:
        let c2 = z2.schema.deploy.parse(r2);
        return [c2.name, e, a, c2.voting_token_address, c2.voting_delay_in_blocks, c2.voting_period_in_blocks, BigNumber.from(c2.proposal_token_threshold), c2.voting_quorum_fraction];
      case Z2.contractType:
        let d2 = Z2.schema.deploy.parse(r2);
        return [await this.getSignerAddress(), e, a, d2.recipients.map((w3) => w3.address), d2.recipients.map((w3) => BigNumber.from(w3.sharesBps))];
      case U2.contractType:
        let m3 = U2.schema.deploy.parse(r2);
        return [await this.getSignerAddress(), e, a, m3.platform_fee_recipient, m3.platform_fee_basis_points];
      case $2.contractType:
        let h2 = $2.schema.deploy.parse(r2), y2 = dr[await this.getChainID()];
        return [await this.getSignerAddress(), h2.name, h2.symbol, e, a, h2.fee_recipient, h2.seller_fee_basis_points, y2.fees, y2.keyHash];
      default:
        return [];
    }
  }
  async getDefaultTrustedForwarders() {
    let t = await this.getChainID(), r2 = ea.find((a) => a === t), e = r2 ? fe[r2].biconomyForwarder : AddressZero;
    return e !== AddressZero ? [nr, e] : [nr];
  }
};
p2(ee2, "ContractFactory");
var ae = class extends Et {
  constructor(t, r2, e) {
    super(t, r2);
    this.storage = e;
  }
  async deployNFTCollection(t) {
    return await this.deployContract(H2.contractType, t);
  }
  async deployNFTDrop(t) {
    return await this.deployContract(V2.contractType, t);
  }
  async deployEdition(t) {
    return await this.deployContract(j2.contractType, t);
  }
  async deployEditionDrop(t) {
    let r2 = I2.schema.deploy.parse(t);
    return await this.deployContract(I2.contractType, r2);
  }
  async deployToken(t) {
    return await this.deployContract(L2.contractType, t);
  }
  async deployMarketplace(t) {
    return await this.deployContract(U2.contractType, t);
  }
  async deployPack(t) {
    return await this.deployContract($2.contractType, t);
  }
  async deploySplit(t) {
    return await this.deployContract(Z2.contractType, t);
  }
  async deployVote(t) {
    return await this.deployContract(z2.contractType, t);
  }
  async deployContract(t, r2) {
    return await (await this.getFactory()).deploy(t, r2);
  }
  async getRegistry() {
    if (this._registry)
      return this._registry;
    let t = (await this.getProvider().getNetwork()).chainId, r2 = sr(t, "twRegistry");
    return this._registry = Promise.resolve(new Qr(r2, this.getProvider(), this.options));
  }
  async getFactory() {
    if (this._factory)
      return this._factory;
    let t = (await this.getProvider().getNetwork()).chainId, r2 = sr(t, "twFactory");
    return this._factory = Promise.resolve(new ee2(r2, this.getSignerOrProvider(), this.storage, this.options));
  }
  updateSignerOrProvider(t) {
    super.updateSignerOrProvider(t), this.updateContractSignerOrProvider();
  }
  updateContractSignerOrProvider() {
    var t, r2;
    (t = this._factory) == null || t.then((e) => {
      e.updateSignerOrProvider(this.getSignerOrProvider());
    }), (r2 = this._registry) == null || r2.then((e) => {
      e.updateSignerOrProvider(this.getSignerOrProvider());
    });
  }
};
p2(ae, "ContractDeployer");
function Ne(o2, t) {
  let r2 = Object.keys(o2);
  for (let e in r2) {
    let a = o2[r2[e]], n = a instanceof File || a instanceof Buffer;
    if (typeof a == "object" && !n) {
      Ne(a, t);
      continue;
    }
    !n || (o2[r2[e]] = `ipfs://${t.splice(0, 1)[0]}`);
  }
  return o2;
}
p2(Ne, "replaceFilePropertiesWithHashes");
function oe(o2, t, r2) {
  let e = Object.keys(o2);
  for (let a in e) {
    let n = o2[e[a]];
    o2[e[a]] = ne(n, t, r2), Array.isArray(n) && (o2[e[a]] = n.map((s2) => typeof s2 == "object" ? oe(s2, t, r2) : ne(s2, t, r2))), typeof n == "object" && oe(n, t, r2);
  }
  return o2;
}
p2(oe, "replaceHashWithGatewayUrl");
function ne(o2, t, r2) {
  return typeof o2 == "string" && o2 && o2.toLowerCase().includes(t) ? o2.replace(t, r2) : o2;
}
p2(ne, "resolveGatewayUrl");
globalThis.FormData || (globalThis.FormData = Me("form-data"));
var se = class {
  constructor(t = Wa) {
    this.gatewayUrl = `${t.replace(/\/$/, "")}/`;
  }
  async upload(t, r2, e) {
    return `${await this.uploadBatch([t], 0, r2, e)}0`;
  }
  async uploadBatch(t, r2 = 0, e, a) {
    let { cid: n } = await this.uploadBatchWithCid(t, r2, e, a);
    return `ipfs://${n}/`;
  }
  async getUploadToken(t) {
    let r2 = { "X-App-Name": `CONSOLE-TS-SDK-${t}` }, e = await fetch(`${va}/grant`, { method: "GET", headers: r2 });
    if (!e.ok)
      throw new Wr("Failed to get upload token");
    return await e.text();
  }
  async get(t) {
    let e = await (await this._get(t)).json();
    return oe(e, "ipfs://", this.gatewayUrl);
  }
  async uploadMetadata(t, r2, e) {
    let { metadataUris: a } = await this.uploadMetadataBatch([t], 0, r2, e);
    return a[0];
  }
  async uploadMetadataBatch(t, r2, e, a) {
    let n = (await this.batchUploadProperties(t)).map((m3) => JSON.stringify(m3)), { cid: s2, fileNames: i2 } = await this.uploadBatchWithCid(n, r2, e, a), c2 = `ipfs://${s2}/`, d2 = i2.map((m3) => `${c2}${m3}`);
    return { baseUri: c2, metadataUris: d2 };
  }
  async _get(t) {
    let r2 = t;
    t && (r2 = ne(t, "ipfs://", this.gatewayUrl));
    let e = await fetch(r2);
    if (!e.ok)
      throw new Error(`Status code (!= 200) =${e.status}`);
    return e;
  }
  async batchUploadProperties(t) {
    let r2 = t.flatMap((i2) => this.buildFilePropertiesMap(i2, []));
    if (r2.length === 0)
      return t;
    let { cid: e, fileNames: a } = await this.uploadBatchWithCid(r2), n = [];
    for (let i2 of a)
      n.push(`${e}/${i2}`);
    return await Ne(t, n);
  }
  buildFilePropertiesMap(t, r2 = []) {
    if (Array.isArray(t))
      t.forEach((e) => {
        this.buildFilePropertiesMap(e, r2);
      });
    else if (t) {
      let e = Object.values(t);
      for (let a of e)
        a instanceof File || a instanceof Buffer ? r2.push(a) : typeof a == "object" && this.buildFilePropertiesMap(a, r2);
    }
    return r2;
  }
  async uploadBatchWithCid(t, r2 = 0, e, a) {
    let n = await this.getUploadToken(e || ""), s2 = { name: `CONSOLE-TS-SDK-${e}`, keyvalues: { sdk: "typescript", contractAddress: e, signerAddress: a } }, i2 = new FormData(), c2 = [];
    t.forEach((h2, y2) => {
      let w3 = "", _2 = h2;
      if (h2 instanceof File) {
        let it = "";
        if (h2.name) {
          let et = h2.name.lastIndexOf(".");
          et > -1 && (it = h2.name.substring(et));
        }
        w3 = `${y2 + r2}${it}`;
      } else
        h2 instanceof Buffer || typeof h2 == "string" ? w3 = `${y2 + r2}` : h2 && h2.name && (h2 == null ? void 0 : h2.data) ? (_2 = h2 == null ? void 0 : h2.data, w3 = `${h2.name}`) : w3 = `${y2 + r2}`;
      let pt = `files/${w3}`;
      if (c2.indexOf(w3) > -1)
        throw new Ar(w3);
      c2.push(w3), typeof window > "u" ? i2.append("file", _2, { filepath: pt }) : i2.append("file", new Blob([_2]), pt);
    }), i2.append("pinataMetadata", JSON.stringify(s2));
    let d2 = await fetch(xa, { method: "POST", headers: { Authorization: `Bearer ${n}` }, body: i2 }), m3 = await d2.json();
    if (!d2.ok)
      throw console.log(m3), new br("Failed to upload files to IPFS");
    return { cid: m3.IpfsHash, fileNames: c2 };
  }
};
p2(se, "IpfsStorage");
var Eo = class extends Et {
  contractCache = new Map();
  constructor(t, r2 = {}, e = new se()) {
    super(t, r2);
    this.storage = e, this.deployer = new ae(t, r2, e);
  }
  getNFTDrop(t) {
    return this.getContract(t, V2.contractType);
  }
  getNFTCollection(t) {
    return this.getContract(t, H2.contractType);
  }
  getEditionDrop(t) {
    return this.getContract(t, I2.contractType);
  }
  getEdition(t) {
    return this.getContract(t, j2.contractType);
  }
  getToken(t) {
    return this.getContract(t, L2.contractType);
  }
  getVote(t) {
    return this.getContract(t, z2.contractType);
  }
  getSplit(t) {
    return this.getContract(t, Z2.contractType);
  }
  getMarketplace(t) {
    return this.getContract(t, U2.contractType);
  }
  getPack(t) {
    return this.getContract(t, $2.contractType);
  }
  getContract(t, r2) {
    if (this.contractCache.has(t))
      return this.contractCache.get(t);
    let e = new re[r2](this.getSignerOrProvider(), t, this.storage, this.options);
    return this.contractCache.set(t, e), e;
  }
  async resolveContractType(t) {
    let r2 = b1.connect(t, this.getSignerOrProvider()), e = ethers_exports.utils.toUtf8String(await r2.contractType()).replace(/\x00/g, "");
    return invariant(e in _e, `${e} is not a valid contract type, falling back to custom contract`), _e[e];
  }
  async getContractList(t) {
    let r2 = await (await this.deployer.getRegistry()).getContractAddresses(t);
    return (await Promise.all(r2.map(async (a) => ({ address: a, contractType: await this.resolveContractType(a).catch((n) => (console.error(`failed to get contract type for address: ${a}`, n), "")) })))).map(({ address: a, contractType: n }) => ({ address: a, contractType: n, metadata: () => this.getContract(a, n).metadata.get() }));
  }
  updateSignerOrProvider(t) {
    super.updateSignerOrProvider(t), this.updateContractSignerOrProvider();
  }
  updateContractSignerOrProvider() {
    this.deployer.updateSignerOrProvider(this.getSignerOrProvider());
    for (let [, t] of this.contractCache)
      t.onNetworkUpdated(this.getSignerOrProvider());
  }
  async unstable_getCustomContract(t, r2) {
    if (this.contractCache.has(t))
      return this.contractCache.get(t);
    try {
      return this.getContract(t, await this.resolveContractType(t));
    } catch {
      let e = new Yt(this.getSignerOrProvider(), t, this.storage, this.options, r2);
      return this.contractCache.set(t, e), e;
    }
  }
};
p2(Eo, "ThirdwebSDK");
var sf = mod.object({ toAddress: ot, amount: vt });

export {
  buffer_exports,
  init_buffer,
  require_sha3,
  Signer,
  Web3Provider,
  getDefaultProvider,
  require_utils2 as require_utils,
  invariant,
  require_events,
  require_buffer2 as require_buffer,
  require_util,
  require_js,
  require_isarray,
  x3 as x,
  W2 as W,
  D2 as D,
  dt,
  Ue,
  Tr,
  $e,
  br,
  Ve,
  Ar,
  Ge,
  He,
  je,
  Wr,
  vr,
  xr,
  ze,
  yt,
  Mt,
  Ze2 as Ze,
  Ke,
  Er,
  ce,
  qe,
  K2 as K,
  f2 as f,
  ea,
  xt2 as xt,
  Uo,
  aa,
  $o,
  oa,
  Ut,
  me,
  $t,
  er,
  fi,
  or,
  sa,
  Wi,
  le,
  ca,
  pa,
  Fr,
  he,
  ua,
  ha,
  fa,
  ga,
  v2 as v,
  E2 as E,
  O2 as O,
  lt,
  q2 as q,
  B2 as B,
  J2 as J,
  nt,
  ut2 as ut,
  nr,
  fe,
  sr,
  ht,
  dr,
  _t,
  Dt,
  Wa,
  va,
  xa,
  Ea,
  gn,
  M2 as M,
  Ra,
  Ht,
  A2 as A,
  Br,
  Mr,
  Lr,
  Ur,
  $r,
  mr,
  Kt,
  ve2 as ve,
  cd,
  pd,
  dd,
  Ma,
  qt,
  Hr,
  jr,
  qr,
  Jr,
  k3 as k,
  H2 as H,
  P2 as P,
  I2 as I,
  j2 as j,
  L2 as L,
  z2 as z,
  Z2 as Z,
  U2 as U,
  $2 as $,
  te,
  V2 as V,
  re,
  bo,
  _e,
  Yt,
  ae,
  se,
  Eo,
  sf
};
/*!
 * EventEmitter2
 * https://github.com/hij1nx/EventEmitter2
 *
 * Copyright (c) 2013 hij1nx
 * Licensed under the MIT license.
 */
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
/*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */
/**
 * [js-sha3]{@link https://github.com/emn178/js-sha3}
 *
 * @version 0.8.0
 * @author Chen, Yi-Cyuan [emn178@gmail.com]
 * @copyright Chen, Yi-Cyuan 2015-2018
 * @license MIT
 */
/** @preserve
	(c) 2012 by Cédric Mesnil. All rights reserved.

	Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

	    - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
	    - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

	THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*/
/** @preserve
 * Counter block mode compatible with  Dr Brian Gladman fileenc.c
 * derived from CryptoJS.mode.CTR
 * Jan Hruby jhruby.web@gmail.com
 */
//# sourceMappingURL=chunk-Q4UWJ7AS.js.map
