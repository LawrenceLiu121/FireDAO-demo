var An=Object.create;var rr=Object.defineProperty,Wn=Object.defineProperties,vn=Object.getOwnPropertyDescriptor,xn=Object.getOwnPropertyDescriptors,En=Object.getOwnPropertyNames,La=Object.getOwnPropertySymbols,kn=Object.getPrototypeOf,Ua=Object.prototype.hasOwnProperty,Pn=Object.prototype.propertyIsEnumerable;var Ge=(o,t,r)=>t in o?rr(o,t,{enumerable:!0,configurable:!0,writable:!0,value:r}):o[t]=r,S=(o,t)=>{for(var r in t||(t={}))Ua.call(t,r)&&Ge(o,r,t[r]);if(La)for(var r of La(t))Pn.call(t,r)&&Ge(o,r,t[r]);return o},F=(o,t)=>Wn(o,xn(t)),p=(o,t)=>rr(o,"name",{value:t,configurable:!0});var Rn=(o,t)=>{for(var r in t)rr(o,r,{get:t[r],enumerable:!0})},$a=(o,t,r,e)=>{if(t&&typeof t=="object"||typeof t=="function")for(let a of En(t))!Ua.call(o,a)&&a!==r&&rr(o,a,{get:()=>t[a],enumerable:!(e=vn(t,a))||e.enumerable});return o};var X=(o,t,r)=>(r=o!=null?An(kn(o)):{},$a(t||!o||!o.__esModule?rr(r,"default",{value:o,enumerable:!0}):r,o)),Fn=o=>$a(rr({},"__esModule",{value:!0}),o);var f=(o,t,r)=>(Ge(o,typeof t!="symbol"?t+"":t,r),r);var Es={};Rn(Es,{AdminRoleMissingError:()=>Xe,AssetNotFoundError:()=>ze,AuctionAlreadyStartedError:()=>Er,AuctionHasNotEndedError:()=>kr,CONTRACTS_MAP:()=>ae,CONTRACT_ADDRESSES:()=>ge,ChainId:()=>h,ChainlinkVrf:()=>mr,ClaimConditionInputArray:()=>na,ClaimConditionInputSchema:()=>nr,ClaimConditionOutputSchema:()=>me,ClaimEligibility:()=>A,CommonContractOutputSchema:()=>E,CommonContractSchema:()=>v,CommonPlatformFeeSchema:()=>J,CommonPrimarySaleSchema:()=>lt,CommonRoyaltySchema:()=>D,CommonSymbolSchema:()=>Q,CommonTrustedForwarderSchema:()=>N,ContractDeployer:()=>ne,ContractEncoder:()=>x,ContractEvents:()=>k,ContractMetadata:()=>W,ContractPrimarySale:()=>ut,ContractRoles:()=>q,ContractRoyalty:()=>at,CurrencySchema:()=>Ja,CurrencyValueSchema:()=>oa,CustomContract:()=>tr,DEFAULT_IPFS_GATEWAY:()=>fa,DEFAULT_QUERY_ALL_COUNT:()=>hr,DelayedReveal:()=>re,DropErc1155ClaimConditions:()=>Mr,DropErc1155History:()=>Lr,DropErc721ClaimConditions:()=>Or,DuplicateFileNameError:()=>Wr,DuplicateLeafsError:()=>xr,Edition:()=>z,EditionDrop:()=>R,EditionMetadataInputOrUriSchema:()=>es,EditionMetadataInputSchema:()=>rs,EditionMetadataOutputSchema:()=>xe,EditionMetadataWithOwnerOutputSchema:()=>ts,Erc1155:()=>qt,Erc1155SignatureMinting:()=>Hr,Erc20:()=>Ur,Erc721:()=>Kt,Erc721SignatureMinting:()=>Gr,EventType:()=>ht,FetchError:()=>vr,FileNameMissingError:()=>Ze,FunctionDeprecatedError:()=>Qe,GasCostEstimator:()=>P,InterfaceId_IERC1155:()=>Dt,InterfaceId_IERC721:()=>_t,InvalidAddressError:()=>je,IpfsStorage:()=>se,ListingNotFoundError:()=>gt,ListingType:()=>B,Marketplace:()=>L,MarketplaceAuction:()=>zr,MarketplaceDirect:()=>jr,MerkleSchema:()=>Vt,MintRequest1155:()=>ma,MintRequest721:()=>da,MissingOwnerRoleError:()=>qe,MissingRoleError:()=>br,NATIVE_TOKENS:()=>qa,NATIVE_TOKEN_ADDRESS:()=>bt,NFTCollection:()=>j,NFTDrop:()=>$,NotEnoughTokensError:()=>Ke,NotFoundError:()=>dt,OZ_DEFENDER_FORWARDER_ADDRESS:()=>sr,OptionalPropertiesInput:()=>sa,OptionalPropertiesOutput:()=>ia,PINATA_IPFS_URL:()=>ya,Pack:()=>U,PartialClaimConditionInputSchema:()=>Bn,ProposalState:()=>Ca,QuantityAboveLimitError:()=>Je,REMOTE_CONTRACT_NAME:()=>Da,REMOTE_CONTRACT_TO_CONTRACT_TYPE:()=>Le,RestrictedTransferError:()=>Ye,SUPPORTED_CHAIN_IDS:()=>ea,Signature1155PayloadInput:()=>ca,Signature1155PayloadOutput:()=>pa,SignaturePayloadInput:()=>Fr,SignaturePayloadOutput:()=>fe,SnapshotAddress:()=>de,SnapshotInfoSchema:()=>On,SnapshotInputSchema:()=>Gt,SnapshotSchema:()=>ar,Split:()=>K,TW_IPFS_SERVER_URL:()=>ga,ThirdwebSDK:()=>Ma,Token:()=>M,TokenERC20History:()=>$r,TokenMintInputSchema:()=>xs,TransactionError:()=>ie,UnderlyingType:()=>xa,UploadError:()=>Ar,Vote:()=>Z,VoteType:()=>jt,WrongListingTypeError:()=>Ut,convertToTWError:()=>ta,createSnapshot:()=>wa,getContractAddressByChainId:()=>ir,getNativeTokenByChainId:()=>aa,getRoleHash:()=>I,hashLeafNode:()=>lo});module.exports=Fn(Es);var Rl=require("cross-fetch/polyfill");var x=class{constructor(t){this.contractWrapper=t}encode(t,r){return this.contractWrapper.readContract.interface.encodeFunctionData(t,r)}decode(t,r){return this.contractWrapper.readContract.interface.decodeFunctionData(t,r)}};p(x,"ContractEncoder");var W=class{constructor(t,r,e){this.contractWrapper=t,this.schema=r,this.storage=e}parseOutputMetadata(t){return this.schema.output.parse(t)}parseInputMetadata(t){return this.schema.input.parse(t)}async get(){let t=await this.contractWrapper.readContract.contractURI(),r=await this.storage.get(t);return this.parseOutputMetadata(r)}async set(t){let r=await this._parseAndUploadMetadata(t);return{receipt:await this.contractWrapper.sendTransaction("setContractURI",[r]),data:this.get}}async update(t){return await this.set(S(S({},await this.get()),t))}async _parseAndUploadMetadata(t){let r=this.parseInputMetadata(t);return this.storage.uploadMetadata(r)}};p(W,"ContractMetadata");var He=require("ethers"),In={admin:"",transfer:"TRANSFER_ROLE",minter:"MINTER_ROLE",pauser:"PAUSER_ROLE",editor:"EDITOR_ROLE",lister:"LISTER_ROLE",asset:"ASSET_ROLE"};function I(o){return o==="admin"?He.ethers.utils.hexZeroPad([0],32):He.ethers.utils.id(In[o])}p(I,"getRoleHash");var $t=X(require("tiny-invariant"));var dt=class extends Error{constructor(t){super(t?`Object with id ${t} NOT FOUND`:"NOT_FOUND")}};p(dt,"NotFoundError");var je=class extends Error{constructor(t){super(t?`'${t}' is an invalid address`:"Invalid address passed")}};p(je,"InvalidAddressError");var br=class extends Error{constructor(t,r){super(`MISSING ROLE: ${t} does not have the '${r}' role`)}};p(br,"MissingRoleError");var ze=class extends Error{constructor(t="The asset you're trying to use could not be found."){super(`message: ${t}`)}};p(ze,"AssetNotFoundError");var Ar=class extends Error{constructor(t){super(`UPLOAD_FAILED: ${t}`)}};p(Ar,"UploadError");var Ze=class extends Error{constructor(){super("File name is required when object is not a `File` type object.")}};p(Ze,"FileNameMissingError");var Wr=class extends Error{constructor(t){super(`DUPLICATE_FILE_NAME_ERROR: File name ${t} was passed for more than one file.`)}};p(Wr,"DuplicateFileNameError");var Ke=class extends Error{constructor(t,r,e){super(`BALANCE ERROR: you do not have enough balance on contract ${t} to use ${r} tokens. You have ${e} tokens available.`)}};p(Ke,"NotEnoughTokensError");var qe=class extends Error{constructor(){super("LIST ERROR: you should be the owner of the token to list it.")}};p(qe,"MissingOwnerRoleError");var Je=class extends Error{constructor(t){super(`BUY ERROR: You cannot buy more than ${t} tokens`)}};p(Je,"QuantityAboveLimitError");var vr=class extends Error{constructor(t,r){super(`FETCH_FAILED: ${t}`);this.innerError=r}};p(vr,"FetchError");var xr=class extends Error{constructor(t){super(`DUPLICATE_LEAFS${t?` : ${t}`:""}`)}};p(xr,"DuplicateLeafsError");var Er=class extends Error{constructor(t){super(`Auction already started with existing bid${t?`, id: ${t}`:""}`)}};p(Er,"AuctionAlreadyStartedError");var Qe=class extends Error{constructor(t){super(`FUNCTION DEPRECATED. ${t?`Use ${t} instead`:""}`)}};p(Qe,"FunctionDeprecatedError");var gt=class extends Error{constructor(t,r){super(`Could not find listing.${t?` marketplace address: ${t}`:""}${r?` listing id: ${r}`:""}`)}};p(gt,"ListingNotFoundError");var Ut=class extends Error{constructor(t,r,e,a){super(`Incorrect listing type. Are you sure you're using the right method?.${t?` marketplace address: ${t}`:""}${r?` listing id: ${r}`:""}${a?` expected type: ${a}`:""}${e?` actual type: ${e}`:""}`)}};p(Ut,"WrongListingTypeError");var Ye=class extends Error{constructor(t){super(`Failed to transfer asset, transfer is restricted.${t?` Address : ${t}`:""}`)}};p(Ye,"RestrictedTransferError");var Xe=class extends Error{constructor(t,r,e="Failed to execute transaction"){super(`${e}, admin role is missing${t?` on address: ${t}`:""}${r?` on contract: ${r}`:""}`)}};p(Xe,"AdminRoleMissingError");var kr=class extends Error{constructor(t,r){super(`Auction has not ended yet${t?`, id: ${t}`:""}${r?`, end time: ${r.toString()}`:""}`)}};p(kr,"AuctionHasNotEndedError");var ie=class extends Error{constructor(t,r,e,a,n,s,i){let c=`Contract transaction failed

`;c+=`Message: ${t}`,c+=`

| Transaction info |
`,c+=Sr("from",r),c+=Sr("to",e),c+=Sr("data",a),c+=Sr("chain",`${n.name} (${n.chainId})`);try{let d=new URL(s);c+=Sr("RPC",d.hostname)}catch{}c+=`

`,c+="Need help with this error? Join our community: https://discord.gg/thirdweb",c+=`



`,c+="| Raw error |",c+=`

`,c+=i;super(c);this.reason=t,this.from=r,this.to=e,this.data=a,this.chain=n,this.rpcUrl=s}};p(ie,"TransactionError");async function ta(o,t,r,e){let a;if(o.data)a=JSON.stringify(o.data);else if(o instanceof Error)a=o.message;else return o;let n=Tr(/.*?"message[^a-zA-Z0-9]*([^"\\]*).*?/,a),s=Tr(/.*?"data[^a-zA-Z0-9]*([^"\\]*).*?/,a),i=Tr(/.*?"url[^a-zA-Z0-9]*([^"\\]*).*?/,a),c=Tr(/.*?"from[^a-zA-Z0-9]*([^"\\]*).*?/,a),d=Tr(/.*?"to[^a-zA-Z0-9]*([^"\\]*).*?/,a);return d===""&&(d=e),c===""&&(c=r),new ie(n,c,d,s,t,i,a)}p(ta,"convertToTWError");function Sr(o,t){if(t==="")return t;let r=Array(10-o.length).fill(" ").join("");return`
${o}:${r}${t}`}p(Sr,"withSpaces");function Tr(o,t){let r=t.match(o)||[],e="";return(r==null?void 0:r.length)>0&&(e+=r[1]),e}p(Tr,"parseMessageParts");var q=class{constructor(t,r){this.contractWrapper=t,this.roles=r}async getAll(){(0,$t.default)(this.roles.length,"this contract has no support for roles");let t={};for(let r of this.roles)t[r]=await this.get(r);return t}async get(t){(0,$t.default)(this.roles.includes(t),`this contract does not support the "${t}" role`);let r=I(t),e=(await this.contractWrapper.readContract.getRoleMemberCount(r)).toNumber();return await Promise.all(Array.from(Array(e).keys()).map(a=>this.contractWrapper.readContract.getRoleMember(r,a)))}async setAll(t){let r=Object.keys(t);(0,$t.default)(r.length,"you must provide at least one role to set"),(0,$t.default)(r.every(n=>this.roles.includes(n)),"this contract does not support the given role");let e=await this.getAll(),a=[];return r.sort(n=>n==="admin"?1:-1).forEach(async n=>{let s=t[n]||[],i=e[n]||[],c=s.filter(m=>!i.includes(m)),d=i.filter(m=>!s.includes(m));c.length&&c.forEach(m=>{a.push(this.contractWrapper.readContract.interface.encodeFunctionData("grantRole",[I(n),m]))}),d.length&&d.forEach(async m=>{let u=await this.getRevokeRoleFunctionName(m);a.push(this.contractWrapper.readContract.interface.encodeFunctionData(u,[I(n),m]))})}),{receipt:await this.contractWrapper.multiCall(a)}}async verify(t,r){await Promise.all(t.map(async e=>{if(!(await this.get(e)).map(n=>n.toLowerCase()).includes(r.toLowerCase()))throw new br(r,e)}))}async grant(t,r){return(0,$t.default)(this.roles.includes(t),`this contract does not support the "${t}" role`),{receipt:await this.contractWrapper.sendTransaction("grantRole",[I(t),r])}}async revoke(t,r){(0,$t.default)(this.roles.includes(t),`this contract does not support the "${t}" role`);let e=await this.getRevokeRoleFunctionName(r);return{receipt:await this.contractWrapper.sendTransaction(e,[I(t),r])}}async getRevokeRoleFunctionName(t){return(await this.contractWrapper.getSignerAddress()).toLowerCase()===t.toLowerCase()?"renounceRole":"revokeRole"}};p(q,"ContractRoles");var ce=require("ethers"),Va=require("ethers/lib/utils"),C=require("zod");globalThis.File||(globalThis.File=require("@web-std/file").File);var ra=1e4,_n=p(()=>typeof window<"u","isBrowser"),Dn=_n()?[C.z.instanceof(File),C.z.string()]:[C.z.instanceof(Buffer),C.z.string()],Et=C.z.union(Dn),Ga=C.z.union([C.z.array(C.z.number()),C.z.string()]),T=C.z.union([C.z.string(),C.z.number(),C.z.bigint(),C.z.instanceof(ce.BigNumber)]).transform(o=>ce.BigNumber.from(o)),st=T.transform(o=>o.toString()),kt=C.z.number().max(ra,"Cannot exeed 100%").min(0,"Cannot be below 0%"),Ha=C.z.number().max(100,"Cannot exeed 100%").min(0,"Cannot be below 0%"),Nn=C.z.union([C.z.string(),C.z.number(),C.z.boolean(),C.z.null()]),Tt=C.z.lazy(()=>C.z.union([Nn,C.z.array(Tt),C.z.record(Tt)])),ja=C.z.record(Tt),za=C.z.union([C.z.string().regex(/^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/,"Invalid hex color").transform(o=>o.replace("#","")),C.z.string().length(0)]),it=C.z.string().refine(o=>(0,Va.isAddress)(o),o=>({message:`${o} is not a valid address`})),Pt=C.z.union([C.z.string().regex(/^([0-9]+\.?[0-9]*|\.[0-9]+)$/,"Invalid price"),C.z.number().min(0,"Price cannot be negative")]).transform(o=>typeof o=="number"?o.toString():o),Za=C.z.date().transform(o=>ce.BigNumber.from(Math.floor(o.getTime()/1e3))),pe=Za.default(new Date),Ka=Za.default(new Date(Date.now()+1e3*60*60*24*365*10));var la=require("@ethersproject/constants"),tt=require("zod");var or=require("zod"),Pr=require("ethers");var Qa=require("ethers/lib/utils");var h;(function(o){o[o.Mainnet=1]="Mainnet",o[o.Ropsten=3]="Ropsten",o[o.Rinkeby=4]="Rinkeby",o[o.Goerli=5]="Goerli",o[o.Kovan=42]="Kovan",o[o.BSC=56]="BSC",o[o.xDai=100]="xDai",o[o.Polygon=137]="Polygon",o[o.Moonriver=1285]="Moonriver",o[o.Mumbai=80001]="Mumbai",o[o.Harmony=16666e5]="Harmony",o[o.Localhost=1337]="Localhost",o[o.Hardhat=31337]="Hardhat",o[o.Fantom=250]="Fantom",o[o.FantomTestnet=4002]="FantomTestnet",o[o.Avalanche=43114]="Avalanche",o[o.AvalancheFujiTestnet=43113]="AvalancheFujiTestnet"})(h||(h={}));var ea=[h.Mainnet,h.Rinkeby,h.Goerli,h.Polygon,h.Mumbai,h.Fantom,h.FantomTestnet,h.Avalanche,h.AvalancheFujiTestnet];var bt="0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee",qa={[h.Mainnet]:{name:"Ether",symbol:"ETH",decimals:18,wrapped:{address:"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",name:"Wrapped Ether",symbol:"WETH"}},[h.Rinkeby]:{name:"Ether",symbol:"ETH",decimals:18,wrapped:{address:"0xc778417E063141139Fce010982780140Aa0cD5Ab",name:"Wrapped Ether",symbol:"WETH"}},[h.Goerli]:{name:"Ether",symbol:"ETH",decimals:18,wrapped:{address:"0x0bb7509324ce409f7bbc4b701f932eaca9736ab7",name:"Wrapped Ether",symbol:"WETH"}},[h.Polygon]:{name:"Matic",symbol:"MATIC",decimals:18,wrapped:{address:"0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270",name:"Wrapped Matic",symbol:"WMATIC"}},[h.Mumbai]:{name:"Matic",symbol:"MATIC",decimals:18,wrapped:{address:"0x9c3C9283D3e44854697Cd22D3Faa240Cfb032889",name:"Wrapped Matic",symbol:"WMATIC"}},[h.Avalanche]:{name:"Avalanche",symbol:"AVAX",decimals:18,wrapped:{address:"0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7",name:"Wrapped AVAX",symbol:"WAVAX"}},[h.AvalancheFujiTestnet]:{name:"Avalanche",symbol:"AVAX",decimals:18,wrapped:{address:"0xd00ae08403B9bbb9124bB305C09058E32C39A48c",name:"Wrapped AVAX",symbol:"WAVAX"}},[h.Fantom]:{name:"Fantom",symbol:"FTM",decimals:18,wrapped:{address:"0x21be370D5312f44cB42ce377BC9b8a0cEF1A4C83",name:"Wrapped Fantom",symbol:"WFTM"}},[h.FantomTestnet]:{name:"Fantom",symbol:"FTM",decimals:18,wrapped:{address:"0xf1277d1Ed8AD466beddF92ef448A132661956621",name:"Wrapped Fantom",symbol:"WFTM"}},[h.Hardhat]:{name:"Ether",symbol:"ETH",decimals:18,wrapped:{address:"0x5FbDB2315678afecb367f032d93F642f64180aa3",name:"Wrapped Ether",symbol:"WETH"}}};function aa(o){return qa[o]}p(aa,"getNativeTokenByChainId");var er=require("zod");var Ja=er.z.object({name:er.z.string(),symbol:er.z.string(),decimals:er.z.number()}),oa=Ja.extend({value:T,displayValue:er.z.string()});var _=require("zod"),Vt=_.z.object({merkle:_.z.record(_.z.string()).default({})}),de=_.z.object({address:_.z.string(),maxClaimable:_.z.number().default(0)}),Gt=_.z.union([_.z.array(_.z.string()).transform(o=>o.map(t=>de.parse({address:t}))),_.z.array(de)]),ar=_.z.object({merkleRoot:_.z.string(),claims:_.z.array(de.extend({proof:_.z.array(_.z.string())}))}),On=_.z.object({merkleRoot:_.z.string(),snapshotUri:_.z.string(),snapshot:ar});var nr=or.z.object({startTime:pe,currencyAddress:or.z.string().default(bt),price:Pt.default(0),maxQuantity:st.default(Pr.ethers.constants.MaxUint256),quantityLimitPerTransaction:st.default(Pr.ethers.constants.MaxUint256),waitInSeconds:st.default(0),merkleRootHash:Ga.default((0,Qa.hexZeroPad)([0],32)),snapshot:or.z.optional(Gt)}),na=or.z.array(nr),Bn=nr.partial(),me=nr.extend({availableSupply:or.z.string().default(""),currencyMetadata:oa.default({value:Pr.BigNumber.from("0"),displayValue:"0",symbol:"",decimals:18,name:""}),price:T,maxQuantity:T,quantityLimitPerTransaction:T,waitInSeconds:T,startTime:T.transform(o=>new Date(o.toNumber()*1e3))});var Ft=require("zod");var mt=require("zod");var Rt=require("zod");var Ya=Tt.or(Et),Mn=Rt.z.union([Rt.z.array(Rt.z.object({key:Rt.z.string(),value:Ya})).superRefine((o,t)=>{if(!o)return;let r={};o.forEach(({key:e},a)=>{r[e]||(r[e]=0),r[e]++,r[e]>1&&t.addIssue({code:Rt.z.ZodIssueCode.custom,message:`Duplicate key: ${e}`,path:[a,"key"]})})}),Rt.z.record(Ya)]).optional(),sa=Rt.z.preprocess(o=>{let t=o;return Array.isArray(t)?t.filter(r=>r.value):t},Mn).transform(o=>Array.isArray(o)?o.reduce((t,r)=>F(S({},t),{[r.key]:r.value}),{}):o),ia=ja.optional();var Xa=mt.z.object({name:mt.z.string().nonempty({message:"A name is required."}),description:mt.z.string().optional(),image:Et.optional(),external_url:Et.optional()}).catchall(mt.z.lazy(()=>Tt)),Ln=Xa.extend({id:T,uri:mt.z.string(),image:mt.z.string().optional(),external_url:mt.z.string().optional()}),et=Xa.extend({animation_url:Et.optional(),background_color:za.optional(),properties:sa}),le=mt.z.union([et,mt.z.string()]),ue=Ln.extend({animation_url:mt.z.string().optional(),properties:ia});var he=require("@ethersproject/constants"),eo=require("ethers");var to=require("uuid"),Rr=require("ethers/lib/utils");function ro(o){if(o===void 0){let t=Buffer.alloc(16);return(0,to.v4)({},t),(0,Rr.hexlify)((0,Rr.toUtf8Bytes)(t.toString("hex")))}else return(0,Rr.hexlify)(o)}p(ro,"resolveOrGenerateId");var Fr=Ft.z.object({metadata:le,to:Ft.z.string().default(he.AddressZero),price:Pt.default(0),currencyAddress:Ft.z.string().default(bt),mintStartTime:pe,mintEndTime:Ka,uid:Ft.z.string().optional().transform(o=>ro(o)),royaltyRecipient:Ft.z.string().default(he.AddressZero),royaltyBps:kt.default(0),primarySaleRecipient:Ft.z.string().default(he.AddressZero)}),fe=Fr.extend({uri:Ft.z.string(),royaltyBps:T,mintStartTime:T,mintEndTime:T}),ca=Fr.extend({tokenId:st.default(eo.ethers.constants.MaxUint256),quantity:st}),pa=fe.extend({tokenId:T,quantity:T}),da=[{name:"to",type:"address"},{name:"royaltyRecipient",type:"address"},{name:"royaltyBps",type:"uint256"},{name:"primarySaleRecipient",type:"address"},{name:"uri",type:"string"},{name:"price",type:"uint256"},{name:"currency",type:"address"},{name:"validityStartTimestamp",type:"uint128"},{name:"validityEndTimestamp",type:"uint128"},{name:"uid",type:"bytes32"}],ma=[{name:"to",type:"address"},{name:"royaltyRecipient",type:"address"},{name:"royaltyBps",type:"uint256"},{name:"primarySaleRecipient",type:"address"},{name:"tokenId",type:"uint256"},{name:"uri",type:"string"},{name:"quantity",type:"uint256"},{name:"pricePerToken",type:"uint256"},{name:"currency",type:"address"},{name:"validityStartTimestamp",type:"uint128"},{name:"validityEndTimestamp",type:"uint128"},{name:"uid",type:"bytes32"}];var v=tt.z.object({name:tt.z.string(),description:tt.z.string().optional(),image:Et.optional(),external_link:tt.z.string().url().optional()}),E=v.extend({image:tt.z.string().optional()}).catchall(tt.z.lazy(()=>Tt)),D=tt.z.object({seller_fee_basis_points:kt.default(0),fee_recipient:it.default(la.AddressZero)}),lt=tt.z.object({primary_sale_recipient:it}),J=tt.z.object({platform_fee_basis_points:kt.default(0),platform_fee_recipient:it.default(la.AddressZero)}),N=tt.z.object({trusted_forwarders:tt.z.array(it).default([])}),Q=tt.z.object({symbol:tt.z.string().optional().default("")});var at=class{constructor(t,r){this.contractWrapper=t,this.metadata=r}async getDefaultRoyaltyInfo(){let[t,r]=await this.contractWrapper.readContract.getDefaultRoyaltyInfo();return D.parse({fee_recipient:t,seller_fee_basis_points:r})}async getTokenRoyaltyInfo(t){let[r,e]=await this.contractWrapper.readContract.getRoyaltyInfoForToken(t);return D.parse({fee_recipient:r,seller_fee_basis_points:e})}async setDefaultRoyaltyInfo(t){let r=await this.metadata.get(),e=this.metadata.parseInputMetadata(S(S({},r),t)),a=await this.metadata._parseAndUploadMetadata(e),n=[this.contractWrapper.readContract.interface.encodeFunctionData("setDefaultRoyaltyInfo",[e.fee_recipient,e.seller_fee_basis_points]),this.contractWrapper.readContract.interface.encodeFunctionData("setContractURI",[a])];return{receipt:await this.contractWrapper.multiCall(n),data:()=>this.getDefaultRoyaltyInfo()}}async setTokenRoyaltyInfo(t,r){return{receipt:await this.contractWrapper.sendTransaction("setRoyaltyInfoForToken",[t,r.fee_recipient,r.seller_fee_basis_points]),data:()=>this.getDefaultRoyaltyInfo()}}};p(at,"ContractRoyalty");var ut=class{constructor(t){this.contractWrapper=t}async getRecipient(){return await this.contractWrapper.readContract.primarySaleRecipient()}async setRecipient(t){return{receipt:await this.contractWrapper.sendTransaction("setPrimarySaleRecipient",[t])}}};p(ut,"ContractPrimarySale");var wo=require("@thirdweb-dev/contracts"),Nr=require("ethers");var ho=require("@ethersproject/constants");var b=require("ethers");var cr=require("@ethersproject/providers"),yt=require("ethers"),ao=require("eventemitter2");var Ir=require("@ethersproject/constants");var sr="0xc82BbE41f2cF04e3a8efA18F7032BDD7f6d98a81",At="0x7c487845f98938Bb955B1D5AD069d9a30e4131fd",Wt="0x11c34F062Cb10a20B9F463E12Ff9dA62D76FDf65",ge={[h.Mainnet]:{biconomyForwarder:"0x84a0856b038eaAd1cC7E297cF34A7e72685A8693",twFactory:Wt,twRegistry:At},[h.Rinkeby]:{biconomyForwarder:"0xFD4973FeB2031D4409fB57afEE5dF2051b171104",twFactory:Wt,twRegistry:At},[h.Goerli]:{biconomyForwarder:Ir.AddressZero,twFactory:Wt,twRegistry:At},[h.Polygon]:{biconomyForwarder:"0x86C80a8aa58e0A4fa09A69624c31Ab2a6CAD56b8",twFactory:Wt,twRegistry:At},[h.Mumbai]:{biconomyForwarder:"0x9399BB24DBB5C4b782C70c2969F58716Ebbd6a3b",twFactory:Wt,twRegistry:At},[h.Avalanche]:{biconomyForwarder:"0x64CD353384109423a966dCd3Aa30D884C9b2E057",twFactory:Wt,twRegistry:At},[h.AvalancheFujiTestnet]:{biconomyForwarder:"0x6271Ca63D30507f2Dcbf99B52787032506D75BBF",twFactory:Wt,twRegistry:At},[h.Fantom]:{biconomyForwarder:Ir.AddressZero,twFactory:Wt,twRegistry:At},[h.FantomTestnet]:{biconomyForwarder:Ir.AddressZero,twFactory:Wt,twRegistry:At}};function ir(o,t){return o===h.Hardhat?t==="twFactory"?process.env.factoryAddress:t==="twRegistry"?process.env.registryAddress:Ir.AddressZero:ge[o][t]}p(ir,"getContractAddressByChainId");var G=require("zod"),ct=G.z.object({readonlySettings:G.z.object({rpcUrl:G.z.string().url(),chainId:G.z.number().optional()}).optional(),gasSettings:G.z.object({maxPriceInGwei:G.z.number().min(1,"gas price cannot be less than 1").default(300),speed:G.z.enum(["standard","fast","fastest"]).default("fastest")}).default({maxPriceInGwei:300,speed:"fastest"}),gasless:G.z.union([G.z.object({openzeppelin:G.z.object({relayerUrl:G.z.string().url(),relayerForwarderAddress:G.z.string().default(sr)})}),G.z.object({biconomy:G.z.object({apiId:G.z.string(),apiKey:G.z.string(),deadlineSeconds:G.z.number().min(1,"deadlineSeconds cannot be les than 1").default(3600)})})]).optional()}).default({gasSettings:{maxPriceInGwei:300,speed:"fastest"}});var It=class extends ao.EventEmitter2{constructor(t,r){super();let[e,a]=this.getSignerAndProvider(t,r);this.signer=e,this.provider=a;try{this.options=ct.parse(r)}catch(n){console.error("invalid sdk options object passed, falling back to default options",n),this.options=ct.parse({})}}updateSignerOrProvider(t){let[r,e]=this.getSignerAndProvider(t,this.options);this.signer=r,this.provider=e}isReadOnly(){return!yt.Signer.isSigner(this.signer)}getSigner(){return this.signer}getProvider(){return this.provider}getSignerOrProvider(){return this.getSigner()||this.getProvider()}getSignerAndProvider(t,r){var n;let e,a;return yt.Signer.isSigner(t)&&(e=t,t.provider&&(a=t.provider)),r!=null&&r.readonlySettings&&(a=this.getReadOnlyProvider(r.readonlySettings.rpcUrl,r.readonlySettings.chainId)),a||(cr.Provider.isProvider(t)?a=t:yt.Signer.isSigner(t)||(typeof t=="string"?a=this.getReadOnlyProvider(t,(n=r==null?void 0:r.readonlySettings)==null?void 0:n.chainId):a=yt.ethers.getDefaultProvider(t))),a||(a=yt.ethers.getDefaultProvider(),console.error("No provider found, using default provider on default chain!")),[e,a]}getReadOnlyProvider(t,r){try{let e=t.match(/^(ws|http)s?:/i);if(e)switch(e[1]){case"http":return new cr.JsonRpcBatchProvider(t,r);case"ws":return new cr.WebSocketProvider(t,r);default:return yt.ethers.getDefaultProvider(t)}else return yt.ethers.getDefaultProvider(t)}catch{return yt.ethers.getDefaultProvider(t)}}};p(It,"RPCConnectionHandler");var ht;(function(o){o.Transaction="transaction",o.Signature="signature"})(ht||(ht={}));var Ht=X(require("tiny-invariant"));var ye=require("ethers"),no=[{name:"from",type:"address"},{name:"to",type:"address"},{name:"value",type:"uint256"},{name:"gas",type:"uint256"},{name:"nonce",type:"uint256"},{name:"data",type:"bytes"}],so=[{inputs:[{internalType:"address",name:"from",type:"address"},{internalType:"uint256",name:"batchId",type:"uint256"}],name:"getNonce",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"}],pr={},oo={};async function ua(o,t,r){let e=r.join("|"),a=oo[e],n=Date.now()-a>=2e3;if(!(e in pr)||n){let i=await o.functions[t](...r);Array.isArray(i)&&i.length>0?pr[e]=ye.BigNumber.from(i[0]):pr[e]=ye.BigNumber.from(i),oo[e]=Date.now()}let s=pr[e];return pr[e]=ye.BigNumber.from(pr[e]).add(1),s}p(ua,"getAndIncrementNonce");var uo=require("@thirdweb-dev/contracts");var wt=require("ethers");var we=require("ethers");async function _r(o,t,r,e){var i,c;let a=o==null?void 0:o.provider;if(!a)throw new Error("missing provider");let n=we.ethers.utils._TypedDataEncoder.getPayload(t,r,e),s="";if((i=a==null?void 0:a.provider)!=null&&i.isWalletConnect)s=await a.send("eth_signTypedData",[(await o.getAddress()).toLowerCase(),JSON.stringify(n)]);else try{s=await o._signTypedData(t,r,e)}catch(d){if((c=d==null?void 0:d.message)!=null&&c.includes("Method eth_signTypedData_v4 not supported"))s=await a.send("eth_signTypedData",[(await o.getAddress()).toLowerCase(),JSON.stringify(n)]);else throw d}return{payload:n,signature:we.ethers.utils.joinSignature(we.ethers.utils.splitSignature(s))}}p(_r,"signTypedDataInternal");var Un=[{inputs:[],name:"name",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function"}],$n=[{constant:!0,inputs:[],name:"DOMAIN_SEPARATOR",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],payable:!1,stateMutability:"view",type:"function"},{inputs:[],name:"getDomainSeperator",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"}],Vn=[{inputs:[{internalType:"address",name:"owner",type:"address"}],name:"nonces",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"user",type:"address"}],name:"getNonce",outputs:[{internalType:"uint256",name:"nonce",type:"uint256"}],stateMutability:"view",type:"function"}];async function Gn(o,t){let r=new wt.Contract(t,Vn,o);try{return await r.nonces(await o.getAddress())}catch{return await r.getNonce(await o.getAddress())}}p(Gn,"getSignerNonce");async function Hn(o,t){let r=new wt.Contract(t,$n,o);try{return await r.DOMAIN_SEPARATOR()}catch{return await r.getDomainSeperator()}}p(Hn,"getDomainSeperator");async function jn(o,t){return new wt.Contract(t,Un,o).name()}p(jn,"getTokenName");async function zn(o,t){let r=await Hn(o,t.verifyingContract),e={name:t.name,version:t.version,verifyingContract:t.verifyingContract,salt:wt.ethers.utils.hexZeroPad(wt.BigNumber.from(t.chainId).toHexString(),32)};return wt.ethers.utils._TypedDataEncoder.hashDomain(e)===r?e:t}p(zn,"getChainDomainSeperator");async function io(o,t,r,e,a,n,s){let i=await zn(o,{name:await jn(o,t),version:"1",chainId:await o.getChainId(),verifyingContract:t});s=s!=null?s:(await Gn(o,t)).toString(),n=n!=null?n:wt.ethers.constants.MaxUint256;let c={owner:r,spender:e,value:a,nonce:s,deadline:n},d={Permit:[{name:"owner",type:"address"},{name:"spender",type:"address"},{name:"value",type:"uint256"},{name:"nonce",type:"uint256"},{name:"deadline",type:"uint256"}]},{signature:m}=await _r(o,i,d,c);return{message:c,signature:m}}p(io,"signEIP2612Permit");var Ce=require("ethers");function Zn(o){switch(o){case h.Polygon:return"https://gasstation-mainnet.matic.network/v2";case h.Mumbai:return"https://gasstation-mumbai.matic.today/v2"}}p(Zn,"getGasStationUrl");var Kn=Ce.ethers.utils.parseUnits("31","gwei"),qn=Ce.ethers.utils.parseUnits("1","gwei");function Jn(o){switch(o){case h.Polygon:return Kn;case h.Mumbai:return qn}}p(Jn,"getDefaultGasFee");async function co(o){let t=Zn(o);try{let e=(await(await fetch(t)).json()).standard.maxPriorityFee;if(e>0){let a=parseFloat(e).toFixed(9);return Ce.ethers.utils.parseUnits(a,"gwei")}}catch(r){console.error("failed to fetch gas",r)}return Jn(o)}p(co,"getPolygonGasPriorityFee");var dr=require("ethers");var mr={[h.Polygon]:{vrfCoordinator:"0x3d2341ADb2D31f1c5530cDC622016af293177AE0",linkTokenAddress:"0xb0897686c545045aFc77CF20eC7A532E3120E0F1",keyHash:"0xf86195cf7690c55907b2b611ebb7343a6f649bff128701cc542f0569e2c549da",fees:dr.ethers.utils.parseEther("0.0001")},[h.Mumbai]:{vrfCoordinator:"0x8C7382F9D8f56b33781fE506E897a4F1e2d17255",linkTokenAddress:"0x326C977E6efc84E512bB9C30f76E30c160eD06FB",keyHash:"0x6e75b569a01ef56d18cab6a8e71e6600d6ce853834d4a5748b720d06f878b3a4",fees:dr.ethers.utils.parseEther("0.0001")},[h.Rinkeby]:{vrfCoordinator:"0xb3dCcb4Cf7a26f6cf6B120Cf5A73875B7BBc655B",linkTokenAddress:"0x01be23585060835e02b77ef475b0cc51aa1e0709",keyHash:"0x2ed0feb3e7fd2022120aa84fab1945545a9f2ffc9076fd6156fa96eaff4c1311",fees:dr.ethers.utils.parseEther("0.1")},[h.Mainnet]:{vrfCoordinator:"0xf0d54349aDdcf704F77AE15b96510dEA15cb7952",linkTokenAddress:"0x514910771AF9Ca656af840dff83E8264EcF986CA",keyHash:"0xAA77729D3466CA35AE8D28B3BBAC7CC36A5031EFDC430821C02BC31A238AF445",fees:dr.ethers.utils.parseEther("2")},[h.Hardhat]:{vrfCoordinator:"0x8C7382F9D8f56b33781fE506E897a4F1e2d17255",linkTokenAddress:"0x326C977E6efc84E512bB9C30f76E30c160eD06FB",keyHash:"0x6e75b569a01ef56d18cab6a8e71e6600d6ce853834d4a5748b720d06f878b3a4",fees:dr.ethers.utils.parseEther("0.0001")}};var ha=require("ethers/lib/utils"),_t=(0,ha.arrayify)("0x80ac58cd"),Dt=(0,ha.arrayify)("0xd9b67a26");var fa="https://gateway.ipfscdn.io/ipfs/",ga="https://upload.nftlabs.co",ya="https://api.pinata.cloud/pinning/pinFileToIPFS";var po=X(require("merkletreejs"));var mo=X(require("keccak256")),Se=require("ethers");async function wa(o,t){let r=Gt.parse(o),e=r.map(d=>d.address);if(new Set(e).size<e.length)throw new xr;let n=r.map(d=>lo(d.address,d.maxClaimable)),s=new po.default(n,mo.default,{sort:!0}),i=ar.parse({merkleRoot:s.getHexRoot(),claims:r.map((d,m)=>{let u=s.getHexProof(n[m]);return{address:d.address,maxClaimable:d.maxClaimable,proof:u}})}),c=await t.uploadMetadata(i);return{merkleRoot:s.getHexRoot(),snapshotUri:c,snapshot:i}}p(wa,"createSnapshot");function lo(o,t){return Se.ethers.utils.solidityKeccak256(["address","uint256"],[o,Se.BigNumber.from(t)])}p(lo,"hashLeafNode");var w=class extends It{constructor(t,r,e,a){super(t,a);this.writeContract=new b.Contract(r,e,this.getSignerOrProvider()),this.readContract=this.writeContract.connect(this.getProvider())}updateSignerOrProvider(t){super.updateSignerOrProvider(t),this.writeContract=this.writeContract.connect(this.getSignerOrProvider()),this.readContract=this.writeContract.connect(this.getProvider())}async getChainID(){let t=this.getProvider(),{chainId:r}=await t.getNetwork();return r}async getSignerAddress(){let t=this.getSigner();if(!t)throw new Error("This action requires a connected wallet to sign the transaction. Please pass a valid signer to the SDK.");return await t.getAddress()}callStatic(){return this.writeContract.callStatic}async getCallOverrides(){let t=await this.getProvider().getFeeData();if(t.maxFeePerGas&&t.maxPriorityFeePerGas){let e=await this.getChainID(),a=await this.getProvider().getBlock("latest"),n=a&&a.baseFeePerGas?a.baseFeePerGas:b.ethers.utils.parseUnits("1","gwei"),s;e===h.Mumbai||e===h.Polygon?s=await co(e):s=b.BigNumber.from(t.maxPriorityFeePerGas);let i=this.getPreferredPriorityFee(s);return{maxFeePerGas:n.mul(2).add(i),maxPriorityFeePerGas:i}}else return{gasPrice:await this.getPreferredGasPrice()}}getPreferredPriorityFee(t){let r=this.options.gasSettings.speed,e=this.options.gasSettings.maxPriceInGwei,a;switch(r){case"standard":a=b.BigNumber.from(0);break;case"fast":a=t.div(100).mul(5);break;case"fastest":a=t.div(100).mul(10);break}let n=t.add(a),s=b.ethers.utils.parseUnits(e.toString(),"gwei"),i=b.ethers.utils.parseUnits("2.5","gwei");return n.gt(s)&&(n=s),n.lt(i)&&(n=i),n}async getPreferredGasPrice(){let t=await this.getProvider().getGasPrice(),r=this.options.gasSettings.speed,e=this.options.gasSettings.maxPriceInGwei,a=t,n;switch(r){case"standard":n=b.BigNumber.from(1);break;case"fast":n=t.div(100).mul(5);break;case"fastest":n=t.div(100).mul(10);break}a=a.add(n);let s=b.ethers.utils.parseUnits(e.toString(),"gwei");return a.gt(s)&&(a=s),a}emitTransactionEvent(t,r){this.emit(ht.Transaction,{status:t,transactionHash:r})}async multiCall(t){return this.sendTransaction("multicall",[t])}async estimateGas(t,r){return this.writeContract.estimateGas[t](...r)}async sendTransaction(t,r,e){var a;if(e||(e=await this.getCallOverrides()),((a=this.options)==null?void 0:a.gasless)&&("openzeppelin"in this.options.gasless||"biconomy"in this.options.gasless)){let n=this.getProvider(),s=await this.sendGaslessTransaction(t,r,e);this.emitTransactionEvent("submitted",s);let i=await n.waitForTransaction(s);return this.emitTransactionEvent("completed",s),i}else{let n=await this.sendTransactionByFunction(t,r,e);this.emitTransactionEvent("submitted",n.hash);let s=n.wait();return this.emitTransactionEvent("completed",n.hash),s}}async sendTransactionByFunction(t,r,e){let a=this.writeContract.functions[t];if(!a)throw new Error("invalid function");try{return await a(...r,e)}catch(n){let s=await this.getProvider().getNetwork(),i=await this.getSignerAddress(),c=await this.readContract.address;throw await ta(n,s,i,c)}}async sendGaslessTransaction(t,r=[],e){let a=this.getSigner();(0,Ht.default)(a,"Cannot execute gasless transaction without valid signer");let n=await this.getChainID(),s=await this.getSignerAddress(),i=this.writeContract.address,c=(e==null?void 0:e.value)||0;if(b.BigNumber.from(c).gt(0))throw new Error("Cannot send native token value with gasless transaction");let d=this.writeContract.interface.encodeFunctionData(t,r),m=await this.writeContract.estimateGas[t](...r),u=m.mul(2);m.lt(25e3)&&(u=b.BigNumber.from(5e5));let g={from:s,to:i,data:d,chainId:n,gasLimit:u,functionName:t.toString(),functionArgs:r,callOverrides:e};return await this.defaultGaslessSendFunction(g)}async signTypedData(t,r,e,a){this.emit(ht.Signature,{status:"submitted",message:a,signature:""});let{signature:n}=await _r(t,r,e,a);return this.emit(ht.Signature,{status:"completed",message:a,signature:n}),n}parseLogs(t,r){if(!r||r.length===0)return[];let e=this.writeContract.interface.getEventTopic(t);return r.filter(n=>n.topics.indexOf(e)>=0).map(n=>this.writeContract.interface.parseLog(n))}async defaultGaslessSendFunction(t){return this.options.gasless&&"biconomy"in this.options.gasless?this.biconomySendFunction(t):this.defenderSendFunction(t)}async biconomySendFunction(t){var u,g;(0,Ht.default)(this.options.gasless&&"biconomy"in this.options.gasless,"calling biconomySendFunction without biconomy");let r=this.getSigner(),e=this.getProvider();(0,Ht.default)(r&&e,"signer and provider must be set");let a=new b.ethers.Contract(ir(t.chainId,"biconomyForwarder"),so,e),n=0,s=await ua(a,"getNonce",[t.from,n]),i={from:t.from,to:t.to,token:b.ethers.constants.AddressZero,txGas:t.gasLimit.toNumber(),tokenGasPrice:"0",batchId:n,batchNonce:s.toNumber(),deadline:Math.floor(Date.now()/1e3+(((u=this.options)==null?void 0:u.gasless)&&"biconomy"in this.options.gasless&&((g=this.options.gasless.biconomy)==null?void 0:g.deadlineSeconds)||3600)),data:t.data},c=b.ethers.utils.arrayify(b.ethers.utils.solidityKeccak256(["address","address","address","uint256","uint256","uint256","uint256","uint256","bytes32"],[i.from,i.to,i.token,i.txGas,i.tokenGasPrice,i.batchId,i.batchNonce,i.deadline,b.ethers.utils.keccak256(i.data)]));this.emit(ht.Signature,{status:"submitted",message:c,signature:""});let d=await r.signMessage(c);this.emit(ht.Signature,{status:"completed",message:c,signature:d});let m=await fetch("https://api.biconomy.io/api/v2/meta-tx/native",{method:"POST",body:JSON.stringify({from:t.from,apiId:this.options.gasless.biconomy.apiId,params:[i,d],to:t.to,gasLimit:t.gasLimit.toHexString()}),headers:{"x-api-key":this.options.gasless.biconomy.apiKey,"Content-Type":"application/json;charset=utf-8"}});if(m.ok){let y=await m.json();if(!y.txHash)throw new Error(`relay transaction failed: ${y.log}`);return y.txHash}throw new Error(`relay transaction failed with status: ${m.status} (${m.statusText})`)}async defenderSendFunction(t){(0,Ht.default)(this.options.gasless&&"openzeppelin"in this.options.gasless,"calling biconomySendFunction without biconomy");let r=this.getSigner(),e=this.getProvider();(0,Ht.default)(r,"provider is not set"),(0,Ht.default)(e,"provider is not set");let a=this.options.gasless.openzeppelin.relayerForwarderAddress,n=uo.Forwarder__factory.connect(a,e),s=await ua(n,"getNonce",[t.from]),i={name:"GSNv2 Forwarder",version:"0.0.1",chainId:t.chainId,verifyingContract:a},c={ForwardRequest:no},d={from:t.from,to:t.to,value:b.BigNumber.from(0).toString(),gas:b.BigNumber.from(t.gasLimit).toString(),nonce:b.BigNumber.from(s).toString(),data:t.data},m;if(this.emit(ht.Signature,{status:"submitted",message:d,signature:""}),t.functionName==="approve"&&t.functionArgs.length===2){let V=t.functionArgs[0],ft=t.functionArgs[1],{message:pt,signature:nt}=await io(r,this.writeContract.address,t.from,V,ft),{r:Sn,s:Tn,v:bn}=b.ethers.utils.splitSignature(nt);d={to:this.readContract.address,owner:pt.owner,spender:pt.spender,value:b.BigNumber.from(pt.value).toString(),nonce:b.BigNumber.from(pt.nonce).toString(),deadline:b.BigNumber.from(pt.deadline).toString(),r:Sn,s:Tn,v:bn},m=nt}else{let{signature:V}=await _r(r,i,c,d);m=V}let u="forward";d!=null&&d.owner&&(u="permit");let g=JSON.stringify({request:d,signature:m,type:u});this.emit(ht.Signature,{status:"completed",message:d,signature:m});let y=await fetch(this.options.gasless.openzeppelin.relayerUrl,{method:"POST",body:g});if(y.ok){let V=await y.json();return JSON.parse(V.result).txHash}throw new Error(`relay transaction failed with status: ${y.status} (${y.statusText})`)}};p(w,"ContractWrapper");var lr=require("ethers"),Dr=require("@thirdweb-dev/contracts");var fo=require("ethers/lib/utils");function Ct(o){return o.toLowerCase()===bt||o.toLowerCase()===ho.AddressZero}p(Ct,"isNativeToken");async function ot(o,t,r){let e=await Nt(o,r);return lr.ethers.utils.parseUnits(Pt.parse(t),e.decimals)}p(ot,"normalizePriceValue");async function Nt(o,t){if(Ct(t)){let r=await o.getNetwork(),e=aa(r.chainId);return{name:e.name,symbol:e.symbol,decimals:e.decimals}}else{let r=Dr.TokenERC20__factory.connect(t,o),[e,a,n]=await Promise.all([r.name(),r.symbol(),r.decimals()]);return{name:e,symbol:a,decimals:n}}}p(Nt,"fetchCurrencyMetadata");async function O(o,t,r){let e=await Nt(o,t);return F(S({},e),{value:lr.BigNumber.from(r),displayValue:(0,fo.formatUnits)(r,e.decimals)})}p(O,"fetchCurrencyValue");async function vt(o,t,r,e){if(Ct(r))e.value=t;else{let a=o.getSigner(),n=o.getProvider(),s=new w(a||n,r,Dr.IERC20__factory.abi,{}),i=await o.getSignerAddress(),c=o.readContract.address;return(await s.readContract.allowance(i,c)).lt(t)&&await s.sendTransaction("approve",[c,t]),e}}p(vt,"setErc20Allowance");async function go(o,t,r,e){let a=o.getSigner(),n=o.getProvider(),s=new w(a||n,t,Dr.IERC20__factory.abi,{}),i=await o.getSignerAddress(),c=o.readContract.address,d=await s.readContract.allowance(i,c),m=lr.BigNumber.from(r).mul(lr.BigNumber.from(e));d.lt(m)&&await s.sendTransaction("approve",[c,d.add(m)])}p(go,"approveErc20Allowance");var Co=X(require("deep-equal"));var B;(function(o){o[o.Direct=0]="Direct",o[o.Auction=1]="Auction"})(B||(B={}));var Ca;(function(o){o[o.Pending=0]="Pending",o[o.Active=1]="Active",o[o.Canceled=2]="Canceled",o[o.Defeated=3]="Defeated",o[o.Succeeded=4]="Succeeded",o[o.Queued=5]="Queued",o[o.Expired=6]="Expired",o[o.Executed=7]="Executed"})(Ca||(Ca={}));var jt;(function(o){o[o.Against=0]="Against",o[o.For=1]="For",o[o.Abstain=2]="Abstain"})(jt||(jt={}));var A;(function(o){o.NotEnoughSupply="There is not enough supply to claim.",o.AddressNotAllowed="This address is not on the allowlist.",o.WaitBeforeNextClaimTransaction="Not enough time since last claim transaction. Please wait.",o.AlreadyClaimed="You have already claimed the token.",o.NotEnoughTokens="There are not enough tokens in the wallet to pay for the claim.",o.NoActiveClaimPhase="There is no active claim phase at the moment. Please check back in later.",o.NoClaimConditionSet="There is no claim condition set.",o.Unknown="No claim conditions found."})(A||(A={}));var zt=require("ethers"),yo=require("@ethersproject/bytes"),Sa=require("@ethersproject/constants");async function Te(o,t,r,e,a,n=[(0,yo.hexZeroPad)([0],32)]){let s=await e.getSignerAddress(),i=0;try{if(!t.merkleRootHash.toString().startsWith(Sa.AddressZero)){let u=await Ta(t.merkleRootHash.toString(),r,a),g=u&&u.find(y=>y.address.toLowerCase()===s.toLowerCase());if(g===void 0)throw new Error("No claim found for this address");n=g.proof,i=g.maxClaimable}}catch(u){if((u==null?void 0:u.message)==="No claim found for this address")throw u;console.warn("failed to check claim condition merkle root hash, continuing anyways",u)}let c=await e.getCallOverrides()||{},d=t.price,m=t.currencyAddress;return d.gt(0)&&(Ct(m)?c.value=zt.BigNumber.from(d).mul(o):await go(e,m,d,o)),{overrides:c,proofs:n,maxQuantityPerTransaction:zt.BigNumber.from(i),price:d,currencyAddress:m}}p(Te,"prepareClaim");async function Ta(o,t,r){let e=t[o],a;if(e){let n=await r.get(e),s=ar.parse(n);o===s.merkleRoot&&(a=s.claims)}return a}p(Ta,"fetchSnapshot");function be(o,t,r){if(o>=r.length)throw Error(`Index out of bounds - got index: ${o} with ${r.length} conditions`);let e=nr.parse(S(F(S({},r[o]),{price:r[o].price.toString()}),t)),a=me.parse(e);return r.map((n,s)=>{let i;return s===o?i=a:i=n,F(S({},i),{price:i.price.toString()})})}p(be,"updateExsitingClaimConditions");async function Ae(o,t,r,e){let a=await Ta(t,r,e);if(a===void 0)return{proof:[],maxClaimable:0};let n=a.find(s=>s.address.toLowerCase()===(o==null?void 0:o.toLowerCase()));return n===void 0?{proof:[],maxClaimable:0}:{proof:n.proof,maxClaimable:n.maxClaimable}}p(Ae,"getClaimerProofs");async function We(o,t,r){let e=[],a=await Promise.all(o.map(async i=>{if(i.snapshot){let c=await wa(Gt.parse(i.snapshot),r);e.push(c),i.merkleRootHash=c.merkleRoot}return i})),n=na.parse(a),s=(await Promise.all(n.map(i=>Qn(i,t)))).sort((i,c)=>{let d=zt.BigNumber.from(i.startTimestamp),m=zt.BigNumber.from(c.startTimestamp);return d.eq(m)?0:d.gt(m)?1:-1});return{snapshotInfos:e,sortedConditions:s}}p(We,"processClaimConditionInputs");async function Qn(o,t){let r=o.currencyAddress===Sa.AddressZero?bt:o.currencyAddress;return{startTimestamp:o.startTime,maxClaimableSupply:o.maxQuantity,supplyClaimed:0,quantityLimitPerTransaction:o.quantityLimitPerTransaction,waitTimeInSecondsBetweenClaims:o.waitInSeconds,pricePerToken:await ot(t,o.price,r),currency:r,merkleRoot:o.merkleRootHash}}p(Qn,"convertToContractModel");async function ur(o,t,r,e){let a=await O(t,o.currency,o.pricePerToken),n=await Ta(o.merkleRoot,r,e);return me.parse({startTime:o.startTimestamp,maxQuantity:o.maxClaimableSupply.toString(),currentMintSupply:o.supplyClaimed.toString(),availableSupply:zt.BigNumber.from(o.maxClaimableSupply).sub(o.supplyClaimed).toString(),quantityLimitPerTransaction:o.quantityLimitPerTransaction.toString(),waitInSeconds:o.waitTimeInSecondsBetweenClaims.toString(),price:zt.BigNumber.from(o.pricePerToken),currency:o.currency,currencyAddress:o.currency,currencyMetadata:a,merkleRootHash:o.merkleRoot,snapshot:n})}p(ur,"transformResultToClaimCondition");var So=require("@ethersproject/constants"),Or=class{constructor(t,r,e){this.storage=e,this.contractWrapper=t,this.metadata=r}async getActive(){let t=await this.contractWrapper.readContract.getActiveClaimConditionId(),r=await this.contractWrapper.readContract.getClaimConditionById(t),e=await this.metadata.get();return await ur(r,this.contractWrapper.getProvider(),e.merkle,this.storage)}async getAll(){let t=await this.contractWrapper.readContract.claimCondition(),r=t.currentStartId.toNumber(),e=t.count.toNumber(),a=[];for(let s=r;s<r+e;s++)a.push(await this.contractWrapper.readContract.getClaimConditionById(s));let n=await this.metadata.get();return Promise.all(a.map(s=>ur(s,this.contractWrapper.getProvider(),n.merkle,this.storage)))}async canClaim(t,r){return r===void 0&&(r=await this.contractWrapper.getSignerAddress()),(await this.getClaimIneligibilityReasons(t,r)).length===0}async getClaimIneligibilityReasons(t,r){let e=[],a,n;if(r===void 0)throw new Error("addressToCheck is required");try{[a,n]=await Promise.all([this.contractWrapper.readContract.getActiveClaimConditionId(),this.getActive()])}catch(m){return m.message.includes("no public mint condition.")?(e.push(A.NoClaimConditionSet),e):m.message.includes("no active mint condition.")?(e.push(A.NoActiveClaimPhase),e):(e.push(A.Unknown),e)}if(Nr.BigNumber.from(n.availableSupply).lt(t)&&e.push(A.NotEnoughSupply),Nr.ethers.utils.stripZeros(n.merkleRootHash).length>0){let m=n.merkleRootHash.toString(),u=await this.metadata.get(),g=await Ae(r,m,u.merkle,this.storage);try{let[y]=await this.contractWrapper.readContract.verifyClaimMerkleProof(a,r,t,g.proof,g.maxClaimable);if(!y)return e.push(A.AddressNotAllowed),e}catch{return e.push(A.AddressNotAllowed),e}}let[i,c]=await this.contractWrapper.readContract.getClaimTimestamp(a,r),d=Nr.BigNumber.from(Date.now()).div(1e3);if(i.gt(0)&&d.lt(c)&&(c.eq(So.MaxUint256)?e.push(A.AlreadyClaimed):e.push(A.WaitBeforeNextClaimTransaction)),n.price.gt(0)){let m=n.price.mul(t),u=this.contractWrapper.getProvider();Ct(n.currencyAddress)?(await u.getBalance(r)).lt(m)&&e.push(A.NotEnoughTokens):(await new w(u,n.currencyAddress,wo.IERC20__factory.abi,{}).readContract.balanceOf(r)).lt(m)&&e.push(A.NotEnoughTokens)}return e}async set(t,r=!1){let{snapshotInfos:e,sortedConditions:a}=await We(t,this.contractWrapper.getProvider(),this.storage),n={};e.forEach(c=>{n[c.merkleRoot]=c.snapshotUri});let s=await this.metadata.get(),i=[];if(!(0,Co.default)(s.merkle,n)){let c=this.metadata.parseInputMetadata(F(S({},s),{merkle:n})),d=await this.metadata._parseAndUploadMetadata(c);i.push(this.contractWrapper.readContract.interface.encodeFunctionData("setContractURI",[d]))}return i.push(this.contractWrapper.readContract.interface.encodeFunctionData("setClaimConditions",[a,r])),{receipt:await this.contractWrapper.multiCall(i)}}async update(t,r){let e=await this.getAll(),a=be(t,r,e);return await this.set(a)}};p(Or,"DropErc721ClaimConditions");var To=require("@thirdweb-dev/contracts"),Br=require("ethers");var bo=X(require("deep-equal"));var Ao=require("@ethersproject/constants"),Mr=class{constructor(t,r,e){this.storage=e,this.contractWrapper=t,this.metadata=r}async getActive(t){let r=await this.contractWrapper.readContract.getActiveClaimConditionId(t),e=await this.contractWrapper.readContract.getClaimConditionById(t,r),a=await this.metadata.get();return await ur(e,this.contractWrapper.getProvider(),a.merkle,this.storage)}async getAll(t){let r=await this.contractWrapper.readContract.claimCondition(t),e=r.currentStartId.toNumber(),a=r.count.toNumber(),n=[];for(let i=e;i<e+a;i++)n.push(await this.contractWrapper.readContract.getClaimConditionById(t,i));let s=await this.metadata.get();return Promise.all(n.map(i=>ur(i,this.contractWrapper.getProvider(),s.merkle,this.storage)))}async canClaim(t,r,e){return e===void 0&&(e=await this.contractWrapper.getSignerAddress()),(await this.getClaimIneligibilityReasons(t,r,e)).length===0}async getClaimIneligibilityReasons(t,r,e){let a=[],n,s;if(e===void 0)throw new Error("addressToCheck is required");try{[n,s]=await Promise.all([this.contractWrapper.readContract.getActiveClaimConditionId(t),this.getActive(t)])}catch(u){return u.message.includes("no active mint condition.")?(a.push(A.NoActiveClaimPhase),a):(a.push(A.Unknown),a)}if(Br.BigNumber.from(s.availableSupply).lt(r)&&a.push(A.NotEnoughSupply),Br.ethers.utils.stripZeros(s.merkleRootHash).length>0){let u=s.merkleRootHash.toString(),g=await this.metadata.get(),y=await Ae(e,u,g.merkle,this.storage);try{let[V]=await this.contractWrapper.readContract.verifyClaimMerkleProof(n,e,t,r,y.proof,y.maxClaimable);if(!V)return a.push(A.AddressNotAllowed),a}catch{return a.push(A.AddressNotAllowed),a}}let[c,d]=await this.contractWrapper.readContract.getClaimTimestamp(t,n,e),m=Br.BigNumber.from(Date.now()).div(1e3);if(c.gt(0)&&m.lt(d)&&(d.eq(Ao.MaxUint256)?a.push(A.AlreadyClaimed):a.push(A.WaitBeforeNextClaimTransaction)),s.price.gt(0)){let u=s.price.mul(r),g=this.contractWrapper.getProvider();Ct(s.currencyAddress)?(await g.getBalance(e)).lt(u)&&a.push(A.NotEnoughTokens):(await new w(g,s.currencyAddress,To.IERC20__factory.abi,{}).readContract.balanceOf(e)).lt(u)&&a.push(A.NotEnoughTokens)}return a}async set(t,r,e=!1){let{snapshotInfos:a,sortedConditions:n}=await We(r,this.contractWrapper.getProvider(),this.storage),s={};a.forEach(d=>{s[d.merkleRoot]=d.snapshotUri});let i=await this.metadata.get(),c=[];for(let d of Object.keys(i.merkle))s[d]=i.merkle[d];if(!(0,bo.default)(i.merkle,s)){let d=this.metadata.parseInputMetadata(F(S({},i),{merkle:s})),m=await this.metadata._parseAndUploadMetadata(d);c.push(this.contractWrapper.readContract.interface.encodeFunctionData("setContractURI",[m]))}return c.push(this.contractWrapper.readContract.interface.encodeFunctionData("setClaimConditions",[t,n,e])),{receipt:await this.contractWrapper.multiCall(c)}}async update(t,r,e){let a=await this.getAll(t),n=be(r,e,a);return await this.set(t,n)}};p(Mr,"DropErc1155ClaimConditions");var Wo=require("ethers"),Lr=class{constructor(t){this.contractWrapper=t}async getAllClaimerAddresses(t){let r=await this.contractWrapper.readContract.queryFilter(this.contractWrapper.readContract.filters.TokensClaimed(null,Wo.BigNumber.from(t)));return Array.from(new Set(r.map(e=>e.args.claimer)))}};p(Lr,"DropErc1155History");var Y=require("ethers");var vo=require("@ethersproject/constants"),Ur=class{constructor(t,r,e={}){this.contractWrapper=t,this.storage=r;try{this.options=ct.parse(e)}catch(a){console.error("invalid contract options object passed, falling back to default options",a),this.options=ct.parse({})}}onNetworkUpdated(t){this.contractWrapper.updateSignerOrProvider(t)}getAddress(){return this.contractWrapper.readContract.address}async get(){return await Nt(this.contractWrapper.getProvider(),this.getAddress())}async balance(){return await this.balanceOf(await this.contractWrapper.getSignerAddress())}async balanceOf(t){return this.getValue(await this.contractWrapper.readContract.balanceOf(t))}async totalSupply(){return await this.getValue(await this.contractWrapper.readContract.totalSupply())}async allowance(t){return await this.allowanceOf(await this.contractWrapper.getSignerAddress(),t)}async allowanceOf(t,r){return await this.getValue(await this.contractWrapper.readContract.allowance(t,r))}async isTransferRestricted(){return!await this.contractWrapper.readContract.hasRole(I("transfer"),vo.AddressZero)}async transfer(t,r){let e=Y.ethers.utils.parseUnits(Y.BigNumber.from(r).toString(),await this.contractWrapper.readContract.decimals());return{receipt:await this.contractWrapper.sendTransaction("transfer",[t,e])}}async transferFrom(t,r,e){let a=Y.ethers.utils.parseUnits(Y.BigNumber.from(e).toString(),await this.contractWrapper.readContract.decimals());return{receipt:await this.contractWrapper.sendTransaction("transferFrom",[t,r,a])}}async setAllowance(t,r){let e=Y.ethers.utils.parseUnits(Y.BigNumber.from(r).toString(),await this.contractWrapper.readContract.decimals());return{receipt:await this.contractWrapper.sendTransaction("approve",[t,e])}}async transferBatch(t){let r=await this.contractWrapper.readContract.decimals(),e=t.map(a=>{let n=Y.ethers.utils.parseUnits(Y.BigNumber.from(a.amount).toString(),r);return this.contractWrapper.readContract.interface.encodeFunctionData("transfer",[a.toAddress,n])});await this.contractWrapper.multiCall(e)}async burn(t){let r=Y.ethers.utils.parseUnits(Y.BigNumber.from(t).toString(),await this.contractWrapper.readContract.decimals());return{receipt:await this.contractWrapper.sendTransaction("burn",[r])}}async burnFrom(t,r){let e=Y.ethers.utils.parseUnits(Y.BigNumber.from(r).toString(),await this.contractWrapper.readContract.decimals());return{receipt:await this.contractWrapper.sendTransaction("burnFrom",[t,e])}}async getValue(t){return await O(this.contractWrapper.getProvider(),this.getAddress(),Y.BigNumber.from(t))}};p(Ur,"Erc20");var ba=require("ethers"),Aa=require("@ethersproject/constants");var $r=class{constructor(t){this.contractWrapper=t}async getAllHolderBalances(){let r=(await this.contractWrapper.readContract.queryFilter(this.contractWrapper.readContract.filters.Transfer())).map(a=>a.args),e={};return r.forEach(a=>{let n=a.from,s=a.to,i=a.value;n!==Aa.AddressZero&&(n in e||(e[n]=ba.BigNumber.from(0)),e[n]=e[n].sub(i)),s!==Aa.AddressZero&&(s in e||(e[s]=ba.BigNumber.from(0)),e[s]=e[s].add(i))}),Promise.all(Object.keys(e).map(async a=>({holder:a,balance:await O(this.contractWrapper.getProvider(),this.contractWrapper.readContract.address,e[a])})))}};p($r,"TokenERC20History");var Wa=require("ethers"),va=require("@ethersproject/constants");var hr=100;var xo=require("ethers");var fr=require("@thirdweb-dev/contracts");async function Zt(o,t,r){let e=await r.get(t);return ue.parse(S({id:xo.BigNumber.from(o),uri:t},e))}p(Zt,"fetchTokenMetadata");async function Ot(o,t,r,e){let a,n=fr.ERC165__factory.connect(o,t),s=await n.supportsInterface(_t),i=await n.supportsInterface(Dt);if(s)a=await fr.TokenERC721__factory.connect(o,t).tokenURI(r);else if(i)a=await fr.TokenERC1155__factory.connect(o,t).uri(r);else throw Error("Contract must implement ERC 1155 or ERC 721.");if(!a)throw new dt;return Zt(r,a,e)}p(Ot,"fetchTokenMetadataForContract");async function ve(o,t){return typeof o=="string"?o:await t.uploadMetadata(et.parse(o))}p(ve,"uploadOrExtractURI");async function Bt(o,t){if(Yn(o))return o;if(Xn(o)){let{metadataUris:r}=await t.uploadMetadataBatch(o.map(e=>et.parse(e)));return r}else throw new Error("NFT metadatas must all be of the same type (all URI or all NFTMetadataInput)")}p(Bt,"uploadOrExtractURIs");function Yn(o){return o.find(t=>typeof t!="string")===void 0}p(Yn,"isUriList");function Xn(o){return o.find(t=>typeof t!="object")===void 0}p(Xn,"isMetadataList");var Kt=class{constructor(t,r,e={}){this.contractWrapper=t,this.storage=r;try{this.options=ct.parse(e)}catch(a){console.error("invalid contract options object passed, falling back to default options",a),this.options=ct.parse({})}}onNetworkUpdated(t){this.contractWrapper.updateSignerOrProvider(t)}getAddress(){return this.contractWrapper.readContract.address}async get(t){let[r,e]=await Promise.all([this.ownerOf(t).catch(()=>va.AddressZero),this.getTokenMetadata(t)]);return{owner:r,metadata:e}}async getAll(t){let r=Wa.BigNumber.from((t==null?void 0:t.start)||0).toNumber(),e=Wa.BigNumber.from((t==null?void 0:t.count)||100).toNumber(),a=Math.min((await this.getTotalCount()).toNumber(),r+e);return await Promise.all([...Array(a-r).keys()].map(n=>this.get((r+n).toString())))}async getTotalCount(){return await this.contractWrapper.readContract.nextTokenIdToMint()}async getOwned(t){let r=t||await this.contractWrapper.getSignerAddress(),e=await this.contractWrapper.readContract.balanceOf(r),a=Array.from(Array(e.toNumber()).keys()),n=await Promise.all(a.map(s=>this.contractWrapper.readContract.tokenOfOwnerByIndex(r,s)));return await Promise.all(n.map(s=>this.get(s.toString())))}async ownerOf(t){return await this.contractWrapper.readContract.ownerOf(t)}async totalSupply(){return await this.contractWrapper.readContract.nextTokenIdToMint()}async balanceOf(t){return await this.contractWrapper.readContract.balanceOf(t)}async balance(){return await this.balanceOf(await this.contractWrapper.getSignerAddress())}async isTransferRestricted(){return!await this.contractWrapper.readContract.hasRole(I("transfer"),va.AddressZero)}async isApproved(t,r){return await this.contractWrapper.readContract.isApprovedForAll(t,r)}async transfer(t,r){let e=await this.contractWrapper.getSignerAddress();return{receipt:await this.contractWrapper.sendTransaction("safeTransferFrom(address,address,uint256)",[e,t,r])}}async burn(t){return{receipt:await this.contractWrapper.sendTransaction("burn",[t])}}async setApprovalForAll(t,r){return{receipt:await this.contractWrapper.sendTransaction("setApprovalForAll",[t,r])}}async getTokenMetadata(t){let r=await this.contractWrapper.readContract.tokenURI(t);if(!r)throw new dt;return Zt(t,r,this.storage)}};p(Kt,"Erc721");var Ee=require("ethers");var Vr=require("zod");var xe=Vr.z.object({supply:T,metadata:ue}),ts=xe.extend({owner:Vr.z.string(),quantityOwned:T}),rs=Vr.z.object({supply:st,metadata:et}),es=Vr.z.object({supply:st,metadata:le});var Eo=require("@ethersproject/constants");var xa;(function(o){o[o.None=0]="None",o[o.ERC20=1]="ERC20",o[o.ERC721=2]="ERC721"})(xa||(xa={}));var qt=class{constructor(t,r,e={}){this.contractWrapper=t,this.storage=r;try{this.options=ct.parse(e)}catch(a){console.error("invalid contract options object passed, falling back to default options",a),this.options=ct.parse({})}}onNetworkUpdated(t){this.contractWrapper.updateSignerOrProvider(t)}getAddress(){return this.contractWrapper.readContract.address}async get(t){let[r,e]=await Promise.all([this.contractWrapper.readContract.totalSupply(t).catch(()=>Ee.BigNumber.from(0)),this.getTokenMetadata(t)]);return xe.parse({supply:r,metadata:e})}async getAll(t){let r=Ee.BigNumber.from((t==null?void 0:t.start)||0).toNumber(),e=Ee.BigNumber.from((t==null?void 0:t.count)||100).toNumber(),a=Math.min((await this.getTotalCount()).toNumber(),r+e);return await Promise.all([...Array(a-r).keys()].map(n=>this.get((r+n).toString())))}async getTotalCount(){return await this.contractWrapper.readContract.nextTokenIdToMint()}async getOwned(t){let r=t||await this.contractWrapper.getSignerAddress(),e=await this.contractWrapper.readContract.nextTokenIdToMint(),n=(await this.contractWrapper.readContract.balanceOfBatch(Array(e.toNumber()).fill(r),Array.from(Array(e.toNumber()).keys()))).map((s,i)=>({tokenId:i,balance:s})).filter(s=>s.balance.gt(0));return await Promise.all(n.map(async s=>{let i=await this.get(s.tokenId.toString());return F(S({},i),{owner:r,quantityOwned:s.balance})}))}async totalSupply(t){return await this.contractWrapper.readContract.totalSupply(t)}async balanceOf(t,r){return await this.contractWrapper.readContract.balanceOf(t,r)}async balance(t){return await this.balanceOf(await this.contractWrapper.getSignerAddress(),t)}async isTransferRestricted(){return!await this.contractWrapper.readContract.hasRole(I("transfer"),Eo.AddressZero)}async isApproved(t,r){return await this.contractWrapper.readContract.isApprovedForAll(t,r)}async transfer(t,r,e,a=[0]){let n=await this.contractWrapper.getSignerAddress();return{receipt:await this.contractWrapper.sendTransaction("safeTransferFrom",[n,t,r,e,a])}}async burn(t,r){let e=await this.contractWrapper.getSignerAddress();return{receipt:await this.contractWrapper.sendTransaction("burn",[e,t,r])}}async setApprovalForAll(t,r){return{receipt:await this.contractWrapper.sendTransaction("setApprovalForAll",[t,r])}}async getTokenMetadata(t){let r=await this.contractWrapper.readContract.uri(t);if(!r)throw new dt;return Zt(t,r,this.storage)}};p(qt,"Erc1155");var Ea=require("ethers"),ko=X(require("tiny-invariant"));var Gr=class{constructor(t,r,e){this.contractWrapper=t,this.storage=e,this.roles=r}async mint(t){let r=t.payload,e=t.signature,a=await this.mapPayloadToContractStruct(r),n=await this.contractWrapper.getCallOverrides();await vt(this.contractWrapper,Ea.BigNumber.from(a.price),r.currencyAddress,n);let s=await this.contractWrapper.sendTransaction("mintWithSignature",[a,e],n),i=this.contractWrapper.parseLogs("TokensMintedWithSignature",s.logs);if(i.length===0)throw new Error("No MintWithSignature event found");return{id:i[0].args.tokenIdMinted,receipt:s}}async mintBatch(t){let e=(await Promise.all(t.map(async s=>{let i=await this.mapPayloadToContractStruct(s.payload),c=s.signature,d=s.payload.price;if(Ea.BigNumber.from(d).gt(0))throw new Error("Can only batch free mints. For mints with a price, use regular mint()");return{message:i,signature:c}}))).map(s=>this.contractWrapper.readContract.interface.encodeFunctionData("mintWithSignature",[s.message,s.signature])),a=await this.contractWrapper.multiCall(e),n=this.contractWrapper.parseLogs("TokensMintedWithSignature",a.logs);if(n.length===0)throw new Error("No MintWithSignature event found");return n.map(s=>({id:s.args.tokenIdMinted,receipt:a}))}async verify(t){let r=t.payload,e=t.signature,a=await this.mapPayloadToContractStruct(r);return(await this.contractWrapper.readContract.verify(a,e))[0]}async generate(t){return(await this.generateBatch([t]))[0]}async generateBatch(t){await this.roles.verify(["minter"],await this.contractWrapper.getSignerAddress());let r=t.map(i=>Fr.parse(i)),e=r.map(i=>i.metadata),a=await Bt(e,this.storage),n=await this.contractWrapper.getChainID(),s=this.contractWrapper.getSigner();return(0,ko.default)(s,"No signer available"),await Promise.all(r.map(async(i,c)=>{let d=a[c],m=fe.parse(F(S({},i),{uri:d})),u=await this.contractWrapper.signTypedData(s,{name:"TokenERC721",version:"1",chainId:n,verifyingContract:this.contractWrapper.readContract.address},{MintRequest:da},await this.mapPayloadToContractStruct(m));return{payload:m,signature:u.toString()}}))}async mapPayloadToContractStruct(t){let r=await ot(this.contractWrapper.getProvider(),t.price,t.currencyAddress);return{to:t.to,price:r,uri:t.uri,currency:t.currencyAddress,validityEndTimestamp:t.mintEndTime,validityStartTimestamp:t.mintStartTime,uid:t.uid,royaltyRecipient:t.royaltyRecipient,royaltyBps:t.royaltyBps,primarySaleRecipient:t.primarySaleRecipient}}};p(Gr,"Erc721SignatureMinting");var Po=X(require("tiny-invariant")),Ro=require("ethers");var Hr=class{constructor(t,r,e){this.contractWrapper=t,this.storage=e,this.roles=r}async mint(t){let r=t.payload,e=t.signature,a=await this.mapPayloadToContractStruct(r),n=await this.contractWrapper.getCallOverrides();await vt(this.contractWrapper,a.pricePerToken.mul(a.quantity),r.currencyAddress,n);let s=await this.contractWrapper.sendTransaction("mintWithSignature",[a,e],n),i=this.contractWrapper.parseLogs("TokensMintedWithSignature",s.logs);if(i.length===0)throw new Error("No MintWithSignature event found");return{id:i[0].args.tokenIdMinted,receipt:s}}async mintBatch(t){let e=(await Promise.all(t.map(async s=>{let i=await this.mapPayloadToContractStruct(s.payload),c=s.signature,d=s.payload.price;if(Ro.BigNumber.from(d).gt(0))throw new Error("Can only batch free mints. For mints with a price, use regular mint()");return{message:i,signature:c}}))).map(s=>this.contractWrapper.readContract.interface.encodeFunctionData("mintWithSignature",[s.message,s.signature])),a=await this.contractWrapper.multiCall(e),n=this.contractWrapper.parseLogs("TokensMintedWithSignature",a.logs);if(n.length===0)throw new Error("No MintWithSignature event found");return n.map(s=>({id:s.args.tokenIdMinted,receipt:a}))}async verify(t){let r=t.payload,e=t.signature,a=await this.mapPayloadToContractStruct(r);return(await this.contractWrapper.readContract.verify(a,e))[0]}async generate(t){return(await this.generateBatch([t]))[0]}async generateBatch(t){await this.roles.verify(["minter"],await this.contractWrapper.getSignerAddress());let r=t.map(i=>ca.parse(i)),e=r.map(i=>i.metadata),a=await Bt(e,this.storage),n=await this.contractWrapper.getChainID(),s=this.contractWrapper.getSigner();return(0,Po.default)(s,"No signer available"),await Promise.all(r.map(async(i,c)=>{let d=a[c],m=pa.parse(F(S({},i),{uri:d})),u=await this.contractWrapper.signTypedData(s,{name:"TokenERC1155",version:"1",chainId:n,verifyingContract:this.contractWrapper.readContract.address},{MintRequest:ma},await this.mapPayloadToContractStruct(m));return{payload:m,signature:u.toString()}}))}async mapPayloadToContractStruct(t){let r=await ot(this.contractWrapper.getProvider(),t.price,t.currencyAddress);return{to:t.to,tokenId:t.tokenId,uri:t.uri,quantity:t.quantity,pricePerToken:r,currency:t.currencyAddress,validityStartTimestamp:t.mintStartTime,validityEndTimestamp:t.mintEndTime,uid:t.uid,royaltyRecipient:t.royaltyRecipient,royaltyBps:t.royaltyBps,primarySaleRecipient:t.primarySaleRecipient}}};p(Hr,"Erc1155SignatureMinting");var gr=require("@thirdweb-dev/contracts"),St=require("ethers"),ka=require("@ethersproject/constants");var ke=require("ethers"),xt=require("@thirdweb-dev/contracts");var Mt=X(require("tiny-invariant"));async function Fo(o,t,r,e,a){try{let n=xt.ERC165__factory.connect(r,o),s=await n.supportsInterface(_t),i=await n.supportsInterface(Dt);if(s){let c=xt.IERC721__factory.connect(r,o);return await c.isApprovedForAll(a,t)?!0:(await c.getApproved(e)).toLowerCase()===t.toLowerCase()}else return i?await xt.IERC1155__factory.connect(r,o).isApprovedForAll(a,t):(console.error("Contract does not implement ERC 1155 or ERC 721."),!1)}catch(n){return console.error("Failed to check if token is approved",n),!1}}p(Fo,"isTokenApprovedForMarketplace");async function Pe(o,t,r,e,a){let n=xt.ERC165__factory.connect(r,o),s=await n.supportsInterface(_t),i=await n.supportsInterface(Dt);if(s){let c=new w(o,r,xt.IERC721__factory.abi,{});await c.readContract.isApprovedForAll(a,t)||(await c.readContract.getApproved(e)).toLowerCase()===t.toLowerCase()||await c.sendTransaction("setApprovalForAll",[t,!0])}else if(i){let c=new w(o,r,xt.IERC1155__factory.abi,{});await c.readContract.isApprovedForAll(a,t)||await c.sendTransaction("setApprovalForAll",[t,!0])}else throw Error("Contract must implement ERC 1155 or ERC 721.")}p(Pe,"handleTokenApproval");function Re(o){switch((0,Mt.default)(o.assetContractAddress!==void 0&&o.assetContractAddress!==null,"Asset contract address is required"),(0,Mt.default)(o.buyoutPricePerToken!==void 0&&o.buyoutPricePerToken!==null,"Buyout price is required"),(0,Mt.default)(o.listingDurationInSeconds!==void 0&&o.listingDurationInSeconds!==null,"Listing duration is required"),(0,Mt.default)(o.startTimeInSeconds!==void 0&&o.startTimeInSeconds!==null,"Start time is required"),(0,Mt.default)(o.tokenId!==void 0&&o.tokenId!==null,"Token ID is required"),(0,Mt.default)(o.quantity!==void 0&&o.quantity!==null,"Quantity is required"),o.type){case"NewAuctionListing":(0,Mt.default)(o.reservePricePerToken!==void 0&&o.reservePricePerToken!==null,"Reserve price is required")}}p(Re,"validateNewListingParam");async function Fe(o,t,r){return{quantity:r.quantityDesired,pricePerToken:r.pricePerToken,currencyContractAddress:r.currency,buyerAddress:r.offeror,quantityDesired:r.quantityWanted,currencyValue:await O(o,r.currency,r.quantityWanted.mul(r.pricePerToken)),listingId:t}}p(Fe,"mapOffer");function Io(o,t,r){return r=ke.BigNumber.from(r),o=ke.BigNumber.from(o),t=ke.BigNumber.from(t),t.sub(o).mul(ra).div(o).gte(r)}p(Io,"isWinningBid");var _o=X(require("tiny-invariant")),Do=require("ethers/lib/utils"),jr=class{constructor(t,r){this.contractWrapper=t,this.storage=r}getAddress(){return this.contractWrapper.readContract.address}async getListing(t){let r=await this.contractWrapper.readContract.listings(t);if(r.assetContract===ka.AddressZero)throw new gt(this.getAddress(),t.toString());if(r.listingType!==B.Direct)throw new Ut(this.getAddress(),t.toString(),"Auction","Direct");return await this.mapListing(r)}async getActiveOffer(t,r){await this.validateListing(St.BigNumber.from(t)),(0,_o.default)((0,Do.isAddress)(r),"Address must be a valid address");let e=await this.contractWrapper.readContract.offers(t,r);if(e.offeror!==ka.AddressZero)return await Fe(this.contractWrapper.getProvider(),St.BigNumber.from(t),e)}async createListing(t){Re(t),await Pe(this.contractWrapper.getSignerOrProvider(),this.getAddress(),t.assetContractAddress,t.tokenId,await this.contractWrapper.getSignerAddress());let r=await ot(this.contractWrapper.getProvider(),t.buyoutPricePerToken,t.currencyContractAddress),e=await this.contractWrapper.sendTransaction("createListing",[{assetContract:t.assetContractAddress,tokenId:t.tokenId,buyoutPricePerToken:r,currencyToAccept:t.currencyContractAddress,listingType:B.Direct,quantityToList:t.quantity,reservePricePerToken:r,secondsUntilEndTime:t.listingDurationInSeconds,startTime:t.startTimeInSeconds}]);return{id:this.contractWrapper.parseLogs("ListingAdded",e==null?void 0:e.logs)[0].args.listingId,receipt:e}}async makeOffer(t,r,e,a){if(Ct(e))throw new Error("You must use the wrapped native token address when making an offer with a native token");let n=await ot(this.contractWrapper.getProvider(),a,e);try{await this.getListing(t)}catch(d){throw console.error("Failed to get listing, err =",d),new Error(`Error getting the listing with id ${t}`)}let s=St.BigNumber.from(r),i=St.BigNumber.from(n).mul(s),c=await this.contractWrapper.getCallOverrides()||{};return await vt(this.contractWrapper,i,e,c),{receipt:await this.contractWrapper.sendTransaction("offer",[t,r,e,n],c)}}async acceptOffer(t,r){await this.validateListing(St.BigNumber.from(t));let e=await this.contractWrapper.readContract.offers(t,r);return{receipt:await this.contractWrapper.sendTransaction("acceptOffer",[t,r,e.currency,e.pricePerToken])}}async buyoutListing(t,r,e){let a=await this.validateListing(St.BigNumber.from(t));if(!await this.isStillValidListing(a,r))throw new Error("The asset on this listing has been moved from the lister's wallet, this listing is now invalid");let s=e||await this.contractWrapper.getSignerAddress(),i=St.BigNumber.from(r),c=St.BigNumber.from(a.buyoutPrice).mul(i),d=await this.contractWrapper.getCallOverrides()||{};return await vt(this.contractWrapper,c,a.currencyContractAddress,d),{receipt:await this.contractWrapper.sendTransaction("buy",[t,s,i,a.currencyContractAddress,c],d)}}async updateListing(t){return{receipt:await this.contractWrapper.sendTransaction("updateListing",[t.id,t.quantity,t.buyoutPrice,t.buyoutPrice,t.currencyContractAddress,t.startTimeInSeconds,t.secondsUntilEnd])}}async cancelListing(t){return{receipt:await this.contractWrapper.sendTransaction("cancelDirectListing",[t])}}async validateListing(t){try{return await this.getListing(t)}catch(r){throw console.error(`Error getting the listing with id ${t}`),r}}async mapListing(t){return{assetContractAddress:t.assetContract,buyoutPrice:St.BigNumber.from(t.buyoutPricePerToken),currencyContractAddress:t.currency,buyoutCurrencyValuePerToken:await O(this.contractWrapper.getProvider(),t.currency,t.buyoutPricePerToken),id:t.listingId.toString(),tokenId:t.tokenId,quantity:t.quantity,startTimeInSeconds:t.startTime,asset:await Ot(t.assetContract,this.contractWrapper.getProvider(),t.tokenId,this.storage),secondsUntilEnd:t.endTime,sellerAddress:t.tokenOwner,type:B.Direct}}async isStillValidListing(t,r){if(!await Fo(this.contractWrapper.getProvider(),this.getAddress(),t.assetContractAddress,t.tokenId,t.sellerAddress))return!1;let a=this.contractWrapper.getProvider(),n=gr.ERC165__factory.connect(t.assetContractAddress,a),s=await n.supportsInterface(_t),i=await n.supportsInterface(Dt);return s?(await gr.IERC721__factory.connect(t.assetContractAddress,a).ownerOf(t.tokenId)).toLowerCase()===t.sellerAddress.toLowerCase():i?(await gr.IERC1155__factory.connect(t.assetContractAddress,a).balanceOf(t.sellerAddress,t.tokenId)).gte(r||t.quantity):(console.error("Contract does not implement ERC 1155 or ERC 721."),!1)}};p(jr,"MarketplaceDirect");var H=require("ethers");var Pa=require("@ethersproject/constants");var Ra=X(require("tiny-invariant")),zr=class{constructor(t,r){this.contractWrapper=t,this.storage=r}getAddress(){return this.contractWrapper.readContract.address}async getListing(t){let r=await this.contractWrapper.readContract.listings(t);if(r.listingId.toString()!==t.toString())throw new gt(this.getAddress(),t.toString());if(r.listingType!==B.Auction)throw new Ut(this.getAddress(),t.toString(),"Direct","Auction");return await this.mapListing(r)}async getWinningBid(t){await this.validateListing(H.BigNumber.from(t));let r=await this.contractWrapper.readContract.winningBid(t);if(r.offeror!==Pa.AddressZero)return await Fe(this.contractWrapper.getProvider(),H.BigNumber.from(t),r)}async getWinner(t){let e=(await this.contractWrapper.readContract.queryFilter(this.contractWrapper.readContract.filters.AuctionClosed())).find(a=>a.args.listingId.eq(H.BigNumber.from(t)));if(!e)throw new Error(`Could not find auction with listingId ${t} in closed auctions`);return e.args.winningBidder}async createListing(t){Re(t),await Pe(this.contractWrapper.getSignerOrProvider(),this.getAddress(),t.assetContractAddress,t.tokenId,await this.contractWrapper.getSignerAddress());let r=await ot(this.contractWrapper.getProvider(),t.buyoutPricePerToken,t.currencyContractAddress),e=await ot(this.contractWrapper.getProvider(),t.reservePricePerToken,t.currencyContractAddress),a=await this.contractWrapper.sendTransaction("createListing",[{assetContract:t.assetContractAddress,tokenId:t.tokenId,buyoutPricePerToken:r,currencyToAccept:t.currencyContractAddress,listingType:B.Auction,quantityToList:t.quantity,reservePricePerToken:e,secondsUntilEndTime:t.listingDurationInSeconds,startTime:t.startTimeInSeconds}]);return{id:this.contractWrapper.parseLogs("ListingAdded",a==null?void 0:a.logs)[0].args.listingId,receipt:a}}async buyoutListing(t){let r=await this.validateListing(H.BigNumber.from(t)),e=await Nt(this.contractWrapper.getProvider(),r.currencyContractAddress);return this.makeBid(t,H.ethers.utils.formatUnits(r.buyoutPrice,e.decimals))}async makeBid(t,r){let e=await this.validateListing(H.BigNumber.from(t)),a=await ot(this.contractWrapper.getProvider(),r,e.currencyContractAddress),n=await this.contractWrapper.readContract.bidBufferBps(),s=await this.getWinningBid(t);if(s){let m=Io(s.pricePerToken,a,n);(0,Ra.default)(m,"Bid price is too low based on the current winning bid and the bid buffer")}else{let m=a,u=H.BigNumber.from(e.reservePrice);(0,Ra.default)(m.gte(u),"Bid price is too low based on reserve price")}let i=H.BigNumber.from(e.quantity),c=a.mul(i),d=await this.contractWrapper.getCallOverrides()||{};return await vt(this.contractWrapper,c,e.currencyContractAddress,d),{receipt:await this.contractWrapper.sendTransaction("offer",[t,e.quantity,e.currencyContractAddress,a],d)}}async cancelListing(t){let r=await this.validateListing(H.BigNumber.from(t)),e=H.BigNumber.from(Math.floor(Date.now()/1e3)),a=H.BigNumber.from(r.startTimeInEpochSeconds),n=await this.contractWrapper.readContract.winningBid(t);if(e.gt(a)&&n.offeror!==Pa.AddressZero)throw new Er(t.toString());return{receipt:await this.contractWrapper.sendTransaction("closeAuction",[H.BigNumber.from(t),await this.contractWrapper.getSignerAddress()])}}async closeListing(t,r){r||(r=await this.contractWrapper.getSignerAddress());let e=await this.validateListing(H.BigNumber.from(t));try{return{receipt:await this.contractWrapper.sendTransaction("closeAuction",[H.BigNumber.from(t),r])}}catch(a){throw a.message.includes("cannot close auction before it has ended")?new kr(t.toString(),e.endTimeInEpochSeconds.toString()):a}}async updateListing(t){return{receipt:await this.contractWrapper.sendTransaction("updateListing",[t.id,t.quantity,t.reservePrice,t.buyoutPrice,t.currencyContractAddress,t.startTimeInEpochSeconds,t.endTimeInEpochSeconds])}}async validateListing(t){try{return await this.getListing(t)}catch(r){throw console.error(`Error getting the listing with id ${t}`),r}}async mapListing(t){return{assetContractAddress:t.assetContract,buyoutPrice:H.BigNumber.from(t.buyoutPricePerToken),currencyContractAddress:t.currency,buyoutCurrencyValuePerToken:await O(this.contractWrapper.getProvider(),t.currency,t.buyoutPricePerToken),id:t.listingId.toString(),tokenId:t.tokenId,quantity:t.quantity,startTimeInEpochSeconds:t.startTime,asset:await Ot(t.assetContract,this.contractWrapper.getProvider(),t.tokenId,this.storage),reservePriceCurrencyValuePerToken:await O(this.contractWrapper.getProvider(),t.currency,t.reservePricePerToken),reservePrice:H.BigNumber.from(t.reservePricePerToken),endTimeInEpochSeconds:t.endTime,sellerAddress:t.tokenOwner,type:B.Auction}}};p(zr,"MarketplaceAuction");var No=require("@thirdweb-dev/contracts");var Oo=require("ethers/lib/utils"),Bo=require("@ethersproject/constants"),Ie=class extends w{constructor(t,r,e){super(r,t,No.TWRegistry__factory.abi,e)}async getContractAddresses(t){return(await this.readContract.getAll(t)).filter(r=>(0,Oo.isAddress)(r)&&r.toLowerCase()!==Bo.AddressZero)}};p(Ie,"ContractRegistry");var fn=require("@thirdweb-dev/contracts"),oe=require("ethers");var Mo=v.merge(D).merge(Q),as=E.merge(D).merge(Q),os=Mo.merge(J).merge(lt).merge(N),Lo={deploy:os,output:as,input:Mo};var Uo=require("@thirdweb-dev/contracts");var k=class{constructor(t){this.contractWrapper=t}addListener(t,r){let e=this.contractWrapper.readContract.interface.getEvent(t);this.contractWrapper.readContract.on(e.name,(...a)=>{let n={};e.inputs.map(s=>s.name).forEach((s,i)=>{n[s]=a[i]}),r(n)})}removeListener(t,r){let e=this.contractWrapper.readContract.interface.getEvent(t);this.contractWrapper.readContract.off(e.name,r)}removeAllListeners(){this.contractWrapper.readContract.removeAllListeners()}};p(k,"ContractEvents");var Zr=class extends Kt{constructor(t,r,e,a={},n=new w(t,r,Zr.contractFactory.abi,a)){super(n,e,a);this.metadata=new W(this.contractWrapper,Zr.schema,this.storage),this.roles=new q(this.contractWrapper,Zr.contractRoles),this.royalty=new at(this.contractWrapper,this.metadata),this.primarySale=new ut(this.contractWrapper),this.encoder=new x(this.contractWrapper),this.estimator=new P(this.contractWrapper),this.signature=new Gr(this.contractWrapper,this.roles,this.storage),this.events=new k(this.contractWrapper)}async mint(t){return this.mintTo(await this.contractWrapper.getSignerAddress(),t)}async mintTo(t,r){let e=await ve(r,this.storage),a=await this.contractWrapper.sendTransaction("mintTo",[t,e]),n=this.contractWrapper.parseLogs("TokensMinted",a==null?void 0:a.logs);if(n.length===0)throw new Error("TokenMinted event not found");let s=n[0].args.tokenIdMinted;return{id:s,receipt:a,data:()=>this.get(s.toString())}}async mintBatch(t){return this.mintBatchTo(await this.contractWrapper.getSignerAddress(),t)}async mintBatchTo(t,r){let a=(await Bt(r,this.storage)).map(i=>this.contractWrapper.readContract.interface.encodeFunctionData("mintTo",[t,i])),n=await this.contractWrapper.multiCall(a),s=this.contractWrapper.parseLogs("TokensMinted",n.logs);if(s.length===0||s.length<r.length)throw new Error("TokenMinted event not found, minting failed");return s.map(i=>{let c=i.args.tokenIdMinted;return{id:c,receipt:n,data:()=>this.get(c)}})}},j=Zr;p(j,"NFTCollection"),f(j,"contractType","nft-collection"),f(j,"contractRoles",["admin","minter","transfer"]),f(j,"contractFactory",Uo.TokenERC721__factory),f(j,"schema",Lo);var Go=require("@thirdweb-dev/contracts");var _e=require("ethers/lib/utils");var $o=v.merge(D).merge(Vt).merge(Q),ns=E.merge(D).merge(Vt).merge(Q),ss=$o.merge(J).merge(lt).merge(N),Vo={deploy:ss,output:ns,input:$o};var Fa=require("ethers"),P=class{constructor(t){this.contractWrapper=t}async gasCostOf(t,r){let e=await this.contractWrapper.getPreferredGasPrice(),a=await this.contractWrapper.estimateGas(t,r);return Fa.ethers.utils.formatEther(a.mul(e))}async currentGasPriceInGwei(){let t=await this.contractWrapper.getProvider().getGasPrice();return Fa.ethers.utils.formatUnits(t,"gwei")}};p(P,"GasCostEstimator");var Kr=class extends qt{constructor(t,r,e,a={},n=new w(t,r,Kr.contractFactory.abi,a)){super(n,e,a);this.metadata=new W(this.contractWrapper,Kr.schema,this.storage),this.roles=new q(this.contractWrapper,Kr.contractRoles),this.royalty=new at(this.contractWrapper,this.metadata),this.primarySale=new ut(this.contractWrapper),this.claimConditions=new Mr(this.contractWrapper,this.metadata,this.storage),this.history=new Lr(this.contractWrapper),this.encoder=new x(this.contractWrapper),this.events=new k(this.contractWrapper),this.estimator=new P(this.contractWrapper)}async createBatch(t){var d;let r=await this.contractWrapper.readContract.nextTokenIdToMint(),e=await this.storage.uploadMetadataBatch(t.map(m=>et.parse(m)),r.toNumber(),this.contractWrapper.readContract.address,await((d=this.contractWrapper.getSigner())==null?void 0:d.getAddress())),a=await this.contractWrapper.sendTransaction("lazyMint",[e.metadataUris.length,`${e.baseUri.endsWith("/")?e.baseUri:`${e.baseUri}/`}`]),n=this.contractWrapper.parseLogs("TokensLazyMinted",a==null?void 0:a.logs),s=n[0].args.startTokenId,i=n[0].args.endTokenId,c=[];for(let m=s;m.lte(i);m=m.add(1))c.push({id:m,receipt:a,data:()=>this.getTokenMetadata(m)});return c}async claimTo(t,r,e,a=[(0,_e.hexZeroPad)([0],32)]){let n=await this.prepareClaim(r,e,a);return{receipt:await this.contractWrapper.sendTransaction("claim",[t,r,e,n.currencyAddress,n.price,n.proofs,n.maxQuantityPerTransaction],n.overrides)}}async claim(t,r,e=[(0,_e.hexZeroPad)([0],32)]){let a=await this.contractWrapper.getSignerAddress();return this.claimTo(a,t,r,e)}async prepareClaim(t,r,e=[(0,_e.hexZeroPad)([0],32)]){return Te(r,await this.claimConditions.getActive(t),(await this.metadata.get()).merkle,this.contractWrapper,this.storage,e)}},R=Kr;p(R,"EditionDrop"),f(R,"contractType","edition-drop"),f(R,"contractRoles",["admin","minter","transfer"]),f(R,"contractFactory",Go.DropERC1155__factory),f(R,"schema",Vo);var zo=require("@thirdweb-dev/contracts");var Ho=v.merge(D),is=E.merge(D),cs=Ho.merge(J).merge(lt).merge(N),jo={deploy:cs,output:is,input:Ho};var Jr=require("ethers");var qr=class extends qt{constructor(t,r,e,a={},n=new w(t,r,qr.contractFactory.abi,a)){super(n,e,a);this.metadata=new W(this.contractWrapper,qr.schema,this.storage),this.roles=new q(this.contractWrapper,qr.contractRoles),this.royalty=new at(this.contractWrapper,this.metadata),this.primarySale=new ut(this.contractWrapper),this.encoder=new x(this.contractWrapper),this.estimator=new P(this.contractWrapper),this.events=new k(this.contractWrapper),this.signature=new Hr(this.contractWrapper,this.roles,this.storage)}async mint(t){return this.mintTo(await this.contractWrapper.getSignerAddress(),t)}async mintTo(t,r){let e=await ve(r.metadata,this.storage),a=await this.contractWrapper.sendTransaction("mintTo",[t,Jr.ethers.constants.MaxUint256,e,r.supply]),n=this.contractWrapper.parseLogs("TokensMinted",a==null?void 0:a.logs);if(n.length===0)throw new Error("TokenMinted event not found");let s=n[0].args.tokenIdMinted;return{id:s,receipt:a,data:()=>this.get(s.toString())}}async mintAdditionalSupply(t,r){return this.mintAdditionalSupplyTo(await this.contractWrapper.getSignerAddress(),t,r)}async mintAdditionalSupplyTo(t,r,e){let a=await this.getTokenMetadata(r),n=await this.contractWrapper.sendTransaction("mintTo",[t,r,a.uri,e]);return{id:Jr.BigNumber.from(r),receipt:n,data:()=>this.get(r)}}async mintBatch(t){return this.mintBatchTo(await this.contractWrapper.getSignerAddress(),t)}async mintBatchTo(t,r){let e=r.map(d=>d.metadata),a=r.map(d=>d.supply),s=(await Bt(e,this.storage)).map((d,m)=>this.contractWrapper.readContract.interface.encodeFunctionData("mintTo",[t,Jr.ethers.constants.MaxUint256,d,a[m]])),i=await this.contractWrapper.multiCall(s),c=this.contractWrapper.parseLogs("TokensMinted",i.logs);if(c.length===0||c.length<e.length)throw new Error("TokenMinted event not found, minting failed");return c.map(d=>{let m=d.args.tokenIdMinted;return{id:m,receipt:i,data:()=>this.get(m)}})}},z=qr;p(z,"Edition"),f(z,"contractType","edition"),f(z,"contractRoles",["admin","minter","transfer"]),f(z,"contractFactory",zo.TokenERC1155__factory),f(z,"schema",jo);var Zo=v.merge(Q),ps=E.merge(Q),ds=Zo.merge(J).merge(lt).merge(N),Ko={deploy:ds,output:ps,input:Zo};var qo=require("@thirdweb-dev/contracts");var yr=require("ethers");var Qr=class extends Ur{constructor(t,r,e,a={},n=new w(t,r,Qr.contractFactory.abi,a)){super(n,e,a);this.metadata=new W(this.contractWrapper,Qr.schema,this.storage),this.roles=new q(this.contractWrapper,Qr.contractRoles),this.history=new $r(this.contractWrapper),this.encoder=new x(this.contractWrapper),this.estimator=new P(this.contractWrapper),this.events=new k(this.contractWrapper)}async getVoteBalance(){return await this.getVoteBalanceOf(await this.contractWrapper.getSignerAddress())}async getVoteBalanceOf(t){return await this.getValue(await this.contractWrapper.readContract.getVotes(t))}async getDelegation(){return await this.getDelegationOf(await this.contractWrapper.getSignerAddress())}async getDelegationOf(t){return await this.contractWrapper.readContract.delegates(t)}async mint(t){return this.mintTo(await this.contractWrapper.getSignerAddress(),t)}async mintTo(t,r){let e=yr.ethers.utils.parseUnits(yr.BigNumber.from(r).toString(),await this.contractWrapper.readContract.decimals());return{receipt:await this.contractWrapper.sendTransaction("mintTo",[t,e])}}async mintBatchTo(t){let r=[];for(let e of t){let a=yr.ethers.utils.parseUnits(yr.BigNumber.from(e.amount).toString(),await this.contractWrapper.readContract.decimals());r.push(this.contractWrapper.readContract.interface.encodeFunctionData("mintTo",[e.toAddress,a]))}return{receipt:await this.contractWrapper.multiCall(r)}}async delegateTo(t){return{receipt:await this.contractWrapper.sendTransaction("delegate",[t])}}},M=Qr;p(M,"Token"),f(M,"contractType","token"),f(M,"contractRoles",["admin","minter","transfer"]),f(M,"contractFactory",qo.TokenERC20__factory),f(M,"schema",Ko);var Ne=require("@thirdweb-dev/contracts");var rt=require("zod"),Jo=rt.z.object({voting_delay_in_blocks:rt.z.number().min(0).default(0),voting_period_in_blocks:rt.z.number().min(1).default(1),voting_token_address:it,voting_quorum_fraction:Ha.default(0),proposal_token_threshold:st.default(1)}),ms=Jo.extend({proposal_token_threshold:T}),Qo=v.merge(Jo),ls=E.merge(ms),us=Qo.merge(N),Yo={deploy:us,output:ls,input:Qo},vd=rt.z.object({proposalId:T,proposer:rt.z.string(),targets:rt.z.array(rt.z.string()),values:rt.z.array(T),signatures:rt.z.array(rt.z.string()),calldatas:rt.z.array(rt.z.string()),startBlock:T,endBlock:T,description:rt.z.string()});var Jt=require("ethers");var Xo=X(require("deep-equal"));var De=class{constructor(t,r,e,a={},n=new w(t,r,De.contractFactory.abi,a)){this.contractWrapper=n,this.storage=e,this.metadata=new W(this.contractWrapper,De.schema,this.storage),this.encoder=new x(this.contractWrapper),this.estimator=new P(this.contractWrapper),this.events=new k(this.contractWrapper)}onNetworkUpdated(t){this.contractWrapper.updateSignerOrProvider(t)}getAddress(){return this.contractWrapper.readContract.address}async get(t){let e=(await this.getAll()).filter(a=>(0,Xo.default)(Jt.BigNumber.from(a.proposalId),Jt.BigNumber.from(t)));if(e.length===0)throw new Error("proposal not found");return e[0]}async getAll(){return Promise.all((await this.contractWrapper.readContract.getAllProposals()).map(async t=>({proposalId:t.proposalId,proposer:t.proposer,description:t.description,startBlock:t.startBlock,endBlock:t.endBlock,state:await this.contractWrapper.readContract.state(t.proposalId),votes:await this.getProposalVotes(t.proposalId),executions:t[3].map((r,e)=>({toAddress:t.targets[e],nativeTokenValue:r,transactionData:t.calldatas[e]}))})))}async getProposalVotes(t){let r=await this.contractWrapper.readContract.proposalVotes(t);return[{type:jt.Against,label:"Against",count:r.againstVotes},{type:jt.For,label:"For",count:r.forVotes},{type:jt.Abstain,label:"Abstain",count:r.abstainVotes}]}async hasVoted(t,r){return r||(r=await this.contractWrapper.getSignerAddress()),this.contractWrapper.readContract.hasVoted(t,r)}async canExecute(t){await this.ensureExists(t);let r=await this.get(t),e=r.executions.map(i=>i.toAddress),a=r.executions.map(i=>i.nativeTokenValue),n=r.executions.map(i=>i.transactionData),s=Jt.ethers.utils.id(r.description);try{return await this.contractWrapper.callStatic().execute(e,a,n,s),!0}catch{return!1}}async balance(){let t=await this.contractWrapper.readContract.provider.getBalance(this.contractWrapper.readContract.address);return{name:"",symbol:"",decimals:18,value:t,displayValue:Jt.ethers.utils.formatUnits(t,18)}}async balanceOfToken(t){let r=Ne.IERC20__factory.connect(t,this.contractWrapper.getProvider());return await O(this.contractWrapper.getProvider(),t,await r.balanceOf(this.contractWrapper.readContract.address))}async ensureExists(t){try{await this.contractWrapper.readContract.state(t)}catch{throw Error(`Proposal ${t} not found`)}}async settings(){let[t,r,e,a,n]=await Promise.all([this.contractWrapper.readContract.votingDelay(),this.contractWrapper.readContract.votingPeriod(),this.contractWrapper.readContract.token(),this.contractWrapper.readContract.quorumNumerator(),this.contractWrapper.readContract.proposalThreshold()]),s=await Nt(this.contractWrapper.getProvider(),e);return{votingDelay:t.toString(),votingPeriod:r.toString(),votingTokenAddress:e,votingTokenMetadata:s,votingQuorumFraction:a.toString(),proposalTokenThreshold:n.toString()}}async propose(t,r){r||(r=[{toAddress:this.contractWrapper.readContract.address,nativeTokenValue:0,transactionData:"0x"}]);let e=r.map(c=>c.toAddress),a=r.map(c=>c.nativeTokenValue),n=r.map(c=>c.transactionData),s=await this.contractWrapper.sendTransaction("propose",[e,a,n,t]);return{id:this.contractWrapper.parseLogs("ProposalCreated",s==null?void 0:s.logs)[0].args.proposalId,receipt:s}}async vote(t,r,e=""){return await this.ensureExists(t),{receipt:await this.contractWrapper.sendTransaction("castVoteWithReason",[t,r,e])}}async execute(t){await this.ensureExists(t);let r=await this.get(t),e=r.executions.map(i=>i.toAddress),a=r.executions.map(i=>i.nativeTokenValue),n=r.executions.map(i=>i.transactionData),s=Jt.ethers.utils.id(r.description);return{receipt:await this.contractWrapper.sendTransaction("execute",[e,a,n,s])}}},Z=De;p(Z,"Vote"),f(Z,"contractType","vote"),f(Z,"contractFactory",Ne.VoteERC20__factory),f(Z,"schema",Yo);var Be=require("@thirdweb-dev/contracts");var _a=require("ethers");var Qt=require("zod");var tn=Qt.z.object({address:it,sharesBps:kt.gt(0,"Shares must be greater than 0")}),hs=tn.extend({address:it,sharesBps:kt}),Ia=v.extend({recipients:Qt.z.array(tn).default([]).superRefine((o,t)=>{let r={},e=0;for(let a=0;a<o.length;a++){let n=o[a];r[n.address]&&t.addIssue({code:Qt.z.ZodIssueCode.custom,message:"Duplicate address.",path:[a,"address"]}),r[n.address]=!0,e+=n.sharesBps,e>1e4&&t.addIssue({code:Qt.z.ZodIssueCode.custom,message:"Total shares cannot go over 100%.",path:[a,"sharesBps"]})}e!==1e4&&t.addIssue({code:Qt.z.ZodIssueCode.custom,message:`Total shares need to add up to 100%. Total shares are currently ${e/100}%`,path:[]})})}),fs=E.extend({recipients:Qt.z.array(hs)}),gs=Ia.merge(J).merge(Ia).merge(N),rn={deploy:gs,output:fs,input:Ia};var Oe=class{constructor(t,r,e,a={},n=new w(t,r,Oe.contractFactory.abi,a)){this.contractWrapper=n,this.storage=e,this.metadata=new W(this.contractWrapper,Oe.schema,this.storage),this.encoder=new x(this.contractWrapper),this.estimator=new P(this.contractWrapper),this.events=new k(this.contractWrapper)}onNetworkUpdated(t){this.contractWrapper.updateSignerOrProvider(t)}getAddress(){return this.contractWrapper.readContract.address}async getAllRecipients(){let t=[],r=_a.BigNumber.from(0),e=await this.contractWrapper.readContract.payeeCount();for(;r.lt(e);)try{let a=await this.contractWrapper.readContract.payee(r);t.push(await this.getRecipientSplitPercentage(a)),r=r.add(1)}catch(a){if("method"in a&&a.method.toLowerCase().includes("payee(uint256)"))break;throw a}return t}async balanceOfAllRecipients(){let t=await this.getAllRecipients(),r={};for(let e of t)r[e.address]=await this.balanceOf(e.address);return r}async balanceOfTokenAllRecipients(t){let r=await this.getAllRecipients(),e={};for(let a of r)e[a.address]=await this.balanceOfToken(a.address,t);return e}async balanceOf(t){let r=await this.contractWrapper.readContract.provider.getBalance(this.getAddress()),e=await this.contractWrapper.readContract["totalReleased()"](),a=r.add(e);return this._pendingPayment(t,a,await this.contractWrapper.readContract["released(address)"](t))}async balanceOfToken(t,r){let a=await Be.IERC20__factory.connect(r,this.contractWrapper.getProvider()).balanceOf(this.getAddress()),n=await this.contractWrapper.readContract["totalReleased(address)"](r),s=a.add(n),i=await this._pendingPayment(t,s,await this.contractWrapper.readContract["released(address,address)"](r,t));return await O(this.contractWrapper.getProvider(),r,i)}async getRecipientSplitPercentage(t){let[r,e]=await Promise.all([this.contractWrapper.readContract.totalShares(),this.contractWrapper.readContract.shares(t)]);return{address:t,splitPercentage:e.mul(_a.BigNumber.from(1e7)).div(r).toNumber()/1e5}}async withdraw(t){return{receipt:await this.contractWrapper.sendTransaction("release(address)",[t])}}async withdrawToken(t,r){return{receipt:await this.contractWrapper.sendTransaction("release(address,address)",[r,t])}}async distribute(){return{receipt:await this.contractWrapper.sendTransaction("distribute()",[])}}async distributeToken(t){return{receipt:await this.contractWrapper.sendTransaction("distribute(address)",[t])}}async _pendingPayment(t,r,e){return r.mul(await this.contractWrapper.readContract.shares(t)).div(await this.contractWrapper.readContract.totalShares()).sub(e)}},K=Oe;p(K,"Split"),f(K,"contractType","split"),f(K,"contractFactory",Be.Split__factory),f(K,"schema",rn);var on=require("@thirdweb-dev/contracts");var en=v,ys=E,ws=en.merge(J).merge(N),an={deploy:ws,output:ys,input:en};var Yt=require("ethers"),nn=X(require("tiny-invariant"));var wr=require("@ethersproject/constants");var Yr=class{constructor(t,r,e,a={},n=new w(t,r,Yr.contractFactory.abi,a)){this.contractWrapper=n,this.storage=e,this.metadata=new W(this.contractWrapper,Yr.schema,this.storage),this.roles=new q(this.contractWrapper,Yr.contractRoles),this.encoder=new x(this.contractWrapper),this.estimator=new P(this.contractWrapper),this.direct=new jr(this.contractWrapper,this.storage),this.auction=new zr(this.contractWrapper,this.storage),this.events=new k(this.contractWrapper)}onNetworkUpdated(t){this.contractWrapper.updateSignerOrProvider(t)}getAddress(){return this.contractWrapper.readContract.address}async getListing(t){let r=await this.contractWrapper.readContract.listings(t);if(r.assetContract===wr.AddressZero)throw new gt(this.getAddress(),t.toString());switch(r.listingType){case B.Auction:return await this.auction.mapListing(r);case B.Direct:return await this.direct.mapListing(r);default:throw new Error(`Unknown listing type: ${r.listingType}`)}}async getActiveListings(){return(await this.getAllListingsNoFilter()).filter(r=>r.type===B.Auction&&Yt.BigNumber.from(r.endTimeInEpochSeconds).gt(Yt.BigNumber.from(Math.floor(Date.now()/1e3)))||r.type===B.Direct&&r.quantity>0)}async getAllListings(t){let r=Yt.BigNumber.from((t==null?void 0:t.start)||0).toNumber(),e=Yt.BigNumber.from((t==null?void 0:t.count)||100).toNumber(),a=await this.getAllListingsNoFilter();return t&&(t.seller&&(a=a.filter(n=>{var s;return n.sellerAddress.toString().toLowerCase()===((s=t==null?void 0:t.seller)==null?void 0:s.toString().toLowerCase())})),t.tokenContract&&(t.tokenId?a=a.filter(n=>{var s,i;return n.assetContractAddress.toString().toLowerCase()===((s=t==null?void 0:t.tokenContract)==null?void 0:s.toString().toLowerCase())&&n.tokenId.toString()===((i=t==null?void 0:t.tokenId)==null?void 0:i.toString())}):a=a.filter(n=>{var s;return n.assetContractAddress.toString().toLowerCase()===((s=t==null?void 0:t.tokenContract)==null?void 0:s.toString().toLowerCase())})),a=a.filter((n,s)=>s>=r),a=a.slice(0,e)),a.filter(n=>n!==void 0)}getAll=this.getAllListings;async getTotalCount(){return await this.contractWrapper.readContract.totalListings()}async isRestrictedToListerRoleOnly(){return!await this.contractWrapper.readContract.hasRole(I("lister"),wr.AddressZero)}async getBidBufferBps(){return this.contractWrapper.readContract.bidBufferBps()}async getTimeBufferInSeconds(){return this.contractWrapper.readContract.timeBuffer()}async buyoutListing(t,r,e){let a=await this.contractWrapper.readContract.listings(t);if(a.listingId.toString()!==t.toString())throw new gt(this.getAddress(),t.toString());switch(a.listingType){case B.Direct:return(0,nn.default)(r!==void 0,"quantityDesired is required when buying out a direct listing"),await this.direct.buyoutListing(t,r,e);case B.Auction:return await this.auction.buyoutListing(t);default:throw Error(`Unknown listing type: ${a.listingType}`)}}async setBidBufferBps(t){await this.roles.verify(["admin"],await this.contractWrapper.getSignerAddress());let r=await this.getTimeBufferInSeconds();await this.contractWrapper.sendTransaction("setAuctionBuffers",[r,Yt.BigNumber.from(t)])}async setTimeBufferInSeconds(t){await this.roles.verify(["admin"],await this.contractWrapper.getSignerAddress());let r=await this.getBidBufferBps();await this.contractWrapper.sendTransaction("setAuctionBuffers",[Yt.BigNumber.from(t),r])}async allowListingFromSpecificAssetOnly(t){let r=[];(await this.roles.get("asset")).includes(wr.AddressZero)&&r.push(this.encoder.encode("revokeRole",[I("asset"),wr.AddressZero])),r.push(this.encoder.encode("grantRole",[I("asset"),t])),await this.contractWrapper.multiCall(r)}async allowListingFromAnyAsset(){let t=[],r=await this.roles.get("asset");for(let e in r)t.push(this.encoder.encode("revokeRole",[I("asset"),e]));t.push(this.encoder.encode("grantRole",[I("asset"),wr.AddressZero])),await this.contractWrapper.multiCall(t)}async getAllListingsNoFilter(){return(await Promise.all(Array.from(Array((await this.contractWrapper.readContract.totalListings()).toNumber()).keys()).map(async r=>{let e;try{e=await this.getListing(r)}catch{return}if(e.type===B.Auction)return e;if(!!await this.direct.isStillValidListing(e))return e}))).filter(r=>r!==void 0)}},L=Yr;p(L,"Marketplace"),f(L,"contractType","marketplace"),f(L,"contractRoles",["admin","lister","asset"]),f(L,"contractFactory",on.Marketplace__factory),f(L,"schema",an);var Xt=require("@thirdweb-dev/contracts");var sn=v.merge(D).merge(Q),Cs=E.merge(D).merge(Q),Ss=sn.merge(J).merge(N),cn={deploy:Ss,output:Cs,input:sn};var te=require("ethers");var Xr=class{constructor(t,r,e,a={},n=new w(t,r,Xr.contractFactory.abi,a)){this.contractWrapper=n,this.storage=e,this.metadata=new W(this.contractWrapper,Xr.schema,this.storage),this.roles=new q(this.contractWrapper,Xr.contractRoles),this.royalty=new at(this.contractWrapper,this.metadata),this.encoder=new x(this.contractWrapper),this.estimator=new P(this.contractWrapper),this.events=new k(this.contractWrapper)}onNetworkUpdated(t){this.contractWrapper.updateSignerOrProvider(t)}getAddress(){return this.contractWrapper.readContract.address}async get(t){let[r,e,a]=await Promise.all([Ot(this.getAddress(),this.contractWrapper.getProvider(),t,this.storage),this.contractWrapper.readContract.packs(t),this.contractWrapper.readContract.totalSupply(t).catch(()=>te.BigNumber.from("0"))]);return{id:te.BigNumber.from(t).toString(),metadata:r,creator:e.creator,currentSupply:a,openStart:e.openStart.gt(0)?new Date(e.openStart.toNumber()*1e3):null}}async getAll(){let t=(await this.contractWrapper.readContract.nextTokenId()).toNumber();return await Promise.all(Array.from(Array(t).keys()).map(r=>this.get(r.toString())))}async getNFTs(t){let r=await this.contractWrapper.readContract.getPackWithRewards(t);if(!r.source)throw new dt;return(await Promise.all(r.tokenIds.map(a=>Ot(r.source,this.contractWrapper.getProvider(),a.toString(),this.storage)))).map((a,n)=>({supply:r.amountsPacked[n],metadata:a}))}async balanceOf(t,r){return await this.contractWrapper.readContract.balanceOf(t,r)}async balance(t){return await this.balanceOf(await this.contractWrapper.getSignerAddress(),t)}async isApproved(t,r){return await this.contractWrapper.readContract.isApprovedForAll(t,r)}async getLinkBalance(){let t=await this.contractWrapper.getChainID(),r=mr[t],e=Xt.IERC20__factory.connect(r.linkTokenAddress,this.contractWrapper.getProvider());return await O(this.contractWrapper.getProvider(),r.linkTokenAddress,await e.balanceOf(this.getAddress()))}async getOwned(t){let r=t||await this.contractWrapper.getSignerAddress(),e=await this.contractWrapper.readContract.nextTokenId(),n=(await this.contractWrapper.readContract.balanceOfBatch(Array(e.toNumber()).fill(r),Array.from(Array(e.toNumber()).keys()))).map((s,i)=>({tokenId:i,balance:s})).filter(s=>s.balance.gt(0));return await Promise.all(n.map(async({tokenId:s,balance:i})=>{let c=await this.get(s.toString());return F(S({},c),{ownedByAddress:i})}))}async open(t){let r=await this.contractWrapper.sendTransaction("openPack",[t]),e=this.contractWrapper.parseLogs("PackOpenRequested",r==null?void 0:r.logs);if(e.length===0)throw new Error("Failed to open pack");let a=e[0],n=a.args.requestId,s=a.args.opener,i=await new Promise(m=>{this.contractWrapper.readContract.once(this.contractWrapper.readContract.filters.PackOpenFulfilled(null,s),(u,g,y,V,ft)=>{n===y&&m({packId:u,opener:g,requestId:n,rewardContract:V,rewardIds:ft})})}),{rewardIds:c,rewardContract:d}=i;return c.map(m=>({id:t,receipt:r,data:()=>Ot(d,this.contractWrapper.getProvider(),m.toString(),this.storage)}))}async create(t){let r=Xt.IERC1155__factory.connect(t.assetContract,this.contractWrapper.getSigner()||this.contractWrapper.getProvider()),e=await this.contractWrapper.getSignerAddress(),a=t.assets.map(g=>g.tokenId),n=t.assets.map(g=>g.amount),s=await this.storage.uploadMetadata(t.metadata),i=te.ethers.utils.defaultAbiCoder.encode(["string","uint256","uint256"],[s,t.secondsUntilOpenStart||0,t.rewardsPerOpen||1]),d=await(await r.safeBatchTransferFrom(e,this.getAddress(),a,n,i,await this.contractWrapper.getCallOverrides())).wait(),m=this.contractWrapper.parseLogs("PackAdded",d.logs);if(m.length===0)throw new Error("PackCreated event not found");let u=m[0].args.packId;return{id:u,receipt:d,data:()=>this.get(u.toString())}}async transfer(t,r,e){return{receipt:await this.contractWrapper.sendTransaction("safeTransferFrom",[await this.contractWrapper.getSignerAddress(),t,r,e,[0]])}}async transferFrom(t,r,e,a=[0]){return{receipt:await this.contractWrapper.sendTransaction("safeTransferFrom",[t,r,e.tokenId,e.amount,a])}}async transferBatchFrom(t,r,e,a=[0]){let n=e.map(i=>i.tokenId),s=e.map(i=>i.amount);return{receipt:await this.contractWrapper.sendTransaction("safeBatchTransferFrom",[t,r,n,s,a])}}async setApproval(t,r=!0){return{receipt:await this.contractWrapper.sendTransaction("setApprovalForAll",[t,r])}}async depositLink(t){let r=await this.contractWrapper.getChainID(),e=mr[r];return{receipt:await(await Xt.IERC20__factory.connect(e.linkTokenAddress,this.contractWrapper.getProvider()).transfer(this.getAddress(),t,await this.contractWrapper.getCallOverrides())).wait()}}},U=Xr;p(U,"Pack"),f(U,"contractType","pack"),f(U,"contractRoles",["admin","minter","pauser","transfer"]),f(U,"contractFactory",Xt.Pack__factory),f(U,"schema",cn);var mn=require("@thirdweb-dev/contracts"),Me=require("@ethersproject/bytes"),Lt=require("ethers");var pn=v.merge(D).merge(Vt).merge(Q),Ts=E.merge(D).merge(Vt).merge(Q),bs=pn.merge(J).merge(lt).merge(N),dn={deploy:bs,output:Ts,input:pn};var Cr=require("ethers");var re=class{constructor(t,r){this.contractWrapper=t,this.storage=r}async createDelayedRevealBatch(t,r,e){var ft,pt;if(!e)throw new Error("Password is required");let{baseUri:a}=await this.storage.uploadMetadataBatch([et.parse(t)],0,this.contractWrapper.readContract.address,await((ft=this.contractWrapper.getSigner())==null?void 0:ft.getAddress())),n=await this.contractWrapper.readContract.nextTokenIdToMint(),s=await this.storage.uploadMetadataBatch(r.map(nt=>et.parse(nt)),n.toNumber(),this.contractWrapper.readContract.address,await((pt=this.contractWrapper.getSigner())==null?void 0:pt.getAddress())),i=s.baseUri,c=await this.contractWrapper.readContract.getBaseURICount(),d=await this.contractWrapper.readContract.encryptDecrypt(Cr.ethers.utils.toUtf8Bytes(i.endsWith("/")?i:`${i}/`),await this.hashDelayRevealPasword(c,e)),m=await this.contractWrapper.sendTransaction("lazyMint",[s.metadataUris.length,a.endsWith("/")?a:`${a}/`,d]),u=this.contractWrapper.parseLogs("TokensLazyMinted",m==null?void 0:m.logs),g=u[0].args.startTokenId,y=u[0].args.endTokenId,V=[];for(let nt=g;nt.lte(y);nt=nt.add(1))V.push({id:nt,receipt:m});return V}async reveal(t,r){if(!r)throw new Error("Password is required");let e=await this.hashDelayRevealPasword(t,r);try{let a=await this.contractWrapper.callStatic().reveal(t,e);if(!a.includes("://")||!a.endsWith("/"))throw new Error("invalid password")}catch{throw new Error("invalid password")}return{receipt:await this.contractWrapper.sendTransaction("reveal",[t,e])}}async getBatchesToReveal(){let t=await this.contractWrapper.readContract.getBaseURICount();if(t.isZero())return[];let r=Array.from(Array(t.toNumber()).keys()),e=await Promise.all(r.map(c=>this.contractWrapper.readContract.baseURIIndices(c))),a=e.slice(0,e.length-1),n=await Promise.all(Array.from([0,...a]).map(c=>this.contractWrapper.readContract.tokenURI(c))),s=await Promise.all(Array.from([0,...a]).map(c=>this.getNftMetadata(c.toString()))),i=await Promise.all(Array.from([...e]).map(c=>this.contractWrapper.readContract.encryptedBaseURI(c)));return n.map((c,d)=>({batchId:Cr.BigNumber.from(d),batchUri:c,placeholderMetadata:s[d]})).filter((c,d)=>Cr.ethers.utils.hexDataLength(i[d])>0)}async hashDelayRevealPasword(t,r){let e=await this.contractWrapper.getChainID(),a=this.contractWrapper.readContract.address;return Cr.ethers.utils.solidityKeccak256(["string","uint256","uint256","address"],[r,e,t,a])}async getNftMetadata(t){let r=await this.contractWrapper.readContract.tokenURI(t);return Zt(t,r,this.storage)}};p(re,"DelayedReveal");var ee=class extends Kt{constructor(t,r,e,a={},n=new w(t,r,ee.contractFactory.abi,a)){super(n,e,a);this.metadata=new W(this.contractWrapper,ee.schema,this.storage),this.roles=new q(this.contractWrapper,ee.contractRoles),this.royalty=new at(this.contractWrapper,this.metadata),this.primarySale=new ut(this.contractWrapper),this.claimConditions=new Or(this.contractWrapper,this.metadata,this.storage),this.encoder=new x(this.contractWrapper),this.estimator=new P(this.contractWrapper),this.events=new k(this.contractWrapper),this.revealer=new re(this.contractWrapper,this.storage)}async getAllClaimed(t){let r=Lt.BigNumber.from((t==null?void 0:t.start)||0).toNumber(),e=Lt.BigNumber.from((t==null?void 0:t.count)||100).toNumber(),a=Math.min((await this.contractWrapper.readContract.nextTokenIdToClaim()).toNumber(),r+e);return await Promise.all(Array.from(Array(a).keys()).map(n=>this.get(n.toString())))}async getAllUnclaimed(t){let r=Lt.BigNumber.from((t==null?void 0:t.start)||0).toNumber(),e=Lt.BigNumber.from((t==null?void 0:t.count)||100).toNumber(),a=Lt.BigNumber.from(Math.min((await this.contractWrapper.readContract.nextTokenIdToMint()).toNumber(),r+e)),n=await this.contractWrapper.readContract.nextTokenIdToClaim();return await Promise.all(Array.from(Array(a.sub(n).toNumber()).keys()).map(s=>this.getTokenMetadata(n.add(s).toString())))}async totalClaimedSupply(){return await this.contractWrapper.readContract.nextTokenIdToClaim()}async totalUnclaimedSupply(){return(await this.contractWrapper.readContract.nextTokenIdToMint()).sub(await this.totalClaimedSupply())}async createBatch(t){var m;let r=await this.contractWrapper.readContract.nextTokenIdToMint(),e=await this.storage.uploadMetadataBatch(t.map(u=>et.parse(u)),r.toNumber(),this.contractWrapper.readContract.address,await((m=this.contractWrapper.getSigner())==null?void 0:m.getAddress())),a=e.baseUri,n=await this.contractWrapper.sendTransaction("lazyMint",[e.metadataUris.length,a.endsWith("/")?a:`${a}/`,Lt.ethers.utils.toUtf8Bytes("")]),s=this.contractWrapper.parseLogs("TokensLazyMinted",n==null?void 0:n.logs),i=s[0].args.startTokenId,c=s[0].args.endTokenId,d=[];for(let u=i;u.lte(c);u=u.add(1))d.push({id:u,receipt:n,data:()=>this.getTokenMetadata(u)});return d}async claimTo(t,r,e=[(0,Me.hexZeroPad)([0],32)]){let a=await this.prepareClaim(r,e),n=await this.contractWrapper.sendTransaction("claim",[t,r,a.currencyAddress,a.price,a.proofs,a.maxQuantityPerTransaction],a.overrides),i=this.contractWrapper.parseLogs("TokensClaimed",n==null?void 0:n.logs)[0].args.startTokenId,c=i.add(r),d=[];for(let m=i;m.lt(c);m=m.add(1))d.push({id:m,receipt:n,data:()=>this.get(m)});return d}async claim(t,r=[(0,Me.hexZeroPad)([0],32)]){return this.claimTo(await this.contractWrapper.getSignerAddress(),t,r)}async prepareClaim(t,r=[(0,Me.hexZeroPad)([0],32)]){return Te(t,await this.claimConditions.getActive(),(await this.metadata.get()).merkle,this.contractWrapper,this.storage,r)}},$=ee;p($,"NFTDrop"),f($,"contractType","nft-drop"),f($,"contractRoles",["admin","minter","transfer"]),f($,"contractFactory",mn.DropERC721__factory),f($,"schema",dn);var ae={[$.contractType]:$,[j.contractType]:j,[R.contractType]:R,[z.contractType]:z,[M.contractType]:M,[Z.contractType]:Z,[K.contractType]:K,[L.contractType]:L,[U.contractType]:U},Da={[$.contractType]:"DropERC721",[j.contractType]:"TokenERC721",[R.contractType]:"DropERC1155",[z.contractType]:"TokenERC1155",[M.contractType]:"TokenERC20",[Z.contractType]:"VoteERC20",[K.contractType]:"Split",[L.contractType]:"Marketplace",[U.contractType]:"Pack"},Le={DropERC721:$.contractType,TokenERC721:j.contractType,DropERC1155:R.contractType,TokenERC1155:z.contractType,TokenERC20:M.contractType,VoteERC20:Z.contractType,Split:K.contractType,Marketplace:L.contractType,Pack:U.contractType};var hn=require("@thirdweb-dev/contracts");var ln=v,As=E,Ws=ln,un={deploy:Ws,output:As,input:ln};var Na=class{constructor(t,r,e,a={},n=hn.IThirdwebContract__factory.abi,s=new w(t,r,n,a)){this.storage=e,this.contractWrapper=s,vs(this.contractWrapper)&&(this.metadata=new W(this.contractWrapper,Na.schema,this.storage))}onNetworkUpdated(t){this.contractWrapper.updateSignerOrProvider(t)}getAddress(){return this.contractWrapper.readContract.address}},tr=Na;p(tr,"CustomContract"),f(tr,"contractType","custom"),f(tr,"schema",un);function vs(o){return"contractURI"in o.readContract&&"setContractURI"in o.readContract.functions}p(vs,"supportsContractMetadata");var Oa=require("@ethersproject/constants"),Ue=class extends w{constructor(t,r,e,a){super(r,t,fn.TWFactory__factory.abi,a);this.storage=e}async deploy(t,r){var g;let e=ae[t],a=e.schema.deploy.parse(r),n=e.contractFactory,s=await this.storage.uploadMetadata(a,this.readContract.address,await((g=this.getSigner())==null?void 0:g.getAddress())),i=n.getInterface(n.abi).encodeFunctionData("initialize",await this.getDeployArguments(t,a,s)),c=Da[t];console.log(`Remote contractName : ${c}`);let d=oe.ethers.utils.formatBytes32String(c);console.log(`Deploying ${t} proxy`);let m=await this.sendTransaction("deployProxy",[d,i]);console.log(`${t} proxy deployed successfully`);let u=this.parseLogs("ProxyDeployed",m.logs);if(u.length<1)throw new Error("No ProxyDeployed event found");return u[0].args.proxy}async getDeployArguments(t,r,e){let a=await this.getDefaultTrustedForwarders();switch(r.trusted_forwarders&&r.trusted_forwarders.length>0&&(a=r.trusted_forwarders),t){case $.contractType:case j.contractType:let n=$.schema.deploy.parse(r);return[await this.getSignerAddress(),n.name,n.symbol,e,a,n.primary_sale_recipient,n.fee_recipient,n.seller_fee_basis_points,n.platform_fee_basis_points,n.platform_fee_recipient];case R.contractType:case z.contractType:let s=R.schema.deploy.parse(r);return[await this.getSignerAddress(),s.name,s.symbol,e,a,s.primary_sale_recipient,s.fee_recipient,s.seller_fee_basis_points,s.platform_fee_basis_points,s.platform_fee_recipient];case M.contractType:let i=M.schema.deploy.parse(r);return[await this.getSignerAddress(),i.name,i.symbol,e,a,i.primary_sale_recipient,i.platform_fee_recipient,i.platform_fee_basis_points];case Z.contractType:let c=Z.schema.deploy.parse(r);return[c.name,e,a,c.voting_token_address,c.voting_delay_in_blocks,c.voting_period_in_blocks,oe.BigNumber.from(c.proposal_token_threshold),c.voting_quorum_fraction];case K.contractType:let d=K.schema.deploy.parse(r);return[await this.getSignerAddress(),e,a,d.recipients.map(y=>y.address),d.recipients.map(y=>oe.BigNumber.from(y.sharesBps))];case L.contractType:let m=L.schema.deploy.parse(r);return[await this.getSignerAddress(),e,a,m.platform_fee_recipient,m.platform_fee_basis_points];case U.contractType:let u=U.schema.deploy.parse(r),g=mr[await this.getChainID()];return[await this.getSignerAddress(),u.name,u.symbol,e,a,u.fee_recipient,u.seller_fee_basis_points,g.fees,g.keyHash];default:return[]}}async getDefaultTrustedForwarders(){let t=await this.getChainID(),r=ea.find(a=>a===t),e=r?ge[r].biconomyForwarder:Oa.AddressZero;return e!==Oa.AddressZero?[sr,e]:[sr]}};p(Ue,"ContractFactory");var ne=class extends It{constructor(t,r,e){super(t,r);this.storage=e}async deployNFTCollection(t){return await this.deployContract(j.contractType,t)}async deployNFTDrop(t){return await this.deployContract($.contractType,t)}async deployEdition(t){return await this.deployContract(z.contractType,t)}async deployEditionDrop(t){let r=R.schema.deploy.parse(t);return await this.deployContract(R.contractType,r)}async deployToken(t){return await this.deployContract(M.contractType,t)}async deployMarketplace(t){return await this.deployContract(L.contractType,t)}async deployPack(t){return await this.deployContract(U.contractType,t)}async deploySplit(t){return await this.deployContract(K.contractType,t)}async deployVote(t){return await this.deployContract(Z.contractType,t)}async deployContract(t,r){return await(await this.getFactory()).deploy(t,r)}async getRegistry(){if(this._registry)return this._registry;let t=(await this.getProvider().getNetwork()).chainId,r=ir(t,"twRegistry");return this._registry=Promise.resolve(new Ie(r,this.getProvider(),this.options))}async getFactory(){if(this._factory)return this._factory;let t=(await this.getProvider().getNetwork()).chainId,r=ir(t,"twFactory");return this._factory=Promise.resolve(new Ue(r,this.getSignerOrProvider(),this.storage,this.options))}updateSignerOrProvider(t){super.updateSignerOrProvider(t),this.updateContractSignerOrProvider()}updateContractSignerOrProvider(){var t,r;(t=this._factory)==null||t.then(e=>{e.updateSignerOrProvider(this.getSignerOrProvider())}),(r=this._registry)==null||r.then(e=>{e.updateSignerOrProvider(this.getSignerOrProvider())})}};p(ne,"ContractDeployer");var gn=require("ethers");function Ba(o,t){let r=Object.keys(o);for(let e in r){let a=o[r[e]],n=a instanceof File||a instanceof Buffer;if(typeof a=="object"&&!n){Ba(a,t);continue}!n||(o[r[e]]=`ipfs://${t.splice(0,1)[0]}`)}return o}p(Ba,"replaceFilePropertiesWithHashes");function $e(o,t,r){let e=Object.keys(o);for(let a in e){let n=o[e[a]];o[e[a]]=Ve(n,t,r),Array.isArray(n)&&(o[e[a]]=n.map(s=>typeof s=="object"?$e(s,t,r):Ve(s,t,r))),typeof n=="object"&&$e(n,t,r)}return o}p($e,"replaceHashWithGatewayUrl");function Ve(o,t,r){return typeof o=="string"&&o&&o.toLowerCase().includes(t)?o.replace(t,r):o}p(Ve,"resolveGatewayUrl");globalThis.FormData||(globalThis.FormData=require("form-data"));var se=class{constructor(t=fa){this.gatewayUrl=`${t.replace(/\/$/,"")}/`}async upload(t,r,e){return`${await this.uploadBatch([t],0,r,e)}0`}async uploadBatch(t,r=0,e,a){let{cid:n}=await this.uploadBatchWithCid(t,r,e,a);return`ipfs://${n}/`}async getUploadToken(t){let r={"X-App-Name":`CONSOLE-TS-SDK-${t}`},e=await fetch(`${ga}/grant`,{method:"GET",headers:r});if(!e.ok)throw new vr("Failed to get upload token");return await e.text()}async get(t){let e=await(await this._get(t)).json();return $e(e,"ipfs://",this.gatewayUrl)}async uploadMetadata(t,r,e){let{metadataUris:a}=await this.uploadMetadataBatch([t],0,r,e);return a[0]}async uploadMetadataBatch(t,r,e,a){let n=(await this.batchUploadProperties(t)).map(m=>JSON.stringify(m)),{cid:s,fileNames:i}=await this.uploadBatchWithCid(n,r,e,a),c=`ipfs://${s}/`,d=i.map(m=>`${c}${m}`);return{baseUri:c,metadataUris:d}}async _get(t){let r=t;t&&(r=Ve(t,"ipfs://",this.gatewayUrl));let e=await fetch(r);if(!e.ok)throw new Error(`Status code (!= 200) =${e.status}`);return e}async batchUploadProperties(t){let r=t.flatMap(i=>this.buildFilePropertiesMap(i,[]));if(r.length===0)return t;let{cid:e,fileNames:a}=await this.uploadBatchWithCid(r),n=[];for(let i of a)n.push(`${e}/${i}`);return await Ba(t,n)}buildFilePropertiesMap(t,r=[]){if(Array.isArray(t))t.forEach(e=>{this.buildFilePropertiesMap(e,r)});else if(t){let e=Object.values(t);for(let a of e)a instanceof File||a instanceof Buffer?r.push(a):typeof a=="object"&&this.buildFilePropertiesMap(a,r)}return r}async uploadBatchWithCid(t,r=0,e,a){let n=await this.getUploadToken(e||""),s={name:`CONSOLE-TS-SDK-${e}`,keyvalues:{sdk:"typescript",contractAddress:e,signerAddress:a}},i=new FormData,c=[];t.forEach((u,g)=>{let y="",V=u;if(u instanceof File){let pt="";if(u.name){let nt=u.name.lastIndexOf(".");nt>-1&&(pt=u.name.substring(nt))}y=`${g+r}${pt}`}else u instanceof Buffer||typeof u=="string"?y=`${g+r}`:u&&u.name&&(u==null?void 0:u.data)?(V=u==null?void 0:u.data,y=`${u.name}`):y=`${g+r}`;let ft=`files/${y}`;if(c.indexOf(y)>-1)throw new Wr(y);c.push(y),typeof window>"u"?i.append("file",V,{filepath:ft}):i.append("file",new Blob([V]),ft)}),i.append("pinataMetadata",JSON.stringify(s));let d=await fetch(ya,{method:"POST",headers:{Authorization:`Bearer ${n}`},body:i}),m=await d.json();if(!d.ok)throw console.log(m),new Ar("Failed to upload files to IPFS");return{cid:m.IpfsHash,fileNames:c}}};p(se,"IpfsStorage");var yn=require("@thirdweb-dev/contracts");var wn=X(require("tiny-invariant")),Ma=class extends It{contractCache=new Map;constructor(t,r={},e=new se){super(t,r);this.storage=e,this.deployer=new ne(t,r,e)}getNFTDrop(t){return this.getContract(t,$.contractType)}getNFTCollection(t){return this.getContract(t,j.contractType)}getEditionDrop(t){return this.getContract(t,R.contractType)}getEdition(t){return this.getContract(t,z.contractType)}getToken(t){return this.getContract(t,M.contractType)}getVote(t){return this.getContract(t,Z.contractType)}getSplit(t){return this.getContract(t,K.contractType)}getMarketplace(t){return this.getContract(t,L.contractType)}getPack(t){return this.getContract(t,U.contractType)}getContract(t,r){if(this.contractCache.has(t))return this.contractCache.get(t);let e=new ae[r](this.getSignerOrProvider(),t,this.storage,this.options);return this.contractCache.set(t,e),e}async resolveContractType(t){let r=yn.IThirdwebContract__factory.connect(t,this.getSignerOrProvider()),e=gn.ethers.utils.toUtf8String(await r.contractType()).replace(/\x00/g,"");return(0,wn.default)(e in Le,`${e} is not a valid contract type, falling back to custom contract`),Le[e]}async getContractList(t){let r=await(await this.deployer.getRegistry()).getContractAddresses(t);return(await Promise.all(r.map(async a=>({address:a,contractType:await this.resolveContractType(a).catch(n=>(console.error(`failed to get contract type for address: ${a}`,n),""))})))).map(({address:a,contractType:n})=>({address:a,contractType:n,metadata:()=>this.getContract(a,n).metadata.get()}))}updateSignerOrProvider(t){super.updateSignerOrProvider(t),this.updateContractSignerOrProvider()}updateContractSignerOrProvider(){this.deployer.updateSignerOrProvider(this.getSignerOrProvider());for(let[,t]of this.contractCache)t.onNetworkUpdated(this.getSignerOrProvider())}async unstable_getCustomContract(t,r){if(this.contractCache.has(t))return this.contractCache.get(t);try{return this.getContract(t,await this.resolveContractType(t))}catch{let e=new tr(this.getSignerOrProvider(),t,this.storage,this.options,r);return this.contractCache.set(t,e),e}}};p(Ma,"ThirdwebSDK");var Cn=require("zod");var xs=Cn.z.object({toAddress:it,amount:Pt});0&&(module.exports={AdminRoleMissingError,AssetNotFoundError,AuctionAlreadyStartedError,AuctionHasNotEndedError,CONTRACTS_MAP,CONTRACT_ADDRESSES,ChainId,ChainlinkVrf,ClaimConditionInputArray,ClaimConditionInputSchema,ClaimConditionOutputSchema,ClaimEligibility,CommonContractOutputSchema,CommonContractSchema,CommonPlatformFeeSchema,CommonPrimarySaleSchema,CommonRoyaltySchema,CommonSymbolSchema,CommonTrustedForwarderSchema,ContractDeployer,ContractEncoder,ContractEvents,ContractMetadata,ContractPrimarySale,ContractRoles,ContractRoyalty,CurrencySchema,CurrencyValueSchema,CustomContract,DEFAULT_IPFS_GATEWAY,DEFAULT_QUERY_ALL_COUNT,DelayedReveal,DropErc1155ClaimConditions,DropErc1155History,DropErc721ClaimConditions,DuplicateFileNameError,DuplicateLeafsError,Edition,EditionDrop,EditionMetadataInputOrUriSchema,EditionMetadataInputSchema,EditionMetadataOutputSchema,EditionMetadataWithOwnerOutputSchema,Erc1155,Erc1155SignatureMinting,Erc20,Erc721,Erc721SignatureMinting,EventType,FetchError,FileNameMissingError,FunctionDeprecatedError,GasCostEstimator,InterfaceId_IERC1155,InterfaceId_IERC721,InvalidAddressError,IpfsStorage,ListingNotFoundError,ListingType,Marketplace,MarketplaceAuction,MarketplaceDirect,MerkleSchema,MintRequest1155,MintRequest721,MissingOwnerRoleError,MissingRoleError,NATIVE_TOKENS,NATIVE_TOKEN_ADDRESS,NFTCollection,NFTDrop,NotEnoughTokensError,NotFoundError,OZ_DEFENDER_FORWARDER_ADDRESS,OptionalPropertiesInput,OptionalPropertiesOutput,PINATA_IPFS_URL,Pack,PartialClaimConditionInputSchema,ProposalState,QuantityAboveLimitError,REMOTE_CONTRACT_NAME,REMOTE_CONTRACT_TO_CONTRACT_TYPE,RestrictedTransferError,SUPPORTED_CHAIN_IDS,Signature1155PayloadInput,Signature1155PayloadOutput,SignaturePayloadInput,SignaturePayloadOutput,SnapshotAddress,SnapshotInfoSchema,SnapshotInputSchema,SnapshotSchema,Split,TW_IPFS_SERVER_URL,ThirdwebSDK,Token,TokenERC20History,TokenMintInputSchema,TransactionError,UnderlyingType,UploadError,Vote,VoteType,WrongListingTypeError,convertToTWError,createSnapshot,getContractAddressByChainId,getNativeTokenByChainId,getRoleHash,hashLeafNode});
//# sourceMappingURL=index.js.map