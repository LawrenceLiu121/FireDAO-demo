var Be=Object.defineProperty,Fo=Object.defineProperties;var Io=Object.getOwnPropertyDescriptors;var Oe=Object.getOwnPropertySymbols;var _o=Object.prototype.hasOwnProperty,Do=Object.prototype.propertyIsEnumerable;var ie=(o,t,r)=>t in o?Be(o,t,{enumerable:!0,configurable:!0,writable:!0,value:r}):o[t]=r,T=(o,t)=>{for(var r in t||(t={}))_o.call(t,r)&&ie(o,r,t[r]);if(Oe)for(var r of Oe(t))Do.call(t,r)&&ie(o,r,t[r]);return o},R=(o,t)=>Fo(o,Io(t)),p=(o,t)=>Be(o,"name",{value:t,configurable:!0}),Me=(o=>typeof require!="undefined"?require:typeof Proxy!="undefined"?new Proxy(o,{get:(t,r)=>(typeof require!="undefined"?require:t)[r]}):o)(function(o){if(typeof require!="undefined")return require.apply(this,arguments);throw new Error('Dynamic require of "'+o+'" is not supported')});var g=(o,t,r)=>(ie(o,typeof t!="symbol"?t+"":t,r),r);import"cross-fetch/polyfill";var x=class{constructor(t){this.contractWrapper=t}encode(t,r){return this.contractWrapper.readContract.interface.encodeFunctionData(t,r)}decode(t,r){return this.contractWrapper.readContract.interface.decodeFunctionData(t,r)}};p(x,"ContractEncoder");var W=class{constructor(t,r,e){this.contractWrapper=t,this.schema=r,this.storage=e}parseOutputMetadata(t){return this.schema.output.parse(t)}parseInputMetadata(t){return this.schema.input.parse(t)}async get(){let t=await this.contractWrapper.readContract.contractURI(),r=await this.storage.get(t);return this.parseOutputMetadata(r)}async set(t){let r=await this._parseAndUploadMetadata(t);return{receipt:await this.contractWrapper.sendTransaction("setContractURI",[r]),data:this.get}}async update(t){return await this.set(T(T({},await this.get()),t))}async _parseAndUploadMetadata(t){let r=this.parseInputMetadata(t);return this.storage.uploadMetadata(r)}};p(W,"ContractMetadata");import{ethers as Le}from"ethers";var No={admin:"",transfer:"TRANSFER_ROLE",minter:"MINTER_ROLE",pauser:"PAUSER_ROLE",editor:"EDITOR_ROLE",lister:"LISTER_ROLE",asset:"ASSET_ROLE"};function D(o){return o==="admin"?Le.utils.hexZeroPad([0],32):Le.utils.id(No[o])}p(D,"getRoleHash");import Lt from"tiny-invariant";var dt=class extends Error{constructor(t){super(t?`Object with id ${t} NOT FOUND`:"NOT_FOUND")}};p(dt,"NotFoundError");var Ue=class extends Error{constructor(t){super(t?`'${t}' is an invalid address`:"Invalid address passed")}};p(Ue,"InvalidAddressError");var Tr=class extends Error{constructor(t,r){super(`MISSING ROLE: ${t} does not have the '${r}' role`)}};p(Tr,"MissingRoleError");var $e=class extends Error{constructor(t="The asset you're trying to use could not be found."){super(`message: ${t}`)}};p($e,"AssetNotFoundError");var br=class extends Error{constructor(t){super(`UPLOAD_FAILED: ${t}`)}};p(br,"UploadError");var Ve=class extends Error{constructor(){super("File name is required when object is not a `File` type object.")}};p(Ve,"FileNameMissingError");var Ar=class extends Error{constructor(t){super(`DUPLICATE_FILE_NAME_ERROR: File name ${t} was passed for more than one file.`)}};p(Ar,"DuplicateFileNameError");var Ge=class extends Error{constructor(t,r,e){super(`BALANCE ERROR: you do not have enough balance on contract ${t} to use ${r} tokens. You have ${e} tokens available.`)}};p(Ge,"NotEnoughTokensError");var He=class extends Error{constructor(){super("LIST ERROR: you should be the owner of the token to list it.")}};p(He,"MissingOwnerRoleError");var je=class extends Error{constructor(t){super(`BUY ERROR: You cannot buy more than ${t} tokens`)}};p(je,"QuantityAboveLimitError");var Wr=class extends Error{constructor(t,r){super(`FETCH_FAILED: ${t}`);this.innerError=r}};p(Wr,"FetchError");var vr=class extends Error{constructor(t){super(`DUPLICATE_LEAFS${t?` : ${t}`:""}`)}};p(vr,"DuplicateLeafsError");var xr=class extends Error{constructor(t){super(`Auction already started with existing bid${t?`, id: ${t}`:""}`)}};p(xr,"AuctionAlreadyStartedError");var ze=class extends Error{constructor(t){super(`FUNCTION DEPRECATED. ${t?`Use ${t} instead`:""}`)}};p(ze,"FunctionDeprecatedError");var yt=class extends Error{constructor(t,r){super(`Could not find listing.${t?` marketplace address: ${t}`:""}${r?` listing id: ${r}`:""}`)}};p(yt,"ListingNotFoundError");var Mt=class extends Error{constructor(t,r,e,a){super(`Incorrect listing type. Are you sure you're using the right method?.${t?` marketplace address: ${t}`:""}${r?` listing id: ${r}`:""}${a?` expected type: ${a}`:""}${e?` actual type: ${e}`:""}`)}};p(Mt,"WrongListingTypeError");var Ze=class extends Error{constructor(t){super(`Failed to transfer asset, transfer is restricted.${t?` Address : ${t}`:""}`)}};p(Ze,"RestrictedTransferError");var Ke=class extends Error{constructor(t,r,e="Failed to execute transaction"){super(`${e}, admin role is missing${t?` on address: ${t}`:""}${r?` on contract: ${r}`:""}`)}};p(Ke,"AdminRoleMissingError");var Er=class extends Error{constructor(t,r){super(`Auction has not ended yet${t?`, id: ${t}`:""}${r?`, end time: ${r.toString()}`:""}`)}};p(Er,"AuctionHasNotEndedError");var ce=class extends Error{constructor(t,r,e,a,n,s,i){let c=`Contract transaction failed

`;c+=`Message: ${t}`,c+=`

| Transaction info |
`,c+=Xt("from",r),c+=Xt("to",e),c+=Xt("data",a),c+=Xt("chain",`${n.name} (${n.chainId})`);try{let d=new URL(s);c+=Xt("RPC",d.hostname)}catch{}c+=`

`,c+="Need help with this error? Join our community: https://discord.gg/thirdweb",c+=`



`,c+="| Raw error |",c+=`

`,c+=i;super(c);this.reason=t,this.from=r,this.to=e,this.data=a,this.chain=n,this.rpcUrl=s}};p(ce,"TransactionError");async function qe(o,t,r,e){let a;if(o.data)a=JSON.stringify(o.data);else if(o instanceof Error)a=o.message;else return o;let n=tr(/.*?"message[^a-zA-Z0-9]*([^"\\]*).*?/,a),s=tr(/.*?"data[^a-zA-Z0-9]*([^"\\]*).*?/,a),i=tr(/.*?"url[^a-zA-Z0-9]*([^"\\]*).*?/,a),c=tr(/.*?"from[^a-zA-Z0-9]*([^"\\]*).*?/,a),d=tr(/.*?"to[^a-zA-Z0-9]*([^"\\]*).*?/,a);return d===""&&(d=e),c===""&&(c=r),new ce(n,c,d,s,t,i,a)}p(qe,"convertToTWError");function Xt(o,t){if(t==="")return t;let r=Array(10-o.length).fill(" ").join("");return`
${o}:${r}${t}`}p(Xt,"withSpaces");function tr(o,t){let r=t.match(o)||[],e="";return(r==null?void 0:r.length)>0&&(e+=r[1]),e}p(tr,"parseMessageParts");var K=class{constructor(t,r){this.contractWrapper=t,this.roles=r}async getAll(){Lt(this.roles.length,"this contract has no support for roles");let t={};for(let r of this.roles)t[r]=await this.get(r);return t}async get(t){Lt(this.roles.includes(t),`this contract does not support the "${t}" role`);let r=D(t),e=(await this.contractWrapper.readContract.getRoleMemberCount(r)).toNumber();return await Promise.all(Array.from(Array(e).keys()).map(a=>this.contractWrapper.readContract.getRoleMember(r,a)))}async setAll(t){let r=Object.keys(t);Lt(r.length,"you must provide at least one role to set"),Lt(r.every(n=>this.roles.includes(n)),"this contract does not support the given role");let e=await this.getAll(),a=[];return r.sort(n=>n==="admin"?1:-1).forEach(async n=>{let s=t[n]||[],i=e[n]||[],c=s.filter(m=>!i.includes(m)),d=i.filter(m=>!s.includes(m));c.length&&c.forEach(m=>{a.push(this.contractWrapper.readContract.interface.encodeFunctionData("grantRole",[D(n),m]))}),d.length&&d.forEach(async m=>{let h=await this.getRevokeRoleFunctionName(m);a.push(this.contractWrapper.readContract.interface.encodeFunctionData(h,[D(n),m]))})}),{receipt:await this.contractWrapper.multiCall(a)}}async verify(t,r){await Promise.all(t.map(async e=>{if(!(await this.get(e)).map(n=>n.toLowerCase()).includes(r.toLowerCase()))throw new Tr(r,e)}))}async grant(t,r){return Lt(this.roles.includes(t),`this contract does not support the "${t}" role`),{receipt:await this.contractWrapper.sendTransaction("grantRole",[D(t),r])}}async revoke(t,r){Lt(this.roles.includes(t),`this contract does not support the "${t}" role`);let e=await this.getRevokeRoleFunctionName(r);return{receipt:await this.contractWrapper.sendTransaction(e,[D(t),r])}}async getRevokeRoleFunctionName(t){return(await this.contractWrapper.getSignerAddress()).toLowerCase()===t.toLowerCase()?"renounceRole":"revokeRole"}};p(K,"ContractRoles");import{BigNumber as pe}from"ethers";import{isAddress as Oo}from"ethers/lib/utils";import{z as S}from"zod";globalThis.File||(globalThis.File=Me("@web-std/file").File);var de=1e4,Bo=p(()=>typeof window<"u","isBrowser"),Mo=Bo()?[S.instanceof(File),S.string()]:[S.instanceof(Buffer),S.string()],At=S.union(Mo),Je=S.union([S.array(S.number()),S.string()]),b=S.union([S.string(),S.number(),S.bigint(),S.instanceof(pe)]).transform(o=>pe.from(o)),at=b.transform(o=>o.toString()),Wt=S.number().max(de,"Cannot exeed 100%").min(0,"Cannot be below 0%"),Qe=S.number().max(100,"Cannot exeed 100%").min(0,"Cannot be below 0%"),Lo=S.union([S.string(),S.number(),S.boolean(),S.null()]),wt=S.lazy(()=>S.union([Lo,S.array(wt),S.record(wt)])),Ye=S.record(wt),Xe=S.union([S.string().regex(/^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/,"Invalid hex color").transform(o=>o.replace("#","")),S.string().length(0)]),ot=S.string().refine(o=>Oo(o),o=>({message:`${o} is not a valid address`})),vt=S.union([S.string().regex(/^([0-9]+\.?[0-9]*|\.[0-9]+)$/,"Invalid price"),S.number().min(0,"Price cannot be negative")]).transform(o=>typeof o=="number"?o.toString():o),ta=S.date().transform(o=>pe.from(Math.floor(o.getTime()/1e3))),kr=ta.default(new Date),ra=ta.default(new Date(Date.now()+1e3*60*60*24*365*10));import{AddressZero as ya}from"@ethersproject/constants";import{z as X}from"zod";import{z as ar}from"zod";import{BigNumber as Vo,ethers as na}from"ethers";import{hexZeroPad as Go}from"ethers/lib/utils";var f;(function(o){o[o.Mainnet=1]="Mainnet",o[o.Ropsten=3]="Ropsten",o[o.Rinkeby=4]="Rinkeby",o[o.Goerli=5]="Goerli",o[o.Kovan=42]="Kovan",o[o.BSC=56]="BSC",o[o.xDai=100]="xDai",o[o.Polygon=137]="Polygon",o[o.Moonriver=1285]="Moonriver",o[o.Mumbai=80001]="Mumbai",o[o.Harmony=16666e5]="Harmony",o[o.Localhost=1337]="Localhost",o[o.Hardhat=31337]="Hardhat",o[o.Fantom=250]="Fantom",o[o.FantomTestnet=4002]="FantomTestnet",o[o.Avalanche=43114]="Avalanche",o[o.AvalancheFujiTestnet=43113]="AvalancheFujiTestnet"})(f||(f={}));var ea=[f.Mainnet,f.Rinkeby,f.Goerli,f.Polygon,f.Mumbai,f.Fantom,f.FantomTestnet,f.Avalanche,f.AvalancheFujiTestnet];var xt="0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee",Uo={[f.Mainnet]:{name:"Ether",symbol:"ETH",decimals:18,wrapped:{address:"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",name:"Wrapped Ether",symbol:"WETH"}},[f.Rinkeby]:{name:"Ether",symbol:"ETH",decimals:18,wrapped:{address:"0xc778417E063141139Fce010982780140Aa0cD5Ab",name:"Wrapped Ether",symbol:"WETH"}},[f.Goerli]:{name:"Ether",symbol:"ETH",decimals:18,wrapped:{address:"0x0bb7509324ce409f7bbc4b701f932eaca9736ab7",name:"Wrapped Ether",symbol:"WETH"}},[f.Polygon]:{name:"Matic",symbol:"MATIC",decimals:18,wrapped:{address:"0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270",name:"Wrapped Matic",symbol:"WMATIC"}},[f.Mumbai]:{name:"Matic",symbol:"MATIC",decimals:18,wrapped:{address:"0x9c3C9283D3e44854697Cd22D3Faa240Cfb032889",name:"Wrapped Matic",symbol:"WMATIC"}},[f.Avalanche]:{name:"Avalanche",symbol:"AVAX",decimals:18,wrapped:{address:"0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7",name:"Wrapped AVAX",symbol:"WAVAX"}},[f.AvalancheFujiTestnet]:{name:"Avalanche",symbol:"AVAX",decimals:18,wrapped:{address:"0xd00ae08403B9bbb9124bB305C09058E32C39A48c",name:"Wrapped AVAX",symbol:"WAVAX"}},[f.Fantom]:{name:"Fantom",symbol:"FTM",decimals:18,wrapped:{address:"0x21be370D5312f44cB42ce377BC9b8a0cEF1A4C83",name:"Wrapped Fantom",symbol:"WFTM"}},[f.FantomTestnet]:{name:"Fantom",symbol:"FTM",decimals:18,wrapped:{address:"0xf1277d1Ed8AD466beddF92ef448A132661956621",name:"Wrapped Fantom",symbol:"WFTM"}},[f.Hardhat]:{name:"Ether",symbol:"ETH",decimals:18,wrapped:{address:"0x5FbDB2315678afecb367f032d93F642f64180aa3",name:"Wrapped Ether",symbol:"WETH"}}};function aa(o){return Uo[o]}p(aa,"getNativeTokenByChainId");import{z as rr}from"zod";var $o=rr.object({name:rr.string(),symbol:rr.string(),decimals:rr.number()}),oa=$o.extend({value:b,displayValue:rr.string()});import{z as N}from"zod";var Ut=N.object({merkle:N.record(N.string()).default({})}),me=N.object({address:N.string(),maxClaimable:N.number().default(0)}),$t=N.union([N.array(N.string()).transform(o=>o.map(t=>me.parse({address:t}))),N.array(me)]),er=N.object({merkleRoot:N.string(),claims:N.array(me.extend({proof:N.array(N.string())}))}),fi=N.object({merkleRoot:N.string(),snapshotUri:N.string(),snapshot:er});var or=ar.object({startTime:kr,currencyAddress:ar.string().default(xt),price:vt.default(0),maxQuantity:at.default(na.constants.MaxUint256),quantityLimitPerTransaction:at.default(na.constants.MaxUint256),waitInSeconds:at.default(0),merkleRootHash:Je.default(Go([0],32)),snapshot:ar.optional($t)}),sa=ar.array(or),Wi=or.partial(),le=or.extend({availableSupply:ar.string().default(""),currencyMetadata:oa.default({value:Vo.from("0"),displayValue:"0",symbol:"",decimals:18,name:""}),price:b,maxQuantity:b,quantityLimitPerTransaction:b,waitInSeconds:b,startTime:b.transform(o=>new Date(o.toNumber()*1e3))});import{z as It}from"zod";import{z as mt}from"zod";import{z as Ft}from"zod";var ia=wt.or(At),Ho=Ft.union([Ft.array(Ft.object({key:Ft.string(),value:ia})).superRefine((o,t)=>{if(!o)return;let r={};o.forEach(({key:e},a)=>{r[e]||(r[e]=0),r[e]++,r[e]>1&&t.addIssue({code:Ft.ZodIssueCode.custom,message:`Duplicate key: ${e}`,path:[a,"key"]})})}),Ft.record(ia)]).optional(),ca=Ft.preprocess(o=>{let t=o;return Array.isArray(t)?t.filter(r=>r.value):t},Ho).transform(o=>Array.isArray(o)?o.reduce((t,r)=>R(T({},t),{[r.key]:r.value}),{}):o),pa=Ye.optional();var da=mt.object({name:mt.string().nonempty({message:"A name is required."}),description:mt.string().optional(),image:At.optional(),external_url:At.optional()}).catchall(mt.lazy(()=>wt)),jo=da.extend({id:b,uri:mt.string(),image:mt.string().optional(),external_url:mt.string().optional()}),Y=da.extend({animation_url:At.optional(),background_color:Xe.optional(),properties:ca}),Pr=mt.union([Y,mt.string()]),Rr=jo.extend({animation_url:mt.string().optional(),properties:pa});import{AddressZero as ue}from"@ethersproject/constants";import{ethers as Ko}from"ethers";import{v4 as zo}from"uuid";import{hexlify as ma,toUtf8Bytes as Zo}from"ethers/lib/utils";function la(o){if(o===void 0){let t=Buffer.alloc(16);return zo({},t),ma(Zo(t.toString("hex")))}else return ma(o)}p(la,"resolveOrGenerateId");var Fr=It.object({metadata:Pr,to:It.string().default(ue),price:vt.default(0),currencyAddress:It.string().default(xt),mintStartTime:kr,mintEndTime:ra,uid:It.string().optional().transform(o=>la(o)),royaltyRecipient:It.string().default(ue),royaltyBps:Wt.default(0),primarySaleRecipient:It.string().default(ue)}),he=Fr.extend({uri:It.string(),royaltyBps:b,mintStartTime:b,mintEndTime:b}),ua=Fr.extend({tokenId:at.default(Ko.constants.MaxUint256),quantity:at}),ha=he.extend({tokenId:b,quantity:b}),fa=[{name:"to",type:"address"},{name:"royaltyRecipient",type:"address"},{name:"royaltyBps",type:"uint256"},{name:"primarySaleRecipient",type:"address"},{name:"uri",type:"string"},{name:"price",type:"uint256"},{name:"currency",type:"address"},{name:"validityStartTimestamp",type:"uint128"},{name:"validityEndTimestamp",type:"uint128"},{name:"uid",type:"bytes32"}],ga=[{name:"to",type:"address"},{name:"royaltyRecipient",type:"address"},{name:"royaltyBps",type:"uint256"},{name:"primarySaleRecipient",type:"address"},{name:"tokenId",type:"uint256"},{name:"uri",type:"string"},{name:"quantity",type:"uint256"},{name:"pricePerToken",type:"uint256"},{name:"currency",type:"address"},{name:"validityStartTimestamp",type:"uint128"},{name:"validityEndTimestamp",type:"uint128"},{name:"uid",type:"bytes32"}];var v=X.object({name:X.string(),description:X.string().optional(),image:At.optional(),external_link:X.string().url().optional()}),E=v.extend({image:X.string().optional()}).catchall(X.lazy(()=>wt)),O=X.object({seller_fee_basis_points:Wt.default(0),fee_recipient:ot.default(ya)}),lt=X.object({primary_sale_recipient:ot}),q=X.object({platform_fee_basis_points:Wt.default(0),platform_fee_recipient:ot.default(ya)}),B=X.object({trusted_forwarders:X.array(ot).default([])}),J=X.object({symbol:X.string().optional().default("")});var nt=class{constructor(t,r){this.contractWrapper=t,this.metadata=r}async getDefaultRoyaltyInfo(){let[t,r]=await this.contractWrapper.readContract.getDefaultRoyaltyInfo();return O.parse({fee_recipient:t,seller_fee_basis_points:r})}async getTokenRoyaltyInfo(t){let[r,e]=await this.contractWrapper.readContract.getRoyaltyInfoForToken(t);return O.parse({fee_recipient:r,seller_fee_basis_points:e})}async setDefaultRoyaltyInfo(t){let r=await this.metadata.get(),e=this.metadata.parseInputMetadata(T(T({},r),t)),a=await this.metadata._parseAndUploadMetadata(e),n=[this.contractWrapper.readContract.interface.encodeFunctionData("setDefaultRoyaltyInfo",[e.fee_recipient,e.seller_fee_basis_points]),this.contractWrapper.readContract.interface.encodeFunctionData("setContractURI",[a])];return{receipt:await this.contractWrapper.multiCall(n),data:()=>this.getDefaultRoyaltyInfo()}}async setTokenRoyaltyInfo(t,r){return{receipt:await this.contractWrapper.sendTransaction("setRoyaltyInfoForToken",[t,r.fee_recipient,r.seller_fee_basis_points]),data:()=>this.getDefaultRoyaltyInfo()}}};p(nt,"ContractRoyalty");var ut=class{constructor(t){this.contractWrapper=t}async getRecipient(){return await this.contractWrapper.readContract.primarySaleRecipient()}async setRecipient(t){return{receipt:await this.contractWrapper.sendTransaction("setPrimarySaleRecipient",[t])}}};p(ut,"ContractPrimarySale");import{IERC20__factory as vn}from"@thirdweb-dev/contracts";import{BigNumber as Ia,ethers as xn}from"ethers";import{AddressZero as Cn}from"@ethersproject/constants";import{BigNumber as ct,Contract as yn,ethers as ft}from"ethers";import{JsonRpcBatchProvider as qo,Provider as Jo,WebSocketProvider as Qo}from"@ethersproject/providers";import{ethers as ir,Signer as ge}from"ethers";import{EventEmitter2 as Yo}from"eventemitter2";import{AddressZero as Ir}from"@ethersproject/constants";var nr="0xc82BbE41f2cF04e3a8efA18F7032BDD7f6d98a81",Ct="0x7c487845f98938Bb955B1D5AD069d9a30e4131fd",St="0x11c34F062Cb10a20B9F463E12Ff9dA62D76FDf65",fe={[f.Mainnet]:{biconomyForwarder:"0x84a0856b038eaAd1cC7E297cF34A7e72685A8693",twFactory:St,twRegistry:Ct},[f.Rinkeby]:{biconomyForwarder:"0xFD4973FeB2031D4409fB57afEE5dF2051b171104",twFactory:St,twRegistry:Ct},[f.Goerli]:{biconomyForwarder:Ir,twFactory:St,twRegistry:Ct},[f.Polygon]:{biconomyForwarder:"0x86C80a8aa58e0A4fa09A69624c31Ab2a6CAD56b8",twFactory:St,twRegistry:Ct},[f.Mumbai]:{biconomyForwarder:"0x9399BB24DBB5C4b782C70c2969F58716Ebbd6a3b",twFactory:St,twRegistry:Ct},[f.Avalanche]:{biconomyForwarder:"0x64CD353384109423a966dCd3Aa30D884C9b2E057",twFactory:St,twRegistry:Ct},[f.AvalancheFujiTestnet]:{biconomyForwarder:"0x6271Ca63D30507f2Dcbf99B52787032506D75BBF",twFactory:St,twRegistry:Ct},[f.Fantom]:{biconomyForwarder:Ir,twFactory:St,twRegistry:Ct},[f.FantomTestnet]:{biconomyForwarder:Ir,twFactory:St,twRegistry:Ct}};function sr(o,t){return o===f.Hardhat?t==="twFactory"?process.env.factoryAddress:t==="twRegistry"?process.env.registryAddress:Ir:fe[o][t]}p(sr,"getContractAddressByChainId");import{z as G}from"zod";var st=G.object({readonlySettings:G.object({rpcUrl:G.string().url(),chainId:G.number().optional()}).optional(),gasSettings:G.object({maxPriceInGwei:G.number().min(1,"gas price cannot be less than 1").default(300),speed:G.enum(["standard","fast","fastest"]).default("fastest")}).default({maxPriceInGwei:300,speed:"fastest"}),gasless:G.union([G.object({openzeppelin:G.object({relayerUrl:G.string().url(),relayerForwarderAddress:G.string().default(nr)})}),G.object({biconomy:G.object({apiId:G.string(),apiKey:G.string(),deadlineSeconds:G.number().min(1,"deadlineSeconds cannot be les than 1").default(3600)})})]).optional()}).default({gasSettings:{maxPriceInGwei:300,speed:"fastest"}});var Et=class extends Yo{constructor(t,r){super();let[e,a]=this.getSignerAndProvider(t,r);this.signer=e,this.provider=a;try{this.options=st.parse(r)}catch(n){console.error("invalid sdk options object passed, falling back to default options",n),this.options=st.parse({})}}updateSignerOrProvider(t){let[r,e]=this.getSignerAndProvider(t,this.options);this.signer=r,this.provider=e}isReadOnly(){return!ge.isSigner(this.signer)}getSigner(){return this.signer}getProvider(){return this.provider}getSignerOrProvider(){return this.getSigner()||this.getProvider()}getSignerAndProvider(t,r){var n;let e,a;return ge.isSigner(t)&&(e=t,t.provider&&(a=t.provider)),r!=null&&r.readonlySettings&&(a=this.getReadOnlyProvider(r.readonlySettings.rpcUrl,r.readonlySettings.chainId)),a||(Jo.isProvider(t)?a=t:ge.isSigner(t)||(typeof t=="string"?a=this.getReadOnlyProvider(t,(n=r==null?void 0:r.readonlySettings)==null?void 0:n.chainId):a=ir.getDefaultProvider(t))),a||(a=ir.getDefaultProvider(),console.error("No provider found, using default provider on default chain!")),[e,a]}getReadOnlyProvider(t,r){try{let e=t.match(/^(ws|http)s?:/i);if(e)switch(e[1]){case"http":return new qo(t,r);case"ws":return new Qo(t,r);default:return ir.getDefaultProvider(t)}else return ir.getDefaultProvider(t)}catch{return ir.getDefaultProvider(t)}}};p(Et,"RPCConnectionHandler");var ht;(function(o){o.Transaction="transaction",o.Signature="signature"})(ht||(ht={}));import Gt from"tiny-invariant";import{BigNumber as ye}from"ethers";var Ca=[{name:"from",type:"address"},{name:"to",type:"address"},{name:"value",type:"uint256"},{name:"gas",type:"uint256"},{name:"nonce",type:"uint256"},{name:"data",type:"bytes"}],Sa=[{inputs:[{internalType:"address",name:"from",type:"address"},{internalType:"uint256",name:"batchId",type:"uint256"}],name:"getNonce",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"}],Vt={},wa={};async function we(o,t,r){let e=r.join("|"),a=wa[e],n=Date.now()-a>=2e3;if(!(e in Vt)||n){let i=await o.functions[t](...r);Array.isArray(i)&&i.length>0?Vt[e]=ye.from(i[0]):Vt[e]=ye.from(i),wa[e]=Date.now()}let s=Vt[e];return Vt[e]=ye.from(Vt[e]).add(1),s}p(we,"getAndIncrementNonce");import{Forwarder__factory as wn}from"@thirdweb-dev/contracts";import{BigNumber as Xo,Contract as Te,ethers as Se}from"ethers";import{ethers as Ce}from"ethers";async function cr(o,t,r,e){var i,c;let a=o==null?void 0:o.provider;if(!a)throw new Error("missing provider");let n=Ce.utils._TypedDataEncoder.getPayload(t,r,e),s="";if((i=a==null?void 0:a.provider)!=null&&i.isWalletConnect)s=await a.send("eth_signTypedData",[(await o.getAddress()).toLowerCase(),JSON.stringify(n)]);else try{s=await o._signTypedData(t,r,e)}catch(d){if((c=d==null?void 0:d.message)!=null&&c.includes("Method eth_signTypedData_v4 not supported"))s=await a.send("eth_signTypedData",[(await o.getAddress()).toLowerCase(),JSON.stringify(n)]);else throw d}return{payload:n,signature:Ce.utils.joinSignature(Ce.utils.splitSignature(s))}}p(cr,"signTypedDataInternal");var tn=[{inputs:[],name:"name",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function"}],rn=[{constant:!0,inputs:[],name:"DOMAIN_SEPARATOR",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],payable:!1,stateMutability:"view",type:"function"},{inputs:[],name:"getDomainSeperator",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"}],en=[{inputs:[{internalType:"address",name:"owner",type:"address"}],name:"nonces",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"user",type:"address"}],name:"getNonce",outputs:[{internalType:"uint256",name:"nonce",type:"uint256"}],stateMutability:"view",type:"function"}];async function an(o,t){let r=new Te(t,en,o);try{return await r.nonces(await o.getAddress())}catch{return await r.getNonce(await o.getAddress())}}p(an,"getSignerNonce");async function on(o,t){let r=new Te(t,rn,o);try{return await r.DOMAIN_SEPARATOR()}catch{return await r.getDomainSeperator()}}p(on,"getDomainSeperator");async function nn(o,t){return new Te(t,tn,o).name()}p(nn,"getTokenName");async function sn(o,t){let r=await on(o,t.verifyingContract),e={name:t.name,version:t.version,verifyingContract:t.verifyingContract,salt:Se.utils.hexZeroPad(Xo.from(t.chainId).toHexString(),32)};return Se.utils._TypedDataEncoder.hashDomain(e)===r?e:t}p(sn,"getChainDomainSeperator");async function Ta(o,t,r,e,a,n,s){let i=await sn(o,{name:await nn(o,t),version:"1",chainId:await o.getChainId(),verifyingContract:t});s=s!=null?s:(await an(o,t)).toString(),n=n!=null?n:Se.constants.MaxUint256;let c={owner:r,spender:e,value:a,nonce:s,deadline:n},d={Permit:[{name:"owner",type:"address"},{name:"spender",type:"address"},{name:"value",type:"uint256"},{name:"nonce",type:"uint256"},{name:"deadline",type:"uint256"}]},{signature:m}=await cr(o,i,d,c);return{message:c,signature:m}}p(Ta,"signEIP2612Permit");import{ethers as be}from"ethers";function cn(o){switch(o){case f.Polygon:return"https://gasstation-mainnet.matic.network/v2";case f.Mumbai:return"https://gasstation-mumbai.matic.today/v2"}}p(cn,"getGasStationUrl");var pn=be.utils.parseUnits("31","gwei"),dn=be.utils.parseUnits("1","gwei");function mn(o){switch(o){case f.Polygon:return pn;case f.Mumbai:return dn}}p(mn,"getDefaultGasFee");async function ba(o){let t=cn(o);try{let e=(await(await fetch(t)).json()).standard.maxPriorityFee;if(e>0){let a=parseFloat(e).toFixed(9);return be.utils.parseUnits(a,"gwei")}}catch(r){console.error("failed to fetch gas",r)}return mn(o)}p(ba,"getPolygonGasPriorityFee");import{ethers as pr}from"ethers";var dr={[f.Polygon]:{vrfCoordinator:"0x3d2341ADb2D31f1c5530cDC622016af293177AE0",linkTokenAddress:"0xb0897686c545045aFc77CF20eC7A532E3120E0F1",keyHash:"0xf86195cf7690c55907b2b611ebb7343a6f649bff128701cc542f0569e2c549da",fees:pr.utils.parseEther("0.0001")},[f.Mumbai]:{vrfCoordinator:"0x8C7382F9D8f56b33781fE506E897a4F1e2d17255",linkTokenAddress:"0x326C977E6efc84E512bB9C30f76E30c160eD06FB",keyHash:"0x6e75b569a01ef56d18cab6a8e71e6600d6ce853834d4a5748b720d06f878b3a4",fees:pr.utils.parseEther("0.0001")},[f.Rinkeby]:{vrfCoordinator:"0xb3dCcb4Cf7a26f6cf6B120Cf5A73875B7BBc655B",linkTokenAddress:"0x01be23585060835e02b77ef475b0cc51aa1e0709",keyHash:"0x2ed0feb3e7fd2022120aa84fab1945545a9f2ffc9076fd6156fa96eaff4c1311",fees:pr.utils.parseEther("0.1")},[f.Mainnet]:{vrfCoordinator:"0xf0d54349aDdcf704F77AE15b96510dEA15cb7952",linkTokenAddress:"0x514910771AF9Ca656af840dff83E8264EcF986CA",keyHash:"0xAA77729D3466CA35AE8D28B3BBAC7CC36A5031EFDC430821C02BC31A238AF445",fees:pr.utils.parseEther("2")},[f.Hardhat]:{vrfCoordinator:"0x8C7382F9D8f56b33781fE506E897a4F1e2d17255",linkTokenAddress:"0x326C977E6efc84E512bB9C30f76E30c160eD06FB",keyHash:"0x6e75b569a01ef56d18cab6a8e71e6600d6ce853834d4a5748b720d06f878b3a4",fees:pr.utils.parseEther("0.0001")}};import{arrayify as Aa}from"ethers/lib/utils";var _t=Aa("0x80ac58cd"),Dt=Aa("0xd9b67a26");var Wa="https://gateway.ipfscdn.io/ipfs/",va="https://upload.nftlabs.co",xa="https://api.pinata.cloud/pinning/pinFileToIPFS";import ln from"merkletreejs";import un from"keccak256";import{BigNumber as hn,ethers as fn}from"ethers";async function Ea(o,t){let r=$t.parse(o),e=r.map(d=>d.address);if(new Set(e).size<e.length)throw new vr;let n=r.map(d=>gn(d.address,d.maxClaimable)),s=new ln(n,un,{sort:!0}),i=er.parse({merkleRoot:s.getHexRoot(),claims:r.map((d,m)=>{let h=s.getHexProof(n[m]);return{address:d.address,maxClaimable:d.maxClaimable,proof:h}})}),c=await t.uploadMetadata(i);return{merkleRoot:s.getHexRoot(),snapshotUri:c,snapshot:i}}p(Ea,"createSnapshot");function gn(o,t){return fn.utils.solidityKeccak256(["address","uint256"],[o,hn.from(t)])}p(gn,"hashLeafNode");var C=class extends Et{constructor(t,r,e,a){super(t,a);this.writeContract=new yn(r,e,this.getSignerOrProvider()),this.readContract=this.writeContract.connect(this.getProvider())}updateSignerOrProvider(t){super.updateSignerOrProvider(t),this.writeContract=this.writeContract.connect(this.getSignerOrProvider()),this.readContract=this.writeContract.connect(this.getProvider())}async getChainID(){let t=this.getProvider(),{chainId:r}=await t.getNetwork();return r}async getSignerAddress(){let t=this.getSigner();if(!t)throw new Error("This action requires a connected wallet to sign the transaction. Please pass a valid signer to the SDK.");return await t.getAddress()}callStatic(){return this.writeContract.callStatic}async getCallOverrides(){let t=await this.getProvider().getFeeData();if(t.maxFeePerGas&&t.maxPriorityFeePerGas){let e=await this.getChainID(),a=await this.getProvider().getBlock("latest"),n=a&&a.baseFeePerGas?a.baseFeePerGas:ft.utils.parseUnits("1","gwei"),s;e===f.Mumbai||e===f.Polygon?s=await ba(e):s=ct.from(t.maxPriorityFeePerGas);let i=this.getPreferredPriorityFee(s);return{maxFeePerGas:n.mul(2).add(i),maxPriorityFeePerGas:i}}else return{gasPrice:await this.getPreferredGasPrice()}}getPreferredPriorityFee(t){let r=this.options.gasSettings.speed,e=this.options.gasSettings.maxPriceInGwei,a;switch(r){case"standard":a=ct.from(0);break;case"fast":a=t.div(100).mul(5);break;case"fastest":a=t.div(100).mul(10);break}let n=t.add(a),s=ft.utils.parseUnits(e.toString(),"gwei"),i=ft.utils.parseUnits("2.5","gwei");return n.gt(s)&&(n=s),n.lt(i)&&(n=i),n}async getPreferredGasPrice(){let t=await this.getProvider().getGasPrice(),r=this.options.gasSettings.speed,e=this.options.gasSettings.maxPriceInGwei,a=t,n;switch(r){case"standard":n=ct.from(1);break;case"fast":n=t.div(100).mul(5);break;case"fastest":n=t.div(100).mul(10);break}a=a.add(n);let s=ft.utils.parseUnits(e.toString(),"gwei");return a.gt(s)&&(a=s),a}emitTransactionEvent(t,r){this.emit(ht.Transaction,{status:t,transactionHash:r})}async multiCall(t){return this.sendTransaction("multicall",[t])}async estimateGas(t,r){return this.writeContract.estimateGas[t](...r)}async sendTransaction(t,r,e){var a;if(e||(e=await this.getCallOverrides()),((a=this.options)==null?void 0:a.gasless)&&("openzeppelin"in this.options.gasless||"biconomy"in this.options.gasless)){let n=this.getProvider(),s=await this.sendGaslessTransaction(t,r,e);this.emitTransactionEvent("submitted",s);let i=await n.waitForTransaction(s);return this.emitTransactionEvent("completed",s),i}else{let n=await this.sendTransactionByFunction(t,r,e);this.emitTransactionEvent("submitted",n.hash);let s=n.wait();return this.emitTransactionEvent("completed",n.hash),s}}async sendTransactionByFunction(t,r,e){let a=this.writeContract.functions[t];if(!a)throw new Error("invalid function");try{return await a(...r,e)}catch(n){let s=await this.getProvider().getNetwork(),i=await this.getSignerAddress(),c=await this.readContract.address;throw await qe(n,s,i,c)}}async sendGaslessTransaction(t,r=[],e){let a=this.getSigner();Gt(a,"Cannot execute gasless transaction without valid signer");let n=await this.getChainID(),s=await this.getSignerAddress(),i=this.writeContract.address,c=(e==null?void 0:e.value)||0;if(ct.from(c).gt(0))throw new Error("Cannot send native token value with gasless transaction");let d=this.writeContract.interface.encodeFunctionData(t,r),m=await this.writeContract.estimateGas[t](...r),h=m.mul(2);m.lt(25e3)&&(h=ct.from(5e5));let y={from:s,to:i,data:d,chainId:n,gasLimit:h,functionName:t.toString(),functionArgs:r,callOverrides:e};return await this.defaultGaslessSendFunction(y)}async signTypedData(t,r,e,a){this.emit(ht.Signature,{status:"submitted",message:a,signature:""});let{signature:n}=await cr(t,r,e,a);return this.emit(ht.Signature,{status:"completed",message:a,signature:n}),n}parseLogs(t,r){if(!r||r.length===0)return[];let e=this.writeContract.interface.getEventTopic(t);return r.filter(n=>n.topics.indexOf(e)>=0).map(n=>this.writeContract.interface.parseLog(n))}async defaultGaslessSendFunction(t){return this.options.gasless&&"biconomy"in this.options.gasless?this.biconomySendFunction(t):this.defenderSendFunction(t)}async biconomySendFunction(t){var h,y;Gt(this.options.gasless&&"biconomy"in this.options.gasless,"calling biconomySendFunction without biconomy");let r=this.getSigner(),e=this.getProvider();Gt(r&&e,"signer and provider must be set");let a=new ft.Contract(sr(t.chainId,"biconomyForwarder"),Sa,e),n=0,s=await we(a,"getNonce",[t.from,n]),i={from:t.from,to:t.to,token:ft.constants.AddressZero,txGas:t.gasLimit.toNumber(),tokenGasPrice:"0",batchId:n,batchNonce:s.toNumber(),deadline:Math.floor(Date.now()/1e3+(((h=this.options)==null?void 0:h.gasless)&&"biconomy"in this.options.gasless&&((y=this.options.gasless.biconomy)==null?void 0:y.deadlineSeconds)||3600)),data:t.data},c=ft.utils.arrayify(ft.utils.solidityKeccak256(["address","address","address","uint256","uint256","uint256","uint256","uint256","bytes32"],[i.from,i.to,i.token,i.txGas,i.tokenGasPrice,i.batchId,i.batchNonce,i.deadline,ft.utils.keccak256(i.data)]));this.emit(ht.Signature,{status:"submitted",message:c,signature:""});let d=await r.signMessage(c);this.emit(ht.Signature,{status:"completed",message:c,signature:d});let m=await fetch("https://api.biconomy.io/api/v2/meta-tx/native",{method:"POST",body:JSON.stringify({from:t.from,apiId:this.options.gasless.biconomy.apiId,params:[i,d],to:t.to,gasLimit:t.gasLimit.toHexString()}),headers:{"x-api-key":this.options.gasless.biconomy.apiKey,"Content-Type":"application/json;charset=utf-8"}});if(m.ok){let w=await m.json();if(!w.txHash)throw new Error(`relay transaction failed: ${w.log}`);return w.txHash}throw new Error(`relay transaction failed with status: ${m.status} (${m.statusText})`)}async defenderSendFunction(t){Gt(this.options.gasless&&"openzeppelin"in this.options.gasless,"calling biconomySendFunction without biconomy");let r=this.getSigner(),e=this.getProvider();Gt(r,"provider is not set"),Gt(e,"provider is not set");let a=this.options.gasless.openzeppelin.relayerForwarderAddress,n=wn.connect(a,e),s=await we(n,"getNonce",[t.from]),i={name:"GSNv2 Forwarder",version:"0.0.1",chainId:t.chainId,verifyingContract:a},c={ForwardRequest:Ca},d={from:t.from,to:t.to,value:ct.from(0).toString(),gas:ct.from(t.gasLimit).toString(),nonce:ct.from(s).toString(),data:t.data},m;if(this.emit(ht.Signature,{status:"submitted",message:d,signature:""}),t.functionName==="approve"&&t.functionArgs.length===2){let _=t.functionArgs[0],pt=t.functionArgs[1],{message:it,signature:et}=await Ta(r,this.writeContract.address,t.from,_,pt),{r:ko,s:Po,v:Ro}=ft.utils.splitSignature(et);d={to:this.readContract.address,owner:it.owner,spender:it.spender,value:ct.from(it.value).toString(),nonce:ct.from(it.nonce).toString(),deadline:ct.from(it.deadline).toString(),r:ko,s:Po,v:Ro},m=et}else{let{signature:_}=await cr(r,i,c,d);m=_}let h="forward";d!=null&&d.owner&&(h="permit");let y=JSON.stringify({request:d,signature:m,type:h});this.emit(ht.Signature,{status:"completed",message:d,signature:m});let w=await fetch(this.options.gasless.openzeppelin.relayerUrl,{method:"POST",body:y});if(w.ok){let _=await w.json();return JSON.parse(_.result).txHash}throw new Error(`relay transaction failed with status: ${w.status} (${w.statusText})`)}};p(C,"ContractWrapper");import{BigNumber as Ae,ethers as Sn}from"ethers";import{IERC20__factory as ka,TokenERC20__factory as Tn}from"@thirdweb-dev/contracts";import{formatUnits as bn}from"ethers/lib/utils";function gt(o){return o.toLowerCase()===xt||o.toLowerCase()===Cn}p(gt,"isNativeToken");async function tt(o,t,r){let e=await kt(o,r);return Sn.utils.parseUnits(vt.parse(t),e.decimals)}p(tt,"normalizePriceValue");async function kt(o,t){if(gt(t)){let r=await o.getNetwork(),e=aa(r.chainId);return{name:e.name,symbol:e.symbol,decimals:e.decimals}}else{let r=Tn.connect(t,o),[e,a,n]=await Promise.all([r.name(),r.symbol(),r.decimals()]);return{name:e,symbol:a,decimals:n}}}p(kt,"fetchCurrencyMetadata");async function F(o,t,r){let e=await kt(o,t);return R(T({},e),{value:Ae.from(r),displayValue:bn(r,e.decimals)})}p(F,"fetchCurrencyValue");async function Tt(o,t,r,e){if(gt(r))e.value=t;else{let a=o.getSigner(),n=o.getProvider(),s=new C(a||n,r,ka.abi,{}),i=await o.getSignerAddress(),c=o.readContract.address;return(await s.readContract.allowance(i,c)).lt(t)&&await s.sendTransaction("approve",[c,t]),e}}p(Tt,"setErc20Allowance");async function Pa(o,t,r,e){let a=o.getSigner(),n=o.getProvider(),s=new C(a||n,t,ka.abi,{}),i=await o.getSignerAddress(),c=o.readContract.address,d=await s.readContract.allowance(i,c),m=Ae.from(r).mul(Ae.from(e));d.lt(m)&&await s.sendTransaction("approve",[c,d.add(m)])}p(Pa,"approveErc20Allowance");import En from"deep-equal";var M;(function(o){o[o.Direct=0]="Direct",o[o.Auction=1]="Auction"})(M||(M={}));var Ra;(function(o){o[o.Pending=0]="Pending",o[o.Active=1]="Active",o[o.Canceled=2]="Canceled",o[o.Defeated=3]="Defeated",o[o.Succeeded=4]="Succeeded",o[o.Queued=5]="Queued",o[o.Expired=6]="Expired",o[o.Executed=7]="Executed"})(Ra||(Ra={}));var Ht;(function(o){o[o.Against=0]="Against",o[o.For=1]="For",o[o.Abstain=2]="Abstain"})(Ht||(Ht={}));var A;(function(o){o.NotEnoughSupply="There is not enough supply to claim.",o.AddressNotAllowed="This address is not on the allowlist.",o.WaitBeforeNextClaimTransaction="Not enough time since last claim transaction. Please wait.",o.AlreadyClaimed="You have already claimed the token.",o.NotEnoughTokens="There are not enough tokens in the wallet to pay for the claim.",o.NoActiveClaimPhase="There is no active claim phase at the moment. Please check back in later.",o.NoClaimConditionSet="There is no claim condition set.",o.Unknown="No claim conditions found."})(A||(A={}));import{BigNumber as jt}from"ethers";import{hexZeroPad as An}from"@ethersproject/bytes";import{AddressZero as Fa}from"@ethersproject/constants";async function _r(o,t,r,e,a,n=[An([0],32)]){let s=await e.getSignerAddress(),i=0;try{if(!t.merkleRootHash.toString().startsWith(Fa)){let h=await We(t.merkleRootHash.toString(),r,a),y=h&&h.find(w=>w.address.toLowerCase()===s.toLowerCase());if(y===void 0)throw new Error("No claim found for this address");n=y.proof,i=y.maxClaimable}}catch(h){if((h==null?void 0:h.message)==="No claim found for this address")throw h;console.warn("failed to check claim condition merkle root hash, continuing anyways",h)}let c=await e.getCallOverrides()||{},d=t.price,m=t.currencyAddress;return d.gt(0)&&(gt(m)?c.value=jt.from(d).mul(o):await Pa(e,m,d,o)),{overrides:c,proofs:n,maxQuantityPerTransaction:jt.from(i),price:d,currencyAddress:m}}p(_r,"prepareClaim");async function We(o,t,r){let e=t[o],a;if(e){let n=await r.get(e),s=er.parse(n);o===s.merkleRoot&&(a=s.claims)}return a}p(We,"fetchSnapshot");function Dr(o,t,r){if(o>=r.length)throw Error(`Index out of bounds - got index: ${o} with ${r.length} conditions`);let e=or.parse(T(R(T({},r[o]),{price:r[o].price.toString()}),t)),a=le.parse(e);return r.map((n,s)=>{let i;return s===o?i=a:i=n,R(T({},i),{price:i.price.toString()})})}p(Dr,"updateExsitingClaimConditions");async function Nr(o,t,r,e){let a=await We(t,r,e);if(a===void 0)return{proof:[],maxClaimable:0};let n=a.find(s=>s.address.toLowerCase()===(o==null?void 0:o.toLowerCase()));return n===void 0?{proof:[],maxClaimable:0}:{proof:n.proof,maxClaimable:n.maxClaimable}}p(Nr,"getClaimerProofs");async function Or(o,t,r){let e=[],a=await Promise.all(o.map(async i=>{if(i.snapshot){let c=await Ea($t.parse(i.snapshot),r);e.push(c),i.merkleRootHash=c.merkleRoot}return i})),n=sa.parse(a),s=(await Promise.all(n.map(i=>Wn(i,t)))).sort((i,c)=>{let d=jt.from(i.startTimestamp),m=jt.from(c.startTimestamp);return d.eq(m)?0:d.gt(m)?1:-1});return{snapshotInfos:e,sortedConditions:s}}p(Or,"processClaimConditionInputs");async function Wn(o,t){let r=o.currencyAddress===Fa?xt:o.currencyAddress;return{startTimestamp:o.startTime,maxClaimableSupply:o.maxQuantity,supplyClaimed:0,quantityLimitPerTransaction:o.quantityLimitPerTransaction,waitTimeInSecondsBetweenClaims:o.waitInSeconds,pricePerToken:await tt(t,o.price,r),currency:r,merkleRoot:o.merkleRootHash}}p(Wn,"convertToContractModel");async function zt(o,t,r,e){let a=await F(t,o.currency,o.pricePerToken),n=await We(o.merkleRoot,r,e);return le.parse({startTime:o.startTimestamp,maxQuantity:o.maxClaimableSupply.toString(),currentMintSupply:o.supplyClaimed.toString(),availableSupply:jt.from(o.maxClaimableSupply).sub(o.supplyClaimed).toString(),quantityLimitPerTransaction:o.quantityLimitPerTransaction.toString(),waitInSeconds:o.waitTimeInSecondsBetweenClaims.toString(),price:jt.from(o.pricePerToken),currency:o.currency,currencyAddress:o.currency,currencyMetadata:a,merkleRootHash:o.merkleRoot,snapshot:n})}p(zt,"transformResultToClaimCondition");import{MaxUint256 as kn}from"@ethersproject/constants";var Br=class{constructor(t,r,e){this.storage=e,this.contractWrapper=t,this.metadata=r}async getActive(){let t=await this.contractWrapper.readContract.getActiveClaimConditionId(),r=await this.contractWrapper.readContract.getClaimConditionById(t),e=await this.metadata.get();return await zt(r,this.contractWrapper.getProvider(),e.merkle,this.storage)}async getAll(){let t=await this.contractWrapper.readContract.claimCondition(),r=t.currentStartId.toNumber(),e=t.count.toNumber(),a=[];for(let s=r;s<r+e;s++)a.push(await this.contractWrapper.readContract.getClaimConditionById(s));let n=await this.metadata.get();return Promise.all(a.map(s=>zt(s,this.contractWrapper.getProvider(),n.merkle,this.storage)))}async canClaim(t,r){return r===void 0&&(r=await this.contractWrapper.getSignerAddress()),(await this.getClaimIneligibilityReasons(t,r)).length===0}async getClaimIneligibilityReasons(t,r){let e=[],a,n;if(r===void 0)throw new Error("addressToCheck is required");try{[a,n]=await Promise.all([this.contractWrapper.readContract.getActiveClaimConditionId(),this.getActive()])}catch(m){return m.message.includes("no public mint condition.")?(e.push(A.NoClaimConditionSet),e):m.message.includes("no active mint condition.")?(e.push(A.NoActiveClaimPhase),e):(e.push(A.Unknown),e)}if(Ia.from(n.availableSupply).lt(t)&&e.push(A.NotEnoughSupply),xn.utils.stripZeros(n.merkleRootHash).length>0){let m=n.merkleRootHash.toString(),h=await this.metadata.get(),y=await Nr(r,m,h.merkle,this.storage);try{let[w]=await this.contractWrapper.readContract.verifyClaimMerkleProof(a,r,t,y.proof,y.maxClaimable);if(!w)return e.push(A.AddressNotAllowed),e}catch{return e.push(A.AddressNotAllowed),e}}let[i,c]=await this.contractWrapper.readContract.getClaimTimestamp(a,r),d=Ia.from(Date.now()).div(1e3);if(i.gt(0)&&d.lt(c)&&(c.eq(kn)?e.push(A.AlreadyClaimed):e.push(A.WaitBeforeNextClaimTransaction)),n.price.gt(0)){let m=n.price.mul(t),h=this.contractWrapper.getProvider();gt(n.currencyAddress)?(await h.getBalance(r)).lt(m)&&e.push(A.NotEnoughTokens):(await new C(h,n.currencyAddress,vn.abi,{}).readContract.balanceOf(r)).lt(m)&&e.push(A.NotEnoughTokens)}return e}async set(t,r=!1){let{snapshotInfos:e,sortedConditions:a}=await Or(t,this.contractWrapper.getProvider(),this.storage),n={};e.forEach(c=>{n[c.merkleRoot]=c.snapshotUri});let s=await this.metadata.get(),i=[];if(!En(s.merkle,n)){let c=this.metadata.parseInputMetadata(R(T({},s),{merkle:n})),d=await this.metadata._parseAndUploadMetadata(c);i.push(this.contractWrapper.readContract.interface.encodeFunctionData("setContractURI",[d]))}return i.push(this.contractWrapper.readContract.interface.encodeFunctionData("setClaimConditions",[a,r])),{receipt:await this.contractWrapper.multiCall(i)}}async update(t,r){let e=await this.getAll(),a=Dr(t,r,e);return await this.set(a)}};p(Br,"DropErc721ClaimConditions");import{IERC20__factory as Pn}from"@thirdweb-dev/contracts";import{BigNumber as _a,ethers as Rn}from"ethers";import Fn from"deep-equal";import{MaxUint256 as In}from"@ethersproject/constants";var Mr=class{constructor(t,r,e){this.storage=e,this.contractWrapper=t,this.metadata=r}async getActive(t){let r=await this.contractWrapper.readContract.getActiveClaimConditionId(t),e=await this.contractWrapper.readContract.getClaimConditionById(t,r),a=await this.metadata.get();return await zt(e,this.contractWrapper.getProvider(),a.merkle,this.storage)}async getAll(t){let r=await this.contractWrapper.readContract.claimCondition(t),e=r.currentStartId.toNumber(),a=r.count.toNumber(),n=[];for(let i=e;i<e+a;i++)n.push(await this.contractWrapper.readContract.getClaimConditionById(t,i));let s=await this.metadata.get();return Promise.all(n.map(i=>zt(i,this.contractWrapper.getProvider(),s.merkle,this.storage)))}async canClaim(t,r,e){return e===void 0&&(e=await this.contractWrapper.getSignerAddress()),(await this.getClaimIneligibilityReasons(t,r,e)).length===0}async getClaimIneligibilityReasons(t,r,e){let a=[],n,s;if(e===void 0)throw new Error("addressToCheck is required");try{[n,s]=await Promise.all([this.contractWrapper.readContract.getActiveClaimConditionId(t),this.getActive(t)])}catch(h){return h.message.includes("no active mint condition.")?(a.push(A.NoActiveClaimPhase),a):(a.push(A.Unknown),a)}if(_a.from(s.availableSupply).lt(r)&&a.push(A.NotEnoughSupply),Rn.utils.stripZeros(s.merkleRootHash).length>0){let h=s.merkleRootHash.toString(),y=await this.metadata.get(),w=await Nr(e,h,y.merkle,this.storage);try{let[_]=await this.contractWrapper.readContract.verifyClaimMerkleProof(n,e,t,r,w.proof,w.maxClaimable);if(!_)return a.push(A.AddressNotAllowed),a}catch{return a.push(A.AddressNotAllowed),a}}let[c,d]=await this.contractWrapper.readContract.getClaimTimestamp(t,n,e),m=_a.from(Date.now()).div(1e3);if(c.gt(0)&&m.lt(d)&&(d.eq(In)?a.push(A.AlreadyClaimed):a.push(A.WaitBeforeNextClaimTransaction)),s.price.gt(0)){let h=s.price.mul(r),y=this.contractWrapper.getProvider();gt(s.currencyAddress)?(await y.getBalance(e)).lt(h)&&a.push(A.NotEnoughTokens):(await new C(y,s.currencyAddress,Pn.abi,{}).readContract.balanceOf(e)).lt(h)&&a.push(A.NotEnoughTokens)}return a}async set(t,r,e=!1){let{snapshotInfos:a,sortedConditions:n}=await Or(r,this.contractWrapper.getProvider(),this.storage),s={};a.forEach(d=>{s[d.merkleRoot]=d.snapshotUri});let i=await this.metadata.get(),c=[];for(let d of Object.keys(i.merkle))s[d]=i.merkle[d];if(!Fn(i.merkle,s)){let d=this.metadata.parseInputMetadata(R(T({},i),{merkle:s})),m=await this.metadata._parseAndUploadMetadata(d);c.push(this.contractWrapper.readContract.interface.encodeFunctionData("setContractURI",[m]))}return c.push(this.contractWrapper.readContract.interface.encodeFunctionData("setClaimConditions",[t,n,e])),{receipt:await this.contractWrapper.multiCall(c)}}async update(t,r,e){let a=await this.getAll(t),n=Dr(r,e,a);return await this.set(t,n)}};p(Mr,"DropErc1155ClaimConditions");import{BigNumber as _n}from"ethers";var Lr=class{constructor(t){this.contractWrapper=t}async getAllClaimerAddresses(t){let r=await this.contractWrapper.readContract.queryFilter(this.contractWrapper.readContract.filters.TokensClaimed(null,_n.from(t)));return Array.from(new Set(r.map(e=>e.args.claimer)))}};p(Lr,"DropErc1155History");import{BigNumber as Nt,ethers as Zt}from"ethers";import{AddressZero as Dn}from"@ethersproject/constants";var Ur=class{constructor(t,r,e={}){this.contractWrapper=t,this.storage=r;try{this.options=st.parse(e)}catch(a){console.error("invalid contract options object passed, falling back to default options",a),this.options=st.parse({})}}onNetworkUpdated(t){this.contractWrapper.updateSignerOrProvider(t)}getAddress(){return this.contractWrapper.readContract.address}async get(){return await kt(this.contractWrapper.getProvider(),this.getAddress())}async balance(){return await this.balanceOf(await this.contractWrapper.getSignerAddress())}async balanceOf(t){return this.getValue(await this.contractWrapper.readContract.balanceOf(t))}async totalSupply(){return await this.getValue(await this.contractWrapper.readContract.totalSupply())}async allowance(t){return await this.allowanceOf(await this.contractWrapper.getSignerAddress(),t)}async allowanceOf(t,r){return await this.getValue(await this.contractWrapper.readContract.allowance(t,r))}async isTransferRestricted(){return!await this.contractWrapper.readContract.hasRole(D("transfer"),Dn)}async transfer(t,r){let e=Zt.utils.parseUnits(Nt.from(r).toString(),await this.contractWrapper.readContract.decimals());return{receipt:await this.contractWrapper.sendTransaction("transfer",[t,e])}}async transferFrom(t,r,e){let a=Zt.utils.parseUnits(Nt.from(e).toString(),await this.contractWrapper.readContract.decimals());return{receipt:await this.contractWrapper.sendTransaction("transferFrom",[t,r,a])}}async setAllowance(t,r){let e=Zt.utils.parseUnits(Nt.from(r).toString(),await this.contractWrapper.readContract.decimals());return{receipt:await this.contractWrapper.sendTransaction("approve",[t,e])}}async transferBatch(t){let r=await this.contractWrapper.readContract.decimals(),e=t.map(a=>{let n=Zt.utils.parseUnits(Nt.from(a.amount).toString(),r);return this.contractWrapper.readContract.interface.encodeFunctionData("transfer",[a.toAddress,n])});await this.contractWrapper.multiCall(e)}async burn(t){let r=Zt.utils.parseUnits(Nt.from(t).toString(),await this.contractWrapper.readContract.decimals());return{receipt:await this.contractWrapper.sendTransaction("burn",[r])}}async burnFrom(t,r){let e=Zt.utils.parseUnits(Nt.from(r).toString(),await this.contractWrapper.readContract.decimals());return{receipt:await this.contractWrapper.sendTransaction("burnFrom",[t,e])}}async getValue(t){return await F(this.contractWrapper.getProvider(),this.getAddress(),Nt.from(t))}};p(Ur,"Erc20");import{BigNumber as Da}from"ethers";import{AddressZero as Na}from"@ethersproject/constants";var $r=class{constructor(t){this.contractWrapper=t}async getAllHolderBalances(){let r=(await this.contractWrapper.readContract.queryFilter(this.contractWrapper.readContract.filters.Transfer())).map(a=>a.args),e={};return r.forEach(a=>{let n=a.from,s=a.to,i=a.value;n!==Na&&(n in e||(e[n]=Da.from(0)),e[n]=e[n].sub(i)),s!==Na&&(s in e||(e[s]=Da.from(0)),e[s]=e[s].add(i))}),Promise.all(Object.keys(e).map(async a=>({holder:a,balance:await F(this.contractWrapper.getProvider(),this.contractWrapper.readContract.address,e[a])})))}};p($r,"TokenERC20History");import{BigNumber as Oa}from"ethers";import{AddressZero as Ba}from"@ethersproject/constants";var mr=100;import{BigNumber as Nn}from"ethers";import{ERC165__factory as On,TokenERC1155__factory as Bn,TokenERC721__factory as Mn}from"@thirdweb-dev/contracts";async function Ot(o,t,r){let e=await r.get(t);return Rr.parse(T({id:Nn.from(o),uri:t},e))}p(Ot,"fetchTokenMetadata");async function Pt(o,t,r,e){let a,n=On.connect(o,t),s=await n.supportsInterface(_t),i=await n.supportsInterface(Dt);if(s)a=await Mn.connect(o,t).tokenURI(r);else if(i)a=await Bn.connect(o,t).uri(r);else throw Error("Contract must implement ERC 1155 or ERC 721.");if(!a)throw new dt;return Ot(r,a,e)}p(Pt,"fetchTokenMetadataForContract");async function Vr(o,t){return typeof o=="string"?o:await t.uploadMetadata(Y.parse(o))}p(Vr,"uploadOrExtractURI");async function Rt(o,t){if(Ln(o))return o;if(Un(o)){let{metadataUris:r}=await t.uploadMetadataBatch(o.map(e=>Y.parse(e)));return r}else throw new Error("NFT metadatas must all be of the same type (all URI or all NFTMetadataInput)")}p(Rt,"uploadOrExtractURIs");function Ln(o){return o.find(t=>typeof t!="string")===void 0}p(Ln,"isUriList");function Un(o){return o.find(t=>typeof t!="object")===void 0}p(Un,"isMetadataList");var Kt=class{constructor(t,r,e={}){this.contractWrapper=t,this.storage=r;try{this.options=st.parse(e)}catch(a){console.error("invalid contract options object passed, falling back to default options",a),this.options=st.parse({})}}onNetworkUpdated(t){this.contractWrapper.updateSignerOrProvider(t)}getAddress(){return this.contractWrapper.readContract.address}async get(t){let[r,e]=await Promise.all([this.ownerOf(t).catch(()=>Ba),this.getTokenMetadata(t)]);return{owner:r,metadata:e}}async getAll(t){let r=Oa.from((t==null?void 0:t.start)||0).toNumber(),e=Oa.from((t==null?void 0:t.count)||100).toNumber(),a=Math.min((await this.getTotalCount()).toNumber(),r+e);return await Promise.all([...Array(a-r).keys()].map(n=>this.get((r+n).toString())))}async getTotalCount(){return await this.contractWrapper.readContract.nextTokenIdToMint()}async getOwned(t){let r=t||await this.contractWrapper.getSignerAddress(),e=await this.contractWrapper.readContract.balanceOf(r),a=Array.from(Array(e.toNumber()).keys()),n=await Promise.all(a.map(s=>this.contractWrapper.readContract.tokenOfOwnerByIndex(r,s)));return await Promise.all(n.map(s=>this.get(s.toString())))}async ownerOf(t){return await this.contractWrapper.readContract.ownerOf(t)}async totalSupply(){return await this.contractWrapper.readContract.nextTokenIdToMint()}async balanceOf(t){return await this.contractWrapper.readContract.balanceOf(t)}async balance(){return await this.balanceOf(await this.contractWrapper.getSignerAddress())}async isTransferRestricted(){return!await this.contractWrapper.readContract.hasRole(D("transfer"),Ba)}async isApproved(t,r){return await this.contractWrapper.readContract.isApprovedForAll(t,r)}async transfer(t,r){let e=await this.contractWrapper.getSignerAddress();return{receipt:await this.contractWrapper.sendTransaction("safeTransferFrom(address,address,uint256)",[e,t,r])}}async burn(t){return{receipt:await this.contractWrapper.sendTransaction("burn",[t])}}async setApprovalForAll(t,r){return{receipt:await this.contractWrapper.sendTransaction("setApprovalForAll",[t,r])}}async getTokenMetadata(t){let r=await this.contractWrapper.readContract.tokenURI(t);if(!r)throw new dt;return Ot(t,r,this.storage)}};p(Kt,"Erc721");import{BigNumber as xe}from"ethers";import{z as Gr}from"zod";var ve=Gr.object({supply:b,metadata:Rr}),cd=ve.extend({owner:Gr.string(),quantityOwned:b}),pd=Gr.object({supply:at,metadata:Y}),dd=Gr.object({supply:at,metadata:Pr});import{AddressZero as $n}from"@ethersproject/constants";var Ma;(function(o){o[o.None=0]="None",o[o.ERC20=1]="ERC20",o[o.ERC721=2]="ERC721"})(Ma||(Ma={}));var qt=class{constructor(t,r,e={}){this.contractWrapper=t,this.storage=r;try{this.options=st.parse(e)}catch(a){console.error("invalid contract options object passed, falling back to default options",a),this.options=st.parse({})}}onNetworkUpdated(t){this.contractWrapper.updateSignerOrProvider(t)}getAddress(){return this.contractWrapper.readContract.address}async get(t){let[r,e]=await Promise.all([this.contractWrapper.readContract.totalSupply(t).catch(()=>xe.from(0)),this.getTokenMetadata(t)]);return ve.parse({supply:r,metadata:e})}async getAll(t){let r=xe.from((t==null?void 0:t.start)||0).toNumber(),e=xe.from((t==null?void 0:t.count)||100).toNumber(),a=Math.min((await this.getTotalCount()).toNumber(),r+e);return await Promise.all([...Array(a-r).keys()].map(n=>this.get((r+n).toString())))}async getTotalCount(){return await this.contractWrapper.readContract.nextTokenIdToMint()}async getOwned(t){let r=t||await this.contractWrapper.getSignerAddress(),e=await this.contractWrapper.readContract.nextTokenIdToMint(),n=(await this.contractWrapper.readContract.balanceOfBatch(Array(e.toNumber()).fill(r),Array.from(Array(e.toNumber()).keys()))).map((s,i)=>({tokenId:i,balance:s})).filter(s=>s.balance.gt(0));return await Promise.all(n.map(async s=>{let i=await this.get(s.tokenId.toString());return R(T({},i),{owner:r,quantityOwned:s.balance})}))}async totalSupply(t){return await this.contractWrapper.readContract.totalSupply(t)}async balanceOf(t,r){return await this.contractWrapper.readContract.balanceOf(t,r)}async balance(t){return await this.balanceOf(await this.contractWrapper.getSignerAddress(),t)}async isTransferRestricted(){return!await this.contractWrapper.readContract.hasRole(D("transfer"),$n)}async isApproved(t,r){return await this.contractWrapper.readContract.isApprovedForAll(t,r)}async transfer(t,r,e,a=[0]){let n=await this.contractWrapper.getSignerAddress();return{receipt:await this.contractWrapper.sendTransaction("safeTransferFrom",[n,t,r,e,a])}}async burn(t,r){let e=await this.contractWrapper.getSignerAddress();return{receipt:await this.contractWrapper.sendTransaction("burn",[e,t,r])}}async setApprovalForAll(t,r){return{receipt:await this.contractWrapper.sendTransaction("setApprovalForAll",[t,r])}}async getTokenMetadata(t){let r=await this.contractWrapper.readContract.uri(t);if(!r)throw new dt;return Ot(t,r,this.storage)}};p(qt,"Erc1155");import{BigNumber as La}from"ethers";import Vn from"tiny-invariant";var Hr=class{constructor(t,r,e){this.contractWrapper=t,this.storage=e,this.roles=r}async mint(t){let r=t.payload,e=t.signature,a=await this.mapPayloadToContractStruct(r),n=await this.contractWrapper.getCallOverrides();await Tt(this.contractWrapper,La.from(a.price),r.currencyAddress,n);let s=await this.contractWrapper.sendTransaction("mintWithSignature",[a,e],n),i=this.contractWrapper.parseLogs("TokensMintedWithSignature",s.logs);if(i.length===0)throw new Error("No MintWithSignature event found");return{id:i[0].args.tokenIdMinted,receipt:s}}async mintBatch(t){let e=(await Promise.all(t.map(async s=>{let i=await this.mapPayloadToContractStruct(s.payload),c=s.signature,d=s.payload.price;if(La.from(d).gt(0))throw new Error("Can only batch free mints. For mints with a price, use regular mint()");return{message:i,signature:c}}))).map(s=>this.contractWrapper.readContract.interface.encodeFunctionData("mintWithSignature",[s.message,s.signature])),a=await this.contractWrapper.multiCall(e),n=this.contractWrapper.parseLogs("TokensMintedWithSignature",a.logs);if(n.length===0)throw new Error("No MintWithSignature event found");return n.map(s=>({id:s.args.tokenIdMinted,receipt:a}))}async verify(t){let r=t.payload,e=t.signature,a=await this.mapPayloadToContractStruct(r);return(await this.contractWrapper.readContract.verify(a,e))[0]}async generate(t){return(await this.generateBatch([t]))[0]}async generateBatch(t){await this.roles.verify(["minter"],await this.contractWrapper.getSignerAddress());let r=t.map(i=>Fr.parse(i)),e=r.map(i=>i.metadata),a=await Rt(e,this.storage),n=await this.contractWrapper.getChainID(),s=this.contractWrapper.getSigner();return Vn(s,"No signer available"),await Promise.all(r.map(async(i,c)=>{let d=a[c],m=he.parse(R(T({},i),{uri:d})),h=await this.contractWrapper.signTypedData(s,{name:"TokenERC721",version:"1",chainId:n,verifyingContract:this.contractWrapper.readContract.address},{MintRequest:fa},await this.mapPayloadToContractStruct(m));return{payload:m,signature:h.toString()}}))}async mapPayloadToContractStruct(t){let r=await tt(this.contractWrapper.getProvider(),t.price,t.currencyAddress);return{to:t.to,price:r,uri:t.uri,currency:t.currencyAddress,validityEndTimestamp:t.mintEndTime,validityStartTimestamp:t.mintStartTime,uid:t.uid,royaltyRecipient:t.royaltyRecipient,royaltyBps:t.royaltyBps,primarySaleRecipient:t.primarySaleRecipient}}};p(Hr,"Erc721SignatureMinting");import Gn from"tiny-invariant";import{BigNumber as Hn}from"ethers";var jr=class{constructor(t,r,e){this.contractWrapper=t,this.storage=e,this.roles=r}async mint(t){let r=t.payload,e=t.signature,a=await this.mapPayloadToContractStruct(r),n=await this.contractWrapper.getCallOverrides();await Tt(this.contractWrapper,a.pricePerToken.mul(a.quantity),r.currencyAddress,n);let s=await this.contractWrapper.sendTransaction("mintWithSignature",[a,e],n),i=this.contractWrapper.parseLogs("TokensMintedWithSignature",s.logs);if(i.length===0)throw new Error("No MintWithSignature event found");return{id:i[0].args.tokenIdMinted,receipt:s}}async mintBatch(t){let e=(await Promise.all(t.map(async s=>{let i=await this.mapPayloadToContractStruct(s.payload),c=s.signature,d=s.payload.price;if(Hn.from(d).gt(0))throw new Error("Can only batch free mints. For mints with a price, use regular mint()");return{message:i,signature:c}}))).map(s=>this.contractWrapper.readContract.interface.encodeFunctionData("mintWithSignature",[s.message,s.signature])),a=await this.contractWrapper.multiCall(e),n=this.contractWrapper.parseLogs("TokensMintedWithSignature",a.logs);if(n.length===0)throw new Error("No MintWithSignature event found");return n.map(s=>({id:s.args.tokenIdMinted,receipt:a}))}async verify(t){let r=t.payload,e=t.signature,a=await this.mapPayloadToContractStruct(r);return(await this.contractWrapper.readContract.verify(a,e))[0]}async generate(t){return(await this.generateBatch([t]))[0]}async generateBatch(t){await this.roles.verify(["minter"],await this.contractWrapper.getSignerAddress());let r=t.map(i=>ua.parse(i)),e=r.map(i=>i.metadata),a=await Rt(e,this.storage),n=await this.contractWrapper.getChainID(),s=this.contractWrapper.getSigner();return Gn(s,"No signer available"),await Promise.all(r.map(async(i,c)=>{let d=a[c],m=ha.parse(R(T({},i),{uri:d})),h=await this.contractWrapper.signTypedData(s,{name:"TokenERC1155",version:"1",chainId:n,verifyingContract:this.contractWrapper.readContract.address},{MintRequest:ga},await this.mapPayloadToContractStruct(m));return{payload:m,signature:h.toString()}}))}async mapPayloadToContractStruct(t){let r=await tt(this.contractWrapper.getProvider(),t.price,t.currencyAddress);return{to:t.to,tokenId:t.tokenId,uri:t.uri,quantity:t.quantity,pricePerToken:r,currency:t.currencyAddress,validityStartTimestamp:t.mintStartTime,validityEndTimestamp:t.mintEndTime,uid:t.uid,royaltyRecipient:t.royaltyRecipient,royaltyBps:t.royaltyBps,primarySaleRecipient:t.primarySaleRecipient}}};p(jr,"Erc1155SignatureMinting");import{ERC165__factory as jn,IERC1155__factory as zn,IERC721__factory as Zn}from"@thirdweb-dev/contracts";import{BigNumber as bt}from"ethers";import{AddressZero as ja}from"@ethersproject/constants";import{BigNumber as Ee}from"ethers";import{ERC165__factory as Ua,IERC1155__factory as $a,IERC721__factory as Va}from"@thirdweb-dev/contracts";import Bt from"tiny-invariant";async function Ga(o,t,r,e,a){try{let n=Ua.connect(r,o),s=await n.supportsInterface(_t),i=await n.supportsInterface(Dt);if(s){let c=Va.connect(r,o);return await c.isApprovedForAll(a,t)?!0:(await c.getApproved(e)).toLowerCase()===t.toLowerCase()}else return i?await $a.connect(r,o).isApprovedForAll(a,t):(console.error("Contract does not implement ERC 1155 or ERC 721."),!1)}catch(n){return console.error("Failed to check if token is approved",n),!1}}p(Ga,"isTokenApprovedForMarketplace");async function zr(o,t,r,e,a){let n=Ua.connect(r,o),s=await n.supportsInterface(_t),i=await n.supportsInterface(Dt);if(s){let c=new C(o,r,Va.abi,{});await c.readContract.isApprovedForAll(a,t)||(await c.readContract.getApproved(e)).toLowerCase()===t.toLowerCase()||await c.sendTransaction("setApprovalForAll",[t,!0])}else if(i){let c=new C(o,r,$a.abi,{});await c.readContract.isApprovedForAll(a,t)||await c.sendTransaction("setApprovalForAll",[t,!0])}else throw Error("Contract must implement ERC 1155 or ERC 721.")}p(zr,"handleTokenApproval");function Zr(o){switch(Bt(o.assetContractAddress!==void 0&&o.assetContractAddress!==null,"Asset contract address is required"),Bt(o.buyoutPricePerToken!==void 0&&o.buyoutPricePerToken!==null,"Buyout price is required"),Bt(o.listingDurationInSeconds!==void 0&&o.listingDurationInSeconds!==null,"Listing duration is required"),Bt(o.startTimeInSeconds!==void 0&&o.startTimeInSeconds!==null,"Start time is required"),Bt(o.tokenId!==void 0&&o.tokenId!==null,"Token ID is required"),Bt(o.quantity!==void 0&&o.quantity!==null,"Quantity is required"),o.type){case"NewAuctionListing":Bt(o.reservePricePerToken!==void 0&&o.reservePricePerToken!==null,"Reserve price is required")}}p(Zr,"validateNewListingParam");async function Kr(o,t,r){return{quantity:r.quantityDesired,pricePerToken:r.pricePerToken,currencyContractAddress:r.currency,buyerAddress:r.offeror,quantityDesired:r.quantityWanted,currencyValue:await F(o,r.currency,r.quantityWanted.mul(r.pricePerToken)),listingId:t}}p(Kr,"mapOffer");function Ha(o,t,r){return r=Ee.from(r),o=Ee.from(o),t=Ee.from(t),t.sub(o).mul(de).div(o).gte(r)}p(Ha,"isWinningBid");import Kn from"tiny-invariant";import{isAddress as qn}from"ethers/lib/utils";var qr=class{constructor(t,r){this.contractWrapper=t,this.storage=r}getAddress(){return this.contractWrapper.readContract.address}async getListing(t){let r=await this.contractWrapper.readContract.listings(t);if(r.assetContract===ja)throw new yt(this.getAddress(),t.toString());if(r.listingType!==M.Direct)throw new Mt(this.getAddress(),t.toString(),"Auction","Direct");return await this.mapListing(r)}async getActiveOffer(t,r){await this.validateListing(bt.from(t)),Kn(qn(r),"Address must be a valid address");let e=await this.contractWrapper.readContract.offers(t,r);if(e.offeror!==ja)return await Kr(this.contractWrapper.getProvider(),bt.from(t),e)}async createListing(t){Zr(t),await zr(this.contractWrapper.getSignerOrProvider(),this.getAddress(),t.assetContractAddress,t.tokenId,await this.contractWrapper.getSignerAddress());let r=await tt(this.contractWrapper.getProvider(),t.buyoutPricePerToken,t.currencyContractAddress),e=await this.contractWrapper.sendTransaction("createListing",[{assetContract:t.assetContractAddress,tokenId:t.tokenId,buyoutPricePerToken:r,currencyToAccept:t.currencyContractAddress,listingType:M.Direct,quantityToList:t.quantity,reservePricePerToken:r,secondsUntilEndTime:t.listingDurationInSeconds,startTime:t.startTimeInSeconds}]);return{id:this.contractWrapper.parseLogs("ListingAdded",e==null?void 0:e.logs)[0].args.listingId,receipt:e}}async makeOffer(t,r,e,a){if(gt(e))throw new Error("You must use the wrapped native token address when making an offer with a native token");let n=await tt(this.contractWrapper.getProvider(),a,e);try{await this.getListing(t)}catch(d){throw console.error("Failed to get listing, err =",d),new Error(`Error getting the listing with id ${t}`)}let s=bt.from(r),i=bt.from(n).mul(s),c=await this.contractWrapper.getCallOverrides()||{};return await Tt(this.contractWrapper,i,e,c),{receipt:await this.contractWrapper.sendTransaction("offer",[t,r,e,n],c)}}async acceptOffer(t,r){await this.validateListing(bt.from(t));let e=await this.contractWrapper.readContract.offers(t,r);return{receipt:await this.contractWrapper.sendTransaction("acceptOffer",[t,r,e.currency,e.pricePerToken])}}async buyoutListing(t,r,e){let a=await this.validateListing(bt.from(t));if(!await this.isStillValidListing(a,r))throw new Error("The asset on this listing has been moved from the lister's wallet, this listing is now invalid");let s=e||await this.contractWrapper.getSignerAddress(),i=bt.from(r),c=bt.from(a.buyoutPrice).mul(i),d=await this.contractWrapper.getCallOverrides()||{};return await Tt(this.contractWrapper,c,a.currencyContractAddress,d),{receipt:await this.contractWrapper.sendTransaction("buy",[t,s,i,a.currencyContractAddress,c],d)}}async updateListing(t){return{receipt:await this.contractWrapper.sendTransaction("updateListing",[t.id,t.quantity,t.buyoutPrice,t.buyoutPrice,t.currencyContractAddress,t.startTimeInSeconds,t.secondsUntilEnd])}}async cancelListing(t){return{receipt:await this.contractWrapper.sendTransaction("cancelDirectListing",[t])}}async validateListing(t){try{return await this.getListing(t)}catch(r){throw console.error(`Error getting the listing with id ${t}`),r}}async mapListing(t){return{assetContractAddress:t.assetContract,buyoutPrice:bt.from(t.buyoutPricePerToken),currencyContractAddress:t.currency,buyoutCurrencyValuePerToken:await F(this.contractWrapper.getProvider(),t.currency,t.buyoutPricePerToken),id:t.listingId.toString(),tokenId:t.tokenId,quantity:t.quantity,startTimeInSeconds:t.startTime,asset:await Pt(t.assetContract,this.contractWrapper.getProvider(),t.tokenId,this.storage),secondsUntilEnd:t.endTime,sellerAddress:t.tokenOwner,type:M.Direct}}async isStillValidListing(t,r){if(!await Ga(this.contractWrapper.getProvider(),this.getAddress(),t.assetContractAddress,t.tokenId,t.sellerAddress))return!1;let a=this.contractWrapper.getProvider(),n=jn.connect(t.assetContractAddress,a),s=await n.supportsInterface(_t),i=await n.supportsInterface(Dt);return s?(await Zn.connect(t.assetContractAddress,a).ownerOf(t.tokenId)).toLowerCase()===t.sellerAddress.toLowerCase():i?(await zn.connect(t.assetContractAddress,a).balanceOf(t.sellerAddress,t.tokenId)).gte(r||t.quantity):(console.error("Contract does not implement ERC 1155 or ERC 721."),!1)}};p(qr,"MarketplaceDirect");import{BigNumber as Q,ethers as Jn}from"ethers";import{AddressZero as za}from"@ethersproject/constants";import Za from"tiny-invariant";var Jr=class{constructor(t,r){this.contractWrapper=t,this.storage=r}getAddress(){return this.contractWrapper.readContract.address}async getListing(t){let r=await this.contractWrapper.readContract.listings(t);if(r.listingId.toString()!==t.toString())throw new yt(this.getAddress(),t.toString());if(r.listingType!==M.Auction)throw new Mt(this.getAddress(),t.toString(),"Direct","Auction");return await this.mapListing(r)}async getWinningBid(t){await this.validateListing(Q.from(t));let r=await this.contractWrapper.readContract.winningBid(t);if(r.offeror!==za)return await Kr(this.contractWrapper.getProvider(),Q.from(t),r)}async getWinner(t){let e=(await this.contractWrapper.readContract.queryFilter(this.contractWrapper.readContract.filters.AuctionClosed())).find(a=>a.args.listingId.eq(Q.from(t)));if(!e)throw new Error(`Could not find auction with listingId ${t} in closed auctions`);return e.args.winningBidder}async createListing(t){Zr(t),await zr(this.contractWrapper.getSignerOrProvider(),this.getAddress(),t.assetContractAddress,t.tokenId,await this.contractWrapper.getSignerAddress());let r=await tt(this.contractWrapper.getProvider(),t.buyoutPricePerToken,t.currencyContractAddress),e=await tt(this.contractWrapper.getProvider(),t.reservePricePerToken,t.currencyContractAddress),a=await this.contractWrapper.sendTransaction("createListing",[{assetContract:t.assetContractAddress,tokenId:t.tokenId,buyoutPricePerToken:r,currencyToAccept:t.currencyContractAddress,listingType:M.Auction,quantityToList:t.quantity,reservePricePerToken:e,secondsUntilEndTime:t.listingDurationInSeconds,startTime:t.startTimeInSeconds}]);return{id:this.contractWrapper.parseLogs("ListingAdded",a==null?void 0:a.logs)[0].args.listingId,receipt:a}}async buyoutListing(t){let r=await this.validateListing(Q.from(t)),e=await kt(this.contractWrapper.getProvider(),r.currencyContractAddress);return this.makeBid(t,Jn.utils.formatUnits(r.buyoutPrice,e.decimals))}async makeBid(t,r){let e=await this.validateListing(Q.from(t)),a=await tt(this.contractWrapper.getProvider(),r,e.currencyContractAddress),n=await this.contractWrapper.readContract.bidBufferBps(),s=await this.getWinningBid(t);if(s){let m=Ha(s.pricePerToken,a,n);Za(m,"Bid price is too low based on the current winning bid and the bid buffer")}else{let m=a,h=Q.from(e.reservePrice);Za(m.gte(h),"Bid price is too low based on reserve price")}let i=Q.from(e.quantity),c=a.mul(i),d=await this.contractWrapper.getCallOverrides()||{};return await Tt(this.contractWrapper,c,e.currencyContractAddress,d),{receipt:await this.contractWrapper.sendTransaction("offer",[t,e.quantity,e.currencyContractAddress,a],d)}}async cancelListing(t){let r=await this.validateListing(Q.from(t)),e=Q.from(Math.floor(Date.now()/1e3)),a=Q.from(r.startTimeInEpochSeconds),n=await this.contractWrapper.readContract.winningBid(t);if(e.gt(a)&&n.offeror!==za)throw new xr(t.toString());return{receipt:await this.contractWrapper.sendTransaction("closeAuction",[Q.from(t),await this.contractWrapper.getSignerAddress()])}}async closeListing(t,r){r||(r=await this.contractWrapper.getSignerAddress());let e=await this.validateListing(Q.from(t));try{return{receipt:await this.contractWrapper.sendTransaction("closeAuction",[Q.from(t),r])}}catch(a){throw a.message.includes("cannot close auction before it has ended")?new Er(t.toString(),e.endTimeInEpochSeconds.toString()):a}}async updateListing(t){return{receipt:await this.contractWrapper.sendTransaction("updateListing",[t.id,t.quantity,t.reservePrice,t.buyoutPrice,t.currencyContractAddress,t.startTimeInEpochSeconds,t.endTimeInEpochSeconds])}}async validateListing(t){try{return await this.getListing(t)}catch(r){throw console.error(`Error getting the listing with id ${t}`),r}}async mapListing(t){return{assetContractAddress:t.assetContract,buyoutPrice:Q.from(t.buyoutPricePerToken),currencyContractAddress:t.currency,buyoutCurrencyValuePerToken:await F(this.contractWrapper.getProvider(),t.currency,t.buyoutPricePerToken),id:t.listingId.toString(),tokenId:t.tokenId,quantity:t.quantity,startTimeInEpochSeconds:t.startTime,asset:await Pt(t.assetContract,this.contractWrapper.getProvider(),t.tokenId,this.storage),reservePriceCurrencyValuePerToken:await F(this.contractWrapper.getProvider(),t.currency,t.reservePricePerToken),reservePrice:Q.from(t.reservePricePerToken),endTimeInEpochSeconds:t.endTime,sellerAddress:t.tokenOwner,type:M.Auction}}};p(Jr,"MarketplaceAuction");import{TWRegistry__factory as Qn}from"@thirdweb-dev/contracts";import{isAddress as Yn}from"ethers/lib/utils";import{AddressZero as Xn}from"@ethersproject/constants";var Qr=class extends C{constructor(t,r,e){super(r,t,Qn.abi,e)}async getContractAddresses(t){return(await this.readContract.getAll(t)).filter(r=>Yn(r)&&r.toLowerCase()!==Xn)}};p(Qr,"ContractRegistry");import{TWFactory__factory as Vs}from"@thirdweb-dev/contracts";import{BigNumber as vo,ethers as Gs}from"ethers";var Ka=v.merge(O).merge(J),ts=E.merge(O).merge(J),rs=Ka.merge(q).merge(lt).merge(B),qa={deploy:rs,output:ts,input:Ka};import{TokenERC721__factory as es}from"@thirdweb-dev/contracts";var k=class{constructor(t){this.contractWrapper=t}addListener(t,r){let e=this.contractWrapper.readContract.interface.getEvent(t);this.contractWrapper.readContract.on(e.name,(...a)=>{let n={};e.inputs.map(s=>s.name).forEach((s,i)=>{n[s]=a[i]}),r(n)})}removeListener(t,r){let e=this.contractWrapper.readContract.interface.getEvent(t);this.contractWrapper.readContract.off(e.name,r)}removeAllListeners(){this.contractWrapper.readContract.removeAllListeners()}};p(k,"ContractEvents");var lr=class extends Kt{constructor(t,r,e,a={},n=new C(t,r,lr.contractFactory.abi,a)){super(n,e,a);this.metadata=new W(this.contractWrapper,lr.schema,this.storage),this.roles=new K(this.contractWrapper,lr.contractRoles),this.royalty=new nt(this.contractWrapper,this.metadata),this.primarySale=new ut(this.contractWrapper),this.encoder=new x(this.contractWrapper),this.estimator=new P(this.contractWrapper),this.signature=new Hr(this.contractWrapper,this.roles,this.storage),this.events=new k(this.contractWrapper)}async mint(t){return this.mintTo(await this.contractWrapper.getSignerAddress(),t)}async mintTo(t,r){let e=await Vr(r,this.storage),a=await this.contractWrapper.sendTransaction("mintTo",[t,e]),n=this.contractWrapper.parseLogs("TokensMinted",a==null?void 0:a.logs);if(n.length===0)throw new Error("TokenMinted event not found");let s=n[0].args.tokenIdMinted;return{id:s,receipt:a,data:()=>this.get(s.toString())}}async mintBatch(t){return this.mintBatchTo(await this.contractWrapper.getSignerAddress(),t)}async mintBatchTo(t,r){let a=(await Rt(r,this.storage)).map(i=>this.contractWrapper.readContract.interface.encodeFunctionData("mintTo",[t,i])),n=await this.contractWrapper.multiCall(a),s=this.contractWrapper.parseLogs("TokensMinted",n.logs);if(s.length===0||s.length<r.length)throw new Error("TokenMinted event not found, minting failed");return s.map(i=>{let c=i.args.tokenIdMinted;return{id:c,receipt:n,data:()=>this.get(c)}})}},H=lr;p(H,"NFTCollection"),g(H,"contractType","nft-collection"),g(H,"contractRoles",["admin","minter","transfer"]),g(H,"contractFactory",es),g(H,"schema",qa);import{DropERC1155__factory as ns}from"@thirdweb-dev/contracts";import{hexZeroPad as ke}from"ethers/lib/utils";var Ja=v.merge(O).merge(Ut).merge(J),as=E.merge(O).merge(Ut).merge(J),os=Ja.merge(q).merge(lt).merge(B),Qa={deploy:os,output:as,input:Ja};import{ethers as Ya}from"ethers";var P=class{constructor(t){this.contractWrapper=t}async gasCostOf(t,r){let e=await this.contractWrapper.getPreferredGasPrice(),a=await this.contractWrapper.estimateGas(t,r);return Ya.utils.formatEther(a.mul(e))}async currentGasPriceInGwei(){let t=await this.contractWrapper.getProvider().getGasPrice();return Ya.utils.formatUnits(t,"gwei")}};p(P,"GasCostEstimator");var ur=class extends qt{constructor(t,r,e,a={},n=new C(t,r,ur.contractFactory.abi,a)){super(n,e,a);this.metadata=new W(this.contractWrapper,ur.schema,this.storage),this.roles=new K(this.contractWrapper,ur.contractRoles),this.royalty=new nt(this.contractWrapper,this.metadata),this.primarySale=new ut(this.contractWrapper),this.claimConditions=new Mr(this.contractWrapper,this.metadata,this.storage),this.history=new Lr(this.contractWrapper),this.encoder=new x(this.contractWrapper),this.events=new k(this.contractWrapper),this.estimator=new P(this.contractWrapper)}async createBatch(t){var d;let r=await this.contractWrapper.readContract.nextTokenIdToMint(),e=await this.storage.uploadMetadataBatch(t.map(m=>Y.parse(m)),r.toNumber(),this.contractWrapper.readContract.address,await((d=this.contractWrapper.getSigner())==null?void 0:d.getAddress())),a=await this.contractWrapper.sendTransaction("lazyMint",[e.metadataUris.length,`${e.baseUri.endsWith("/")?e.baseUri:`${e.baseUri}/`}`]),n=this.contractWrapper.parseLogs("TokensLazyMinted",a==null?void 0:a.logs),s=n[0].args.startTokenId,i=n[0].args.endTokenId,c=[];for(let m=s;m.lte(i);m=m.add(1))c.push({id:m,receipt:a,data:()=>this.getTokenMetadata(m)});return c}async claimTo(t,r,e,a=[ke([0],32)]){let n=await this.prepareClaim(r,e,a);return{receipt:await this.contractWrapper.sendTransaction("claim",[t,r,e,n.currencyAddress,n.price,n.proofs,n.maxQuantityPerTransaction],n.overrides)}}async claim(t,r,e=[ke([0],32)]){let a=await this.contractWrapper.getSignerAddress();return this.claimTo(a,t,r,e)}async prepareClaim(t,r,e=[ke([0],32)]){return _r(r,await this.claimConditions.getActive(t),(await this.metadata.get()).merkle,this.contractWrapper,this.storage,e)}},I=ur;p(I,"EditionDrop"),g(I,"contractType","edition-drop"),g(I,"contractRoles",["admin","minter","transfer"]),g(I,"contractFactory",ns),g(I,"schema",Qa);import{TokenERC1155__factory as cs}from"@thirdweb-dev/contracts";var Xa=v.merge(O),ss=E.merge(O),is=Xa.merge(q).merge(lt).merge(B),to={deploy:is,output:ss,input:Xa};import{BigNumber as ps,ethers as ro}from"ethers";var hr=class extends qt{constructor(t,r,e,a={},n=new C(t,r,hr.contractFactory.abi,a)){super(n,e,a);this.metadata=new W(this.contractWrapper,hr.schema,this.storage),this.roles=new K(this.contractWrapper,hr.contractRoles),this.royalty=new nt(this.contractWrapper,this.metadata),this.primarySale=new ut(this.contractWrapper),this.encoder=new x(this.contractWrapper),this.estimator=new P(this.contractWrapper),this.events=new k(this.contractWrapper),this.signature=new jr(this.contractWrapper,this.roles,this.storage)}async mint(t){return this.mintTo(await this.contractWrapper.getSignerAddress(),t)}async mintTo(t,r){let e=await Vr(r.metadata,this.storage),a=await this.contractWrapper.sendTransaction("mintTo",[t,ro.constants.MaxUint256,e,r.supply]),n=this.contractWrapper.parseLogs("TokensMinted",a==null?void 0:a.logs);if(n.length===0)throw new Error("TokenMinted event not found");let s=n[0].args.tokenIdMinted;return{id:s,receipt:a,data:()=>this.get(s.toString())}}async mintAdditionalSupply(t,r){return this.mintAdditionalSupplyTo(await this.contractWrapper.getSignerAddress(),t,r)}async mintAdditionalSupplyTo(t,r,e){let a=await this.getTokenMetadata(r),n=await this.contractWrapper.sendTransaction("mintTo",[t,r,a.uri,e]);return{id:ps.from(r),receipt:n,data:()=>this.get(r)}}async mintBatch(t){return this.mintBatchTo(await this.contractWrapper.getSignerAddress(),t)}async mintBatchTo(t,r){let e=r.map(d=>d.metadata),a=r.map(d=>d.supply),s=(await Rt(e,this.storage)).map((d,m)=>this.contractWrapper.readContract.interface.encodeFunctionData("mintTo",[t,ro.constants.MaxUint256,d,a[m]])),i=await this.contractWrapper.multiCall(s),c=this.contractWrapper.parseLogs("TokensMinted",i.logs);if(c.length===0||c.length<e.length)throw new Error("TokenMinted event not found, minting failed");return c.map(d=>{let m=d.args.tokenIdMinted;return{id:m,receipt:i,data:()=>this.get(m)}})}},j=hr;p(j,"Edition"),g(j,"contractType","edition"),g(j,"contractRoles",["admin","minter","transfer"]),g(j,"contractFactory",cs),g(j,"schema",to);var eo=v.merge(J),ds=E.merge(J),ms=eo.merge(q).merge(lt).merge(B),ao={deploy:ms,output:ds,input:eo};import{TokenERC20__factory as ls}from"@thirdweb-dev/contracts";import{BigNumber as oo,ethers as no}from"ethers";var fr=class extends Ur{constructor(t,r,e,a={},n=new C(t,r,fr.contractFactory.abi,a)){super(n,e,a);this.metadata=new W(this.contractWrapper,fr.schema,this.storage),this.roles=new K(this.contractWrapper,fr.contractRoles),this.history=new $r(this.contractWrapper),this.encoder=new x(this.contractWrapper),this.estimator=new P(this.contractWrapper),this.events=new k(this.contractWrapper)}async getVoteBalance(){return await this.getVoteBalanceOf(await this.contractWrapper.getSignerAddress())}async getVoteBalanceOf(t){return await this.getValue(await this.contractWrapper.readContract.getVotes(t))}async getDelegation(){return await this.getDelegationOf(await this.contractWrapper.getSignerAddress())}async getDelegationOf(t){return await this.contractWrapper.readContract.delegates(t)}async mint(t){return this.mintTo(await this.contractWrapper.getSignerAddress(),t)}async mintTo(t,r){let e=no.utils.parseUnits(oo.from(r).toString(),await this.contractWrapper.readContract.decimals());return{receipt:await this.contractWrapper.sendTransaction("mintTo",[t,e])}}async mintBatchTo(t){let r=[];for(let e of t){let a=no.utils.parseUnits(oo.from(e.amount).toString(),await this.contractWrapper.readContract.decimals());r.push(this.contractWrapper.readContract.interface.encodeFunctionData("mintTo",[e.toAddress,a]))}return{receipt:await this.contractWrapper.multiCall(r)}}async delegateTo(t){return{receipt:await this.contractWrapper.sendTransaction("delegate",[t])}}},L=fr;p(L,"Token"),g(L,"contractType","token"),g(L,"contractRoles",["admin","minter","transfer"]),g(L,"contractFactory",ls),g(L,"schema",ao);import{IERC20__factory as gs,VoteERC20__factory as ys}from"@thirdweb-dev/contracts";import{z as rt}from"zod";var so=rt.object({voting_delay_in_blocks:rt.number().min(0).default(0),voting_period_in_blocks:rt.number().min(1).default(1),voting_token_address:ot,voting_quorum_fraction:Qe.default(0),proposal_token_threshold:at.default(1)}),us=so.extend({proposal_token_threshold:b}),io=v.merge(so),hs=E.merge(us),fs=io.merge(B),co={deploy:fs,output:hs,input:io},Il=rt.object({proposalId:b,proposer:rt.string(),targets:rt.array(rt.string()),values:rt.array(b),signatures:rt.array(rt.string()),calldatas:rt.array(rt.string()),startBlock:b,endBlock:b,description:rt.string()});import{BigNumber as po,ethers as Pe}from"ethers";import ws from"deep-equal";var Yr=class{constructor(t,r,e,a={},n=new C(t,r,Yr.contractFactory.abi,a)){this.contractWrapper=n,this.storage=e,this.metadata=new W(this.contractWrapper,Yr.schema,this.storage),this.encoder=new x(this.contractWrapper),this.estimator=new P(this.contractWrapper),this.events=new k(this.contractWrapper)}onNetworkUpdated(t){this.contractWrapper.updateSignerOrProvider(t)}getAddress(){return this.contractWrapper.readContract.address}async get(t){let e=(await this.getAll()).filter(a=>ws(po.from(a.proposalId),po.from(t)));if(e.length===0)throw new Error("proposal not found");return e[0]}async getAll(){return Promise.all((await this.contractWrapper.readContract.getAllProposals()).map(async t=>({proposalId:t.proposalId,proposer:t.proposer,description:t.description,startBlock:t.startBlock,endBlock:t.endBlock,state:await this.contractWrapper.readContract.state(t.proposalId),votes:await this.getProposalVotes(t.proposalId),executions:t[3].map((r,e)=>({toAddress:t.targets[e],nativeTokenValue:r,transactionData:t.calldatas[e]}))})))}async getProposalVotes(t){let r=await this.contractWrapper.readContract.proposalVotes(t);return[{type:Ht.Against,label:"Against",count:r.againstVotes},{type:Ht.For,label:"For",count:r.forVotes},{type:Ht.Abstain,label:"Abstain",count:r.abstainVotes}]}async hasVoted(t,r){return r||(r=await this.contractWrapper.getSignerAddress()),this.contractWrapper.readContract.hasVoted(t,r)}async canExecute(t){await this.ensureExists(t);let r=await this.get(t),e=r.executions.map(i=>i.toAddress),a=r.executions.map(i=>i.nativeTokenValue),n=r.executions.map(i=>i.transactionData),s=Pe.utils.id(r.description);try{return await this.contractWrapper.callStatic().execute(e,a,n,s),!0}catch{return!1}}async balance(){let t=await this.contractWrapper.readContract.provider.getBalance(this.contractWrapper.readContract.address);return{name:"",symbol:"",decimals:18,value:t,displayValue:Pe.utils.formatUnits(t,18)}}async balanceOfToken(t){let r=gs.connect(t,this.contractWrapper.getProvider());return await F(this.contractWrapper.getProvider(),t,await r.balanceOf(this.contractWrapper.readContract.address))}async ensureExists(t){try{await this.contractWrapper.readContract.state(t)}catch{throw Error(`Proposal ${t} not found`)}}async settings(){let[t,r,e,a,n]=await Promise.all([this.contractWrapper.readContract.votingDelay(),this.contractWrapper.readContract.votingPeriod(),this.contractWrapper.readContract.token(),this.contractWrapper.readContract.quorumNumerator(),this.contractWrapper.readContract.proposalThreshold()]),s=await kt(this.contractWrapper.getProvider(),e);return{votingDelay:t.toString(),votingPeriod:r.toString(),votingTokenAddress:e,votingTokenMetadata:s,votingQuorumFraction:a.toString(),proposalTokenThreshold:n.toString()}}async propose(t,r){r||(r=[{toAddress:this.contractWrapper.readContract.address,nativeTokenValue:0,transactionData:"0x"}]);let e=r.map(c=>c.toAddress),a=r.map(c=>c.nativeTokenValue),n=r.map(c=>c.transactionData),s=await this.contractWrapper.sendTransaction("propose",[e,a,n,t]);return{id:this.contractWrapper.parseLogs("ProposalCreated",s==null?void 0:s.logs)[0].args.proposalId,receipt:s}}async vote(t,r,e=""){return await this.ensureExists(t),{receipt:await this.contractWrapper.sendTransaction("castVoteWithReason",[t,r,e])}}async execute(t){await this.ensureExists(t);let r=await this.get(t),e=r.executions.map(i=>i.toAddress),a=r.executions.map(i=>i.nativeTokenValue),n=r.executions.map(i=>i.transactionData),s=Pe.utils.id(r.description);return{receipt:await this.contractWrapper.sendTransaction("execute",[e,a,n,s])}}},z=Yr;p(z,"Vote"),g(z,"contractType","vote"),g(z,"contractFactory",ys),g(z,"schema",co);import{IERC20__factory as bs,Split__factory as As}from"@thirdweb-dev/contracts";import{BigNumber as uo}from"ethers";import{z as Jt}from"zod";var mo=Jt.object({address:ot,sharesBps:Wt.gt(0,"Shares must be greater than 0")}),Cs=mo.extend({address:ot,sharesBps:Wt}),Re=v.extend({recipients:Jt.array(mo).default([]).superRefine((o,t)=>{let r={},e=0;for(let a=0;a<o.length;a++){let n=o[a];r[n.address]&&t.addIssue({code:Jt.ZodIssueCode.custom,message:"Duplicate address.",path:[a,"address"]}),r[n.address]=!0,e+=n.sharesBps,e>1e4&&t.addIssue({code:Jt.ZodIssueCode.custom,message:"Total shares cannot go over 100%.",path:[a,"sharesBps"]})}e!==1e4&&t.addIssue({code:Jt.ZodIssueCode.custom,message:`Total shares need to add up to 100%. Total shares are currently ${e/100}%`,path:[]})})}),Ss=E.extend({recipients:Jt.array(Cs)}),Ts=Re.merge(q).merge(Re).merge(B),lo={deploy:Ts,output:Ss,input:Re};var Xr=class{constructor(t,r,e,a={},n=new C(t,r,Xr.contractFactory.abi,a)){this.contractWrapper=n,this.storage=e,this.metadata=new W(this.contractWrapper,Xr.schema,this.storage),this.encoder=new x(this.contractWrapper),this.estimator=new P(this.contractWrapper),this.events=new k(this.contractWrapper)}onNetworkUpdated(t){this.contractWrapper.updateSignerOrProvider(t)}getAddress(){return this.contractWrapper.readContract.address}async getAllRecipients(){let t=[],r=uo.from(0),e=await this.contractWrapper.readContract.payeeCount();for(;r.lt(e);)try{let a=await this.contractWrapper.readContract.payee(r);t.push(await this.getRecipientSplitPercentage(a)),r=r.add(1)}catch(a){if("method"in a&&a.method.toLowerCase().includes("payee(uint256)"))break;throw a}return t}async balanceOfAllRecipients(){let t=await this.getAllRecipients(),r={};for(let e of t)r[e.address]=await this.balanceOf(e.address);return r}async balanceOfTokenAllRecipients(t){let r=await this.getAllRecipients(),e={};for(let a of r)e[a.address]=await this.balanceOfToken(a.address,t);return e}async balanceOf(t){let r=await this.contractWrapper.readContract.provider.getBalance(this.getAddress()),e=await this.contractWrapper.readContract["totalReleased()"](),a=r.add(e);return this._pendingPayment(t,a,await this.contractWrapper.readContract["released(address)"](t))}async balanceOfToken(t,r){let a=await bs.connect(r,this.contractWrapper.getProvider()).balanceOf(this.getAddress()),n=await this.contractWrapper.readContract["totalReleased(address)"](r),s=a.add(n),i=await this._pendingPayment(t,s,await this.contractWrapper.readContract["released(address,address)"](r,t));return await F(this.contractWrapper.getProvider(),r,i)}async getRecipientSplitPercentage(t){let[r,e]=await Promise.all([this.contractWrapper.readContract.totalShares(),this.contractWrapper.readContract.shares(t)]);return{address:t,splitPercentage:e.mul(uo.from(1e7)).div(r).toNumber()/1e5}}async withdraw(t){return{receipt:await this.contractWrapper.sendTransaction("release(address)",[t])}}async withdrawToken(t,r){return{receipt:await this.contractWrapper.sendTransaction("release(address,address)",[r,t])}}async distribute(){return{receipt:await this.contractWrapper.sendTransaction("distribute()",[])}}async distributeToken(t){return{receipt:await this.contractWrapper.sendTransaction("distribute(address)",[t])}}async _pendingPayment(t,r,e){return r.mul(await this.contractWrapper.readContract.shares(t)).div(await this.contractWrapper.readContract.totalShares()).sub(e)}},Z=Xr;p(Z,"Split"),g(Z,"contractType","split"),g(Z,"contractFactory",As),g(Z,"schema",lo);import{Marketplace__factory as xs}from"@thirdweb-dev/contracts";var ho=v,Ws=E,vs=ho.merge(q).merge(B),fo={deploy:vs,output:Ws,input:ho};import{BigNumber as Qt}from"ethers";import Es from"tiny-invariant";import{AddressZero as gr}from"@ethersproject/constants";var yr=class{constructor(t,r,e,a={},n=new C(t,r,yr.contractFactory.abi,a)){this.contractWrapper=n,this.storage=e,this.metadata=new W(this.contractWrapper,yr.schema,this.storage),this.roles=new K(this.contractWrapper,yr.contractRoles),this.encoder=new x(this.contractWrapper),this.estimator=new P(this.contractWrapper),this.direct=new qr(this.contractWrapper,this.storage),this.auction=new Jr(this.contractWrapper,this.storage),this.events=new k(this.contractWrapper)}onNetworkUpdated(t){this.contractWrapper.updateSignerOrProvider(t)}getAddress(){return this.contractWrapper.readContract.address}async getListing(t){let r=await this.contractWrapper.readContract.listings(t);if(r.assetContract===gr)throw new yt(this.getAddress(),t.toString());switch(r.listingType){case M.Auction:return await this.auction.mapListing(r);case M.Direct:return await this.direct.mapListing(r);default:throw new Error(`Unknown listing type: ${r.listingType}`)}}async getActiveListings(){return(await this.getAllListingsNoFilter()).filter(r=>r.type===M.Auction&&Qt.from(r.endTimeInEpochSeconds).gt(Qt.from(Math.floor(Date.now()/1e3)))||r.type===M.Direct&&r.quantity>0)}async getAllListings(t){let r=Qt.from((t==null?void 0:t.start)||0).toNumber(),e=Qt.from((t==null?void 0:t.count)||100).toNumber(),a=await this.getAllListingsNoFilter();return t&&(t.seller&&(a=a.filter(n=>{var s;return n.sellerAddress.toString().toLowerCase()===((s=t==null?void 0:t.seller)==null?void 0:s.toString().toLowerCase())})),t.tokenContract&&(t.tokenId?a=a.filter(n=>{var s,i;return n.assetContractAddress.toString().toLowerCase()===((s=t==null?void 0:t.tokenContract)==null?void 0:s.toString().toLowerCase())&&n.tokenId.toString()===((i=t==null?void 0:t.tokenId)==null?void 0:i.toString())}):a=a.filter(n=>{var s;return n.assetContractAddress.toString().toLowerCase()===((s=t==null?void 0:t.tokenContract)==null?void 0:s.toString().toLowerCase())})),a=a.filter((n,s)=>s>=r),a=a.slice(0,e)),a.filter(n=>n!==void 0)}getAll=this.getAllListings;async getTotalCount(){return await this.contractWrapper.readContract.totalListings()}async isRestrictedToListerRoleOnly(){return!await this.contractWrapper.readContract.hasRole(D("lister"),gr)}async getBidBufferBps(){return this.contractWrapper.readContract.bidBufferBps()}async getTimeBufferInSeconds(){return this.contractWrapper.readContract.timeBuffer()}async buyoutListing(t,r,e){let a=await this.contractWrapper.readContract.listings(t);if(a.listingId.toString()!==t.toString())throw new yt(this.getAddress(),t.toString());switch(a.listingType){case M.Direct:return Es(r!==void 0,"quantityDesired is required when buying out a direct listing"),await this.direct.buyoutListing(t,r,e);case M.Auction:return await this.auction.buyoutListing(t);default:throw Error(`Unknown listing type: ${a.listingType}`)}}async setBidBufferBps(t){await this.roles.verify(["admin"],await this.contractWrapper.getSignerAddress());let r=await this.getTimeBufferInSeconds();await this.contractWrapper.sendTransaction("setAuctionBuffers",[r,Qt.from(t)])}async setTimeBufferInSeconds(t){await this.roles.verify(["admin"],await this.contractWrapper.getSignerAddress());let r=await this.getBidBufferBps();await this.contractWrapper.sendTransaction("setAuctionBuffers",[Qt.from(t),r])}async allowListingFromSpecificAssetOnly(t){let r=[];(await this.roles.get("asset")).includes(gr)&&r.push(this.encoder.encode("revokeRole",[D("asset"),gr])),r.push(this.encoder.encode("grantRole",[D("asset"),t])),await this.contractWrapper.multiCall(r)}async allowListingFromAnyAsset(){let t=[],r=await this.roles.get("asset");for(let e in r)t.push(this.encoder.encode("revokeRole",[D("asset"),e]));t.push(this.encoder.encode("grantRole",[D("asset"),gr])),await this.contractWrapper.multiCall(t)}async getAllListingsNoFilter(){return(await Promise.all(Array.from(Array((await this.contractWrapper.readContract.totalListings()).toNumber()).keys()).map(async r=>{let e;try{e=await this.getListing(r)}catch{return}if(e.type===M.Auction)return e;if(!!await this.direct.isStillValidListing(e))return e}))).filter(r=>r!==void 0)}},U=yr;p(U,"Marketplace"),g(U,"contractType","marketplace"),g(U,"contractRoles",["admin","lister","asset"]),g(U,"contractFactory",xs),g(U,"schema",fo);import{IERC1155__factory as Rs,IERC20__factory as wo,Pack__factory as Fs}from"@thirdweb-dev/contracts";var go=v.merge(O).merge(J),ks=E.merge(O).merge(J),Ps=go.merge(q).merge(B),yo={deploy:Ps,output:ks,input:go};import{BigNumber as Co,ethers as Is}from"ethers";var wr=class{constructor(t,r,e,a={},n=new C(t,r,wr.contractFactory.abi,a)){this.contractWrapper=n,this.storage=e,this.metadata=new W(this.contractWrapper,wr.schema,this.storage),this.roles=new K(this.contractWrapper,wr.contractRoles),this.royalty=new nt(this.contractWrapper,this.metadata),this.encoder=new x(this.contractWrapper),this.estimator=new P(this.contractWrapper),this.events=new k(this.contractWrapper)}onNetworkUpdated(t){this.contractWrapper.updateSignerOrProvider(t)}getAddress(){return this.contractWrapper.readContract.address}async get(t){let[r,e,a]=await Promise.all([Pt(this.getAddress(),this.contractWrapper.getProvider(),t,this.storage),this.contractWrapper.readContract.packs(t),this.contractWrapper.readContract.totalSupply(t).catch(()=>Co.from("0"))]);return{id:Co.from(t).toString(),metadata:r,creator:e.creator,currentSupply:a,openStart:e.openStart.gt(0)?new Date(e.openStart.toNumber()*1e3):null}}async getAll(){let t=(await this.contractWrapper.readContract.nextTokenId()).toNumber();return await Promise.all(Array.from(Array(t).keys()).map(r=>this.get(r.toString())))}async getNFTs(t){let r=await this.contractWrapper.readContract.getPackWithRewards(t);if(!r.source)throw new dt;return(await Promise.all(r.tokenIds.map(a=>Pt(r.source,this.contractWrapper.getProvider(),a.toString(),this.storage)))).map((a,n)=>({supply:r.amountsPacked[n],metadata:a}))}async balanceOf(t,r){return await this.contractWrapper.readContract.balanceOf(t,r)}async balance(t){return await this.balanceOf(await this.contractWrapper.getSignerAddress(),t)}async isApproved(t,r){return await this.contractWrapper.readContract.isApprovedForAll(t,r)}async getLinkBalance(){let t=await this.contractWrapper.getChainID(),r=dr[t],e=wo.connect(r.linkTokenAddress,this.contractWrapper.getProvider());return await F(this.contractWrapper.getProvider(),r.linkTokenAddress,await e.balanceOf(this.getAddress()))}async getOwned(t){let r=t||await this.contractWrapper.getSignerAddress(),e=await this.contractWrapper.readContract.nextTokenId(),n=(await this.contractWrapper.readContract.balanceOfBatch(Array(e.toNumber()).fill(r),Array.from(Array(e.toNumber()).keys()))).map((s,i)=>({tokenId:i,balance:s})).filter(s=>s.balance.gt(0));return await Promise.all(n.map(async({tokenId:s,balance:i})=>{let c=await this.get(s.toString());return R(T({},c),{ownedByAddress:i})}))}async open(t){let r=await this.contractWrapper.sendTransaction("openPack",[t]),e=this.contractWrapper.parseLogs("PackOpenRequested",r==null?void 0:r.logs);if(e.length===0)throw new Error("Failed to open pack");let a=e[0],n=a.args.requestId,s=a.args.opener,i=await new Promise(m=>{this.contractWrapper.readContract.once(this.contractWrapper.readContract.filters.PackOpenFulfilled(null,s),(h,y,w,_,pt)=>{n===w&&m({packId:h,opener:y,requestId:n,rewardContract:_,rewardIds:pt})})}),{rewardIds:c,rewardContract:d}=i;return c.map(m=>({id:t,receipt:r,data:()=>Pt(d,this.contractWrapper.getProvider(),m.toString(),this.storage)}))}async create(t){let r=Rs.connect(t.assetContract,this.contractWrapper.getSigner()||this.contractWrapper.getProvider()),e=await this.contractWrapper.getSignerAddress(),a=t.assets.map(y=>y.tokenId),n=t.assets.map(y=>y.amount),s=await this.storage.uploadMetadata(t.metadata),i=Is.utils.defaultAbiCoder.encode(["string","uint256","uint256"],[s,t.secondsUntilOpenStart||0,t.rewardsPerOpen||1]),d=await(await r.safeBatchTransferFrom(e,this.getAddress(),a,n,i,await this.contractWrapper.getCallOverrides())).wait(),m=this.contractWrapper.parseLogs("PackAdded",d.logs);if(m.length===0)throw new Error("PackCreated event not found");let h=m[0].args.packId;return{id:h,receipt:d,data:()=>this.get(h.toString())}}async transfer(t,r,e){return{receipt:await this.contractWrapper.sendTransaction("safeTransferFrom",[await this.contractWrapper.getSignerAddress(),t,r,e,[0]])}}async transferFrom(t,r,e,a=[0]){return{receipt:await this.contractWrapper.sendTransaction("safeTransferFrom",[t,r,e.tokenId,e.amount,a])}}async transferBatchFrom(t,r,e,a=[0]){let n=e.map(i=>i.tokenId),s=e.map(i=>i.amount);return{receipt:await this.contractWrapper.sendTransaction("safeBatchTransferFrom",[t,r,n,s,a])}}async setApproval(t,r=!0){return{receipt:await this.contractWrapper.sendTransaction("setApprovalForAll",[t,r])}}async depositLink(t){let r=await this.contractWrapper.getChainID(),e=dr[r];return{receipt:await(await wo.connect(e.linkTokenAddress,this.contractWrapper.getProvider()).transfer(this.getAddress(),t,await this.contractWrapper.getCallOverrides())).wait()}}},$=wr;p($,"Pack"),g($,"contractType","pack"),g($,"contractRoles",["admin","minter","pauser","transfer"]),g($,"contractFactory",Fs),g($,"schema",yo);import{DropERC721__factory as Os}from"@thirdweb-dev/contracts";import{hexZeroPad as Ie}from"@ethersproject/bytes";import{BigNumber as Cr,ethers as Bs}from"ethers";var So=v.merge(O).merge(Ut).merge(J),_s=E.merge(O).merge(Ut).merge(J),Ds=So.merge(q).merge(lt).merge(B),To={deploy:Ds,output:_s,input:So};import{BigNumber as Ns,ethers as Fe}from"ethers";var te=class{constructor(t,r){this.contractWrapper=t,this.storage=r}async createDelayedRevealBatch(t,r,e){var pt,it;if(!e)throw new Error("Password is required");let{baseUri:a}=await this.storage.uploadMetadataBatch([Y.parse(t)],0,this.contractWrapper.readContract.address,await((pt=this.contractWrapper.getSigner())==null?void 0:pt.getAddress())),n=await this.contractWrapper.readContract.nextTokenIdToMint(),s=await this.storage.uploadMetadataBatch(r.map(et=>Y.parse(et)),n.toNumber(),this.contractWrapper.readContract.address,await((it=this.contractWrapper.getSigner())==null?void 0:it.getAddress())),i=s.baseUri,c=await this.contractWrapper.readContract.getBaseURICount(),d=await this.contractWrapper.readContract.encryptDecrypt(Fe.utils.toUtf8Bytes(i.endsWith("/")?i:`${i}/`),await this.hashDelayRevealPasword(c,e)),m=await this.contractWrapper.sendTransaction("lazyMint",[s.metadataUris.length,a.endsWith("/")?a:`${a}/`,d]),h=this.contractWrapper.parseLogs("TokensLazyMinted",m==null?void 0:m.logs),y=h[0].args.startTokenId,w=h[0].args.endTokenId,_=[];for(let et=y;et.lte(w);et=et.add(1))_.push({id:et,receipt:m});return _}async reveal(t,r){if(!r)throw new Error("Password is required");let e=await this.hashDelayRevealPasword(t,r);try{let a=await this.contractWrapper.callStatic().reveal(t,e);if(!a.includes("://")||!a.endsWith("/"))throw new Error("invalid password")}catch{throw new Error("invalid password")}return{receipt:await this.contractWrapper.sendTransaction("reveal",[t,e])}}async getBatchesToReveal(){let t=await this.contractWrapper.readContract.getBaseURICount();if(t.isZero())return[];let r=Array.from(Array(t.toNumber()).keys()),e=await Promise.all(r.map(c=>this.contractWrapper.readContract.baseURIIndices(c))),a=e.slice(0,e.length-1),n=await Promise.all(Array.from([0,...a]).map(c=>this.contractWrapper.readContract.tokenURI(c))),s=await Promise.all(Array.from([0,...a]).map(c=>this.getNftMetadata(c.toString()))),i=await Promise.all(Array.from([...e]).map(c=>this.contractWrapper.readContract.encryptedBaseURI(c)));return n.map((c,d)=>({batchId:Ns.from(d),batchUri:c,placeholderMetadata:s[d]})).filter((c,d)=>Fe.utils.hexDataLength(i[d])>0)}async hashDelayRevealPasword(t,r){let e=await this.contractWrapper.getChainID(),a=this.contractWrapper.readContract.address;return Fe.utils.solidityKeccak256(["string","uint256","uint256","address"],[r,e,t,a])}async getNftMetadata(t){let r=await this.contractWrapper.readContract.tokenURI(t);return Ot(t,r,this.storage)}};p(te,"DelayedReveal");var Sr=class extends Kt{constructor(t,r,e,a={},n=new C(t,r,Sr.contractFactory.abi,a)){super(n,e,a);this.metadata=new W(this.contractWrapper,Sr.schema,this.storage),this.roles=new K(this.contractWrapper,Sr.contractRoles),this.royalty=new nt(this.contractWrapper,this.metadata),this.primarySale=new ut(this.contractWrapper),this.claimConditions=new Br(this.contractWrapper,this.metadata,this.storage),this.encoder=new x(this.contractWrapper),this.estimator=new P(this.contractWrapper),this.events=new k(this.contractWrapper),this.revealer=new te(this.contractWrapper,this.storage)}async getAllClaimed(t){let r=Cr.from((t==null?void 0:t.start)||0).toNumber(),e=Cr.from((t==null?void 0:t.count)||100).toNumber(),a=Math.min((await this.contractWrapper.readContract.nextTokenIdToClaim()).toNumber(),r+e);return await Promise.all(Array.from(Array(a).keys()).map(n=>this.get(n.toString())))}async getAllUnclaimed(t){let r=Cr.from((t==null?void 0:t.start)||0).toNumber(),e=Cr.from((t==null?void 0:t.count)||100).toNumber(),a=Cr.from(Math.min((await this.contractWrapper.readContract.nextTokenIdToMint()).toNumber(),r+e)),n=await this.contractWrapper.readContract.nextTokenIdToClaim();return await Promise.all(Array.from(Array(a.sub(n).toNumber()).keys()).map(s=>this.getTokenMetadata(n.add(s).toString())))}async totalClaimedSupply(){return await this.contractWrapper.readContract.nextTokenIdToClaim()}async totalUnclaimedSupply(){return(await this.contractWrapper.readContract.nextTokenIdToMint()).sub(await this.totalClaimedSupply())}async createBatch(t){var m;let r=await this.contractWrapper.readContract.nextTokenIdToMint(),e=await this.storage.uploadMetadataBatch(t.map(h=>Y.parse(h)),r.toNumber(),this.contractWrapper.readContract.address,await((m=this.contractWrapper.getSigner())==null?void 0:m.getAddress())),a=e.baseUri,n=await this.contractWrapper.sendTransaction("lazyMint",[e.metadataUris.length,a.endsWith("/")?a:`${a}/`,Bs.utils.toUtf8Bytes("")]),s=this.contractWrapper.parseLogs("TokensLazyMinted",n==null?void 0:n.logs),i=s[0].args.startTokenId,c=s[0].args.endTokenId,d=[];for(let h=i;h.lte(c);h=h.add(1))d.push({id:h,receipt:n,data:()=>this.getTokenMetadata(h)});return d}async claimTo(t,r,e=[Ie([0],32)]){let a=await this.prepareClaim(r,e),n=await this.contractWrapper.sendTransaction("claim",[t,r,a.currencyAddress,a.price,a.proofs,a.maxQuantityPerTransaction],a.overrides),i=this.contractWrapper.parseLogs("TokensClaimed",n==null?void 0:n.logs)[0].args.startTokenId,c=i.add(r),d=[];for(let m=i;m.lt(c);m=m.add(1))d.push({id:m,receipt:n,data:()=>this.get(m)});return d}async claim(t,r=[Ie([0],32)]){return this.claimTo(await this.contractWrapper.getSignerAddress(),t,r)}async prepareClaim(t,r=[Ie([0],32)]){return _r(t,await this.claimConditions.getActive(),(await this.metadata.get()).merkle,this.contractWrapper,this.storage,r)}},V=Sr;p(V,"NFTDrop"),g(V,"contractType","nft-drop"),g(V,"contractRoles",["admin","minter","transfer"]),g(V,"contractFactory",Os),g(V,"schema",To);var re={[V.contractType]:V,[H.contractType]:H,[I.contractType]:I,[j.contractType]:j,[L.contractType]:L,[z.contractType]:z,[Z.contractType]:Z,[U.contractType]:U,[$.contractType]:$},bo={[V.contractType]:"DropERC721",[H.contractType]:"TokenERC721",[I.contractType]:"DropERC1155",[j.contractType]:"TokenERC1155",[L.contractType]:"TokenERC20",[z.contractType]:"VoteERC20",[Z.contractType]:"Split",[U.contractType]:"Marketplace",[$.contractType]:"Pack"},_e={DropERC721:V.contractType,TokenERC721:H.contractType,DropERC1155:I.contractType,TokenERC1155:j.contractType,TokenERC20:L.contractType,VoteERC20:z.contractType,Split:Z.contractType,Marketplace:U.contractType,Pack:$.contractType};import{IThirdwebContract__factory as Us}from"@thirdweb-dev/contracts";var Ao=v,Ms=E,Ls=Ao,Wo={deploy:Ls,output:Ms,input:Ao};var De=class{constructor(t,r,e,a={},n=Us.abi,s=new C(t,r,n,a)){this.storage=e,this.contractWrapper=s,$s(this.contractWrapper)&&(this.metadata=new W(this.contractWrapper,De.schema,this.storage))}onNetworkUpdated(t){this.contractWrapper.updateSignerOrProvider(t)}getAddress(){return this.contractWrapper.readContract.address}},Yt=De;p(Yt,"CustomContract"),g(Yt,"contractType","custom"),g(Yt,"schema",Wo);function $s(o){return"contractURI"in o.readContract&&"setContractURI"in o.readContract.functions}p($s,"supportsContractMetadata");import{AddressZero as xo}from"@ethersproject/constants";var ee=class extends C{constructor(t,r,e,a){super(r,t,Vs.abi,a);this.storage=e}async deploy(t,r){var y;let e=re[t],a=e.schema.deploy.parse(r),n=e.contractFactory,s=await this.storage.uploadMetadata(a,this.readContract.address,await((y=this.getSigner())==null?void 0:y.getAddress())),i=n.getInterface(n.abi).encodeFunctionData("initialize",await this.getDeployArguments(t,a,s)),c=bo[t];console.log(`Remote contractName : ${c}`);let d=Gs.utils.formatBytes32String(c);console.log(`Deploying ${t} proxy`);let m=await this.sendTransaction("deployProxy",[d,i]);console.log(`${t} proxy deployed successfully`);let h=this.parseLogs("ProxyDeployed",m.logs);if(h.length<1)throw new Error("No ProxyDeployed event found");return h[0].args.proxy}async getDeployArguments(t,r,e){let a=await this.getDefaultTrustedForwarders();switch(r.trusted_forwarders&&r.trusted_forwarders.length>0&&(a=r.trusted_forwarders),t){case V.contractType:case H.contractType:let n=V.schema.deploy.parse(r);return[await this.getSignerAddress(),n.name,n.symbol,e,a,n.primary_sale_recipient,n.fee_recipient,n.seller_fee_basis_points,n.platform_fee_basis_points,n.platform_fee_recipient];case I.contractType:case j.contractType:let s=I.schema.deploy.parse(r);return[await this.getSignerAddress(),s.name,s.symbol,e,a,s.primary_sale_recipient,s.fee_recipient,s.seller_fee_basis_points,s.platform_fee_basis_points,s.platform_fee_recipient];case L.contractType:let i=L.schema.deploy.parse(r);return[await this.getSignerAddress(),i.name,i.symbol,e,a,i.primary_sale_recipient,i.platform_fee_recipient,i.platform_fee_basis_points];case z.contractType:let c=z.schema.deploy.parse(r);return[c.name,e,a,c.voting_token_address,c.voting_delay_in_blocks,c.voting_period_in_blocks,vo.from(c.proposal_token_threshold),c.voting_quorum_fraction];case Z.contractType:let d=Z.schema.deploy.parse(r);return[await this.getSignerAddress(),e,a,d.recipients.map(w=>w.address),d.recipients.map(w=>vo.from(w.sharesBps))];case U.contractType:let m=U.schema.deploy.parse(r);return[await this.getSignerAddress(),e,a,m.platform_fee_recipient,m.platform_fee_basis_points];case $.contractType:let h=$.schema.deploy.parse(r),y=dr[await this.getChainID()];return[await this.getSignerAddress(),h.name,h.symbol,e,a,h.fee_recipient,h.seller_fee_basis_points,y.fees,y.keyHash];default:return[]}}async getDefaultTrustedForwarders(){let t=await this.getChainID(),r=ea.find(a=>a===t),e=r?fe[r].biconomyForwarder:xo;return e!==xo?[nr,e]:[nr]}};p(ee,"ContractFactory");var ae=class extends Et{constructor(t,r,e){super(t,r);this.storage=e}async deployNFTCollection(t){return await this.deployContract(H.contractType,t)}async deployNFTDrop(t){return await this.deployContract(V.contractType,t)}async deployEdition(t){return await this.deployContract(j.contractType,t)}async deployEditionDrop(t){let r=I.schema.deploy.parse(t);return await this.deployContract(I.contractType,r)}async deployToken(t){return await this.deployContract(L.contractType,t)}async deployMarketplace(t){return await this.deployContract(U.contractType,t)}async deployPack(t){return await this.deployContract($.contractType,t)}async deploySplit(t){return await this.deployContract(Z.contractType,t)}async deployVote(t){return await this.deployContract(z.contractType,t)}async deployContract(t,r){return await(await this.getFactory()).deploy(t,r)}async getRegistry(){if(this._registry)return this._registry;let t=(await this.getProvider().getNetwork()).chainId,r=sr(t,"twRegistry");return this._registry=Promise.resolve(new Qr(r,this.getProvider(),this.options))}async getFactory(){if(this._factory)return this._factory;let t=(await this.getProvider().getNetwork()).chainId,r=sr(t,"twFactory");return this._factory=Promise.resolve(new ee(r,this.getSignerOrProvider(),this.storage,this.options))}updateSignerOrProvider(t){super.updateSignerOrProvider(t),this.updateContractSignerOrProvider()}updateContractSignerOrProvider(){var t,r;(t=this._factory)==null||t.then(e=>{e.updateSignerOrProvider(this.getSignerOrProvider())}),(r=this._registry)==null||r.then(e=>{e.updateSignerOrProvider(this.getSignerOrProvider())})}};p(ae,"ContractDeployer");import{ethers as Hs}from"ethers";function Ne(o,t){let r=Object.keys(o);for(let e in r){let a=o[r[e]],n=a instanceof File||a instanceof Buffer;if(typeof a=="object"&&!n){Ne(a,t);continue}!n||(o[r[e]]=`ipfs://${t.splice(0,1)[0]}`)}return o}p(Ne,"replaceFilePropertiesWithHashes");function oe(o,t,r){let e=Object.keys(o);for(let a in e){let n=o[e[a]];o[e[a]]=ne(n,t,r),Array.isArray(n)&&(o[e[a]]=n.map(s=>typeof s=="object"?oe(s,t,r):ne(s,t,r))),typeof n=="object"&&oe(n,t,r)}return o}p(oe,"replaceHashWithGatewayUrl");function ne(o,t,r){return typeof o=="string"&&o&&o.toLowerCase().includes(t)?o.replace(t,r):o}p(ne,"resolveGatewayUrl");globalThis.FormData||(globalThis.FormData=Me("form-data"));var se=class{constructor(t=Wa){this.gatewayUrl=`${t.replace(/\/$/,"")}/`}async upload(t,r,e){return`${await this.uploadBatch([t],0,r,e)}0`}async uploadBatch(t,r=0,e,a){let{cid:n}=await this.uploadBatchWithCid(t,r,e,a);return`ipfs://${n}/`}async getUploadToken(t){let r={"X-App-Name":`CONSOLE-TS-SDK-${t}`},e=await fetch(`${va}/grant`,{method:"GET",headers:r});if(!e.ok)throw new Wr("Failed to get upload token");return await e.text()}async get(t){let e=await(await this._get(t)).json();return oe(e,"ipfs://",this.gatewayUrl)}async uploadMetadata(t,r,e){let{metadataUris:a}=await this.uploadMetadataBatch([t],0,r,e);return a[0]}async uploadMetadataBatch(t,r,e,a){let n=(await this.batchUploadProperties(t)).map(m=>JSON.stringify(m)),{cid:s,fileNames:i}=await this.uploadBatchWithCid(n,r,e,a),c=`ipfs://${s}/`,d=i.map(m=>`${c}${m}`);return{baseUri:c,metadataUris:d}}async _get(t){let r=t;t&&(r=ne(t,"ipfs://",this.gatewayUrl));let e=await fetch(r);if(!e.ok)throw new Error(`Status code (!= 200) =${e.status}`);return e}async batchUploadProperties(t){let r=t.flatMap(i=>this.buildFilePropertiesMap(i,[]));if(r.length===0)return t;let{cid:e,fileNames:a}=await this.uploadBatchWithCid(r),n=[];for(let i of a)n.push(`${e}/${i}`);return await Ne(t,n)}buildFilePropertiesMap(t,r=[]){if(Array.isArray(t))t.forEach(e=>{this.buildFilePropertiesMap(e,r)});else if(t){let e=Object.values(t);for(let a of e)a instanceof File||a instanceof Buffer?r.push(a):typeof a=="object"&&this.buildFilePropertiesMap(a,r)}return r}async uploadBatchWithCid(t,r=0,e,a){let n=await this.getUploadToken(e||""),s={name:`CONSOLE-TS-SDK-${e}`,keyvalues:{sdk:"typescript",contractAddress:e,signerAddress:a}},i=new FormData,c=[];t.forEach((h,y)=>{let w="",_=h;if(h instanceof File){let it="";if(h.name){let et=h.name.lastIndexOf(".");et>-1&&(it=h.name.substring(et))}w=`${y+r}${it}`}else h instanceof Buffer||typeof h=="string"?w=`${y+r}`:h&&h.name&&(h==null?void 0:h.data)?(_=h==null?void 0:h.data,w=`${h.name}`):w=`${y+r}`;let pt=`files/${w}`;if(c.indexOf(w)>-1)throw new Ar(w);c.push(w),typeof window>"u"?i.append("file",_,{filepath:pt}):i.append("file",new Blob([_]),pt)}),i.append("pinataMetadata",JSON.stringify(s));let d=await fetch(xa,{method:"POST",headers:{Authorization:`Bearer ${n}`},body:i}),m=await d.json();if(!d.ok)throw console.log(m),new br("Failed to upload files to IPFS");return{cid:m.IpfsHash,fileNames:c}}};p(se,"IpfsStorage");import{IThirdwebContract__factory as js}from"@thirdweb-dev/contracts";import zs from"tiny-invariant";var Eo=class extends Et{contractCache=new Map;constructor(t,r={},e=new se){super(t,r);this.storage=e,this.deployer=new ae(t,r,e)}getNFTDrop(t){return this.getContract(t,V.contractType)}getNFTCollection(t){return this.getContract(t,H.contractType)}getEditionDrop(t){return this.getContract(t,I.contractType)}getEdition(t){return this.getContract(t,j.contractType)}getToken(t){return this.getContract(t,L.contractType)}getVote(t){return this.getContract(t,z.contractType)}getSplit(t){return this.getContract(t,Z.contractType)}getMarketplace(t){return this.getContract(t,U.contractType)}getPack(t){return this.getContract(t,$.contractType)}getContract(t,r){if(this.contractCache.has(t))return this.contractCache.get(t);let e=new re[r](this.getSignerOrProvider(),t,this.storage,this.options);return this.contractCache.set(t,e),e}async resolveContractType(t){let r=js.connect(t,this.getSignerOrProvider()),e=Hs.utils.toUtf8String(await r.contractType()).replace(/\x00/g,"");return zs(e in _e,`${e} is not a valid contract type, falling back to custom contract`),_e[e]}async getContractList(t){let r=await(await this.deployer.getRegistry()).getContractAddresses(t);return(await Promise.all(r.map(async a=>({address:a,contractType:await this.resolveContractType(a).catch(n=>(console.error(`failed to get contract type for address: ${a}`,n),""))})))).map(({address:a,contractType:n})=>({address:a,contractType:n,metadata:()=>this.getContract(a,n).metadata.get()}))}updateSignerOrProvider(t){super.updateSignerOrProvider(t),this.updateContractSignerOrProvider()}updateContractSignerOrProvider(){this.deployer.updateSignerOrProvider(this.getSignerOrProvider());for(let[,t]of this.contractCache)t.onNetworkUpdated(this.getSignerOrProvider())}async unstable_getCustomContract(t,r){if(this.contractCache.has(t))return this.contractCache.get(t);try{return this.getContract(t,await this.resolveContractType(t))}catch{let e=new Yt(this.getSignerOrProvider(),t,this.storage,this.options,r);return this.contractCache.set(t,e),e}}};p(Eo,"ThirdwebSDK");import{z as Zs}from"zod";var sf=Zs.object({toAddress:ot,amount:vt});export{Ke as AdminRoleMissingError,$e as AssetNotFoundError,xr as AuctionAlreadyStartedError,Er as AuctionHasNotEndedError,re as CONTRACTS_MAP,fe as CONTRACT_ADDRESSES,f as ChainId,dr as ChainlinkVrf,sa as ClaimConditionInputArray,or as ClaimConditionInputSchema,le as ClaimConditionOutputSchema,A as ClaimEligibility,E as CommonContractOutputSchema,v as CommonContractSchema,q as CommonPlatformFeeSchema,lt as CommonPrimarySaleSchema,O as CommonRoyaltySchema,J as CommonSymbolSchema,B as CommonTrustedForwarderSchema,ae as ContractDeployer,x as ContractEncoder,k as ContractEvents,W as ContractMetadata,ut as ContractPrimarySale,K as ContractRoles,nt as ContractRoyalty,$o as CurrencySchema,oa as CurrencyValueSchema,Yt as CustomContract,Wa as DEFAULT_IPFS_GATEWAY,mr as DEFAULT_QUERY_ALL_COUNT,te as DelayedReveal,Mr as DropErc1155ClaimConditions,Lr as DropErc1155History,Br as DropErc721ClaimConditions,Ar as DuplicateFileNameError,vr as DuplicateLeafsError,j as Edition,I as EditionDrop,dd as EditionMetadataInputOrUriSchema,pd as EditionMetadataInputSchema,ve as EditionMetadataOutputSchema,cd as EditionMetadataWithOwnerOutputSchema,qt as Erc1155,jr as Erc1155SignatureMinting,Ur as Erc20,Kt as Erc721,Hr as Erc721SignatureMinting,ht as EventType,Wr as FetchError,Ve as FileNameMissingError,ze as FunctionDeprecatedError,P as GasCostEstimator,Dt as InterfaceId_IERC1155,_t as InterfaceId_IERC721,Ue as InvalidAddressError,se as IpfsStorage,yt as ListingNotFoundError,M as ListingType,U as Marketplace,Jr as MarketplaceAuction,qr as MarketplaceDirect,Ut as MerkleSchema,ga as MintRequest1155,fa as MintRequest721,He as MissingOwnerRoleError,Tr as MissingRoleError,Uo as NATIVE_TOKENS,xt as NATIVE_TOKEN_ADDRESS,H as NFTCollection,V as NFTDrop,Ge as NotEnoughTokensError,dt as NotFoundError,nr as OZ_DEFENDER_FORWARDER_ADDRESS,ca as OptionalPropertiesInput,pa as OptionalPropertiesOutput,xa as PINATA_IPFS_URL,$ as Pack,Wi as PartialClaimConditionInputSchema,Ra as ProposalState,je as QuantityAboveLimitError,bo as REMOTE_CONTRACT_NAME,_e as REMOTE_CONTRACT_TO_CONTRACT_TYPE,Ze as RestrictedTransferError,ea as SUPPORTED_CHAIN_IDS,ua as Signature1155PayloadInput,ha as Signature1155PayloadOutput,Fr as SignaturePayloadInput,he as SignaturePayloadOutput,me as SnapshotAddress,fi as SnapshotInfoSchema,$t as SnapshotInputSchema,er as SnapshotSchema,Z as Split,va as TW_IPFS_SERVER_URL,Eo as ThirdwebSDK,L as Token,$r as TokenERC20History,sf as TokenMintInputSchema,ce as TransactionError,Ma as UnderlyingType,br as UploadError,z as Vote,Ht as VoteType,Mt as WrongListingTypeError,qe as convertToTWError,Ea as createSnapshot,sr as getContractAddressByChainId,aa as getNativeTokenByChainId,D as getRoleHash,gn as hashLeafNode};
//# sourceMappingURL=index.mjs.map